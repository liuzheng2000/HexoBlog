{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/my/backgroud.css","path":"css/my/backgroud.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/my/mouse.css","path":"css/my/mouse.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/my/pagefooter.css","path":"css/my/pagefooter.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/my/scrollbar.css","path":"css/my/scrollbar.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/my/my.js","path":"js/my/my.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/manifest.json","hash":"feeb7583b6d0cc9c1edc249bedc3196b28a74b11","modified":1637805371882},{"_id":"source/_data/link.yml","hash":"6a715b99995564d2826e7e9ed43228274f7a8fc6","modified":1637915062756},{"_id":"source/_posts/2021-11-24-力扣.md","hash":"6dd537632ef91dec2301d791f730a62baf2479c9","modified":1638148074722},{"_id":"source/_posts/20211128-力扣-周赛.md","hash":"5eae609c82702baafaa9cf11154c7f329fe0e499","modified":1638248456985},{"_id":"source/_posts/2021-11-29-力扣.md","hash":"20b58313a66992f0232a35a9ac23766bc2366c68","modified":1638148357957},{"_id":"source/_posts/20211123-力扣.md","hash":"9ee49177a8ef1d7bd1e0336dbd88303b7089ec70","modified":1638147924066},{"_id":"source/_posts/20211201.md","hash":"89bfd2d035cb3ccd700c5c8cf232ad47b1b8fe54","modified":1638324450381},{"_id":"source/_posts/20211203.md","hash":"6a1f11cd4ec0dda6cb88871392273c8f393cc61d","modified":1638496394552},{"_id":"source/_posts/20211130.md","hash":"433115830f8d71afaf2762615f7854139b6b16ba","modified":1638248466311},{"_id":"source/_posts/Docker-容器挂载.md","hash":"65d1fd6df476673617e8d1e81d1b079fc6c7eb18","modified":1638148552346},{"_id":"source/_posts/JAVA  调用cmd命令 从而调用Python命令.md","hash":"f028c8ea5b636741fcb092aa97e1eade7379a3c0","modified":1637930573120},{"_id":"source/_posts/JAVA实现图片合并.md","hash":"27b7e83a4f6e1245807ff1c4482696d341841448","modified":1638149524870},{"_id":"source/_posts/Typora常用快捷键（翻译）.md","hash":"8801334832c3d2842bae82d6fa20242f9dfacad4","modified":1638148981281},{"_id":"source/_posts/Android结课作业-音乐播放器-视频播放-游戏-附带源码.md","hash":"3a50a820edcf96192dc913cb141069a57d74eaa4","modified":1638152455007},{"_id":"source/_posts/Mysql讲解-课程大纲设计.md","hash":"60f2fe464cf5e9554534900e42d0a889e6ba5033","modified":1638153250757},{"_id":"source/_posts/Mysql数据库课程-Md文档.md","hash":"ab20929328f4809481eff21d7fc6e23b54848408","modified":1638153918379},{"_id":"source/_posts/Ubuntu安装Docker并启动Nginx.md","hash":"ff9e7edc52cd2bd92be154cfdb5240e200064e40","modified":1638148682122},{"_id":"source/_posts/从B站学习的Netty01.md","hash":"e19f259f4c92db054cc3b76c98fed834d5709ec8","modified":1638151375487},{"_id":"source/_posts/从B站学习的Netty02.md","hash":"219c75183f8cc0a88119b75cd462757bc62aa52c","modified":1638151512868},{"_id":"source/_posts/从B站学习的Netty03.md","hash":"ebd591f61dd32ab5f78abb363318fc577dde1c1e","modified":1638151504820},{"_id":"source/_posts/从B站学习的Netty04.md","hash":"7ab9ba80205d708dffe23bf18a81375a10265b64","modified":1638151550193},{"_id":"source/_posts/从B站学习的Netty07.md","hash":"ab4bc3999e16e6fc30bb728564f123b6fa90ebe2","modified":1638151740183},{"_id":"source/_posts/从B站学习的Netty05.md","hash":"760863843a24316861bf1adbb99706d085f0621a","modified":1638151649749},{"_id":"source/_posts/从B站学习的Netty08.md","hash":"aee34cb713ebf03b9f1d60605f8c31816f42266d","modified":1638248540653},{"_id":"source/_posts/从B站学习的Netty06.md","hash":"ee09893f7694e07f68ee13cb191bb7e7753a464c","modified":1638151691385},{"_id":"source/_posts/从B站学习的Netty09.md","hash":"a4dfa5b1a7f73dd6903ff281b4e4acf5a98d7f21","modified":1638248604416},{"_id":"source/_posts/从B站学习的Netty10.md","hash":"93b3c514201b0e02922d10db9c52af6b5508382a","modified":1638248640103},{"_id":"source/_posts/从B站学习的Netty12.md","hash":"40c060b0e96a278a65fb31e1d1fde0b597799058","modified":1638248795090},{"_id":"source/_posts/从B站学习的Netty11.md","hash":"1c6687692621e7af3064db9da6c09d1ef09c891d","modified":1638248674826},{"_id":"source/_posts/从B站学习的Netty13.md","hash":"17b7226722900cd5af64278b63f783e3975076d7","modified":1638324787390},{"_id":"source/_posts/从B站学习的Netty14.md","hash":"c5a16a6cce62c8ff839c56c764d67df54013154d","modified":1638324834964},{"_id":"source/_posts/从B站学习的Netty15.md","hash":"ff6a2d8717356a06c07ef7602bc7182d268d09d2","modified":1638492614170},{"_id":"source/_posts/从B站学习的Netty16.md","hash":"062990f81dd261ed7e90c771bdba165040ce0b63","modified":1638492642234},{"_id":"source/_posts/从B站学习的Netty18.md","hash":"05b9a92b33c50e0cd265eb5fa7d16ef1d2a6138c","modified":1638492690000},{"_id":"source/_posts/从B站学习的Netty17.md","hash":"b15f4df41d70401bd8305d595bd973f7c6b2e643","modified":1638492666673},{"_id":"source/_posts/写作格式.md","hash":"d142503817197ef4bb7b407d2e64ba33ef47c79d","modified":1637930597303},{"_id":"source/categories/index.md","hash":"687851092de7fcadcec5a1f47217220a1d4a8c71","modified":1637915081324},{"_id":"source/link/index.md","hash":"3ff190e7696bb6a791aa2158beecbcad8576c813","modified":1637754545000},{"_id":"source/_posts/建立Bilibili排行榜数据库.md","hash":"5887ca79f4bea5a0a2ce5cb1e83b3860d1542e48","modified":1638149348535},{"_id":"source/messageboard/index.md","hash":"f7a2a3c92b41987c58082fa48a4632705cf863d4","modified":1637745626370},{"_id":"source/music/index.md","hash":"0d77219e804fb5bf693490a2091957af752f6915","modified":1637928955252},{"_id":"source/about/index.md","hash":"df9ffb16a74ec14d10955708854ae6ebf6043a61","modified":1638324251546},{"_id":"source/tags/index.md","hash":"96d51f2e7136c507aa8e4c2e06355661728db9f4","modified":1637754482514},{"_id":"source/_posts/在图片上生成点状二维码-（无法实现）.md","hash":"b5be3cf1df1e5419dc4c7c19cf467ed951b1bba9","modified":1638149258158},{"_id":"source/qingyun/index.md","hash":"90f44c30503617ea39da8ebb9c3e245273125228","modified":1637756830393},{"_id":"themes/butterfly/search.xml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1637762721890},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1637739814350},{"_id":"themes/butterfly/package.json","hash":"6a5ddc166980502757c1413b5e04a3a8a91c0a48","modified":1637739814377},{"_id":"themes/butterfly/README.md","hash":"0f0eaee9c30ef1e9aed588fbb3e8263401348b55","modified":1637739814350},{"_id":"themes/butterfly/README_CN.md","hash":"70ec43a8aa0776b5a0a2a6b6009dd253fa3679eb","modified":1637739814350},{"_id":"themes/butterfly/layout/archive.pug","hash":"2d5bf4b1755f89898c579c18d601be83d2bc8ebd","modified":1637739814352},{"_id":"themes/butterfly/_config.yml","hash":"d215495d0672957f0d798207907ff079958e3158","modified":1638255907488},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1637739814376},{"_id":"themes/butterfly/layout/page.pug","hash":"cae76ce64c114fd192b5da5a7d14aa0240df2f06","modified":1637739814376},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1637739814377},{"_id":"themes/butterfly/layout/category.pug","hash":"5ac3cd8172088843cec03175c612a9c85f49cf2e","modified":1637739814353},{"_id":"themes/butterfly/layout/post.pug","hash":"8f2f13c9ae099dd83827ce3dbac5abc8d7d5bde3","modified":1637739814377},{"_id":"themes/butterfly/languages/default.yml","hash":"46685048a05b419ed9c72cf31bd6e5efef7524f2","modified":1637745872577},{"_id":"themes/butterfly/.github/stale.yml","hash":"7a131b8aa4936fbcedea3517299e1cdc1bcbcaab","modified":1637739814349},{"_id":"themes/butterfly/scripts/events/init.js","hash":"5803aa55d9c21e51ea64c1ae50c9b602979aaee2","modified":1637739814378},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1637739814378},{"_id":"themes/butterfly/languages/en.yml","hash":"fd1c1211c8f166d089a7697872185a81182d92e1","modified":1637739814352},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"46685048a05b419ed9c72cf31bd6e5efef7524f2","modified":1637739814352},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"98ef86305b8d2ad9dbab969715e1ac93b407f036","modified":1637739814378},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"1e1da036fae593be7e2cc502f0a5cbeb2e7881d1","modified":1637739814378},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1637739814379},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"bd29f20fad3d3fab600940e7a6dc9a803943cb33","modified":1637739814378},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"98ab13a60413d68bd9d02d54d121c66a6d4634d2","modified":1637739814379},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"384de3c04809ec5fa996e8aa0628f770cd4bff3e","modified":1637739814379},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"376e1884ea764404c38b1e73b16de0358ece519e","modified":1637739814379},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"8cb7ef368cc2ac7f4a13c2959908b1574e572acf","modified":1637739814380},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"26dd1900e68a3e10a5cf3f3484a93139a0f1340e","modified":1637739814380},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ffbe625f184116e442648c8416ea58614a1cef8","modified":1637739814380},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"eb019da8c190923e759d2fd7cb846281eef8594e","modified":1637739814380},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1637739814381},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"829229b0074b332ba779e159219eb2466612ff6e","modified":1637739814381},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"551f1b8edc973bd8afc5cce2eae546f002fa84c3","modified":1637739814381},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"420ba8b11e7316b4c09eb301d39814bc9bae9f90","modified":1637739814381},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"3cdc5e32d0f1e5866bcf86f94a0d76aaf7142937","modified":1637739814353},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"08ea00791bd4738952234cb5d8360e119df6f875","modified":1637739814382},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1637739814353},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"736bec8eeb3a29d0d43669d81f1fa686e02be18e","modified":1637739814352},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"a1ca58fdff74b890cade94479f8f0eb9ce7e5e73","modified":1637739814353},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"f2e1d8a05d2e409c4804f67a98f5f59f527d6627","modified":1637739814358},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"f4dcc0a596eb9801c4d3c033d018d0abb413c8e5","modified":1637739814354},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"66b14189a1913119ff5927c0b933b5c73fb37f48","modified":1637739814361},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bb1847f45e713cc88b1c0a97035ec01f0209c995","modified":1637739814360},{"_id":"themes/butterfly/source/css/index.styl","hash":"c7924868adcb046b46498626a9223c7a7b3f2e30","modified":1637739814395},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9b5243385f7a90e0103c25c531a1e7f2f1884c15","modified":1637739814361},{"_id":"themes/butterfly/source/css/var.styl","hash":"31198af95fecc6819d3b2cb7ef03988ef67257da","modified":1637739814395},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1637739814395},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1637739814396},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1637739814395},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"4db1170be7a9360e2c5399d281b979da730df2a3","modified":1637739814398},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1637739814396},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1637739814350},{"_id":"themes/butterfly/source/js/utils.js","hash":"1b8bf1e6d50fa8ffe2aff7548b141cab72540ba0","modified":1637739814398},{"_id":"themes/butterfly/source/js/main.js","hash":"53c6df70de6e7949b102ab06fd0cd53b9b39b01c","modified":1637739814397},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"b41123ce5f0ccfa9e06a68b9f3cb59ba040a049a","modified":1637739814349},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"205a69ba038cf76affcdc1f39d88a8cb8079fc12","modified":1637739814349},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"0b7979a908ebe8c350d73b6731f0be3e29d401c2","modified":1637739814349},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"07380718ed3af19a7e64b30e8c13726fe5983947","modified":1637739814354},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1637739814355},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1637739814356},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"903d12250ce70713dd5b8ac7e1f7a20fe15eb815","modified":1637739814354},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"73c04d62055840545112dd12d73807835ca62347","modified":1637739814355},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"3ca9d9cdfd6e61df1d5b07de40f34349cda7a7c7","modified":1637739814355},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1637739814356},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1637739814356},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"d6556d5396eb0e10ea0ec10158779c21dc78f738","modified":1637739814356},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"419807903e5586b8804b1f8f17cea97bd05f0b17","modified":1637739814357},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"631ec7000fd4d6cfa2de118ee02ad8a42ffb34f5","modified":1637739814358},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"3a2797d2744607ba6cdb5a02853851957c0f7e29","modified":1637739814357},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"4d52000cae1fce333329c382dac6c9a21ad0b195","modified":1637739814357},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"2e1ab0c2ca59a1ff5a5ba9b6ef60f3e34af5430c","modified":1637739814358},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"dd8e6813976be64e80eba6562b54e74527ab306d","modified":1637739814359},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7677911bd3f43edaf8230eea02f60a248eee9934","modified":1637739814358},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"95924d28d71b28769963529f82b376a9dc731fad","modified":1637739814359},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"f5ea1e10a169aeb98e42b19ac084c4eb27693b46","modified":1637739814360},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"62dc2e683d56ddc9b588abc44dc1cfb778a2c68f","modified":1637739814360},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"dcccb1425fabcf12a1bed955518b0e7b1054cab0","modified":1637739814359},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"971038debf539333b1687b4a1d87cf4fc965a846","modified":1637739814359},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"9aa743b1f6fb7fafabee38f9204ce9c8f1be7f9a","modified":1637739814360},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1637739814373},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"009bdbef23381f10664622fafdc602f2ff5bf1ec","modified":1637739814374},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1637739814374},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1637739814374},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"0b5c165664f9f8691551fc5ff435b40e7f73c737","modified":1637739814375},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"6c3449a44ae1a80f71dd4d9d6a85cec1781ceff1","modified":1637739814374},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"0f1a5c356c1ffd47ff49e153226e2d670dc61057","modified":1637739814375},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1637739814375},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"9755cac8424dc578e9ec07dbcaa429fddbedd392","modified":1637739814375},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1637739814376},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"471b20e71a19db1f5115727082e5188200c49383","modified":1637739814375},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"c762732e200ff2627bc046af5f170b3269343341","modified":1637739814361},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"e4c39101d7087066a86f7743985a53d6a246470b","modified":1637739814376},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"bee06b3f01fa1f0d8fa08c154234b452da425101","modified":1637739814362},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"6ec54b77e3a90e148e66e317e5bb6c89624fddca","modified":1637739814360},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"62adef7998fb9bebc5891a49472cfea944a1bf7a","modified":1637739814376},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"4c3da5a89b4e6fd3ab527f5c6d27790359d57f71","modified":1637739814367},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d06dafe7faf3a2e328ef62f26166a51ffe7a5579","modified":1637739814370},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"2448b243ded58aa1d5fc22fd115e6d06b636f9fd","modified":1637739814371},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"23ea60f8becc91f6e9f6cfb1cbfd25689c263b9c","modified":1637739814384},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"ad59dcce32e4e67066303a1ffd1dd95874d9953e","modified":1637739814370},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1637739814385},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"4a2ea9fe59f1dc8cb4f4f6a28cf24a40fc300254","modified":1637739814373},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"bfc4b9d8df66593c11c9ae78899f54e69785ca90","modified":1637739814385},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"8e6c9a2c1881985e4b2ae14ef1bdfdbb1bc83b37","modified":1637739814385},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"dd71e34edece4e06b59e941fb3cc5ad9a3ad09cf","modified":1637739814385},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"807f18717c29b5c41de6fc600a69a80ce8b7a19c","modified":1637739814385},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"8c4e08c8a63dacdfb2a733a0d0035fa97c7f5e9e","modified":1637739814386},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"814729d1d71f4326623a4f34b621bf0421503103","modified":1637739814386},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"db7fe645662d87be4f8dfc08e55bbe1a3734bf93","modified":1637739814386},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a00ad74074513a1c7f6e02977b8fa778beaa2108","modified":1637739814387},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"4ae98e703440b616d2a36da139bda844c94d425e","modified":1637739814387},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"191ce31ce0f2b1d22a64225801a88cee6054f574","modified":1637739814387},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"943aa34c83c87d0225db65ae90621870472972fa","modified":1637739814387},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"03164bca4546707543828cb2a41bc672b77bfa5a","modified":1637739814382},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f9de9db2a49ac4d5447660ab159171ac5c228e3c","modified":1637739814382},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"89a6cb63a97cc08675319c403e4a89391f6ab401","modified":1637739814388},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"8489722684aa9b4baa38386f4d4b39f4dbd60113","modified":1637739814388},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"48ad198d0ea97a25db4d2a3e587a16ef41617c0b","modified":1637739814390},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"190b85de3e686393e45869d12464995f23b304dc","modified":1637739814389},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"87c576a3361f30eefafec27a872ad76e9fbb2765","modified":1637739814389},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"ca1d3a885a85a91fcd6f7b55fca96cafb6a1b0a3","modified":1637739814389},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"5e5c1d6d104cc15314ae365d0da7cb07334a6457","modified":1637739814390},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"0da09b1811a776106ca66c56be6e2a396dca5680","modified":1637739814390},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"26e26797b3175498e20b2a8bf1679d3ed9fac5a6","modified":1637739814391},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"f25415a436100688248fef0ad90e3d4397627833","modified":1637739814384},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2e8e391b211b2416d3c9430ab5361659c073f348","modified":1637739814383},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"aa0728c556af75f5d66ecd44fa207722d474c26d","modified":1637739814393},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"c3369a14f4111c098d0177036ca57df6deb59d72","modified":1637739814392},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"56691537c7f06c2cf1ffa1509a328f506d938ee8","modified":1637739814393},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"6c12a03e26ca5d538537d472657d3d03a7fcbb87","modified":1637739814392},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1637739814393},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"c91609b7f431cacecc3718ae2fb7403c55f8267a","modified":1637739814393},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"75a5c15c7029197ec5cffd27f7c5455891c946c9","modified":1637739814394},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"8520674768dd0b1837f947892e8402b192a4f9c1","modified":1637739814394},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1637739814394},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"fa2985afd08556b25f5f1a01bc1a7c76b294a962","modified":1637739814391},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"25ac939fc57346de07ba9e15a1a760b492baefd7","modified":1637739814391},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"e65ed98056e6c91e622f94bad5283d00fdb22142","modified":1637739814391},{"_id":"themes/butterfly/source/css/my/mouse.css","hash":"ab373f53dde7837c8faa0801341da8d7bdcea4e3","modified":1637740283606},{"_id":"themes/butterfly/source/css/my/backgroud.css","hash":"2fe26bd78ab761a624f6140b075f7371be68e416","modified":1637740218704},{"_id":"themes/butterfly/source/js/my/my.js","hash":"f19c8a32c461723cc5b0283b6f63ff6e980d6e72","modified":1637742197485},{"_id":"themes/butterfly/source/css/my/scrollbar.css","hash":"fbe1122372ad81a1320c35230836bbe90e055ca0","modified":1637740383285},{"_id":"themes/butterfly/source/css/my/pagefooter.css","hash":"002c11a50309c9de230d63fada5c9cf331253527","modified":1637740332342},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a19f12257b14f70806a0c3cb0e9df1090f36e919","modified":1637739814397},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"54378d52d275e4ab84173bb02e17ea02ae46e55f","modified":1637739814397},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"d5f81fd5443a1b09efb165b5f4447a35949d14ad","modified":1637739814365},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0bf6a47e804fb793b40f82690a24816b902edd41","modified":1637739814365},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"50126b2e841b01584b8b65b2f834038e3997b694","modified":1637739814365},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0254203aae73e70b90dfce6ec4f9c9d3be9ac9f8","modified":1637739814365},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"d97403cdd58c759cfd1752dd85aa4a0f9b73dc46","modified":1637739814365},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"e877c98949873a62659db7501d19eb3d66650b51","modified":1637739814366},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"afffc4ac8ce93d39dcc892bd518805cf33531244","modified":1637739814366},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"589f8503f264d4fda971c8daf2028f45c4f2867b","modified":1637739814366},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1c7e9fe86b7d7ef18cc876dfce19263fd4e73066","modified":1637739814366},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"8290994cf1ee2faff60214ff245cf513fbbe94aa","modified":1637739814367},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"0bf1c53b914443c66be5077ff09cfc218f111e11","modified":1637739814367},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"767c38e3dfa0097b0dc1fdfd0df292c16f757d05","modified":1637739814369},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"16cf05cf9649322da57e9b8d316573bb65f8d8d8","modified":1637739814369},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"8890becd8220c57db2c7451409710942c103a7f4","modified":1637739814368},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0ad766ae491e6fcba2ef3d136a7af6158cd4153e","modified":1637739814369},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"a3d43cc360666b5b9730e8bb9e5c8fd940ae5b3d","modified":1637739814369},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"83103bad0db195bce095330c4a84e7529bbd40dd","modified":1637739814370},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"b741b5e942481d779a8a1fe94c45154a62a6b748","modified":1637739814363},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"e5af55cdb87d1ffd3d8702bc77097159acf95b54","modified":1637739814364},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"bb467bb22f3d0775b33f9eacbfc086ecb7831e78","modified":1637739814364},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"f3f6eaecbcf9352342e259f4a5a3ad7160f31fc9","modified":1637739814363},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"794ce3911f17d354b7196deb8c36d191afac63fb","modified":1637739814364},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"f4d21dcbc3b00eed9b1f604e132c4c6811a0a059","modified":1637739814362},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4eebb2d94ca75809ef0cf32d70f13e9bf1e87091","modified":1637739814362},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"a18415004d03c0a1783eccac522fbcb6ce0ea1f1","modified":1637739814362},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"896dc0b7480151562c5717771e3000c5a7fc1b16","modified":1637739814363},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"f3db5c5e738e097a191dc0de59c61d3e1444f7c3","modified":1637739814363},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1637739814367},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"cd7ab4a776be93eea96a6f6fd0a547977fbe1ea3","modified":1637739814364},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"266caf985dc0703ff81b871b8f8d206f57db6e79","modified":1637739814368},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"eb2d840fa42de3ec7a7fda0eaa30246d52f543e2","modified":1637739814363},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"1c06e60b120c946c1856904848ceba6ab58d1f82","modified":1637739814371},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"faf1113de12d6db0486572d7e99b03cbd0c4a896","modified":1637739814368},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"fbcf94ecdca30bed7cfc4f4ec08b200579c2614e","modified":1637739814371},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"ff3727c3ec698ec61a28c55cbc8c8508f0efb0a0","modified":1637739814371},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"fbac21a6c5924fb2f8d1190fd634105fdbc603d4","modified":1637739814372},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"8b4034e53ca5bf85097f681a6e76a53ce685c205","modified":1637739814372},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"87e40f0c315407ab88571a2b3450d640f15c96bc","modified":1637739814368},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4898a09d8e67fb358ffd74b3a1f0014f555dd856","modified":1637739814372},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"7e9a7347dd8ca4c33c564fb62512743b6012bb2d","modified":1637739814373},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"4d71aab9082c67d3ee52ad58dfc3c1c9b41f2ab1","modified":1637739814384},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"b0916c8c7d15b67b55cb1618be8370870fedbf42","modified":1637739814383},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"b74c61f6e15b422e9d2df23133552bbd1b5fe513","modified":1637739814383},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1637739814384},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1637739814384},{"_id":"public/manifest.json","hash":"e5653018c633c03092c691caf2b17921c60fe633","modified":1638496389609},{"_id":"public/baidusitemap.xml","hash":"b4e8b0115f6c80fa1e835460f92aa63a77358063","modified":1638496389609},{"_id":"public/search.xml","hash":"1f9e21480bda0353ceb94c146fa925e9b834644b","modified":1638496389609},{"_id":"public/404.html","hash":"3db6b048a30593ff7ee1d8585f231e9dd03ca2e0","modified":1638496389609},{"_id":"public/about/index.html","hash":"5484ca70ba9fd918d90cbec94390d8f3c92785ff","modified":1638496389609},{"_id":"public/messageboard/index.html","hash":"614ac7a83177570f026a49d4730eda67f10de649","modified":1638496389609},{"_id":"public/link/index.html","hash":"29b51036c14bb9156ab330d6afbc498c34aab869","modified":1638496389609},{"_id":"public/music/index.html","hash":"f31b553fc4bc970aad8a3eb218c8ea279c4e9322","modified":1638496389609},{"_id":"public/categories/index.html","hash":"adf2a219d891b1b800011267c7fd2509c1f6336c","modified":1638496389609},{"_id":"public/qingyun/index.html","hash":"072cd3f3d8535c09ab298f884800b7c9eb7f16b6","modified":1638496389609},{"_id":"public/tags/index.html","hash":"94d02ae6761abfc23de9fc5a8115f1977ac43ffc","modified":1638496389609},{"_id":"public/posts/3501514868/index.html","hash":"4d02f8d63afffedc79794eb217476ace5814168f","modified":1638496389609},{"_id":"public/posts/1584270459/index.html","hash":"5722aa9b289481d100744d17ba2f8a41b1be7b1d","modified":1638496389609},{"_id":"public/posts/3469808106/index.html","hash":"f16c48c962d549e4148ada3f616d22385d869422","modified":1638496389609},{"_id":"public/posts/3117818236/index.html","hash":"f9223054a32f7417406858e2a7181661f95ab50c","modified":1638496389609},{"_id":"public/posts/551514310/index.html","hash":"b91a630720d4bd2a3ee0f1b9357d2b04abee98eb","modified":1638496389609},{"_id":"public/posts/1473790032/index.html","hash":"ea3e0cdfb818d420148aa714e94b3aac843d0995","modified":1638496389609},{"_id":"public/posts/3384595955/index.html","hash":"070da519b4df9b37b33560f11610021fb9e22ef1","modified":1638496389609},{"_id":"public/posts/1052410200/index.html","hash":"8fd63ae6576bc7d3888e319047bba40ab075b19f","modified":1638496389609},{"_id":"public/posts/3199984997/index.html","hash":"530c1d548bd05e05857ed404266219516e16e9a8","modified":1638496389609},{"_id":"public/posts/666023135/index.html","hash":"f1d8b16b41a82831108e167ac88d224910d8903f","modified":1638496389609},{"_id":"public/posts/1354073161/index.html","hash":"faabd89cea868a7fb90691b49ff98c5c704e5086","modified":1638496389609},{"_id":"public/posts/812780972/index.html","hash":"a88d09e0ecf885c074ea4affe53996c3b6ded02d","modified":1638496389609},{"_id":"public/posts/1198865722/index.html","hash":"e44351ac279f0f41b01bbf1bdf190b0c3f74c73d","modified":1638496389609},{"_id":"public/posts/1624661076/index.html","hash":"83901528e52e2579adf104a41633cf7887689db2","modified":1638496389609},{"_id":"public/posts/2655269665/index.html","hash":"fad3293755a83c296cca181b62a286d253bc543f","modified":1638496389609},{"_id":"public/posts/3330459815/index.html","hash":"b7000235798442b5ef4d95d0dd54ab7b7506d785","modified":1638496389609},{"_id":"public/posts/3434175137/index.html","hash":"3fed61373a1e3c7f9b7002a40f45bb36b0444f8d","modified":1638496389609},{"_id":"public/posts/3620348075/index.html","hash":"c27bc086b4d92988c48f5732fe26504c96fb014b","modified":1638496389609},{"_id":"public/posts/2697793597/index.html","hash":"4633ebfcdcd8ddc70a05cef178e3823985744476","modified":1638496389609},{"_id":"public/posts/969163143/index.html","hash":"fb9a795650b582b299d98dd7a2e167fd4a1412b4","modified":1638496389609},{"_id":"public/posts/1321431313/index.html","hash":"488587221a1d8392b17a211f80cabef0b720b668","modified":1638496389609},{"_id":"public/posts/3500663986/index.html","hash":"3abb5f60f18844c3caec8cf54e6b99887979da99","modified":1638496389609},{"_id":"public/posts/2812335140/index.html","hash":"e09a64e8eab81638ccb84e7be1eabe7882c79cb4","modified":1638496389609},{"_id":"public/posts/1051297182/index.html","hash":"eeba92ed2c28c6f3fca8093ac1c9d212ae47e006","modified":1638496389609},{"_id":"public/posts/756143886/index.html","hash":"396319eff3f9a0cf0caf068a2e2c95a74499ff29","modified":1638496389609},{"_id":"public/posts/2428385357/index.html","hash":"9ce06153bd21abfff4ba838521aa8efc7fdca6fe","modified":1638496389609},{"_id":"public/posts/3103457537/index.html","hash":"9355338998b50e7d436f4683d827dafaf4000c82","modified":1638496389609},{"_id":"public/posts/2305372831/index.html","hash":"de5cf9aa099a259a147da5de71cb14b36457f256","modified":1638496389609},{"_id":"public/posts/3003506474/index.html","hash":"a5c6e5a0b6afbfa3e4607748888943391b3497f3","modified":1638496389609},{"_id":"public/posts/1612373770/index.html","hash":"e3ea606842657424831a5d6ec0e35ff3029fe7c7","modified":1638496389609},{"_id":"public/posts/1097249485/index.html","hash":"876655fb292939f1e11fc1f1f1eabcad418e5902","modified":1638496389609},{"_id":"public/posts/3393647164/index.html","hash":"925ad35ab5c24ce40e05d55cbb33f8e003072399","modified":1638496389609},{"_id":"public/posts/112503250/index.html","hash":"c58fdb24d25efd9434cb4af38a15429fc3396ee2","modified":1638496389609},{"_id":"public/posts/2014279217/index.html","hash":"9127ec37e3f80cdb9b0541b967b1a9abce01a4dd","modified":1638496389609},{"_id":"public/posts/3445041162/index.html","hash":"203606cf12b8461165c68bb830464ab722227682","modified":1638496389609},{"_id":"public/posts/1988631252/index.html","hash":"8ea94bc1485b7ec58781eee903f523f221429b13","modified":1638496389609},{"_id":"public/archives/index.html","hash":"ca0ede11d0423cff622993ffc25f98e93bb7cc89","modified":1638496389609},{"_id":"public/archives/page/2/index.html","hash":"35f51bb8e355da9850abc0d0cd6b04a77ab606f6","modified":1638496389609},{"_id":"public/archives/page/3/index.html","hash":"20ebe0ba64b7edc0a27146ab9866aa78ac2a8167","modified":1638496389609},{"_id":"public/archives/page/4/index.html","hash":"8ee57c3d5c878368fbcfcb86b8ee34750e1d8eb1","modified":1638496389609},{"_id":"public/archives/2021/index.html","hash":"5c766cbf7862d18bf91e0f6a4ec6eaf437b3dc5d","modified":1638496389609},{"_id":"public/archives/2021/page/2/index.html","hash":"bb46510fdfc834a172a3aa18cfac333c3d02568e","modified":1638496389609},{"_id":"public/archives/2021/page/3/index.html","hash":"1d913babdaad9fc1da3f80d2269a93e94a90970d","modified":1638496389609},{"_id":"public/archives/2021/page/4/index.html","hash":"cb36ed9a00791380ec68174f973fefdc412978dd","modified":1638496389609},{"_id":"public/archives/2021/11/index.html","hash":"cfd3e21329f366ef7215233397ca2f87c79760df","modified":1638496389609},{"_id":"public/archives/2021/11/page/3/index.html","hash":"1636eb64a0ccd75e130d478b5a5e3db2a70ceb8c","modified":1638496389609},{"_id":"public/archives/2021/11/page/2/index.html","hash":"a0ddbe3404f1320d222584b6e2cecf8f389318b6","modified":1638496389609},{"_id":"public/archives/2021/12/index.html","hash":"5a9b042d755cada736cd442ecc7987873798ef30","modified":1638496389609},{"_id":"public/categories/LeetCode/index.html","hash":"331ea980a146f8b5438da466a70ceb55af7ab9c0","modified":1638496389609},{"_id":"public/categories/Docker/index.html","hash":"fb2137758e3c3c27d35ac460c7b52a6eca5a2af1","modified":1638496389609},{"_id":"public/categories/JAVA/index.html","hash":"a937e9798407f070d44f144e8295e4fd3b0a01ad","modified":1638496389609},{"_id":"public/categories/数据库/index.html","hash":"edbe66966ade805a180b23fdbf5dd374cebad7e0","modified":1638496389609},{"_id":"public/categories/Typora/index.html","hash":"5fe081d0553a4df9e12613941bb626f6ba89ad14","modified":1638496389609},{"_id":"public/categories/转载/index.html","hash":"e9476016c77df68c352f9546a66b8798a9987fc2","modified":1638496389609},{"_id":"public/categories/转载/page/2/index.html","hash":"b3042653bbbde6bb6231bc07fc33b3b8162ce907","modified":1638496389609},{"_id":"public/categories/数据库/Mysql/index.html","hash":"bab7430dc65d35e6d52323ebb9a34ecc58de88d8","modified":1638496389609},{"_id":"public/categories/转载/netty/index.html","hash":"a393f149562f5984c184d9a2e0f78786e0dd9637","modified":1638496389609},{"_id":"public/categories/转载/netty/page/2/index.html","hash":"5a15b167833d64cc15687576d261bac3e94719a8","modified":1638496389609},{"_id":"public/categories/Butterfly/index.html","hash":"1f13e2292a4def0a9e78fa950ce81aae9d88ea9e","modified":1638496389609},{"_id":"public/categories/Android/index.html","hash":"93fc9c2c12fe0c2a89cd3b68df10366f0d56ffcb","modified":1638496389609},{"_id":"public/index.html","hash":"b8d3add5a7827140bde09c2cb855d213d0a5e1fc","modified":1638496389609},{"_id":"public/page/2/index.html","hash":"330e0ca6917789d7931e77e06986699345117382","modified":1638496389609},{"_id":"public/page/3/index.html","hash":"df3d13a36f58992f5733a7e32c804f8c2e716449","modified":1638496389609},{"_id":"public/page/4/index.html","hash":"5e745ab3915d81eecb14f9aa33f1ef41b43d1fb3","modified":1638496389609},{"_id":"public/tags/力扣/index.html","hash":"fbe8dbe7b2f6beceabc02819ddc4b629d2661ca6","modified":1638496389609},{"_id":"public/tags/算法题/index.html","hash":"957e89d68cb82a45594a96169ec20a7b68215884","modified":1638496389609},{"_id":"public/tags/周赛/index.html","hash":"4352d7b854bb8b6ad480bbc7fce22c1ac478abe3","modified":1638496389609},{"_id":"public/tags/Docker/index.html","hash":"32705c78951b1844779c87e6bea32bc381496751","modified":1638496389609},{"_id":"public/tags/JAVA/index.html","hash":"bc94292358404ab260ee36a678bd9ef9165dc4d4","modified":1638496389609},{"_id":"public/tags/Mysql/index.html","hash":"ed3370ceced7c13d0b04b5c45910e559172584e7","modified":1638496389609},{"_id":"public/tags/数据库/index.html","hash":"76b871f9d1915823f659b7af257e7dae4362de71","modified":1638496389609},{"_id":"public/tags/Typora/index.html","hash":"7dfa0ab636362b730a628ab46e9d5c8a0d1ab506","modified":1638496389609},{"_id":"public/tags/转载/index.html","hash":"cb64e8ae98bc2e3ecf9144e636f52f15e8de374f","modified":1638496389609},{"_id":"public/tags/转载/page/2/index.html","hash":"782d6963320752de2000bbe404c02e52b3ba045a","modified":1638496389609},{"_id":"public/tags/netty/index.html","hash":"f11b2b12002cedb6d784601b9cc1a50dfc22d015","modified":1638496389609},{"_id":"public/tags/netty/page/2/index.html","hash":"940589ec4efd32051571f5cd30fedbabd91de504","modified":1638496389609},{"_id":"public/tags/风祈的时光录/index.html","hash":"c3ce026ad8492073e7139a8355c51b85f4c3bc9c","modified":1638496389609},{"_id":"public/tags/风祈的时光录/page/2/index.html","hash":"1aeb198c1c2c6d558f93f41dc33e3edcd5e3d9e8","modified":1638496389609},{"_id":"public/tags/Butterfly/index.html","hash":"84016b8433cec89037ae6cd3d7580028ce2faee4","modified":1638496389609},{"_id":"public/tags/Android/index.html","hash":"1da8cf804c93a68a9021f4e26d96cc806b4f03a5","modified":1638496389609},{"_id":"public/tags/学习/index.html","hash":"b5c413bb64bd069eb046eebe3c61bb1831fd94e9","modified":1638496389609},{"_id":"public/tags/学校-结课作业/index.html","hash":"2c809c4ed655bc4f0ad8f8f442d5468aaef94876","modified":1638496389609},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1638496389609},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1638496389609},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1638496389609},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1638496389609},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1638496389609},{"_id":"public/css/index.css","hash":"07a88bd7ef99a4258dd40efc43613adfe8e6ac63","modified":1638496389609},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1638496389609},{"_id":"public/css/my/backgroud.css","hash":"79c85cb1771c36d576fa8a79fa7a5f86582d446e","modified":1638496389609},{"_id":"public/css/my/mouse.css","hash":"97adb85f5ac012973545cb2c5f7686ebaed06cd8","modified":1638496389609},{"_id":"public/css/my/pagefooter.css","hash":"1a8f8be7518079ab2f4b01b35f9a9cad9aae2ceb","modified":1638496389609},{"_id":"public/css/my/scrollbar.css","hash":"2007a3c3fb8d5482b573d0dc4340f14d1338b28b","modified":1638496389609},{"_id":"public/js/my/my.js","hash":"71c5ed792e6612d7d478eba6cbebb2cd628b1c26","modified":1638496389609},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1638496389609},{"_id":"public/js/search/local-search.js","hash":"b1429e9f80ef6b9a77434819ffb87d90bdad25e8","modified":1638496389609},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1638496389609},{"_id":"public/js/main.js","hash":"b244f28124a46d7f1e8ef76ba6e925289691f93b","modified":1638496389609}],"Category":[{"name":"LeetCode","_id":"ckwpqg2qw0004o4vb0ha61eu6"},{"name":"Docker","_id":"ckwpqg2r9000to4vbfs2w5lzc"},{"name":"JAVA","_id":"ckwpqg2rd0013o4vb370wg7gq"},{"name":"数据库","_id":"ckwpqg2ri001io4vbggs87lw3"},{"name":"Typora","_id":"ckwpqg2rn001vo4vbe29c34yn"},{"name":"转载","_id":"ckwpqg2rr0021o4vbdqiphidy"},{"name":"Mysql","parent":"ckwpqg2ri001io4vbggs87lw3","_id":"ckwpqg2rx002ko4vbfe3pgema"},{"name":"netty","parent":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2s8003do4vb3h3u3eg8"},{"name":"Butterfly","_id":"ckwpqg2si004io4vb4vmsdly6"},{"name":"Android","_id":"ckwpqg2u0007uo4vb4p5o2rmx"}],"Data":[{"_id":"link","data":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"基本信息","date":"2021-11-24T12:09:37.000Z","_content":"<p><svg t=\"1601711640550\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"16881\" width=\"20\" height=\"20\"><path d=\"M512 1024C229.233778 1024 0 794.766222 0 512 0 229.233778 229.233778 0 512 0 794.766222 0 1024 229.233778 1024 512 1024 794.766222 794.766222 1024 512 1024ZM512 56.888889C260.664889 56.888889 56.888889 260.636444 56.888889 512 56.888889 763.363556 260.664889 967.111111 512 967.111111 763.363556 967.111111 967.111111 763.363556 967.111111 512 967.111111 260.636444 763.363556 56.888889 512 56.888889ZM853.333333 711.111111 796.444444 711.111111C796.444444 632.576 732.757333 568.888889 654.222222 568.888889 575.658667 568.888889 512 632.576 512 711.111111L455.111111 711.111111C455.111111 634.254222 498.716444 567.694222 562.460444 534.499556 531.854222 508.416 512 470.044444 512 426.666667 512 348.131556 575.658667 284.444444 654.222222 284.444444 732.757333 284.444444 796.444444 348.131556 796.444444 426.666667 796.444444 470.044444 776.618667 508.416 745.984 534.499556 809.728 567.694222 853.333333 634.254222 853.333333 711.111111ZM654.222222 341.333333C607.089778 341.333333 568.888889 379.534222 568.888889 426.666667 568.888889 473.799111 607.089778 512 654.222222 512 701.354667 512 739.555556 473.799111 739.555556 426.666667 739.555556 379.534222 701.354667 341.333333 654.222222 341.333333ZM199.111111 512 455.111111 512 455.111111 568.888889 199.111111 568.888889 199.111111 512ZM199.111111 369.777778 455.111111 369.777778 455.111111 426.666667 199.111111 426.666667 199.111111 369.777778ZM398.222222 711.111111 199.111111 711.111111 199.111111 654.222222 398.222222 654.222222 398.222222 711.111111Z\" p-id=\"16882\" fill=\"#1296db\"></path></svg>基本情况：断线的风筝飞向青空</p>\n\n\n<p><svg t=\"1601711695301\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"17448\" width=\"20\" height=\"20\"><path d=\"M868.519 445.735L549.715 768.292l-228.24-230.917 318.798-322.548c1.088-1.089 2.17-1.082 3.245-0.01l225 227.65c0.532 0.543 0.65 1.185 0.65 1.638 0 0.445-0.118 1.084-0.65 1.63zM428.094 823.403c-0.168 0.04-0.55 0-0.306 0.256L267.089 661.157c-0.078-0.165-0.102-0.586-0.31-0.244l50.922-79.907 188.904 191.117-78.511 51.28z m-84.957-4.258l-28.832-0.827-57.095-57.765 30.652-31.013 71.924 72.767-16.649 16.838z m378.038-625.127L889.092 363.91c3.81 3.854 3.81 10.372-0.007 14.232l-18.622 18.84-181.98-184.121 18.623-18.843c3.808-3.854 10.26-3.854 14.069 0z m191.368 146.165L744.624 170.289c-16.8-17.01-44.165-17.01-60.968 0l-18.81 19.035c-6.407-5.55-14.395-8.718-22.944-8.718-9.478 0-18.385 3.724-25.07 10.486L274.578 537.375l19.133 19.359-54.813 86.004c-8.226 12.915-6.335 30.854 4.404 41.713l21.111 21.36-54.102 54.742 89.873 90.928 56.299 1.613 26.751-27.06 21.114 21.358c6.256 6.338 14.886 9.627 23.52 9.627 6.192 0 12.391-1.69 17.716-5.18l85.003-55.452 19.128 19.355 342.253-346.28c6.685-6.764 10.365-15.777 10.365-25.373-0.004-8.637-3.134-16.71-8.61-23.187l18.813-19.033c16.81-17.006 16.815-44.678 0.007-61.686z\" fill=\"#d81e06\" p-id=\"17449\"></path></svg>昵称：<span style=\"color:skyblue;font-weight:bolder\">青云</span> &……青空之云</p>\n\n<p><svg t=\"1601711340026\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"14072\" width=\"20\" height=\"20\"><path d=\"M833.536 667.136h-256l74.24-106.496c2.048-3.072 5.12-5.632 8.704-7.68 74.752-40.448 121.344-118.272 121.344-203.776 0-127.488-102.912-230.912-229.376-230.912S322.56 222.208 322.56 349.696c0 84.992 46.592 163.328 121.344 203.776 3.584 2.048 6.656 4.608 8.704 7.68l74.24 106.496H315.392l-178.688 250.368h857.6l-160.768-250.88z\" fill=\"#17E6A1\" p-id=\"14073\"></path><path d=\"M377.344 593.408l113.664 161.792c7.68 11.264 23.04 13.824 33.792 6.144 2.048-1.536 4.096-3.584 6.144-6.144l113.664-161.792c86.016-48.128 138.752-138.752 138.752-237.568 0-150.016-122.368-272.384-272.384-272.384S238.592 205.312 238.592 355.84c0 98.816 52.736 188.928 138.752 237.568z m133.632-461.312c123.392 0 223.744 100.352 223.744 223.744 0 82.432-45.056 158.208-118.272 197.12-3.584 2.048-6.144 4.608-8.192 7.68l-97.28 137.728-97.28-137.728c-2.048-3.072-5.12-5.632-8.192-7.68-72.704-38.912-118.272-114.688-118.272-197.12 0-123.392 100.352-223.744 223.744-223.744z m0 345.6c68.096 0 123.392-55.296 123.392-123.392s-55.296-123.392-123.392-123.392S387.584 286.72 387.584 354.816c0 67.584 55.296 122.88 123.392 122.88z m0-197.632c40.96 0 74.24 33.28 74.24 74.24s-33.28 74.24-74.24 74.24-74.24-33.28-74.24-74.24c0-40.448 33.28-74.24 74.24-74.24z m471.552 649.216c-4.096 7.68-12.288 11.264-21.504 11.264H60.416c-8.704 0-16.896-3.584-21.504-11.264-4.096-7.68-4.096-16.384 0.512-24.064l147.456-242.176c4.608-7.168 12.288-12.8 20.992-12.8H358.4c13.312 0 24.576 11.264 24.576 24.576s-10.752 24.576-24.576 24.576H221.696l-117.76 191.488h813.568l-117.248-191.488h-136.704c-13.312 0-24.576-11.264-24.576-24.576s10.752-24.576 24.576-24.576H814.08c8.704 0 16.384 6.144 20.992 13.312l147.456 241.152c4.096 7.168 4.608 16.896 0 24.576z\" fill=\"#272636\" p-id=\"14074\"></path></svg>地址：梦想家</p>\n\n<p><svg t=\"1601712171407\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"13058\" width=\"20\" height=\"20\"><path d=\"M597.172 531.547c-9.668-9.857-9.514-25.686 0.344-35.353 9.857-9.668 25.686-9.514 35.353 0.343L941.85 811.58c9.667 9.858 9.514 25.686-0.344 35.354-9.857 9.668-25.686 9.514-35.354-0.343L597.172 531.547zM117.85 846.59c-9.668 9.857-25.497 10.01-35.354 0.343-9.858-9.668-10.011-25.496-0.344-35.354l308.98-315.042c9.667-9.857 25.496-10.011 35.353-0.343 9.858 9.667 10.012 25.496 0.344 35.353L117.848 846.59z\" fill=\"#85A5FF\" p-id=\"13059\"></path><path d=\"M82.151 216.505c-9.667-9.857-9.514-25.686 0.344-35.354 9.857-9.667 25.686-9.514 35.354 0.344l340.605 347.29c29.004 29.572 76.489 30.033 106.061 1.03 0.347-0.34 0.69-0.684 1.03-1.03l340.606-347.29c9.668-9.858 25.497-10.011 35.354-0.344 9.858 9.668 10.011 25.497 0.344 35.354l-340.606 347.29a125 125 0 0 1-1.718 1.717c-49.287 48.339-128.429 47.57-176.768-1.718L82.151 216.505z\" fill=\"#2F54EB\" p-id=\"13060\"></path><path d=\"M95 191v643h835V191H95z m0-60h835c33.137 0 60 26.863 60 60v643c0 33.137-26.863 60-60 60H95c-33.137 0-60-26.863-60-60V191c0-33.137 26.863-60 60-60z\" fill=\"#2F54EB\" p-id=\"13061\"></path></svg>邮箱：<a href=\"mailto:2221461606@qq.com\">1553385162@qq.com</a> </p>\n\n<p><svg t=\"1601711468901\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"15267\" width=\"20\" height=\"20\"><path d=\"M803.4 963c-32.8 0-65.2-12.8-89.2-36.6-36-36-46.4-90-27.6-136.4L293.2 396.4c-46.2 18.8-100.4 8.4-136.4-27.6-36.4-36.4-47-92.8-26-139.8 2.6-6 8.2-10.4 14.6-11.6 6.4-1.2 13.2 0.8 17.8 5.6l46.6 46.6 38.4-38.4-46.6-46.6c-4.6-4.6-6.8-11.4-5.6-17.8 1.2-6.4 5.6-12 11.6-14.6 47.2-21 103.4-10.4 139.8 26 36 36 46.4 90 27.6 136.4L768.8 708c46.2-18.8 100.4-8.4 136.4 27.6 36.4 36.4 47 92.8 26 139.8-2.6 6-8.2 10.4-14.6 11.6-6.4 1.2-13.2-0.8-17.8-5.6L852 834.8l-38.4 38.4 46.6 46.6c4.6 4.6 6.8 11.4 5.6 17.8-1.2 6.4-5.6 12-11.6 14.6-16.2 7.2-33.6 10.8-50.8 10.8z m-506-610.6c5.2 0 10.2 2 14.2 5.8l413.6 413.6c6.4 6.4 7.6 16 3.4 24-18.6 33.2-12.8 75.4 14.2 102.4 17.2 17.2 40.6 25.8 64.2 25l-35.4-35.4c-3.8-3.8-5.8-8.8-5.8-14.2s2.2-10.4 5.8-14.2l66.8-66.8c7.8-7.8 20.4-7.8 28.2 0L902 828c1-23.4-7.8-47-25-64.2-27-27-69.2-32.8-102.4-14.2-7.8 4.4-17.6 3-24-3.4L337 332.8c-6.4-6.4-7.6-16-3.4-24 18.6-33.2 12.8-75.4-14.2-102.4-17.2-17.2-40.6-25.8-64.2-25l35.4 35.4c3.8 3.8 5.8 8.8 5.8 14.2s-2.2 10.4-5.8 14.2L224 312c-3.8 3.8-8.8 5.8-14.2 5.8-5.4 0-10.4-2.2-14.2-5.8l-35.4-35.4c-1 23.4 7.8 47 25 64.2 27 27 69.2 32.8 102.4 14.2 3-1.8 6.4-2.6 9.8-2.6z\" fill=\"#d4237a\" p-id=\"15268\"></path><path d=\"M218.6 950.2c-5.4 0-10.4-2.2-14.2-5.8l-65.4-65.4c-3.8-3.8-5.8-8.8-5.8-14.2s2.2-10.4 5.8-14.2l262.4-262.4c7.8-7.8 20.4-7.8 28.2 0 7.8 7.8 7.8 20.4 0 28.2l-248 248.4 37 37 248.2-248.2c7.8-7.8 20.4-7.8 28.2 0 7.8 7.8 7.8 20.4 0 28.2L232.8 944.4c-3.8 3.6-9 5.8-14.2 5.8zM648.2 516c-5.2 0-10.2-2-14.2-5.8-7.8-7.8-7.8-20.4 0-28.2l188.2-188.2c6.6-6.6 17.2-7.8 25-2.6 0.6 0.4 15.8 10.4 37.2 31.8 12 12 25.2 31.4 37 51.2-2.6-33.4-9.6-72.4-26-105.8-27-54.8-102.6-129.6-134-159.4l-48 48 71.4 71.4c7.8 7.8 7.8 20.4 0 28.2l-188.2 188.2c-7.8 7.8-20.4 7.8-28.2 0-7.8-7.8-7.8-20.4 0-28.2l174-174-71.4-71.4c-7.8-7.8-7.8-20.4 0-28.2l75.6-75.6c7.6-7.6 19.6-7.8 27.6-0.8 4.8 4.4 119.4 107.8 157 184.4 42.8 86.8 30 199.6 29.4 204.4-1 8.8-7.8 16-16.6 17.4-8.8 1.4-17.4-3.2-21.4-11.2-10.8-23-44-87.6-66.6-110-7-7-13.2-12.6-18-16.6L662.4 510c-4 4-9 6-14.2 6z\" fill=\"#d4237a\" p-id=\"15269\"></path></svg>技术方向：Java，Python</p>\n\n\n<i class=\"icon-geyan\">格言</i>\n<i>\n<div>想这些年总是把期待明天挂在嘴边</div>\n<div>大多数的日子里却只活着今天</div>\n<div>如果都是快乐的话，其实也没有差。</div>\n<div>我觉得我的未来，依然是一片光明。</div>\n</i>\n\n<h1 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h1>\n\n{% gallery %}\n![JAVA](https://cdn.jsdelivr.net/gh/youthlql/youthlql/img/java.svg)\n![MySql](https://cdn.jsdelivr.net/gh/youthlql/youthlql/img/mysql.png)\n![Spring](https://cdn.jsdelivr.net/gh/youthlql/youthlql/img/spring.png)\n{% endgallery %}\n\n\n# 常用平台\n## 博客\n<svg t=\"1637914533425\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9695\" width=\"20\" height=\"20\"><path d=\"M606.208 307.2H307.2a30.72 30.72 0 0 0 0 61.44h296.96a30.72 30.72 0 1 0 0-61.44zM633.856 506.368a30.72 30.72 0 0 0-30.72-30.72H307.2a30.72 30.72 0 0 0 0 61.44h296.96a30.72 30.72 0 0 0 29.696-30.72zM313.856 644.096a30.72 30.72 0 0 0-30.72 30.72 30.208 30.208 0 0 0 30.72 30.72h208.384a30.72 30.72 0 0 0 30.72-30.72 30.72 30.72 0 0 0-30.72-30.72zM921.6 274.432a38.4 38.4 0 0 0-51.2 13.824l-245.76 425.472a37.888 37.888 0 0 0 13.824 51.2 38.4 38.4 0 0 0 51.2-14.336l245.248-425.472a37.888 37.888 0 0 0-13.312-50.688z\" fill=\"#FF9746\" p-id=\"9696\"></path><path d=\"M778.24 735.744a38.4 38.4 0 0 0-38.4 38.4v72.192a12.8 12.8 0 0 1-12.8 12.8H204.8a12.8 12.8 0 0 1-12.8-12.8V170.496A12.8 12.8 0 0 1 204.8 157.696h522.24a12.8 12.8 0 0 1 12.8 12.8v97.28a38.4 38.4 0 0 0 76.8 0v-97.28a89.6 89.6 0 0 0-89.6-89.6H204.8a90.112 90.112 0 0 0-89.6 89.6v675.84A89.6 89.6 0 0 0 204.8 935.936h522.24a89.6 89.6 0 0 0 92.16-89.6v-72.192a37.888 37.888 0 0 0-40.96-38.4z\" fill=\"#FF9746\" p-id=\"9697\"></path></svg> 自建博客: qingyun.run\n\n## 社区\n\n<svg t=\"1637914696124\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"11187\" width=\"20\" height=\"20\"><path d=\"M512 85.333333C276.266667 85.333333 85.333333 276.266667 85.333333 512a426.410667 426.410667 0 0 0 291.754667 404.821333c21.333333 3.712 29.312-9.088 29.312-20.309333 0-10.112-0.554667-43.690667-0.554667-79.445333-107.178667 19.754667-134.912-26.112-143.445333-50.133334-4.821333-12.288-25.6-50.133333-43.733333-60.288-14.933333-7.978667-36.266667-27.733333-0.554667-28.245333 33.621333-0.554667 57.6 30.933333 65.621333 43.733333 38.4 64.512 99.754667 46.378667 124.245334 35.2 3.754667-27.733333 14.933333-46.378667 27.221333-57.045333-94.933333-10.666667-194.133333-47.488-194.133333-210.688 0-46.421333 16.512-84.778667 43.733333-114.688-4.266667-10.666667-19.2-54.4 4.266667-113.066667 0 0 35.712-11.178667 117.333333 43.776a395.946667 395.946667 0 0 1 106.666667-14.421333c36.266667 0 72.533333 4.778667 106.666666 14.378667 81.578667-55.466667 117.333333-43.690667 117.333334-43.690667 23.466667 58.666667 8.533333 102.4 4.266666 113.066667 27.178667 29.866667 43.733333 67.712 43.733334 114.645333 0 163.754667-99.712 200.021333-194.645334 210.688 15.445333 13.312 28.8 38.912 28.8 78.933333 0 57.045333-0.554667 102.912-0.554666 117.333334 0 11.178667 8.021333 24.490667 29.354666 20.224A427.349333 427.349333 0 0 0 938.666667 512c0-235.733333-190.933333-426.666667-426.666667-426.666667z\" fill=\"#000000\" p-id=\"11188\"></path></svg> Github : https://github.com/liuheng2000\n\n## 感谢\n\n> - 本博客搭建学习于：https://butterfly.js.org/posts/4aa8abbe/\n> - 个人介绍参考：https://imlql.cn/","source":"about/index.md","raw":"---\ntitle: 基本信息\ndate: 2021-11-24 20:09:37\n---\n<p><svg t=\"1601711640550\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"16881\" width=\"20\" height=\"20\"><path d=\"M512 1024C229.233778 1024 0 794.766222 0 512 0 229.233778 229.233778 0 512 0 794.766222 0 1024 229.233778 1024 512 1024 794.766222 794.766222 1024 512 1024ZM512 56.888889C260.664889 56.888889 56.888889 260.636444 56.888889 512 56.888889 763.363556 260.664889 967.111111 512 967.111111 763.363556 967.111111 967.111111 763.363556 967.111111 512 967.111111 260.636444 763.363556 56.888889 512 56.888889ZM853.333333 711.111111 796.444444 711.111111C796.444444 632.576 732.757333 568.888889 654.222222 568.888889 575.658667 568.888889 512 632.576 512 711.111111L455.111111 711.111111C455.111111 634.254222 498.716444 567.694222 562.460444 534.499556 531.854222 508.416 512 470.044444 512 426.666667 512 348.131556 575.658667 284.444444 654.222222 284.444444 732.757333 284.444444 796.444444 348.131556 796.444444 426.666667 796.444444 470.044444 776.618667 508.416 745.984 534.499556 809.728 567.694222 853.333333 634.254222 853.333333 711.111111ZM654.222222 341.333333C607.089778 341.333333 568.888889 379.534222 568.888889 426.666667 568.888889 473.799111 607.089778 512 654.222222 512 701.354667 512 739.555556 473.799111 739.555556 426.666667 739.555556 379.534222 701.354667 341.333333 654.222222 341.333333ZM199.111111 512 455.111111 512 455.111111 568.888889 199.111111 568.888889 199.111111 512ZM199.111111 369.777778 455.111111 369.777778 455.111111 426.666667 199.111111 426.666667 199.111111 369.777778ZM398.222222 711.111111 199.111111 711.111111 199.111111 654.222222 398.222222 654.222222 398.222222 711.111111Z\" p-id=\"16882\" fill=\"#1296db\"></path></svg>基本情况：断线的风筝飞向青空</p>\n\n\n<p><svg t=\"1601711695301\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"17448\" width=\"20\" height=\"20\"><path d=\"M868.519 445.735L549.715 768.292l-228.24-230.917 318.798-322.548c1.088-1.089 2.17-1.082 3.245-0.01l225 227.65c0.532 0.543 0.65 1.185 0.65 1.638 0 0.445-0.118 1.084-0.65 1.63zM428.094 823.403c-0.168 0.04-0.55 0-0.306 0.256L267.089 661.157c-0.078-0.165-0.102-0.586-0.31-0.244l50.922-79.907 188.904 191.117-78.511 51.28z m-84.957-4.258l-28.832-0.827-57.095-57.765 30.652-31.013 71.924 72.767-16.649 16.838z m378.038-625.127L889.092 363.91c3.81 3.854 3.81 10.372-0.007 14.232l-18.622 18.84-181.98-184.121 18.623-18.843c3.808-3.854 10.26-3.854 14.069 0z m191.368 146.165L744.624 170.289c-16.8-17.01-44.165-17.01-60.968 0l-18.81 19.035c-6.407-5.55-14.395-8.718-22.944-8.718-9.478 0-18.385 3.724-25.07 10.486L274.578 537.375l19.133 19.359-54.813 86.004c-8.226 12.915-6.335 30.854 4.404 41.713l21.111 21.36-54.102 54.742 89.873 90.928 56.299 1.613 26.751-27.06 21.114 21.358c6.256 6.338 14.886 9.627 23.52 9.627 6.192 0 12.391-1.69 17.716-5.18l85.003-55.452 19.128 19.355 342.253-346.28c6.685-6.764 10.365-15.777 10.365-25.373-0.004-8.637-3.134-16.71-8.61-23.187l18.813-19.033c16.81-17.006 16.815-44.678 0.007-61.686z\" fill=\"#d81e06\" p-id=\"17449\"></path></svg>昵称：<span style=\"color:skyblue;font-weight:bolder\">青云</span> &……青空之云</p>\n\n<p><svg t=\"1601711340026\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"14072\" width=\"20\" height=\"20\"><path d=\"M833.536 667.136h-256l74.24-106.496c2.048-3.072 5.12-5.632 8.704-7.68 74.752-40.448 121.344-118.272 121.344-203.776 0-127.488-102.912-230.912-229.376-230.912S322.56 222.208 322.56 349.696c0 84.992 46.592 163.328 121.344 203.776 3.584 2.048 6.656 4.608 8.704 7.68l74.24 106.496H315.392l-178.688 250.368h857.6l-160.768-250.88z\" fill=\"#17E6A1\" p-id=\"14073\"></path><path d=\"M377.344 593.408l113.664 161.792c7.68 11.264 23.04 13.824 33.792 6.144 2.048-1.536 4.096-3.584 6.144-6.144l113.664-161.792c86.016-48.128 138.752-138.752 138.752-237.568 0-150.016-122.368-272.384-272.384-272.384S238.592 205.312 238.592 355.84c0 98.816 52.736 188.928 138.752 237.568z m133.632-461.312c123.392 0 223.744 100.352 223.744 223.744 0 82.432-45.056 158.208-118.272 197.12-3.584 2.048-6.144 4.608-8.192 7.68l-97.28 137.728-97.28-137.728c-2.048-3.072-5.12-5.632-8.192-7.68-72.704-38.912-118.272-114.688-118.272-197.12 0-123.392 100.352-223.744 223.744-223.744z m0 345.6c68.096 0 123.392-55.296 123.392-123.392s-55.296-123.392-123.392-123.392S387.584 286.72 387.584 354.816c0 67.584 55.296 122.88 123.392 122.88z m0-197.632c40.96 0 74.24 33.28 74.24 74.24s-33.28 74.24-74.24 74.24-74.24-33.28-74.24-74.24c0-40.448 33.28-74.24 74.24-74.24z m471.552 649.216c-4.096 7.68-12.288 11.264-21.504 11.264H60.416c-8.704 0-16.896-3.584-21.504-11.264-4.096-7.68-4.096-16.384 0.512-24.064l147.456-242.176c4.608-7.168 12.288-12.8 20.992-12.8H358.4c13.312 0 24.576 11.264 24.576 24.576s-10.752 24.576-24.576 24.576H221.696l-117.76 191.488h813.568l-117.248-191.488h-136.704c-13.312 0-24.576-11.264-24.576-24.576s10.752-24.576 24.576-24.576H814.08c8.704 0 16.384 6.144 20.992 13.312l147.456 241.152c4.096 7.168 4.608 16.896 0 24.576z\" fill=\"#272636\" p-id=\"14074\"></path></svg>地址：梦想家</p>\n\n<p><svg t=\"1601712171407\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"13058\" width=\"20\" height=\"20\"><path d=\"M597.172 531.547c-9.668-9.857-9.514-25.686 0.344-35.353 9.857-9.668 25.686-9.514 35.353 0.343L941.85 811.58c9.667 9.858 9.514 25.686-0.344 35.354-9.857 9.668-25.686 9.514-35.354-0.343L597.172 531.547zM117.85 846.59c-9.668 9.857-25.497 10.01-35.354 0.343-9.858-9.668-10.011-25.496-0.344-35.354l308.98-315.042c9.667-9.857 25.496-10.011 35.353-0.343 9.858 9.667 10.012 25.496 0.344 35.353L117.848 846.59z\" fill=\"#85A5FF\" p-id=\"13059\"></path><path d=\"M82.151 216.505c-9.667-9.857-9.514-25.686 0.344-35.354 9.857-9.667 25.686-9.514 35.354 0.344l340.605 347.29c29.004 29.572 76.489 30.033 106.061 1.03 0.347-0.34 0.69-0.684 1.03-1.03l340.606-347.29c9.668-9.858 25.497-10.011 35.354-0.344 9.858 9.668 10.011 25.497 0.344 35.354l-340.606 347.29a125 125 0 0 1-1.718 1.717c-49.287 48.339-128.429 47.57-176.768-1.718L82.151 216.505z\" fill=\"#2F54EB\" p-id=\"13060\"></path><path d=\"M95 191v643h835V191H95z m0-60h835c33.137 0 60 26.863 60 60v643c0 33.137-26.863 60-60 60H95c-33.137 0-60-26.863-60-60V191c0-33.137 26.863-60 60-60z\" fill=\"#2F54EB\" p-id=\"13061\"></path></svg>邮箱：<a href=\"mailto:2221461606@qq.com\">1553385162@qq.com</a> </p>\n\n<p><svg t=\"1601711468901\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"15267\" width=\"20\" height=\"20\"><path d=\"M803.4 963c-32.8 0-65.2-12.8-89.2-36.6-36-36-46.4-90-27.6-136.4L293.2 396.4c-46.2 18.8-100.4 8.4-136.4-27.6-36.4-36.4-47-92.8-26-139.8 2.6-6 8.2-10.4 14.6-11.6 6.4-1.2 13.2 0.8 17.8 5.6l46.6 46.6 38.4-38.4-46.6-46.6c-4.6-4.6-6.8-11.4-5.6-17.8 1.2-6.4 5.6-12 11.6-14.6 47.2-21 103.4-10.4 139.8 26 36 36 46.4 90 27.6 136.4L768.8 708c46.2-18.8 100.4-8.4 136.4 27.6 36.4 36.4 47 92.8 26 139.8-2.6 6-8.2 10.4-14.6 11.6-6.4 1.2-13.2-0.8-17.8-5.6L852 834.8l-38.4 38.4 46.6 46.6c4.6 4.6 6.8 11.4 5.6 17.8-1.2 6.4-5.6 12-11.6 14.6-16.2 7.2-33.6 10.8-50.8 10.8z m-506-610.6c5.2 0 10.2 2 14.2 5.8l413.6 413.6c6.4 6.4 7.6 16 3.4 24-18.6 33.2-12.8 75.4 14.2 102.4 17.2 17.2 40.6 25.8 64.2 25l-35.4-35.4c-3.8-3.8-5.8-8.8-5.8-14.2s2.2-10.4 5.8-14.2l66.8-66.8c7.8-7.8 20.4-7.8 28.2 0L902 828c1-23.4-7.8-47-25-64.2-27-27-69.2-32.8-102.4-14.2-7.8 4.4-17.6 3-24-3.4L337 332.8c-6.4-6.4-7.6-16-3.4-24 18.6-33.2 12.8-75.4-14.2-102.4-17.2-17.2-40.6-25.8-64.2-25l35.4 35.4c3.8 3.8 5.8 8.8 5.8 14.2s-2.2 10.4-5.8 14.2L224 312c-3.8 3.8-8.8 5.8-14.2 5.8-5.4 0-10.4-2.2-14.2-5.8l-35.4-35.4c-1 23.4 7.8 47 25 64.2 27 27 69.2 32.8 102.4 14.2 3-1.8 6.4-2.6 9.8-2.6z\" fill=\"#d4237a\" p-id=\"15268\"></path><path d=\"M218.6 950.2c-5.4 0-10.4-2.2-14.2-5.8l-65.4-65.4c-3.8-3.8-5.8-8.8-5.8-14.2s2.2-10.4 5.8-14.2l262.4-262.4c7.8-7.8 20.4-7.8 28.2 0 7.8 7.8 7.8 20.4 0 28.2l-248 248.4 37 37 248.2-248.2c7.8-7.8 20.4-7.8 28.2 0 7.8 7.8 7.8 20.4 0 28.2L232.8 944.4c-3.8 3.6-9 5.8-14.2 5.8zM648.2 516c-5.2 0-10.2-2-14.2-5.8-7.8-7.8-7.8-20.4 0-28.2l188.2-188.2c6.6-6.6 17.2-7.8 25-2.6 0.6 0.4 15.8 10.4 37.2 31.8 12 12 25.2 31.4 37 51.2-2.6-33.4-9.6-72.4-26-105.8-27-54.8-102.6-129.6-134-159.4l-48 48 71.4 71.4c7.8 7.8 7.8 20.4 0 28.2l-188.2 188.2c-7.8 7.8-20.4 7.8-28.2 0-7.8-7.8-7.8-20.4 0-28.2l174-174-71.4-71.4c-7.8-7.8-7.8-20.4 0-28.2l75.6-75.6c7.6-7.6 19.6-7.8 27.6-0.8 4.8 4.4 119.4 107.8 157 184.4 42.8 86.8 30 199.6 29.4 204.4-1 8.8-7.8 16-16.6 17.4-8.8 1.4-17.4-3.2-21.4-11.2-10.8-23-44-87.6-66.6-110-7-7-13.2-12.6-18-16.6L662.4 510c-4 4-9 6-14.2 6z\" fill=\"#d4237a\" p-id=\"15269\"></path></svg>技术方向：Java，Python</p>\n\n\n<i class=\"icon-geyan\">格言</i>\n<i>\n<div>想这些年总是把期待明天挂在嘴边</div>\n<div>大多数的日子里却只活着今天</div>\n<div>如果都是快乐的话，其实也没有差。</div>\n<div>我觉得我的未来，依然是一片光明。</div>\n</i>\n\n<h1 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h1>\n\n{% gallery %}\n![JAVA](https://cdn.jsdelivr.net/gh/youthlql/youthlql/img/java.svg)\n![MySql](https://cdn.jsdelivr.net/gh/youthlql/youthlql/img/mysql.png)\n![Spring](https://cdn.jsdelivr.net/gh/youthlql/youthlql/img/spring.png)\n{% endgallery %}\n\n\n# 常用平台\n## 博客\n<svg t=\"1637914533425\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9695\" width=\"20\" height=\"20\"><path d=\"M606.208 307.2H307.2a30.72 30.72 0 0 0 0 61.44h296.96a30.72 30.72 0 1 0 0-61.44zM633.856 506.368a30.72 30.72 0 0 0-30.72-30.72H307.2a30.72 30.72 0 0 0 0 61.44h296.96a30.72 30.72 0 0 0 29.696-30.72zM313.856 644.096a30.72 30.72 0 0 0-30.72 30.72 30.208 30.208 0 0 0 30.72 30.72h208.384a30.72 30.72 0 0 0 30.72-30.72 30.72 30.72 0 0 0-30.72-30.72zM921.6 274.432a38.4 38.4 0 0 0-51.2 13.824l-245.76 425.472a37.888 37.888 0 0 0 13.824 51.2 38.4 38.4 0 0 0 51.2-14.336l245.248-425.472a37.888 37.888 0 0 0-13.312-50.688z\" fill=\"#FF9746\" p-id=\"9696\"></path><path d=\"M778.24 735.744a38.4 38.4 0 0 0-38.4 38.4v72.192a12.8 12.8 0 0 1-12.8 12.8H204.8a12.8 12.8 0 0 1-12.8-12.8V170.496A12.8 12.8 0 0 1 204.8 157.696h522.24a12.8 12.8 0 0 1 12.8 12.8v97.28a38.4 38.4 0 0 0 76.8 0v-97.28a89.6 89.6 0 0 0-89.6-89.6H204.8a90.112 90.112 0 0 0-89.6 89.6v675.84A89.6 89.6 0 0 0 204.8 935.936h522.24a89.6 89.6 0 0 0 92.16-89.6v-72.192a37.888 37.888 0 0 0-40.96-38.4z\" fill=\"#FF9746\" p-id=\"9697\"></path></svg> 自建博客: qingyun.run\n\n## 社区\n\n<svg t=\"1637914696124\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"11187\" width=\"20\" height=\"20\"><path d=\"M512 85.333333C276.266667 85.333333 85.333333 276.266667 85.333333 512a426.410667 426.410667 0 0 0 291.754667 404.821333c21.333333 3.712 29.312-9.088 29.312-20.309333 0-10.112-0.554667-43.690667-0.554667-79.445333-107.178667 19.754667-134.912-26.112-143.445333-50.133334-4.821333-12.288-25.6-50.133333-43.733333-60.288-14.933333-7.978667-36.266667-27.733333-0.554667-28.245333 33.621333-0.554667 57.6 30.933333 65.621333 43.733333 38.4 64.512 99.754667 46.378667 124.245334 35.2 3.754667-27.733333 14.933333-46.378667 27.221333-57.045333-94.933333-10.666667-194.133333-47.488-194.133333-210.688 0-46.421333 16.512-84.778667 43.733333-114.688-4.266667-10.666667-19.2-54.4 4.266667-113.066667 0 0 35.712-11.178667 117.333333 43.776a395.946667 395.946667 0 0 1 106.666667-14.421333c36.266667 0 72.533333 4.778667 106.666666 14.378667 81.578667-55.466667 117.333333-43.690667 117.333334-43.690667 23.466667 58.666667 8.533333 102.4 4.266666 113.066667 27.178667 29.866667 43.733333 67.712 43.733334 114.645333 0 163.754667-99.712 200.021333-194.645334 210.688 15.445333 13.312 28.8 38.912 28.8 78.933333 0 57.045333-0.554667 102.912-0.554666 117.333334 0 11.178667 8.021333 24.490667 29.354666 20.224A427.349333 427.349333 0 0 0 938.666667 512c0-235.733333-190.933333-426.666667-426.666667-426.666667z\" fill=\"#000000\" p-id=\"11188\"></path></svg> Github : https://github.com/liuheng2000\n\n## 感谢\n\n> - 本博客搭建学习于：https://butterfly.js.org/posts/4aa8abbe/\n> - 个人介绍参考：https://imlql.cn/","updated":"2021-12-01T02:04:11.546Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckwpqg2qo0000o4vb3qfl56wp","content":"<p><svg t=\"1601711640550\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"16881\" width=\"20\" height=\"20\"><path d=\"M512 1024C229.233778 1024 0 794.766222 0 512 0 229.233778 229.233778 0 512 0 794.766222 0 1024 229.233778 1024 512 1024 794.766222 794.766222 1024 512 1024ZM512 56.888889C260.664889 56.888889 56.888889 260.636444 56.888889 512 56.888889 763.363556 260.664889 967.111111 512 967.111111 763.363556 967.111111 967.111111 763.363556 967.111111 512 967.111111 260.636444 763.363556 56.888889 512 56.888889ZM853.333333 711.111111 796.444444 711.111111C796.444444 632.576 732.757333 568.888889 654.222222 568.888889 575.658667 568.888889 512 632.576 512 711.111111L455.111111 711.111111C455.111111 634.254222 498.716444 567.694222 562.460444 534.499556 531.854222 508.416 512 470.044444 512 426.666667 512 348.131556 575.658667 284.444444 654.222222 284.444444 732.757333 284.444444 796.444444 348.131556 796.444444 426.666667 796.444444 470.044444 776.618667 508.416 745.984 534.499556 809.728 567.694222 853.333333 634.254222 853.333333 711.111111ZM654.222222 341.333333C607.089778 341.333333 568.888889 379.534222 568.888889 426.666667 568.888889 473.799111 607.089778 512 654.222222 512 701.354667 512 739.555556 473.799111 739.555556 426.666667 739.555556 379.534222 701.354667 341.333333 654.222222 341.333333ZM199.111111 512 455.111111 512 455.111111 568.888889 199.111111 568.888889 199.111111 512ZM199.111111 369.777778 455.111111 369.777778 455.111111 426.666667 199.111111 426.666667 199.111111 369.777778ZM398.222222 711.111111 199.111111 711.111111 199.111111 654.222222 398.222222 654.222222 398.222222 711.111111Z\" p-id=\"16882\" fill=\"#1296db\"></path></svg>基本情况：断线的风筝飞向青空</p>\n<p><svg t=\"1601711695301\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"17448\" width=\"20\" height=\"20\"><path d=\"M868.519 445.735L549.715 768.292l-228.24-230.917 318.798-322.548c1.088-1.089 2.17-1.082 3.245-0.01l225 227.65c0.532 0.543 0.65 1.185 0.65 1.638 0 0.445-0.118 1.084-0.65 1.63zM428.094 823.403c-0.168 0.04-0.55 0-0.306 0.256L267.089 661.157c-0.078-0.165-0.102-0.586-0.31-0.244l50.922-79.907 188.904 191.117-78.511 51.28z m-84.957-4.258l-28.832-0.827-57.095-57.765 30.652-31.013 71.924 72.767-16.649 16.838z m378.038-625.127L889.092 363.91c3.81 3.854 3.81 10.372-0.007 14.232l-18.622 18.84-181.98-184.121 18.623-18.843c3.808-3.854 10.26-3.854 14.069 0z m191.368 146.165L744.624 170.289c-16.8-17.01-44.165-17.01-60.968 0l-18.81 19.035c-6.407-5.55-14.395-8.718-22.944-8.718-9.478 0-18.385 3.724-25.07 10.486L274.578 537.375l19.133 19.359-54.813 86.004c-8.226 12.915-6.335 30.854 4.404 41.713l21.111 21.36-54.102 54.742 89.873 90.928 56.299 1.613 26.751-27.06 21.114 21.358c6.256 6.338 14.886 9.627 23.52 9.627 6.192 0 12.391-1.69 17.716-5.18l85.003-55.452 19.128 19.355 342.253-346.28c6.685-6.764 10.365-15.777 10.365-25.373-0.004-8.637-3.134-16.71-8.61-23.187l18.813-19.033c16.81-17.006 16.815-44.678 0.007-61.686z\" fill=\"#d81e06\" p-id=\"17449\"></path></svg>昵称：<span style=\"color:skyblue;font-weight:bolder\">青云</span> &……青空之云</p>\n<p><svg t=\"1601711340026\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"14072\" width=\"20\" height=\"20\"><path d=\"M833.536 667.136h-256l74.24-106.496c2.048-3.072 5.12-5.632 8.704-7.68 74.752-40.448 121.344-118.272 121.344-203.776 0-127.488-102.912-230.912-229.376-230.912S322.56 222.208 322.56 349.696c0 84.992 46.592 163.328 121.344 203.776 3.584 2.048 6.656 4.608 8.704 7.68l74.24 106.496H315.392l-178.688 250.368h857.6l-160.768-250.88z\" fill=\"#17E6A1\" p-id=\"14073\"></path><path d=\"M377.344 593.408l113.664 161.792c7.68 11.264 23.04 13.824 33.792 6.144 2.048-1.536 4.096-3.584 6.144-6.144l113.664-161.792c86.016-48.128 138.752-138.752 138.752-237.568 0-150.016-122.368-272.384-272.384-272.384S238.592 205.312 238.592 355.84c0 98.816 52.736 188.928 138.752 237.568z m133.632-461.312c123.392 0 223.744 100.352 223.744 223.744 0 82.432-45.056 158.208-118.272 197.12-3.584 2.048-6.144 4.608-8.192 7.68l-97.28 137.728-97.28-137.728c-2.048-3.072-5.12-5.632-8.192-7.68-72.704-38.912-118.272-114.688-118.272-197.12 0-123.392 100.352-223.744 223.744-223.744z m0 345.6c68.096 0 123.392-55.296 123.392-123.392s-55.296-123.392-123.392-123.392S387.584 286.72 387.584 354.816c0 67.584 55.296 122.88 123.392 122.88z m0-197.632c40.96 0 74.24 33.28 74.24 74.24s-33.28 74.24-74.24 74.24-74.24-33.28-74.24-74.24c0-40.448 33.28-74.24 74.24-74.24z m471.552 649.216c-4.096 7.68-12.288 11.264-21.504 11.264H60.416c-8.704 0-16.896-3.584-21.504-11.264-4.096-7.68-4.096-16.384 0.512-24.064l147.456-242.176c4.608-7.168 12.288-12.8 20.992-12.8H358.4c13.312 0 24.576 11.264 24.576 24.576s-10.752 24.576-24.576 24.576H221.696l-117.76 191.488h813.568l-117.248-191.488h-136.704c-13.312 0-24.576-11.264-24.576-24.576s10.752-24.576 24.576-24.576H814.08c8.704 0 16.384 6.144 20.992 13.312l147.456 241.152c4.096 7.168 4.608 16.896 0 24.576z\" fill=\"#272636\" p-id=\"14074\"></path></svg>地址：梦想家</p>\n<p><svg t=\"1601712171407\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"13058\" width=\"20\" height=\"20\"><path d=\"M597.172 531.547c-9.668-9.857-9.514-25.686 0.344-35.353 9.857-9.668 25.686-9.514 35.353 0.343L941.85 811.58c9.667 9.858 9.514 25.686-0.344 35.354-9.857 9.668-25.686 9.514-35.354-0.343L597.172 531.547zM117.85 846.59c-9.668 9.857-25.497 10.01-35.354 0.343-9.858-9.668-10.011-25.496-0.344-35.354l308.98-315.042c9.667-9.857 25.496-10.011 35.353-0.343 9.858 9.667 10.012 25.496 0.344 35.353L117.848 846.59z\" fill=\"#85A5FF\" p-id=\"13059\"></path><path d=\"M82.151 216.505c-9.667-9.857-9.514-25.686 0.344-35.354 9.857-9.667 25.686-9.514 35.354 0.344l340.605 347.29c29.004 29.572 76.489 30.033 106.061 1.03 0.347-0.34 0.69-0.684 1.03-1.03l340.606-347.29c9.668-9.858 25.497-10.011 35.354-0.344 9.858 9.668 10.011 25.497 0.344 35.354l-340.606 347.29a125 125 0 0 1-1.718 1.717c-49.287 48.339-128.429 47.57-176.768-1.718L82.151 216.505z\" fill=\"#2F54EB\" p-id=\"13060\"></path><path d=\"M95 191v643h835V191H95z m0-60h835c33.137 0 60 26.863 60 60v643c0 33.137-26.863 60-60 60H95c-33.137 0-60-26.863-60-60V191c0-33.137 26.863-60 60-60z\" fill=\"#2F54EB\" p-id=\"13061\"></path></svg>邮箱：<a href=\"mailto:2221461606@qq.com\">1553385162@qq.com</a> </p>\n<p><svg t=\"1601711468901\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"15267\" width=\"20\" height=\"20\"><path d=\"M803.4 963c-32.8 0-65.2-12.8-89.2-36.6-36-36-46.4-90-27.6-136.4L293.2 396.4c-46.2 18.8-100.4 8.4-136.4-27.6-36.4-36.4-47-92.8-26-139.8 2.6-6 8.2-10.4 14.6-11.6 6.4-1.2 13.2 0.8 17.8 5.6l46.6 46.6 38.4-38.4-46.6-46.6c-4.6-4.6-6.8-11.4-5.6-17.8 1.2-6.4 5.6-12 11.6-14.6 47.2-21 103.4-10.4 139.8 26 36 36 46.4 90 27.6 136.4L768.8 708c46.2-18.8 100.4-8.4 136.4 27.6 36.4 36.4 47 92.8 26 139.8-2.6 6-8.2 10.4-14.6 11.6-6.4 1.2-13.2-0.8-17.8-5.6L852 834.8l-38.4 38.4 46.6 46.6c4.6 4.6 6.8 11.4 5.6 17.8-1.2 6.4-5.6 12-11.6 14.6-16.2 7.2-33.6 10.8-50.8 10.8z m-506-610.6c5.2 0 10.2 2 14.2 5.8l413.6 413.6c6.4 6.4 7.6 16 3.4 24-18.6 33.2-12.8 75.4 14.2 102.4 17.2 17.2 40.6 25.8 64.2 25l-35.4-35.4c-3.8-3.8-5.8-8.8-5.8-14.2s2.2-10.4 5.8-14.2l66.8-66.8c7.8-7.8 20.4-7.8 28.2 0L902 828c1-23.4-7.8-47-25-64.2-27-27-69.2-32.8-102.4-14.2-7.8 4.4-17.6 3-24-3.4L337 332.8c-6.4-6.4-7.6-16-3.4-24 18.6-33.2 12.8-75.4-14.2-102.4-17.2-17.2-40.6-25.8-64.2-25l35.4 35.4c3.8 3.8 5.8 8.8 5.8 14.2s-2.2 10.4-5.8 14.2L224 312c-3.8 3.8-8.8 5.8-14.2 5.8-5.4 0-10.4-2.2-14.2-5.8l-35.4-35.4c-1 23.4 7.8 47 25 64.2 27 27 69.2 32.8 102.4 14.2 3-1.8 6.4-2.6 9.8-2.6z\" fill=\"#d4237a\" p-id=\"15268\"></path><path d=\"M218.6 950.2c-5.4 0-10.4-2.2-14.2-5.8l-65.4-65.4c-3.8-3.8-5.8-8.8-5.8-14.2s2.2-10.4 5.8-14.2l262.4-262.4c7.8-7.8 20.4-7.8 28.2 0 7.8 7.8 7.8 20.4 0 28.2l-248 248.4 37 37 248.2-248.2c7.8-7.8 20.4-7.8 28.2 0 7.8 7.8 7.8 20.4 0 28.2L232.8 944.4c-3.8 3.6-9 5.8-14.2 5.8zM648.2 516c-5.2 0-10.2-2-14.2-5.8-7.8-7.8-7.8-20.4 0-28.2l188.2-188.2c6.6-6.6 17.2-7.8 25-2.6 0.6 0.4 15.8 10.4 37.2 31.8 12 12 25.2 31.4 37 51.2-2.6-33.4-9.6-72.4-26-105.8-27-54.8-102.6-129.6-134-159.4l-48 48 71.4 71.4c7.8 7.8 7.8 20.4 0 28.2l-188.2 188.2c-7.8 7.8-20.4 7.8-28.2 0-7.8-7.8-7.8-20.4 0-28.2l174-174-71.4-71.4c-7.8-7.8-7.8-20.4 0-28.2l75.6-75.6c7.6-7.6 19.6-7.8 27.6-0.8 4.8 4.4 119.4 107.8 157 184.4 42.8 86.8 30 199.6 29.4 204.4-1 8.8-7.8 16-16.6 17.4-8.8 1.4-17.4-3.2-21.4-11.2-10.8-23-44-87.6-66.6-110-7-7-13.2-12.6-18-16.6L662.4 510c-4 4-9 6-14.2 6z\" fill=\"#d4237a\" p-id=\"15269\"></path></svg>技术方向：Java，Python</p>\n<p><i class=\"icon-geyan\">格言</i><br>\n<i></p>\n<div>想这些年总是把期待明天挂在嘴边</div>\n<div>大多数的日子里却只活着今天</div>\n<div>如果都是快乐的话，其实也没有差。</div>\n<div>我觉得我的未来，依然是一片光明。</div>\n</i>\n<h1 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h1>\n<div class=\"justified-gallery\"><p><img src=\"https://cdn.jsdelivr.net/gh/youthlql/youthlql/img/java.svg\" alt=\"JAVA\"><br><img src=\"https://cdn.jsdelivr.net/gh/youthlql/youthlql/img/mysql.png\" alt=\"MySql\"><br><img src=\"https://cdn.jsdelivr.net/gh/youthlql/youthlql/img/spring.png\" alt=\"Spring\"></p>\n          </div>\n<h1>常用平台</h1>\n<h2 id=\"博客\">博客</h2>\n<p><svg t=\"1637914533425\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9695\" width=\"20\" height=\"20\"><path d=\"M606.208 307.2H307.2a30.72 30.72 0 0 0 0 61.44h296.96a30.72 30.72 0 1 0 0-61.44zM633.856 506.368a30.72 30.72 0 0 0-30.72-30.72H307.2a30.72 30.72 0 0 0 0 61.44h296.96a30.72 30.72 0 0 0 29.696-30.72zM313.856 644.096a30.72 30.72 0 0 0-30.72 30.72 30.208 30.208 0 0 0 30.72 30.72h208.384a30.72 30.72 0 0 0 30.72-30.72 30.72 30.72 0 0 0-30.72-30.72zM921.6 274.432a38.4 38.4 0 0 0-51.2 13.824l-245.76 425.472a37.888 37.888 0 0 0 13.824 51.2 38.4 38.4 0 0 0 51.2-14.336l245.248-425.472a37.888 37.888 0 0 0-13.312-50.688z\" fill=\"#FF9746\" p-id=\"9696\"></path><path d=\"M778.24 735.744a38.4 38.4 0 0 0-38.4 38.4v72.192a12.8 12.8 0 0 1-12.8 12.8H204.8a12.8 12.8 0 0 1-12.8-12.8V170.496A12.8 12.8 0 0 1 204.8 157.696h522.24a12.8 12.8 0 0 1 12.8 12.8v97.28a38.4 38.4 0 0 0 76.8 0v-97.28a89.6 89.6 0 0 0-89.6-89.6H204.8a90.112 90.112 0 0 0-89.6 89.6v675.84A89.6 89.6 0 0 0 204.8 935.936h522.24a89.6 89.6 0 0 0 92.16-89.6v-72.192a37.888 37.888 0 0 0-40.96-38.4z\" fill=\"#FF9746\" p-id=\"9697\"></path></svg> 自建博客: qingyun.run</p>\n<h2 id=\"社区\">社区</h2>\n<p><svg t=\"1637914696124\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"11187\" width=\"20\" height=\"20\"><path d=\"M512 85.333333C276.266667 85.333333 85.333333 276.266667 85.333333 512a426.410667 426.410667 0 0 0 291.754667 404.821333c21.333333 3.712 29.312-9.088 29.312-20.309333 0-10.112-0.554667-43.690667-0.554667-79.445333-107.178667 19.754667-134.912-26.112-143.445333-50.133334-4.821333-12.288-25.6-50.133333-43.733333-60.288-14.933333-7.978667-36.266667-27.733333-0.554667-28.245333 33.621333-0.554667 57.6 30.933333 65.621333 43.733333 38.4 64.512 99.754667 46.378667 124.245334 35.2 3.754667-27.733333 14.933333-46.378667 27.221333-57.045333-94.933333-10.666667-194.133333-47.488-194.133333-210.688 0-46.421333 16.512-84.778667 43.733333-114.688-4.266667-10.666667-19.2-54.4 4.266667-113.066667 0 0 35.712-11.178667 117.333333 43.776a395.946667 395.946667 0 0 1 106.666667-14.421333c36.266667 0 72.533333 4.778667 106.666666 14.378667 81.578667-55.466667 117.333333-43.690667 117.333334-43.690667 23.466667 58.666667 8.533333 102.4 4.266666 113.066667 27.178667 29.866667 43.733333 67.712 43.733334 114.645333 0 163.754667-99.712 200.021333-194.645334 210.688 15.445333 13.312 28.8 38.912 28.8 78.933333 0 57.045333-0.554667 102.912-0.554666 117.333334 0 11.178667 8.021333 24.490667 29.354666 20.224A427.349333 427.349333 0 0 0 938.666667 512c0-235.733333-190.933333-426.666667-426.666667-426.666667z\" fill=\"#000000\" p-id=\"11188\"></path></svg> Github : <a href=\"https://github.com/liuheng2000\">https://github.com/liuheng2000</a></p>\n<h2 id=\"感谢\">感谢</h2>\n<blockquote>\n<ul>\n<li>本博客搭建学习于：<a href=\"https://butterfly.js.org/posts/4aa8abbe/\">https://butterfly.js.org/posts/4aa8abbe/</a></li>\n<li>个人介绍参考：<a href=\"https://imlql.cn/\">https://imlql.cn/</a></li>\n</ul>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p><svg t=\"1601711640550\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"16881\" width=\"20\" height=\"20\"><path d=\"M512 1024C229.233778 1024 0 794.766222 0 512 0 229.233778 229.233778 0 512 0 794.766222 0 1024 229.233778 1024 512 1024 794.766222 794.766222 1024 512 1024ZM512 56.888889C260.664889 56.888889 56.888889 260.636444 56.888889 512 56.888889 763.363556 260.664889 967.111111 512 967.111111 763.363556 967.111111 967.111111 763.363556 967.111111 512 967.111111 260.636444 763.363556 56.888889 512 56.888889ZM853.333333 711.111111 796.444444 711.111111C796.444444 632.576 732.757333 568.888889 654.222222 568.888889 575.658667 568.888889 512 632.576 512 711.111111L455.111111 711.111111C455.111111 634.254222 498.716444 567.694222 562.460444 534.499556 531.854222 508.416 512 470.044444 512 426.666667 512 348.131556 575.658667 284.444444 654.222222 284.444444 732.757333 284.444444 796.444444 348.131556 796.444444 426.666667 796.444444 470.044444 776.618667 508.416 745.984 534.499556 809.728 567.694222 853.333333 634.254222 853.333333 711.111111ZM654.222222 341.333333C607.089778 341.333333 568.888889 379.534222 568.888889 426.666667 568.888889 473.799111 607.089778 512 654.222222 512 701.354667 512 739.555556 473.799111 739.555556 426.666667 739.555556 379.534222 701.354667 341.333333 654.222222 341.333333ZM199.111111 512 455.111111 512 455.111111 568.888889 199.111111 568.888889 199.111111 512ZM199.111111 369.777778 455.111111 369.777778 455.111111 426.666667 199.111111 426.666667 199.111111 369.777778ZM398.222222 711.111111 199.111111 711.111111 199.111111 654.222222 398.222222 654.222222 398.222222 711.111111Z\" p-id=\"16882\" fill=\"#1296db\"></path></svg>基本情况：断线的风筝飞向青空</p>\n<p><svg t=\"1601711695301\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"17448\" width=\"20\" height=\"20\"><path d=\"M868.519 445.735L549.715 768.292l-228.24-230.917 318.798-322.548c1.088-1.089 2.17-1.082 3.245-0.01l225 227.65c0.532 0.543 0.65 1.185 0.65 1.638 0 0.445-0.118 1.084-0.65 1.63zM428.094 823.403c-0.168 0.04-0.55 0-0.306 0.256L267.089 661.157c-0.078-0.165-0.102-0.586-0.31-0.244l50.922-79.907 188.904 191.117-78.511 51.28z m-84.957-4.258l-28.832-0.827-57.095-57.765 30.652-31.013 71.924 72.767-16.649 16.838z m378.038-625.127L889.092 363.91c3.81 3.854 3.81 10.372-0.007 14.232l-18.622 18.84-181.98-184.121 18.623-18.843c3.808-3.854 10.26-3.854 14.069 0z m191.368 146.165L744.624 170.289c-16.8-17.01-44.165-17.01-60.968 0l-18.81 19.035c-6.407-5.55-14.395-8.718-22.944-8.718-9.478 0-18.385 3.724-25.07 10.486L274.578 537.375l19.133 19.359-54.813 86.004c-8.226 12.915-6.335 30.854 4.404 41.713l21.111 21.36-54.102 54.742 89.873 90.928 56.299 1.613 26.751-27.06 21.114 21.358c6.256 6.338 14.886 9.627 23.52 9.627 6.192 0 12.391-1.69 17.716-5.18l85.003-55.452 19.128 19.355 342.253-346.28c6.685-6.764 10.365-15.777 10.365-25.373-0.004-8.637-3.134-16.71-8.61-23.187l18.813-19.033c16.81-17.006 16.815-44.678 0.007-61.686z\" fill=\"#d81e06\" p-id=\"17449\"></path></svg>昵称：<span style=\"color:skyblue;font-weight:bolder\">青云</span> &……青空之云</p>\n<p><svg t=\"1601711340026\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"14072\" width=\"20\" height=\"20\"><path d=\"M833.536 667.136h-256l74.24-106.496c2.048-3.072 5.12-5.632 8.704-7.68 74.752-40.448 121.344-118.272 121.344-203.776 0-127.488-102.912-230.912-229.376-230.912S322.56 222.208 322.56 349.696c0 84.992 46.592 163.328 121.344 203.776 3.584 2.048 6.656 4.608 8.704 7.68l74.24 106.496H315.392l-178.688 250.368h857.6l-160.768-250.88z\" fill=\"#17E6A1\" p-id=\"14073\"></path><path d=\"M377.344 593.408l113.664 161.792c7.68 11.264 23.04 13.824 33.792 6.144 2.048-1.536 4.096-3.584 6.144-6.144l113.664-161.792c86.016-48.128 138.752-138.752 138.752-237.568 0-150.016-122.368-272.384-272.384-272.384S238.592 205.312 238.592 355.84c0 98.816 52.736 188.928 138.752 237.568z m133.632-461.312c123.392 0 223.744 100.352 223.744 223.744 0 82.432-45.056 158.208-118.272 197.12-3.584 2.048-6.144 4.608-8.192 7.68l-97.28 137.728-97.28-137.728c-2.048-3.072-5.12-5.632-8.192-7.68-72.704-38.912-118.272-114.688-118.272-197.12 0-123.392 100.352-223.744 223.744-223.744z m0 345.6c68.096 0 123.392-55.296 123.392-123.392s-55.296-123.392-123.392-123.392S387.584 286.72 387.584 354.816c0 67.584 55.296 122.88 123.392 122.88z m0-197.632c40.96 0 74.24 33.28 74.24 74.24s-33.28 74.24-74.24 74.24-74.24-33.28-74.24-74.24c0-40.448 33.28-74.24 74.24-74.24z m471.552 649.216c-4.096 7.68-12.288 11.264-21.504 11.264H60.416c-8.704 0-16.896-3.584-21.504-11.264-4.096-7.68-4.096-16.384 0.512-24.064l147.456-242.176c4.608-7.168 12.288-12.8 20.992-12.8H358.4c13.312 0 24.576 11.264 24.576 24.576s-10.752 24.576-24.576 24.576H221.696l-117.76 191.488h813.568l-117.248-191.488h-136.704c-13.312 0-24.576-11.264-24.576-24.576s10.752-24.576 24.576-24.576H814.08c8.704 0 16.384 6.144 20.992 13.312l147.456 241.152c4.096 7.168 4.608 16.896 0 24.576z\" fill=\"#272636\" p-id=\"14074\"></path></svg>地址：梦想家</p>\n<p><svg t=\"1601712171407\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"13058\" width=\"20\" height=\"20\"><path d=\"M597.172 531.547c-9.668-9.857-9.514-25.686 0.344-35.353 9.857-9.668 25.686-9.514 35.353 0.343L941.85 811.58c9.667 9.858 9.514 25.686-0.344 35.354-9.857 9.668-25.686 9.514-35.354-0.343L597.172 531.547zM117.85 846.59c-9.668 9.857-25.497 10.01-35.354 0.343-9.858-9.668-10.011-25.496-0.344-35.354l308.98-315.042c9.667-9.857 25.496-10.011 35.353-0.343 9.858 9.667 10.012 25.496 0.344 35.353L117.848 846.59z\" fill=\"#85A5FF\" p-id=\"13059\"></path><path d=\"M82.151 216.505c-9.667-9.857-9.514-25.686 0.344-35.354 9.857-9.667 25.686-9.514 35.354 0.344l340.605 347.29c29.004 29.572 76.489 30.033 106.061 1.03 0.347-0.34 0.69-0.684 1.03-1.03l340.606-347.29c9.668-9.858 25.497-10.011 35.354-0.344 9.858 9.668 10.011 25.497 0.344 35.354l-340.606 347.29a125 125 0 0 1-1.718 1.717c-49.287 48.339-128.429 47.57-176.768-1.718L82.151 216.505z\" fill=\"#2F54EB\" p-id=\"13060\"></path><path d=\"M95 191v643h835V191H95z m0-60h835c33.137 0 60 26.863 60 60v643c0 33.137-26.863 60-60 60H95c-33.137 0-60-26.863-60-60V191c0-33.137 26.863-60 60-60z\" fill=\"#2F54EB\" p-id=\"13061\"></path></svg>邮箱：<a href=\"mailto:2221461606@qq.com\">1553385162@qq.com</a> </p>\n<p><svg t=\"1601711468901\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"15267\" width=\"20\" height=\"20\"><path d=\"M803.4 963c-32.8 0-65.2-12.8-89.2-36.6-36-36-46.4-90-27.6-136.4L293.2 396.4c-46.2 18.8-100.4 8.4-136.4-27.6-36.4-36.4-47-92.8-26-139.8 2.6-6 8.2-10.4 14.6-11.6 6.4-1.2 13.2 0.8 17.8 5.6l46.6 46.6 38.4-38.4-46.6-46.6c-4.6-4.6-6.8-11.4-5.6-17.8 1.2-6.4 5.6-12 11.6-14.6 47.2-21 103.4-10.4 139.8 26 36 36 46.4 90 27.6 136.4L768.8 708c46.2-18.8 100.4-8.4 136.4 27.6 36.4 36.4 47 92.8 26 139.8-2.6 6-8.2 10.4-14.6 11.6-6.4 1.2-13.2-0.8-17.8-5.6L852 834.8l-38.4 38.4 46.6 46.6c4.6 4.6 6.8 11.4 5.6 17.8-1.2 6.4-5.6 12-11.6 14.6-16.2 7.2-33.6 10.8-50.8 10.8z m-506-610.6c5.2 0 10.2 2 14.2 5.8l413.6 413.6c6.4 6.4 7.6 16 3.4 24-18.6 33.2-12.8 75.4 14.2 102.4 17.2 17.2 40.6 25.8 64.2 25l-35.4-35.4c-3.8-3.8-5.8-8.8-5.8-14.2s2.2-10.4 5.8-14.2l66.8-66.8c7.8-7.8 20.4-7.8 28.2 0L902 828c1-23.4-7.8-47-25-64.2-27-27-69.2-32.8-102.4-14.2-7.8 4.4-17.6 3-24-3.4L337 332.8c-6.4-6.4-7.6-16-3.4-24 18.6-33.2 12.8-75.4-14.2-102.4-17.2-17.2-40.6-25.8-64.2-25l35.4 35.4c3.8 3.8 5.8 8.8 5.8 14.2s-2.2 10.4-5.8 14.2L224 312c-3.8 3.8-8.8 5.8-14.2 5.8-5.4 0-10.4-2.2-14.2-5.8l-35.4-35.4c-1 23.4 7.8 47 25 64.2 27 27 69.2 32.8 102.4 14.2 3-1.8 6.4-2.6 9.8-2.6z\" fill=\"#d4237a\" p-id=\"15268\"></path><path d=\"M218.6 950.2c-5.4 0-10.4-2.2-14.2-5.8l-65.4-65.4c-3.8-3.8-5.8-8.8-5.8-14.2s2.2-10.4 5.8-14.2l262.4-262.4c7.8-7.8 20.4-7.8 28.2 0 7.8 7.8 7.8 20.4 0 28.2l-248 248.4 37 37 248.2-248.2c7.8-7.8 20.4-7.8 28.2 0 7.8 7.8 7.8 20.4 0 28.2L232.8 944.4c-3.8 3.6-9 5.8-14.2 5.8zM648.2 516c-5.2 0-10.2-2-14.2-5.8-7.8-7.8-7.8-20.4 0-28.2l188.2-188.2c6.6-6.6 17.2-7.8 25-2.6 0.6 0.4 15.8 10.4 37.2 31.8 12 12 25.2 31.4 37 51.2-2.6-33.4-9.6-72.4-26-105.8-27-54.8-102.6-129.6-134-159.4l-48 48 71.4 71.4c7.8 7.8 7.8 20.4 0 28.2l-188.2 188.2c-7.8 7.8-20.4 7.8-28.2 0-7.8-7.8-7.8-20.4 0-28.2l174-174-71.4-71.4c-7.8-7.8-7.8-20.4 0-28.2l75.6-75.6c7.6-7.6 19.6-7.8 27.6-0.8 4.8 4.4 119.4 107.8 157 184.4 42.8 86.8 30 199.6 29.4 204.4-1 8.8-7.8 16-16.6 17.4-8.8 1.4-17.4-3.2-21.4-11.2-10.8-23-44-87.6-66.6-110-7-7-13.2-12.6-18-16.6L662.4 510c-4 4-9 6-14.2 6z\" fill=\"#d4237a\" p-id=\"15269\"></path></svg>技术方向：Java，Python</p>\n<p><i class=\"icon-geyan\">格言</i><br>\n<i></p>\n<div>想这些年总是把期待明天挂在嘴边</div>\n<div>大多数的日子里却只活着今天</div>\n<div>如果都是快乐的话，其实也没有差。</div>\n<div>我觉得我的未来，依然是一片光明。</div>\n</i>\n<h1 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h1>\n<div class=\"justified-gallery\"><p><img src=\"https://cdn.jsdelivr.net/gh/youthlql/youthlql/img/java.svg\" alt=\"JAVA\"><br><img src=\"https://cdn.jsdelivr.net/gh/youthlql/youthlql/img/mysql.png\" alt=\"MySql\"><br><img src=\"https://cdn.jsdelivr.net/gh/youthlql/youthlql/img/spring.png\" alt=\"Spring\"></p>\n          </div>\n<h1>常用平台</h1>\n<h2 id=\"博客\">博客</h2>\n<p><svg t=\"1637914533425\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"9695\" width=\"20\" height=\"20\"><path d=\"M606.208 307.2H307.2a30.72 30.72 0 0 0 0 61.44h296.96a30.72 30.72 0 1 0 0-61.44zM633.856 506.368a30.72 30.72 0 0 0-30.72-30.72H307.2a30.72 30.72 0 0 0 0 61.44h296.96a30.72 30.72 0 0 0 29.696-30.72zM313.856 644.096a30.72 30.72 0 0 0-30.72 30.72 30.208 30.208 0 0 0 30.72 30.72h208.384a30.72 30.72 0 0 0 30.72-30.72 30.72 30.72 0 0 0-30.72-30.72zM921.6 274.432a38.4 38.4 0 0 0-51.2 13.824l-245.76 425.472a37.888 37.888 0 0 0 13.824 51.2 38.4 38.4 0 0 0 51.2-14.336l245.248-425.472a37.888 37.888 0 0 0-13.312-50.688z\" fill=\"#FF9746\" p-id=\"9696\"></path><path d=\"M778.24 735.744a38.4 38.4 0 0 0-38.4 38.4v72.192a12.8 12.8 0 0 1-12.8 12.8H204.8a12.8 12.8 0 0 1-12.8-12.8V170.496A12.8 12.8 0 0 1 204.8 157.696h522.24a12.8 12.8 0 0 1 12.8 12.8v97.28a38.4 38.4 0 0 0 76.8 0v-97.28a89.6 89.6 0 0 0-89.6-89.6H204.8a90.112 90.112 0 0 0-89.6 89.6v675.84A89.6 89.6 0 0 0 204.8 935.936h522.24a89.6 89.6 0 0 0 92.16-89.6v-72.192a37.888 37.888 0 0 0-40.96-38.4z\" fill=\"#FF9746\" p-id=\"9697\"></path></svg> 自建博客: qingyun.run</p>\n<h2 id=\"社区\">社区</h2>\n<p><svg t=\"1637914696124\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"11187\" width=\"20\" height=\"20\"><path d=\"M512 85.333333C276.266667 85.333333 85.333333 276.266667 85.333333 512a426.410667 426.410667 0 0 0 291.754667 404.821333c21.333333 3.712 29.312-9.088 29.312-20.309333 0-10.112-0.554667-43.690667-0.554667-79.445333-107.178667 19.754667-134.912-26.112-143.445333-50.133334-4.821333-12.288-25.6-50.133333-43.733333-60.288-14.933333-7.978667-36.266667-27.733333-0.554667-28.245333 33.621333-0.554667 57.6 30.933333 65.621333 43.733333 38.4 64.512 99.754667 46.378667 124.245334 35.2 3.754667-27.733333 14.933333-46.378667 27.221333-57.045333-94.933333-10.666667-194.133333-47.488-194.133333-210.688 0-46.421333 16.512-84.778667 43.733333-114.688-4.266667-10.666667-19.2-54.4 4.266667-113.066667 0 0 35.712-11.178667 117.333333 43.776a395.946667 395.946667 0 0 1 106.666667-14.421333c36.266667 0 72.533333 4.778667 106.666666 14.378667 81.578667-55.466667 117.333333-43.690667 117.333334-43.690667 23.466667 58.666667 8.533333 102.4 4.266666 113.066667 27.178667 29.866667 43.733333 67.712 43.733334 114.645333 0 163.754667-99.712 200.021333-194.645334 210.688 15.445333 13.312 28.8 38.912 28.8 78.933333 0 57.045333-0.554667 102.912-0.554666 117.333334 0 11.178667 8.021333 24.490667 29.354666 20.224A427.349333 427.349333 0 0 0 938.666667 512c0-235.733333-190.933333-426.666667-426.666667-426.666667z\" fill=\"#000000\" p-id=\"11188\"></path></svg> Github : <a href=\"https://github.com/liuheng2000\">https://github.com/liuheng2000</a></p>\n<h2 id=\"感谢\">感谢</h2>\n<blockquote>\n<ul>\n<li>本博客搭建学习于：<a href=\"https://butterfly.js.org/posts/4aa8abbe/\">https://butterfly.js.org/posts/4aa8abbe/</a></li>\n<li>个人介绍参考：<a href=\"https://imlql.cn/\">https://imlql.cn/</a></li>\n</ul>\n</blockquote>\n"},{"title":"留言板","date":"2021-11-24T08:36:35.000Z","_content":"\n\n\n","source":"messageboard/index.md","raw":"---\ntitle: 留言板\ndate: 2021-11-24 16:36:35\n---\n\n\n\n","updated":"2021-11-24T09:20:26.370Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"ckwpqg2qu0002o4vbg9yl189f","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":""},{"_content":"{\n    \"name\": \"string\",\n    \"short_name\": \"Junzhou\",\n    \"theme_color\": \"#49b1f5\",\n    \"background_color\": \"#49b1f5\",\n    \"display\": \"standalone\",\n    \"scope\": \"/\",\n    \"start_url\": \"/\",\n    \"icons\": [{\n            \"src\": \"images/pwaicons/36.png\",\n            \"sizes\": \"36x36\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/48.png\",\n            \"sizes\": \"48x48\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/72.png\",\n            \"sizes\": \"72x72\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/96.png\",\n            \"sizes\": \"96x96\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/144.png\",\n            \"sizes\": \"144x144\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/192.png\",\n            \"sizes\": \"192x192\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/512.png\",\n            \"sizes\": \"512x512\",\n            \"type\": \"image/png\"\n        }\n    ],\n    \"splash_pages\": null\n}","source":"manifest.json","raw":"{\n    \"name\": \"string\",\n    \"short_name\": \"Junzhou\",\n    \"theme_color\": \"#49b1f5\",\n    \"background_color\": \"#49b1f5\",\n    \"display\": \"standalone\",\n    \"scope\": \"/\",\n    \"start_url\": \"/\",\n    \"icons\": [{\n            \"src\": \"images/pwaicons/36.png\",\n            \"sizes\": \"36x36\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/48.png\",\n            \"sizes\": \"48x48\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/72.png\",\n            \"sizes\": \"72x72\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/96.png\",\n            \"sizes\": \"96x96\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/144.png\",\n            \"sizes\": \"144x144\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/192.png\",\n            \"sizes\": \"192x192\",\n            \"type\": \"image/png\"\n        },\n        {\n            \"src\": \"images/pwaicons/512.png\",\n            \"sizes\": \"512x512\",\n            \"type\": \"image/png\"\n        }\n    ],\n    \"splash_pages\": null\n}","date":"2021-11-25T01:56:11.882Z","updated":"2021-11-25T01:56:11.882Z","path":"manifest.json","layout":"false","title":"","comments":1,"_id":"ckwpqg2qx0006o4vbab9625dt","content":"{\"name\":\"string\",\"short_name\":\"Junzhou\",\"theme_color\":\"#49b1f5\",\"background_color\":\"#49b1f5\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"images/pwaicons/36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":null}","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"{\"name\":\"string\",\"short_name\":\"Junzhou\",\"theme_color\":\"#49b1f5\",\"background_color\":\"#49b1f5\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"images/pwaicons/36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":null}"},{"title":"友情鏈接","date":"2018-06-07T14:17:49.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: 友情鏈接\ndate: 2018-06-07 22:17:49\ntype: \"link\"\n---\n","updated":"2021-11-24T11:49:05.000Z","path":"link/index.html","comments":1,"layout":"page","_id":"ckwpqg2qz0008o4vb2n257tit","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":""},{"title":"music","date":"2021-11-24T12:26:43.000Z","aplayer":true,"_content":"\n\n{% meting \"60198\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\"  \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\" \"mini\" %}\n\n\n\n\n作者: Jerry\n連結: https://butterfly.js.org/posts/507c070f/#%E5%89%8D%E8%A8%80\n來源: Butterfly\n著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。\n","source":"music/index.md","raw":"---\ntitle: music\ndate: 2021-11-24 20:26:43\naplayer: true\n---\n\n\n{% meting \"60198\" \"netease\" \"playlist\" \"autoplay\" \"mutex:false\"  \"listmaxheight:340px\" \"preload:none\" \"theme:#ad7a86\" \"mini\" %}\n\n\n\n\n作者: Jerry\n連結: https://butterfly.js.org/posts/507c070f/#%E5%89%8D%E8%A8%80\n來源: Butterfly\n著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。\n","updated":"2021-11-26T12:15:55.252Z","path":"music/index.html","comments":1,"layout":"page","_id":"ckwpqg2r0000ao4vb3j78f1a7","content":"\n    <div id=\"aplayer-cpecSgHY\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"60198\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"false\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\" data-mini=\"true\"\n    ></div>\n<p>作者: Jerry<br>\n連結: <a href=\"https://butterfly.js.org/posts/507c070f/#%E5%89%8D%E8%A8%80\">https://butterfly.js.org/posts/507c070f/#前言</a><br>\n來源: Butterfly<br>\n著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com - 304024 sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"\n    <div id=\"aplayer-cpecSgHY\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"60198\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"true\" data-mutex=\"false\" data-listmaxheight=\"340px\" data-preload=\"none\" data-theme=\"#ad7a86\" data-mini=\"true\"\n    ></div>\n<p>作者: Jerry<br>\n連結: <a href=\"https://butterfly.js.org/posts/507c070f/#%E5%89%8D%E8%A8%80\">https://butterfly.js.org/posts/507c070f/#前言</a><br>\n來源: Butterfly<br>\n著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</p>\n"},{"title":"分类","date":"2018-01-04T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---\n","updated":"2021-11-26T08:24:41.324Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckwpqg2r3000eo4vb1by88uql","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com - 304024 sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":""},{"title":"测试界面","date":"2021-11-24T11:59:17.000Z","_content":"\n<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/Gallery/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/Gallery/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/Gallery/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n</div>\n\n\n{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)\n![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)\n![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)\n![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)\n![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)\n![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)\n{% endgallery %}\n\n\nThis is my website, click the button {% btn 'https://butterfly.js.org',Butterfly %}\nThis is my website, click the button {% btn 'https://butterfly.js.org',Butterfly,,outline%}\n\n\nThis is my website, click the button  {% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,block larger %}\nThis is my website, click the button  {% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,block center larger %}\nThis is my website, click the button  {% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,block right blue larger %}\n\n\n<div class=\"btn-center\">\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,larger %}\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,blue larger %}\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,pink larger %}\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,red larger %}\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,purple larger %}\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,orange larger %}\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,green larger %}\n</div>\n\n\n\n作者: Jerry\n連結: https://butterfly.js.org/posts/2df239ce/#Inline\n來源: Butterfly\n著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。\n","source":"qingyun/index.md","raw":"---\ntitle: 测试界面\ndate: 2021-11-24 19:59:17\n---\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/Gallery/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/Gallery/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/Gallery/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n</div>\n\n\n{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)\n![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)\n![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)\n![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)\n![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)\n![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)\n{% endgallery %}\n\n\nThis is my website, click the button {% btn 'https://butterfly.js.org',Butterfly %}\nThis is my website, click the button {% btn 'https://butterfly.js.org',Butterfly,,outline%}\n\n\nThis is my website, click the button  {% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,block larger %}\nThis is my website, click the button  {% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,block center larger %}\nThis is my website, click the button  {% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,block right blue larger %}\n\n\n<div class=\"btn-center\">\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,larger %}\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,blue larger %}\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,pink larger %}\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,red larger %}\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,purple larger %}\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,orange larger %}\n{% btn 'https://butterfly.js.org',Butterfly,far fa-hand-point-right,green larger %}\n</div>\n\n\n\n作者: Jerry\n連結: https://butterfly.js.org/posts/2df239ce/#Inline\n來源: Butterfly\n著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。\n","updated":"2021-11-24T12:27:10.393Z","path":"qingyun/index.html","comments":1,"layout":"page","_id":"ckwpqg2r5000go4vbgxa5bc3s","content":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁紙</div>\n  <p>收藏的一些壁紙</p>\n  <a href='/Gallery/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>關於漫威的圖片</p>\n  <a href='/Gallery/marvel'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">OH MY GIRL</div>\n  <p>關於OH MY GIRL的圖片</p>\n  <a href='/Gallery/ohmygirl'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n<div class=\"justified-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg\" alt=\"\"></p>\n          </div>\n<p>This is my website, click the button <a class=\"btn-beautify button--animated \" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><span>Butterfly</span></a><br>\nThis is my website, click the button <a class=\"btn-beautify button--animated outline\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><span>Butterfly</span></a></p>\n<p>This is my website, click the button  <a class=\"btn-beautify button--animated block larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a><br>\nThis is my website, click the button  <a class=\"btn-beautify button--animated block center larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a><br>\nThis is my website, click the button  <a class=\"btn-beautify button--animated block right blue larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a></p>\n<div class=\"btn-center\">\n<a class=\"btn-beautify button--animated larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated blue larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated pink larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated red larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated purple larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated orange larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated green larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n</div>\n<p>作者: Jerry<br>\n連結: <a href=\"https://butterfly.js.org/posts/2df239ce/#Inline\">https://butterfly.js.org/posts/2df239ce/#Inline</a><br>\n來源: Butterfly<br>\n著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com - 304024 sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁紙</div>\n  <p>收藏的一些壁紙</p>\n  <a href='/Gallery/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>關於漫威的圖片</p>\n  <a href='/Gallery/marvel'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">OH MY GIRL</div>\n  <p>關於OH MY GIRL的圖片</p>\n  <a href='/Gallery/ohmygirl'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n<div class=\"justified-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg\" alt=\"\"></p>\n          </div>\n<p>This is my website, click the button <a class=\"btn-beautify button--animated \" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><span>Butterfly</span></a><br>\nThis is my website, click the button <a class=\"btn-beautify button--animated outline\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><span>Butterfly</span></a></p>\n<p>This is my website, click the button  <a class=\"btn-beautify button--animated block larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a><br>\nThis is my website, click the button  <a class=\"btn-beautify button--animated block center larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a><br>\nThis is my website, click the button  <a class=\"btn-beautify button--animated block right blue larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a></p>\n<div class=\"btn-center\">\n<a class=\"btn-beautify button--animated larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated blue larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated pink larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated red larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated purple larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated orange larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n<a class=\"btn-beautify button--animated green larger\" href=\"https://butterfly.js.org\" \n  title=\"Butterfly\"><i class=\"far fa-hand-point-right\"></i><span>Butterfly</span></a>\n</div>\n<p>作者: Jerry<br>\n連結: <a href=\"https://butterfly.js.org/posts/2df239ce/#Inline\">https://butterfly.js.org/posts/2df239ce/#Inline</a><br>\n來源: Butterfly<br>\n著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</p>\n"},{"title":"標籤","date":"2018-01-04T16:00:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 標籤\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\n---\n","updated":"2021-11-24T11:48:02.514Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckwpqg2r7000mo4vb679fcrx8","content":"","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":""}],"Post":[{"title":"2021/11/24  力扣","abbrlink":112503250,"date":"2021-11-29T01:06:51.000Z","_content":"### 2021/11/24  力扣\n\n[8. 字符串转换整数 (atoi)](https://leetcode-cn.com/problems/string-to-integer-atoi/)\n\n请你来实现一个 `myAtoi(string s)` 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 `atoi` 函数）。\n\n函数 `myAtoi(string s)` 的算法如下：\n\n- ![image-20211124105949207](http://typa.qingyun.run/img/image-20211124105949207.png?x-oss-process=style/qingyun)\n\n- 文字题解\n  方法一：自动机\n\n  思路\n\n  字符串处理的题目往往涉及复杂的流程以及条件情况，如果直接上手写程序，一不小心就会写出极其臃肿的代码。\n\n  因此，为了有条理地分析每个输入字符的处理方法，我们可以使用自动机这个概念：\n\n  我们的程序在每个时刻有一个状态` s`，每次从序列中输入一个字符` c`，并根据字符 `c` 转移到下一个状态 `s'`。这样，我们只需要建立一个覆盖所有情况的从` s 与 c` 映射到 `s' `的表格即可解决题目中的问题。\n\n  算法\n\n  本题可以建立如下图所示的自动机：\n\n  \n\n  ![image-20211124110116544](http://typa.typa.qingyun.run/img/image-20211124110116544.png?x-oss-process=style/qingyun)![image-20211124110141942](http://typa.qingyun.run/img/image-20211124110141942.png?x-oss-process=style/qingyun)\n\n  ```java\n  class Solution {\n      public int myAtoi(String str) {\n          Automaton automaton = new Automaton();\n          int length = str.length();\n          for (int i = 0; i < length; ++i) {\n              automaton.get(str.charAt(i));\n          }\n          return (int) (automaton.sign * automaton.ans);\n      }\n  }\n  \n  class Automaton {\n      public int sign = 1;\n      public long ans = 0;\n      private String state = \"start\";\n      private Map<String, String[]> table = new HashMap<String, String[]>() {{\n          put(\"start\", new String[]{\"start\", \"signed\", \"in_number\", \"end\"});\n          put(\"signed\", new String[]{\"end\", \"end\", \"in_number\", \"end\"});\n          put(\"in_number\", new String[]{\"end\", \"end\", \"in_number\", \"end\"});\n          put(\"end\", new String[]{\"end\", \"end\", \"end\", \"end\"});\n      }};\n  \n      public void get(char c) {\n          state = table.get(state)[get_col(c)];\n          if (\"in_number\".equals(state)) {\n              ans = ans * 10 + c - '0';\n              ans = sign == 1 ? Math.min(ans, (long) Integer.MAX_VALUE) : Math.min(ans, -(long) Integer.MIN_VALUE);\n          } else if (\"signed\".equals(state)) {\n              sign = c == '+' ? 1 : -1;\n          }\n      }\n  \n      private int get_col(char c) {\n          if (c == ' ') {\n              return 0;\n          }\n          if (c == '+' || c == '-') {\n              return 1;\n          }\n          if (Character.isDigit(c)) {\n              return 2;\n          }\n          return 3;\n      }\n  }\n  ```\n\n  [34. 在排序数组中查找元素的第一个和最后一个位置](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/)\n\n  给定一个按照升序排列的整数数组 `nums`，和一个目标值 `target`。找出给定目标值在数组中的开始位置和结束位置。\n\n  如果数组中不存在目标值 `target`，返回` [-1, -1]`。\n\n  进阶：\n\n  - 你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？\n\n  **示例 1：**\n\n  ```\n  输入：nums = [5,7,7,8,8,10], target = 8\n  输出：[3,4]\n  ```\n\n  **示例 2：**\n\n  ```\n  输入：nums = [5,7,7,8,8,10], target = 6\n  输出：[-1,-1]\n  ```\n\n  **示例 3：**\n\n  ```\n  输入：nums = [], target = 0\n  输出：[-1,-1]\n  ```\n\n  ![image-20211124110459722](http://typa.qingyun.run/img/image-20211124110459722.png?x-oss-process=style/qingyun)\n\n  ```java\n  class Solution {\n      public int[] searchRange(int[] nums, int target) {\n          int length = nums.length;\n          if (length == 0){\n              return new int[]{-1,-1};\n          }\n          if(length == 1){\n              if(nums[0] == target){\n                  return new int[]{0,0};\n              }else{\n                   return new int[]{-1,-1};\n              }\n          }\n          int firstPosition = findfirstPosition(nums,target);\n          if (firstPosition == -1){\n              return new int[]{-1,-1};\n          }\n           int lastPosition = findLastPosition(nums,target);\n          return new int[]{firstPosition,lastPosition};\n      }\n  \n      private int findLastPosition(int[] nums, int target) {\n          int left = 0;\n          int right = nums.length - 1;\n          while (left < right) {\n              int mid = (left + right+1) >>> 1;\n              if (nums[mid] < target) {\n                  left = mid + 1;\n                \n              } else if (nums[mid] > target) {\n                  right = mid - 1;\n                \n              } else if (nums[mid] == target) {\n                  left = mid;\n                  \n              }\n          }\n          return left;\n      }\n  \n      private int findfirstPosition(int[] nums, int target) {\n          int left = 0;\n          int right = nums.length -1;\n          while (left < right){\n              int mid = (left+right) >>> 1;\n              if (nums[mid] < target){\n                  //下一轮搜索的区间是【mid + 1,right】\n                  left =mid+1;\n              }else if (nums[mid] > target){\n                  //下一轮搜索的区间是【left,mid-1】\n                  right = mid -1;\n              }else if (nums[mid] == target){\n                  //下一轮搜索的区间是【left,mid】\n                  right = mid;\n              }\n                  if (nums[left] == target){\n                      return left;\n                  }\n          }\n          return -1;\n      }\n  }\n  ```\n\n  [33. 搜索旋转排序数组](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/)\n\n  整数数组` nums` 按升序排列，数组中的值 互不相同 。\n\n  在传递给函数之前，nums 在预先未知的某个下标 `k（0 <= k < nums.length）`上进行了 旋转，使数组变为 `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]`（下标 **从 0 开始** 计数）。例如， `[0,1,2,4,5,6,7] `在下标 3 处经旋转后可能变为 `[4,5,6,7,0,1,2]` 。\n\n  给你 旋转后 的数组 `nums `和一个整数 `target `，如果 `nums `中存在这个目标值 `target `，则返回它的下标，否则返回 `-1` 。\n\n  **示例 1：**\n\n  ```\n  输入：nums = [4,5,6,7,0,1,2], target = 0\n  输出：4\n  ```\n\n  **示例 2：**\n\n  ```\n  输入：nums = [4,5,6,7,0,1,2], target = 3\n  输出：-1\n  ```\n\n  **示例 3：**\n\n  ```\n  输入：nums = [1], target = 0\n  输出：-1\n  ```\n\n\n  ![image-20211124110827526](http://typa.qingyun.run/img/image-20211124110827526.png?x-oss-process=style/qingyun)\n\n  ```java\nclass Solution {\n    public int search(int[] nums, int target) {\n        int n = nums.length;\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return nums[0] == target ? 0 : -1;\n        }\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            }\n            if (nums[0] <= nums[mid]) {\n                if (nums[0] <= target && target < nums[mid]) {\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            } else {\n                if (nums[mid] < target && target <= nums[n - 1]) {\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n}\n\n\n  ```\n\n  [74. 搜索二维矩阵](https://leetcode-cn.com/problems/search-a-2d-matrix/)\n\n  编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：\n\n      每行中的整数从左到右按升序排列。\n      每行的第一个整数大于前一行的最后一个整数。\n\n\n\n\n![img](http://typa.qingyun.run/img/mat.jpg?x-oss-process=style/qingyun)\n\n```\n输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n输出：true\n```\n\n```java\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int columns = matrix.length - 1, rows = 0;\n        while (columns >= 0 && rows < matrix[0].length) {\n            int num = matrix[columns][rows];\n            if (num == target) {\n                return true;\n            } else if (num > target) {\n               columns--;\n            } else {\n                rows++;\n            }\n        }\n        return false;\n    }\n}\n```\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/search-in-rotated-sorted-array/solution/sou-suo-xuan-zhuan-pai-xu-shu-zu-by-leetcode-solut/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n","source":"_posts/2021-11-24-力扣.md","raw":"---\ntitle: 2021/11/24  力扣\nabbrlink: 112503250\ndate: 2021-11-29 09:06:51\ntags:\n  - 力扣\n  - 算法题\ncategories: LeetCode\n---\n### 2021/11/24  力扣\n\n[8. 字符串转换整数 (atoi)](https://leetcode-cn.com/problems/string-to-integer-atoi/)\n\n请你来实现一个 `myAtoi(string s)` 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 `atoi` 函数）。\n\n函数 `myAtoi(string s)` 的算法如下：\n\n- ![image-20211124105949207](http://typa.qingyun.run/img/image-20211124105949207.png?x-oss-process=style/qingyun)\n\n- 文字题解\n  方法一：自动机\n\n  思路\n\n  字符串处理的题目往往涉及复杂的流程以及条件情况，如果直接上手写程序，一不小心就会写出极其臃肿的代码。\n\n  因此，为了有条理地分析每个输入字符的处理方法，我们可以使用自动机这个概念：\n\n  我们的程序在每个时刻有一个状态` s`，每次从序列中输入一个字符` c`，并根据字符 `c` 转移到下一个状态 `s'`。这样，我们只需要建立一个覆盖所有情况的从` s 与 c` 映射到 `s' `的表格即可解决题目中的问题。\n\n  算法\n\n  本题可以建立如下图所示的自动机：\n\n  \n\n  ![image-20211124110116544](http://typa.typa.qingyun.run/img/image-20211124110116544.png?x-oss-process=style/qingyun)![image-20211124110141942](http://typa.qingyun.run/img/image-20211124110141942.png?x-oss-process=style/qingyun)\n\n  ```java\n  class Solution {\n      public int myAtoi(String str) {\n          Automaton automaton = new Automaton();\n          int length = str.length();\n          for (int i = 0; i < length; ++i) {\n              automaton.get(str.charAt(i));\n          }\n          return (int) (automaton.sign * automaton.ans);\n      }\n  }\n  \n  class Automaton {\n      public int sign = 1;\n      public long ans = 0;\n      private String state = \"start\";\n      private Map<String, String[]> table = new HashMap<String, String[]>() {{\n          put(\"start\", new String[]{\"start\", \"signed\", \"in_number\", \"end\"});\n          put(\"signed\", new String[]{\"end\", \"end\", \"in_number\", \"end\"});\n          put(\"in_number\", new String[]{\"end\", \"end\", \"in_number\", \"end\"});\n          put(\"end\", new String[]{\"end\", \"end\", \"end\", \"end\"});\n      }};\n  \n      public void get(char c) {\n          state = table.get(state)[get_col(c)];\n          if (\"in_number\".equals(state)) {\n              ans = ans * 10 + c - '0';\n              ans = sign == 1 ? Math.min(ans, (long) Integer.MAX_VALUE) : Math.min(ans, -(long) Integer.MIN_VALUE);\n          } else if (\"signed\".equals(state)) {\n              sign = c == '+' ? 1 : -1;\n          }\n      }\n  \n      private int get_col(char c) {\n          if (c == ' ') {\n              return 0;\n          }\n          if (c == '+' || c == '-') {\n              return 1;\n          }\n          if (Character.isDigit(c)) {\n              return 2;\n          }\n          return 3;\n      }\n  }\n  ```\n\n  [34. 在排序数组中查找元素的第一个和最后一个位置](https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/)\n\n  给定一个按照升序排列的整数数组 `nums`，和一个目标值 `target`。找出给定目标值在数组中的开始位置和结束位置。\n\n  如果数组中不存在目标值 `target`，返回` [-1, -1]`。\n\n  进阶：\n\n  - 你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？\n\n  **示例 1：**\n\n  ```\n  输入：nums = [5,7,7,8,8,10], target = 8\n  输出：[3,4]\n  ```\n\n  **示例 2：**\n\n  ```\n  输入：nums = [5,7,7,8,8,10], target = 6\n  输出：[-1,-1]\n  ```\n\n  **示例 3：**\n\n  ```\n  输入：nums = [], target = 0\n  输出：[-1,-1]\n  ```\n\n  ![image-20211124110459722](http://typa.qingyun.run/img/image-20211124110459722.png?x-oss-process=style/qingyun)\n\n  ```java\n  class Solution {\n      public int[] searchRange(int[] nums, int target) {\n          int length = nums.length;\n          if (length == 0){\n              return new int[]{-1,-1};\n          }\n          if(length == 1){\n              if(nums[0] == target){\n                  return new int[]{0,0};\n              }else{\n                   return new int[]{-1,-1};\n              }\n          }\n          int firstPosition = findfirstPosition(nums,target);\n          if (firstPosition == -1){\n              return new int[]{-1,-1};\n          }\n           int lastPosition = findLastPosition(nums,target);\n          return new int[]{firstPosition,lastPosition};\n      }\n  \n      private int findLastPosition(int[] nums, int target) {\n          int left = 0;\n          int right = nums.length - 1;\n          while (left < right) {\n              int mid = (left + right+1) >>> 1;\n              if (nums[mid] < target) {\n                  left = mid + 1;\n                \n              } else if (nums[mid] > target) {\n                  right = mid - 1;\n                \n              } else if (nums[mid] == target) {\n                  left = mid;\n                  \n              }\n          }\n          return left;\n      }\n  \n      private int findfirstPosition(int[] nums, int target) {\n          int left = 0;\n          int right = nums.length -1;\n          while (left < right){\n              int mid = (left+right) >>> 1;\n              if (nums[mid] < target){\n                  //下一轮搜索的区间是【mid + 1,right】\n                  left =mid+1;\n              }else if (nums[mid] > target){\n                  //下一轮搜索的区间是【left,mid-1】\n                  right = mid -1;\n              }else if (nums[mid] == target){\n                  //下一轮搜索的区间是【left,mid】\n                  right = mid;\n              }\n                  if (nums[left] == target){\n                      return left;\n                  }\n          }\n          return -1;\n      }\n  }\n  ```\n\n  [33. 搜索旋转排序数组](https://leetcode-cn.com/problems/search-in-rotated-sorted-array/)\n\n  整数数组` nums` 按升序排列，数组中的值 互不相同 。\n\n  在传递给函数之前，nums 在预先未知的某个下标 `k（0 <= k < nums.length）`上进行了 旋转，使数组变为 `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]`（下标 **从 0 开始** 计数）。例如， `[0,1,2,4,5,6,7] `在下标 3 处经旋转后可能变为 `[4,5,6,7,0,1,2]` 。\n\n  给你 旋转后 的数组 `nums `和一个整数 `target `，如果 `nums `中存在这个目标值 `target `，则返回它的下标，否则返回 `-1` 。\n\n  **示例 1：**\n\n  ```\n  输入：nums = [4,5,6,7,0,1,2], target = 0\n  输出：4\n  ```\n\n  **示例 2：**\n\n  ```\n  输入：nums = [4,5,6,7,0,1,2], target = 3\n  输出：-1\n  ```\n\n  **示例 3：**\n\n  ```\n  输入：nums = [1], target = 0\n  输出：-1\n  ```\n\n\n  ![image-20211124110827526](http://typa.qingyun.run/img/image-20211124110827526.png?x-oss-process=style/qingyun)\n\n  ```java\nclass Solution {\n    public int search(int[] nums, int target) {\n        int n = nums.length;\n        if (n == 0) {\n            return -1;\n        }\n        if (n == 1) {\n            return nums[0] == target ? 0 : -1;\n        }\n        int l = 0, r = n - 1;\n        while (l <= r) {\n            int mid = (l + r) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            }\n            if (nums[0] <= nums[mid]) {\n                if (nums[0] <= target && target < nums[mid]) {\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            } else {\n                if (nums[mid] < target && target <= nums[n - 1]) {\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n        }\n        return -1;\n    }\n}\n\n\n  ```\n\n  [74. 搜索二维矩阵](https://leetcode-cn.com/problems/search-a-2d-matrix/)\n\n  编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：\n\n      每行中的整数从左到右按升序排列。\n      每行的第一个整数大于前一行的最后一个整数。\n\n\n\n\n![img](http://typa.qingyun.run/img/mat.jpg?x-oss-process=style/qingyun)\n\n```\n输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n输出：true\n```\n\n```java\nclass Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int columns = matrix.length - 1, rows = 0;\n        while (columns >= 0 && rows < matrix[0].length) {\n            int num = matrix[columns][rows];\n            if (num == target) {\n                return true;\n            } else if (num > target) {\n               columns--;\n            } else {\n                rows++;\n            }\n        }\n        return false;\n    }\n}\n```\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/search-in-rotated-sorted-array/solution/sou-suo-xuan-zhuan-pai-xu-shu-zu-by-leetcode-solut/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n","slug":"2021-11-24-力扣","published":1,"updated":"2021-11-29T01:07:54.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2qs0001o4vbeqkthhwb","content":"<h3 id=\"2021-11-24-力扣\">2021/11/24  力扣</h3>\n<p><a href=\"https://leetcode-cn.com/problems/string-to-integer-atoi/\">8. 字符串转换整数 (atoi)</a></p>\n<p>请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 <code>atoi</code> 函数）。</p>\n<p>函数 <code>myAtoi(string s)</code> 的算法如下：</p>\n<ul>\n<li>\n<p><img src=\"http://typa.qingyun.run/img/image-20211124105949207.png?x-oss-process=style/qingyun\" alt=\"image-20211124105949207\"></p>\n</li>\n<li>\n<p>文字题解<br>\n方法一：自动机</p>\n<p>思路</p>\n<p>字符串处理的题目往往涉及复杂的流程以及条件情况，如果直接上手写程序，一不小心就会写出极其臃肿的代码。</p>\n<p>因此，为了有条理地分析每个输入字符的处理方法，我们可以使用自动机这个概念：</p>\n<p>我们的程序在每个时刻有一个状态<code> s</code>，每次从序列中输入一个字符<code> c</code>，并根据字符 <code>c</code> 转移到下一个状态 <code>s'</code>。这样，我们只需要建立一个覆盖所有情况的从<code> s 与 c</code> 映射到 <code>s' </code>的表格即可解决题目中的问题。</p>\n<p>算法</p>\n<p>本题可以建立如下图所示的自动机：</p>\n<p><img src=\"http://typa.typa.qingyun.run/img/image-20211124110116544.png?x-oss-process=style/qingyun\" alt=\"image-20211124110116544\"><img src=\"http://typa.qingyun.run/img/image-20211124110141942.png?x-oss-process=style/qingyun\" alt=\"image-20211124110141942\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">myAtoi</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        Automaton automaton = <span class=\"keyword\">new</span> Automaton();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = str.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; ++i) &#123;</span><br><span class=\"line\">            automaton.get(str.charAt(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (automaton.sign * automaton.ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Automaton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> sign = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String state = <span class=\"string\">&quot;start&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String[]&gt; table = <span class=\"keyword\">new</span> HashMap&lt;String, String[]&gt;() &#123;&#123;</span><br><span class=\"line\">        put(<span class=\"string\">&quot;start&quot;</span>, <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;start&quot;</span>, <span class=\"string\">&quot;signed&quot;</span>, <span class=\"string\">&quot;in_number&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;);</span><br><span class=\"line\">        put(<span class=\"string\">&quot;signed&quot;</span>, <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;in_number&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;);</span><br><span class=\"line\">        put(<span class=\"string\">&quot;in_number&quot;</span>, <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;in_number&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;);</span><br><span class=\"line\">        put(<span class=\"string\">&quot;end&quot;</span>, <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;);</span><br><span class=\"line\">    &#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        state = table.get(state)[get_col(c)];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;in_number&quot;</span>.equals(state)) &#123;</span><br><span class=\"line\">            ans = ans * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">            ans = sign == <span class=\"number\">1</span> ? Math.min(ans, (<span class=\"keyword\">long</span>) Integer.MAX_VALUE) : Math.min(ans, -(<span class=\"keyword\">long</span>) Integer.MIN_VALUE);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;signed&quot;</span>.equals(state)) &#123;</span><br><span class=\"line\">            sign = c == <span class=\"string\">&#x27;+&#x27;</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">get_col</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;+&#x27;</span> || c == <span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Character.isDigit(c)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/\">34. 在排序数组中查找元素的第一个和最后一个位置</a></p>\n<p>给定一个按照升序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。找出给定目标值在数组中的开始位置和结束位置。</p>\n<p>如果数组中不存在目标值 <code>target</code>，返回<code> [-1, -1]</code>。</p>\n<p>进阶：</p>\n<ul>\n<li>你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class=\"line\">输出：[3,4]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [5,7,7,8,8,10], target = 6</span><br><span class=\"line\">输出：[-1,-1]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [], target = 0</span><br><span class=\"line\">输出：[-1,-1]</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211124110459722.png?x-oss-process=style/qingyun\" alt=\"image-20211124110459722\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] searchRange(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;-<span class=\"number\">1</span>,-<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(length == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[<span class=\"number\">0</span>] == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;-<span class=\"number\">1</span>,-<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> firstPosition = findfirstPosition(nums,target);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (firstPosition == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;-<span class=\"number\">1</span>,-<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> lastPosition = findLastPosition(nums,target);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;firstPosition,lastPosition&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">findLastPosition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (left + right+<span class=\"number\">1</span>) &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">              </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">              </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] == target) &#123;</span><br><span class=\"line\">                left = mid;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">findfirstPosition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = nums.length -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (left+right) &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &lt; target)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//下一轮搜索的区间是【mid + 1,right】</span></span><br><span class=\"line\">                left =mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//下一轮搜索的区间是【left,mid-1】</span></span><br><span class=\"line\">                right = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] == target)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//下一轮搜索的区间是【left,mid】</span></span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[left] == target)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/\">33. 搜索旋转排序数组</a></p>\n<p>整数数组<code> nums</code> 按升序排列，数组中的值 互不相同 。</p>\n<p>在传递给函数之前，nums 在预先未知的某个下标 <code>k（0 &lt;= k &lt; nums.length）</code>上进行了 旋转，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7] </code>在下标 3 处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code> 。</p>\n<p>给你 旋转后 的数组 <code>nums </code>和一个整数 <code>target </code>，如果 <code>nums </code>中存在这个目标值 <code>target </code>，则返回它的下标，否则返回 <code>-1</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [4,5,6,7,0,1,2], target = 0</span><br><span class=\"line\">输出：4</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [4,5,6,7,0,1,2], target = 3</span><br><span class=\"line\">输出：-1</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1], target = 0</span><br><span class=\"line\">输出：-1</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211124110827526.png?x-oss-process=style/qingyun\" alt=\"image-20211124110827526\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>] == target ? <span class=\"number\">0</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt;= r) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] == target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[<span class=\"number\">0</span>] &lt;= nums[mid]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[<span class=\"number\">0</span>] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class=\"line\">                    r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix/\">74. 搜索二维矩阵</a></p>\n<p>编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p>\n<pre><code>每行中的整数从左到右按升序排列。\n每行的第一个整数大于前一行的最后一个整数。\n</code></pre>\n</li>\n</ul>\n<p><img src=\"http://typa.qingyun.run/img/mat.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columns = matrix.length - <span class=\"number\">1</span>, rows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (columns &gt;= <span class=\"number\">0</span> &amp;&amp; rows &lt; matrix[<span class=\"number\">0</span>].length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> num = matrix[columns][rows];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num == target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num &gt; target) &#123;</span><br><span class=\"line\">               columns--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                rows++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/solution/sou-suo-xuan-zhuan-pai-xu-shu-zu-by-leetcode-solut/\">https://leetcode-cn.com/problems/search-in-rotated-sorted-array/solution/sou-suo-xuan-zhuan-pai-xu-shu-zu-by-leetcode-solut/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<h3 id=\"2021-11-24-力扣\">2021/11/24  力扣</h3>\n<p><a href=\"https://leetcode-cn.com/problems/string-to-integer-atoi/\">8. 字符串转换整数 (atoi)</a></p>\n<p>请你来实现一个 <code>myAtoi(string s)</code> 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 <code>atoi</code> 函数）。</p>\n<p>函数 <code>myAtoi(string s)</code> 的算法如下：</p>\n<ul>\n<li>\n<p><img src=\"http://typa.qingyun.run/img/image-20211124105949207.png?x-oss-process=style/qingyun\" alt=\"image-20211124105949207\"></p>\n</li>\n<li>\n<p>文字题解<br>\n方法一：自动机</p>\n<p>思路</p>\n<p>字符串处理的题目往往涉及复杂的流程以及条件情况，如果直接上手写程序，一不小心就会写出极其臃肿的代码。</p>\n<p>因此，为了有条理地分析每个输入字符的处理方法，我们可以使用自动机这个概念：</p>\n<p>我们的程序在每个时刻有一个状态<code> s</code>，每次从序列中输入一个字符<code> c</code>，并根据字符 <code>c</code> 转移到下一个状态 <code>s'</code>。这样，我们只需要建立一个覆盖所有情况的从<code> s 与 c</code> 映射到 <code>s' </code>的表格即可解决题目中的问题。</p>\n<p>算法</p>\n<p>本题可以建立如下图所示的自动机：</p>\n<p><img src=\"http://typa.typa.qingyun.run/img/image-20211124110116544.png?x-oss-process=style/qingyun\" alt=\"image-20211124110116544\"><img src=\"http://typa.qingyun.run/img/image-20211124110141942.png?x-oss-process=style/qingyun\" alt=\"image-20211124110141942\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">myAtoi</span><span class=\"params\">(String str)</span> </span>&#123;</span><br><span class=\"line\">        Automaton automaton = <span class=\"keyword\">new</span> Automaton();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = str.length();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; length; ++i) &#123;</span><br><span class=\"line\">            automaton.get(str.charAt(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>) (automaton.sign * automaton.ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Automaton</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> sign = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String state = <span class=\"string\">&quot;start&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String, String[]&gt; table = <span class=\"keyword\">new</span> HashMap&lt;String, String[]&gt;() &#123;&#123;</span><br><span class=\"line\">        put(<span class=\"string\">&quot;start&quot;</span>, <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;start&quot;</span>, <span class=\"string\">&quot;signed&quot;</span>, <span class=\"string\">&quot;in_number&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;);</span><br><span class=\"line\">        put(<span class=\"string\">&quot;signed&quot;</span>, <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;in_number&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;);</span><br><span class=\"line\">        put(<span class=\"string\">&quot;in_number&quot;</span>, <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;in_number&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;);</span><br><span class=\"line\">        put(<span class=\"string\">&quot;end&quot;</span>, <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>, <span class=\"string\">&quot;end&quot;</span>&#125;);</span><br><span class=\"line\">    &#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        state = table.get(state)[get_col(c)];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;in_number&quot;</span>.equals(state)) &#123;</span><br><span class=\"line\">            ans = ans * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">            ans = sign == <span class=\"number\">1</span> ? Math.min(ans, (<span class=\"keyword\">long</span>) Integer.MAX_VALUE) : Math.min(ans, -(<span class=\"keyword\">long</span>) Integer.MIN_VALUE);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">&quot;signed&quot;</span>.equals(state)) &#123;</span><br><span class=\"line\">            sign = c == <span class=\"string\">&#x27;+&#x27;</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">get_col</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;+&#x27;</span> || c == <span class=\"string\">&#x27;-&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Character.isDigit(c)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/\">34. 在排序数组中查找元素的第一个和最后一个位置</a></p>\n<p>给定一个按照升序排列的整数数组 <code>nums</code>，和一个目标值 <code>target</code>。找出给定目标值在数组中的开始位置和结束位置。</p>\n<p>如果数组中不存在目标值 <code>target</code>，返回<code> [-1, -1]</code>。</p>\n<p>进阶：</p>\n<ul>\n<li>你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？</li>\n</ul>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [5,7,7,8,8,10], target = 8</span><br><span class=\"line\">输出：[3,4]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [5,7,7,8,8,10], target = 6</span><br><span class=\"line\">输出：[-1,-1]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [], target = 0</span><br><span class=\"line\">输出：[-1,-1]</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211124110459722.png?x-oss-process=style/qingyun\" alt=\"image-20211124110459722\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] searchRange(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;-<span class=\"number\">1</span>,-<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(length == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(nums[<span class=\"number\">0</span>] == target)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">0</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;-<span class=\"number\">1</span>,-<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> firstPosition = findfirstPosition(nums,target);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (firstPosition == -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;-<span class=\"number\">1</span>,-<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> lastPosition = findLastPosition(nums,target);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;firstPosition,lastPosition&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">findLastPosition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (left + right+<span class=\"number\">1</span>) &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &lt; target) &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">              </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target) &#123;</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">              </span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] == target) &#123;</span><br><span class=\"line\">                left = mid;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">findfirstPosition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = nums.length -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (left+right) &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &lt; target)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//下一轮搜索的区间是【mid + 1,right】</span></span><br><span class=\"line\">                left =mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] &gt; target)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//下一轮搜索的区间是【left,mid-1】</span></span><br><span class=\"line\">                right = mid -<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[mid] == target)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//下一轮搜索的区间是【left,mid】</span></span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[left] == target)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/\">33. 搜索旋转排序数组</a></p>\n<p>整数数组<code> nums</code> 按升序排列，数组中的值 互不相同 。</p>\n<p>在传递给函数之前，nums 在预先未知的某个下标 <code>k（0 &lt;= k &lt; nums.length）</code>上进行了 旋转，使数组变为 <code>[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]</code>（下标 <strong>从 0 开始</strong> 计数）。例如， <code>[0,1,2,4,5,6,7] </code>在下标 3 处经旋转后可能变为 <code>[4,5,6,7,0,1,2]</code> 。</p>\n<p>给你 旋转后 的数组 <code>nums </code>和一个整数 <code>target </code>，如果 <code>nums </code>中存在这个目标值 <code>target </code>，则返回它的下标，否则返回 <code>-1</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [4,5,6,7,0,1,2], target = 0</span><br><span class=\"line\">输出：4</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [4,5,6,7,0,1,2], target = 3</span><br><span class=\"line\">输出：-1</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1], target = 0</span><br><span class=\"line\">输出：-1</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211124110827526.png?x-oss-process=style/qingyun\" alt=\"image-20211124110827526\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>] == target ? <span class=\"number\">0</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt;= r) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] == target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[<span class=\"number\">0</span>] &lt;= nums[mid]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[<span class=\"number\">0</span>] &lt;= target &amp;&amp; target &lt; nums[mid]) &#123;</span><br><span class=\"line\">                    r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (nums[mid] &lt; target &amp;&amp; target &lt;= nums[n - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                    l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/search-a-2d-matrix/\">74. 搜索二维矩阵</a></p>\n<p>编写一个高效的算法来判断 m x n 矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p>\n<pre><code>每行中的整数从左到右按升序排列。\n每行的第一个整数大于前一行的最后一个整数。\n</code></pre>\n</li>\n</ul>\n<p><img src=\"http://typa.qingyun.run/img/mat.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3</span><br><span class=\"line\">输出：true</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">searchMatrix</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] matrix, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> columns = matrix.length - <span class=\"number\">1</span>, rows = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (columns &gt;= <span class=\"number\">0</span> &amp;&amp; rows &lt; matrix[<span class=\"number\">0</span>].length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> num = matrix[columns][rows];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num == target) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (num &gt; target) &#123;</span><br><span class=\"line\">               columns--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                rows++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/solution/sou-suo-xuan-zhuan-pai-xu-shu-zu-by-leetcode-solut/\">https://leetcode-cn.com/problems/search-in-rotated-sorted-array/solution/sou-suo-xuan-zhuan-pai-xu-shu-zu-by-leetcode-solut/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"2021/11/29 力扣","abbrlink":1097249485,"date":"2021-11-29T01:12:13.000Z","_content":"### 2021/11/29\n\n[153. 寻找旋转排序数组中的最小值](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/)\n\n已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 `nums = [0,1,2,4,5,6,7] `在变化后可能得到：\n\n- ​\t若旋转 `4` 次，则可以得到 `[4,5,6,7,0,1,2]`\n- ​\t若旋转 `7` 次，则可以得到 `[0,1,2,4,5,6,7]`\n\n注意，数组 `[a[0], a[1], a[2], ..., a[n-1]]` 旋转一次 的结果为数组` [a[n-1], a[0], a[1], a[2], ..., a[n-2]]` 。\n\n给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。\n\n**示例 1：**\n\n```\n输入：nums = [3,4,5,1,2]\n输出：1\n解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n```\n\n**示例 2：**\n\n```\n输入：nums = [4,5,6,7,0,1,2]\n输出：0\n解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。\n```\n\n```java\nclass Solution {\n    public int findMin(int[] nums) {\n        int low = 0;\n        int high = nums.length -1;\n        while (low < high){\n            int pivot = low + (high - low) / 2;\n            if (nums[pivot] < nums[high]){\n                high = pivot;\n            }else {\n                low = pivot + 1;\n            }\n        }\n        return nums[low];\n    }\n}\n```\n\n#### [162. 寻找峰值](https://leetcode-cn.com/problems/find-peak-element/)\n\n峰值元素是指其值严格大于左右相邻值的元素。\n\n给你一个整数数组 `nums`，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。\n\n你可以假设` nums[-1] = nums[n] = -∞` 。\n\n你必须实现时间复杂度为 `O(log n) `的算法来解决此问题。\n\n**示例 1：**\n\n```\n输入：nums = [1,2,3,1]\n输出：2\n解释：3 是峰值元素，你的函数应该返回其索引 2。\n```\n\n**示例 2：**\n\n```\n输入：nums = [1,2,1,3,5,6,4]\n输出：1 或 5 \n解释：你的函数可以返回索引 1，其峰值元素为 2；\n     或者返回索引 5， 其峰值元素为 6。\n```\n\n```java\nclass Solution {\n    public int findPeakElement(int[] nums) {\n        int left = 0, right = nums.length - 1;\n        for (; left < right; ) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] > nums[mid + 1]) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n}\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。","source":"_posts/2021-11-29-力扣.md","raw":"---\ntitle: 2021/11/29 力扣\nabbrlink: 1097249485\ndate: 2021-11-29 09:12:13\ntags:\n  - 力扣\n  - 算法题\ncategories: LeetCode\n---\n### 2021/11/29\n\n[153. 寻找旋转排序数组中的最小值](https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/)\n\n已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 `nums = [0,1,2,4,5,6,7] `在变化后可能得到：\n\n- ​\t若旋转 `4` 次，则可以得到 `[4,5,6,7,0,1,2]`\n- ​\t若旋转 `7` 次，则可以得到 `[0,1,2,4,5,6,7]`\n\n注意，数组 `[a[0], a[1], a[2], ..., a[n-1]]` 旋转一次 的结果为数组` [a[n-1], a[0], a[1], a[2], ..., a[n-2]]` 。\n\n给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。\n\n**示例 1：**\n\n```\n输入：nums = [3,4,5,1,2]\n输出：1\n解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。\n```\n\n**示例 2：**\n\n```\n输入：nums = [4,5,6,7,0,1,2]\n输出：0\n解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。\n```\n\n```java\nclass Solution {\n    public int findMin(int[] nums) {\n        int low = 0;\n        int high = nums.length -1;\n        while (low < high){\n            int pivot = low + (high - low) / 2;\n            if (nums[pivot] < nums[high]){\n                high = pivot;\n            }else {\n                low = pivot + 1;\n            }\n        }\n        return nums[low];\n    }\n}\n```\n\n#### [162. 寻找峰值](https://leetcode-cn.com/problems/find-peak-element/)\n\n峰值元素是指其值严格大于左右相邻值的元素。\n\n给你一个整数数组 `nums`，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。\n\n你可以假设` nums[-1] = nums[n] = -∞` 。\n\n你必须实现时间复杂度为 `O(log n) `的算法来解决此问题。\n\n**示例 1：**\n\n```\n输入：nums = [1,2,3,1]\n输出：2\n解释：3 是峰值元素，你的函数应该返回其索引 2。\n```\n\n**示例 2：**\n\n```\n输入：nums = [1,2,1,3,5,6,4]\n输出：1 或 5 \n解释：你的函数可以返回索引 1，其峰值元素为 2；\n     或者返回索引 5， 其峰值元素为 6。\n```\n\n```java\nclass Solution {\n    public int findPeakElement(int[] nums) {\n        int left = 0, right = nums.length - 1;\n        for (; left < right; ) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] > nums[mid + 1]) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n}\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。","slug":"2021-11-29-力扣","published":1,"updated":"2021-11-29T01:12:37.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2qv0003o4vb1j4mfm7t","content":"<h3 id=\"2021-11-29\">2021/11/29</h3>\n<p><a href=\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/\">153. 寻找旋转排序数组中的最小值</a></p>\n<p>已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 <code>nums = [0,1,2,4,5,6,7] </code>在变化后可能得到：</p>\n<ul>\n<li>​\t若旋转 <code>4</code> 次，则可以得到 <code>[4,5,6,7,0,1,2]</code></li>\n<li>​\t若旋转 <code>7</code> 次，则可以得到 <code>[0,1,2,4,5,6,7]</code></li>\n</ul>\n<p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 旋转一次 的结果为数组<code> [a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。</p>\n<p>给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,4,5,1,2]</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [4,5,6,7,0,1,2]</span><br><span class=\"line\">输出：0</span><br><span class=\"line\">解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = nums.length -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pivot = low + (high - low) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[pivot] &lt; nums[high])&#123;</span><br><span class=\"line\">                high = pivot;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                low = pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[low];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"162-寻找峰值\"><a href=\"https://leetcode-cn.com/problems/find-peak-element/\">162. 寻找峰值</a></h4>\n<p>峰值元素是指其值严格大于左右相邻值的元素。</p>\n<p>给你一个整数数组 <code>nums</code>，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。</p>\n<p>你可以假设<code> nums[-1] = nums[n] = -∞</code> 。</p>\n<p>你必须实现时间复杂度为 <code>O(log n) </code>的算法来解决此问题。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3,1]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：3 是峰值元素，你的函数应该返回其索引 2。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,1,3,5,6,4]</span><br><span class=\"line\">输出：1 或 5 </span><br><span class=\"line\">解释：你的函数可以返回索引 1，其峰值元素为 2；</span><br><span class=\"line\">     或者返回索引 5， 其峰值元素为 6。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findPeakElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; left &lt; right; ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &gt; nums[mid + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>来源：力扣（LeetCode）<br>\n链接：<a href=\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array\">https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array</a><br>\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<h3 id=\"2021-11-29\">2021/11/29</h3>\n<p><a href=\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/\">153. 寻找旋转排序数组中的最小值</a></p>\n<p>已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 <code>nums = [0,1,2,4,5,6,7] </code>在变化后可能得到：</p>\n<ul>\n<li>​\t若旋转 <code>4</code> 次，则可以得到 <code>[4,5,6,7,0,1,2]</code></li>\n<li>​\t若旋转 <code>7</code> 次，则可以得到 <code>[0,1,2,4,5,6,7]</code></li>\n</ul>\n<p>注意，数组 <code>[a[0], a[1], a[2], ..., a[n-1]]</code> 旋转一次 的结果为数组<code> [a[n-1], a[0], a[1], a[2], ..., a[n-2]]</code> 。</p>\n<p>给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [3,4,5,1,2]</span><br><span class=\"line\">输出：1</span><br><span class=\"line\">解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [4,5,6,7,0,1,2]</span><br><span class=\"line\">输出：0</span><br><span class=\"line\">解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findMin</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> high = nums.length -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (low &lt; high)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pivot = low + (high - low) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[pivot] &lt; nums[high])&#123;</span><br><span class=\"line\">                high = pivot;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                low = pivot + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[low];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"162-寻找峰值\"><a href=\"https://leetcode-cn.com/problems/find-peak-element/\">162. 寻找峰值</a></h4>\n<p>峰值元素是指其值严格大于左右相邻值的元素。</p>\n<p>给你一个整数数组 <code>nums</code>，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。</p>\n<p>你可以假设<code> nums[-1] = nums[n] = -∞</code> 。</p>\n<p>你必须实现时间复杂度为 <code>O(log n) </code>的算法来解决此问题。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3,1]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：3 是峰值元素，你的函数应该返回其索引 2。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,1,3,5,6,4]</span><br><span class=\"line\">输出：1 或 5 </span><br><span class=\"line\">解释：你的函数可以返回索引 1，其峰值元素为 2；</span><br><span class=\"line\">     或者返回索引 5， 其峰值元素为 6。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findPeakElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (; left &lt; right; ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[mid] &gt; nums[mid + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>来源：力扣（LeetCode）<br>\n链接：<a href=\"https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array\">https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array</a><br>\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n"},{"title":"20211128 力扣  周赛","abbrlink":3393647164,"date":"2021-11-29T01:10:13.000Z","_content":"### 力扣  周赛\n\n[5938. 找出数组排序后的目标下标](https://leetcode-cn.com/problems/find-target-indices-after-sorting-array/)\n\n给你一个下标从 0 开始的整数数组` nums `以及一个目标元素 `target` 。\n\n目标下标 是一个满足` nums[i] == target `的下标` i `。\n\n将` nums` 按 非递减 顺序排序后，返回由` nums` 中目标下标组成的列表。如果不存在目标下标，返回一个 空 列表。返回的列表必须按 递增 顺序排列。\n\n**示例 1：**\n\n```\n输入：nums = [1,2,5,2,3], target = 2\n输出：[1,2]\n解释：排序后，nums 变为 [1,2,2,3,5] 。\n满足 nums[i] == 2 的下标是 1 和 2 。\n```\n\n**示例 2：**\n\n```\n输入：nums = [1,2,5,2,3], target = 3\n输出：[3]\n解释：排序后，nums 变为 [1,2,2,3,5] 。\n满足 nums[i] == 3 的下标是 3 。\n```\n\n**示例 3：**\n\n```\n输入：nums = [1,2,5,2,3], target = 5\n输出：[4]\n解释：排序后，nums 变为 [1,2,2,3,5] 。\n满足 nums[i] == 5 的下标是 4 。\n```\n\n**示例 4：**\n\n```\n输入：nums = [1,2,5,2,3], target = 4\n输出：[]\n解释：nums 中不含值为 4 的元素。\n```\n\n```java\nclass Solution {\n    public List<Integer> targetIndices(int[] nums, int target) {\n        Arrays.sort(nums);\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            if (target == nums[i]){\n                list.add(i);\n            }\n        }\n        return list;\n    }\n}\n```\n\n\n\n#### [5939. 半径为 k 的子数组平均值](https://leetcode-cn.com/problems/k-radius-subarray-averages/)\n\n给你一个下标从 0 开始的数组 `nums `，数组中有` n `个整数，另给你一个整数 `k` 。\n\n半径为 k 的子数组平均值 是指：`nums `中一个以下标 i 为 中心 且 半径 为 k 的子数组中所有元素的平均值，即下标在` i - k 和 i + k `范围（含 i - k 和 i + k）内所有元素的平均值。如果在下标 i 前或后不足 k 个元素，那么 半径为 k 的子数组平均值 是` -1` 。\n\n构建并返回一个长度为 n 的数组 avgs ，其中 avgs[i] 是以下标 i 为中心的子数组的 半径为 k 的子数组平均值 。\n\nx 个元素的 平均值 是 x 个元素相加之和除以 x ，此时使用截断式 整数除法 ，即需要去掉结果的小数部分。\n\n- 例如，四个元素 2、3、1 和 5 的平均值是 (2 + 3 + 1 + 5) / 4 = 11 / 4 = 3.75，截断后得到 3 。\n\n![image-20211128140036709](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211128140036709.png?x-oss-process=style/qingyun)\n\n \n\n```java\nclass Solution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] a = new int[]{7,4,3,9,1,8,5,2,6};\n        int[] averages = solution.getAverages(a, 3);\n        for (int average : averages) {\n            System.out.print(average);\n        }\n    }\n    public int[] getAverages(int[] nums, int k) {\n         int index = 0;\n        int[] ints = new int[nums.length];\n        long  sum = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if ((i - k) < 0 || ( i + k ) > nums.length-1){\n                ints[index] = -1;\n                index+=1;\n                continue;\n            }\n           if (sum == 0){\n               for (int j = i-k; j <= i+k; j++) {\n                   sum += nums[j];\n               }\n           }else {\n               sum =  sum - nums[i-k-1] + nums[i+k];\n           }\n            ints[index] = (int) (sum / (k*2+1));\n            index++;\n        }\n        return ints;\n    }\n}\n\n```\n\n#### [5940. 从数组中移除最大值和最小值](https://leetcode-cn.com/problems/removing-minimum-and-maximum-from-array/)\n\n给你一个下标从 **0** 开始的数组` nums` ，数组由若干 互不相同 的整数组成。\n\n`nums `中有一个值最小的元素和一个值最大的元素。分别称为 `最小值 和 最大值 `。你的目标是从`数组中移除这两个元素`。\n\n一次 `删除` 操作定义为从数组的 `前面` 移除一个元素或从数组的 `后面` 移除一个元素。\n\n返回将数组中最小值和最大值 `都` 移除需要的最小删除次数。\n\n\n\n**示例 1：**\n\n```\n输入：nums = [2,10,7,5,4,1,8,6]\n输出：5\n解释：\n数组中的最小元素是 nums[5] ，值为 1 。\n数组中的最大元素是 nums[1] ，值为 10 。\n将最大值和最小值都移除需要从数组前面移除 2 个元素，从数组后面移除 3 个元素。\n结果是 2 + 3 = 5 ，这是所有可能情况中的最小删除次数。\n```\n\n**示例 2：**\n\n```\n输入：nums = [0,-4,19,1,8,-2,-3,5]\n输出：3\n解释：\n数组中的最小元素是 nums[1] ，值为 -4 。\n数组中的最大元素是 nums[2] ，值为 19 。\n将最大值和最小值都移除需要从数组前面移除 3 个元素。\n结果是 3 ，这是所有可能情况中的最小删除次数。\n```\n\n \n\n```java\nclass Solution {\n    public static void main(String[] args) {\n                Solution solution = new Solution();\n        int[] a = new int[]{2,10,7,5,4,1,8,6};\n        solution.minimumDeletions(a);\n\n    }\n    public int minimumDeletions(int[] nums) {\n\n        if (nums.length == 1){\n            return 1;\n        }\n        int minInt = Integer.MIN_VALUE; int m = 0;  //m 最大值\n        int maxInt = Integer.MAX_VALUE; int n = 0;  // n 最小值\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > minInt){\n                minInt = nums[i];\n                m = i;\n            }\n            if (nums[i] < maxInt){\n                maxInt = nums[i];\n                n = i;\n            }\n        }\n        int left = 0, right=  0;\n        if  (m > n){\n            right = m;\n            left = n;\n        }else {\n            right = n;\n            left = m;\n        }\n        int r = right +1;\n        int l = nums.length - left;\n        int o = left+1 + (nums.length  - right);\n        int[] ints = new int[3];\n        ints[0] = r;  ints[1] = l;  ints[2] = o;  int mina = Integer.MAX_VALUE;\n        for (int i = 0; i < ints.length; i++) {\n            if (ints[i] < mina){\n                mina = ints[i];\n            }\n        }\n        return mina ;\n    }\n}\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/find-target-indices-after-sorting-array\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。","source":"_posts/20211128-力扣-周赛.md","raw":"---\ntitle: 20211128 力扣  周赛\nabbrlink: 3393647164\ndate: 2021-11-29 09:10:13\ntags:\n  - 力扣\n  - 算法题\n  - 周赛\ncategories: LeetCode\n---\n### 力扣  周赛\n\n[5938. 找出数组排序后的目标下标](https://leetcode-cn.com/problems/find-target-indices-after-sorting-array/)\n\n给你一个下标从 0 开始的整数数组` nums `以及一个目标元素 `target` 。\n\n目标下标 是一个满足` nums[i] == target `的下标` i `。\n\n将` nums` 按 非递减 顺序排序后，返回由` nums` 中目标下标组成的列表。如果不存在目标下标，返回一个 空 列表。返回的列表必须按 递增 顺序排列。\n\n**示例 1：**\n\n```\n输入：nums = [1,2,5,2,3], target = 2\n输出：[1,2]\n解释：排序后，nums 变为 [1,2,2,3,5] 。\n满足 nums[i] == 2 的下标是 1 和 2 。\n```\n\n**示例 2：**\n\n```\n输入：nums = [1,2,5,2,3], target = 3\n输出：[3]\n解释：排序后，nums 变为 [1,2,2,3,5] 。\n满足 nums[i] == 3 的下标是 3 。\n```\n\n**示例 3：**\n\n```\n输入：nums = [1,2,5,2,3], target = 5\n输出：[4]\n解释：排序后，nums 变为 [1,2,2,3,5] 。\n满足 nums[i] == 5 的下标是 4 。\n```\n\n**示例 4：**\n\n```\n输入：nums = [1,2,5,2,3], target = 4\n输出：[]\n解释：nums 中不含值为 4 的元素。\n```\n\n```java\nclass Solution {\n    public List<Integer> targetIndices(int[] nums, int target) {\n        Arrays.sort(nums);\n        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = 0; i < nums.length; i++) {\n            if (target == nums[i]){\n                list.add(i);\n            }\n        }\n        return list;\n    }\n}\n```\n\n\n\n#### [5939. 半径为 k 的子数组平均值](https://leetcode-cn.com/problems/k-radius-subarray-averages/)\n\n给你一个下标从 0 开始的数组 `nums `，数组中有` n `个整数，另给你一个整数 `k` 。\n\n半径为 k 的子数组平均值 是指：`nums `中一个以下标 i 为 中心 且 半径 为 k 的子数组中所有元素的平均值，即下标在` i - k 和 i + k `范围（含 i - k 和 i + k）内所有元素的平均值。如果在下标 i 前或后不足 k 个元素，那么 半径为 k 的子数组平均值 是` -1` 。\n\n构建并返回一个长度为 n 的数组 avgs ，其中 avgs[i] 是以下标 i 为中心的子数组的 半径为 k 的子数组平均值 。\n\nx 个元素的 平均值 是 x 个元素相加之和除以 x ，此时使用截断式 整数除法 ，即需要去掉结果的小数部分。\n\n- 例如，四个元素 2、3、1 和 5 的平均值是 (2 + 3 + 1 + 5) / 4 = 11 / 4 = 3.75，截断后得到 3 。\n\n![image-20211128140036709](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211128140036709.png?x-oss-process=style/qingyun)\n\n \n\n```java\nclass Solution {\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        int[] a = new int[]{7,4,3,9,1,8,5,2,6};\n        int[] averages = solution.getAverages(a, 3);\n        for (int average : averages) {\n            System.out.print(average);\n        }\n    }\n    public int[] getAverages(int[] nums, int k) {\n         int index = 0;\n        int[] ints = new int[nums.length];\n        long  sum = 0;\n        for (int i = 0; i < nums.length; i++) {\n            if ((i - k) < 0 || ( i + k ) > nums.length-1){\n                ints[index] = -1;\n                index+=1;\n                continue;\n            }\n           if (sum == 0){\n               for (int j = i-k; j <= i+k; j++) {\n                   sum += nums[j];\n               }\n           }else {\n               sum =  sum - nums[i-k-1] + nums[i+k];\n           }\n            ints[index] = (int) (sum / (k*2+1));\n            index++;\n        }\n        return ints;\n    }\n}\n\n```\n\n#### [5940. 从数组中移除最大值和最小值](https://leetcode-cn.com/problems/removing-minimum-and-maximum-from-array/)\n\n给你一个下标从 **0** 开始的数组` nums` ，数组由若干 互不相同 的整数组成。\n\n`nums `中有一个值最小的元素和一个值最大的元素。分别称为 `最小值 和 最大值 `。你的目标是从`数组中移除这两个元素`。\n\n一次 `删除` 操作定义为从数组的 `前面` 移除一个元素或从数组的 `后面` 移除一个元素。\n\n返回将数组中最小值和最大值 `都` 移除需要的最小删除次数。\n\n\n\n**示例 1：**\n\n```\n输入：nums = [2,10,7,5,4,1,8,6]\n输出：5\n解释：\n数组中的最小元素是 nums[5] ，值为 1 。\n数组中的最大元素是 nums[1] ，值为 10 。\n将最大值和最小值都移除需要从数组前面移除 2 个元素，从数组后面移除 3 个元素。\n结果是 2 + 3 = 5 ，这是所有可能情况中的最小删除次数。\n```\n\n**示例 2：**\n\n```\n输入：nums = [0,-4,19,1,8,-2,-3,5]\n输出：3\n解释：\n数组中的最小元素是 nums[1] ，值为 -4 。\n数组中的最大元素是 nums[2] ，值为 19 。\n将最大值和最小值都移除需要从数组前面移除 3 个元素。\n结果是 3 ，这是所有可能情况中的最小删除次数。\n```\n\n \n\n```java\nclass Solution {\n    public static void main(String[] args) {\n                Solution solution = new Solution();\n        int[] a = new int[]{2,10,7,5,4,1,8,6};\n        solution.minimumDeletions(a);\n\n    }\n    public int minimumDeletions(int[] nums) {\n\n        if (nums.length == 1){\n            return 1;\n        }\n        int minInt = Integer.MIN_VALUE; int m = 0;  //m 最大值\n        int maxInt = Integer.MAX_VALUE; int n = 0;  // n 最小值\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > minInt){\n                minInt = nums[i];\n                m = i;\n            }\n            if (nums[i] < maxInt){\n                maxInt = nums[i];\n                n = i;\n            }\n        }\n        int left = 0, right=  0;\n        if  (m > n){\n            right = m;\n            left = n;\n        }else {\n            right = n;\n            left = m;\n        }\n        int r = right +1;\n        int l = nums.length - left;\n        int o = left+1 + (nums.length  - right);\n        int[] ints = new int[3];\n        ints[0] = r;  ints[1] = l;  ints[2] = o;  int mina = Integer.MAX_VALUE;\n        for (int i = 0; i < ints.length; i++) {\n            if (ints[i] < mina){\n                mina = ints[i];\n            }\n        }\n        return mina ;\n    }\n}\n```\n\n来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/find-target-indices-after-sorting-array\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。","slug":"20211128-力扣-周赛","published":1,"updated":"2021-11-30T05:00:56.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2qy0007o4vb96zz7nm3","content":"<h3 id=\"力扣-周赛\">力扣  周赛</h3>\n<p><a href=\"https://leetcode-cn.com/problems/find-target-indices-after-sorting-array/\">5938. 找出数组排序后的目标下标</a></p>\n<p>给你一个下标从 0 开始的整数数组<code>nums</code>以及一个目标元素 <code>target</code> 。</p>\n<p>目标下标 是一个满足<code>nums[i] == target</code>的下标<code>i</code>。</p>\n<p>将<code> nums</code> 按 非递减 顺序排序后，返回由<code> nums</code> 中目标下标组成的列表。如果不存在目标下标，返回一个 空 列表。返回的列表必须按 递增 顺序排列。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,5,2,3], target = 2</span><br><span class=\"line\">输出：[1,2]</span><br><span class=\"line\">解释：排序后，nums 变为 [1,2,2,3,5] 。</span><br><span class=\"line\">满足 nums[i] == 2 的下标是 1 和 2 。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,5,2,3], target = 3</span><br><span class=\"line\">输出：[3]</span><br><span class=\"line\">解释：排序后，nums 变为 [1,2,2,3,5] 。</span><br><span class=\"line\">满足 nums[i] == 3 的下标是 3 。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,5,2,3], target = 5</span><br><span class=\"line\">输出：[4]</span><br><span class=\"line\">解释：排序后，nums 变为 [1,2,2,3,5] 。</span><br><span class=\"line\">满足 nums[i] == 5 的下标是 4 。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,5,2,3], target = 4</span><br><span class=\"line\">输出：[]</span><br><span class=\"line\">解释：nums 中不含值为 4 的元素。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">targetIndices</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target == nums[i])&#123;</span><br><span class=\"line\">                list.add(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5939-半径为-k-的子数组平均值\"><a href=\"https://leetcode-cn.com/problems/k-radius-subarray-averages/\">5939. 半径为 k 的子数组平均值</a></h4>\n<p>给你一个下标从 0 开始的数组 <code>nums </code>，数组中有<code>n</code>个整数，另给你一个整数 <code>k</code> 。</p>\n<p>半径为 k 的子数组平均值 是指：<code>nums </code>中一个以下标 i 为 中心 且 半径 为 k 的子数组中所有元素的平均值，即下标在<code>i - k 和 i + k</code>范围（含 i - k 和 i + k）内所有元素的平均值。如果在下标 i 前或后不足 k 个元素，那么 半径为 k 的子数组平均值 是<code> -1</code> 。</p>\n<p>构建并返回一个长度为 n 的数组 avgs ，其中 avgs[i] 是以下标 i 为中心的子数组的 半径为 k 的子数组平均值 。</p>\n<p>x 个元素的 平均值 是 x 个元素相加之和除以 x ，此时使用截断式 整数除法 ，即需要去掉结果的小数部分。</p>\n<ul>\n<li>例如，四个元素 2、3、1 和 5 的平均值是 (2 + 3 + 1 + 5) / 4 = 11 / 4 = 3.75，截断后得到 3 。</li>\n</ul>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211128140036709.png?x-oss-process=style/qingyun\" alt=\"image-20211128140036709\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Solution solution = <span class=\"keyword\">new</span> Solution();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">7</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] averages = solution.getAverages(a, <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> average : averages) &#123;</span><br><span class=\"line\">            System.out.print(average);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] getAverages(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ints = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">        <span class=\"keyword\">long</span>  sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((i - k) &lt; <span class=\"number\">0</span> || ( i + k ) &gt; nums.length-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                ints[index] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                index+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (sum == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i-k; j &lt;= i+k; j++) &#123;</span><br><span class=\"line\">                   sum += nums[j];</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               sum =  sum - nums[i-k-<span class=\"number\">1</span>] + nums[i+k];</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">            ints[index] = (<span class=\"keyword\">int</span>) (sum / (k*<span class=\"number\">2</span>+<span class=\"number\">1</span>));</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ints;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"5940-从数组中移除最大值和最小值\"><a href=\"https://leetcode-cn.com/problems/removing-minimum-and-maximum-from-array/\">5940. 从数组中移除最大值和最小值</a></h4>\n<p>给你一个下标从 <strong>0</strong> 开始的数组<code> nums</code> ，数组由若干 互不相同 的整数组成。</p>\n<p><code>nums </code>中有一个值最小的元素和一个值最大的元素。分别称为 <code>最小值 和 最大值 </code>。你的目标是从<code>数组中移除这两个元素</code>。</p>\n<p>一次 <code>删除</code> 操作定义为从数组的 <code>前面</code> 移除一个元素或从数组的 <code>后面</code> 移除一个元素。</p>\n<p>返回将数组中最小值和最大值 <code>都</code> 移除需要的最小删除次数。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,10,7,5,4,1,8,6]</span><br><span class=\"line\">输出：5</span><br><span class=\"line\">解释：</span><br><span class=\"line\">数组中的最小元素是 nums[5] ，值为 1 。</span><br><span class=\"line\">数组中的最大元素是 nums[1] ，值为 10 。</span><br><span class=\"line\">将最大值和最小值都移除需要从数组前面移除 2 个元素，从数组后面移除 3 个元素。</span><br><span class=\"line\">结果是 2 + 3 = 5 ，这是所有可能情况中的最小删除次数。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0,-4,19,1,8,-2,-3,5]</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：</span><br><span class=\"line\">数组中的最小元素是 nums[1] ，值为 -4 。</span><br><span class=\"line\">数组中的最大元素是 nums[2] ，值为 19 。</span><br><span class=\"line\">将最大值和最小值都移除需要从数组前面移除 3 个元素。</span><br><span class=\"line\">结果是 3 ，这是所有可能情况中的最小删除次数。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">                Solution solution = <span class=\"keyword\">new</span> Solution();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        solution.minimumDeletions(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minimumDeletions</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minInt = Integer.MIN_VALUE; <span class=\"keyword\">int</span> m = <span class=\"number\">0</span>;  <span class=\"comment\">//m 最大值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxInt = Integer.MAX_VALUE; <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;  <span class=\"comment\">// n 最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; minInt)&#123;</span><br><span class=\"line\">                minInt = nums[i];</span><br><span class=\"line\">                m = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &lt; maxInt)&#123;</span><br><span class=\"line\">                maxInt = nums[i];</span><br><span class=\"line\">                n = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right=  <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>  (m &gt; n)&#123;</span><br><span class=\"line\">            right = m;</span><br><span class=\"line\">            left = n;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = n;</span><br><span class=\"line\">            left = m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = right +<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = nums.length - left;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> o = left+<span class=\"number\">1</span> + (nums.length  - right);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ints = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">        ints[<span class=\"number\">0</span>] = r;  ints[<span class=\"number\">1</span>] = l;  ints[<span class=\"number\">2</span>] = o;  <span class=\"keyword\">int</span> mina = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ints[i] &lt; mina)&#123;</span><br><span class=\"line\">                mina = ints[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mina ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>来源：力扣（LeetCode）<br>\n链接：<a href=\"https://leetcode-cn.com/problems/find-target-indices-after-sorting-array\">https://leetcode-cn.com/problems/find-target-indices-after-sorting-array</a><br>\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<h3 id=\"力扣-周赛\">力扣  周赛</h3>\n<p><a href=\"https://leetcode-cn.com/problems/find-target-indices-after-sorting-array/\">5938. 找出数组排序后的目标下标</a></p>\n<p>给你一个下标从 0 开始的整数数组<code>nums</code>以及一个目标元素 <code>target</code> 。</p>\n<p>目标下标 是一个满足<code>nums[i] == target</code>的下标<code>i</code>。</p>\n<p>将<code> nums</code> 按 非递减 顺序排序后，返回由<code> nums</code> 中目标下标组成的列表。如果不存在目标下标，返回一个 空 列表。返回的列表必须按 递增 顺序排列。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,5,2,3], target = 2</span><br><span class=\"line\">输出：[1,2]</span><br><span class=\"line\">解释：排序后，nums 变为 [1,2,2,3,5] 。</span><br><span class=\"line\">满足 nums[i] == 2 的下标是 1 和 2 。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,5,2,3], target = 3</span><br><span class=\"line\">输出：[3]</span><br><span class=\"line\">解释：排序后，nums 变为 [1,2,2,3,5] 。</span><br><span class=\"line\">满足 nums[i] == 3 的下标是 3 。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,5,2,3], target = 5</span><br><span class=\"line\">输出：[4]</span><br><span class=\"line\">解释：排序后，nums 变为 [1,2,2,3,5] 。</span><br><span class=\"line\">满足 nums[i] == 5 的下标是 4 。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 4：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,5,2,3], target = 4</span><br><span class=\"line\">输出：[]</span><br><span class=\"line\">解释：nums 中不含值为 4 的元素。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">targetIndices</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        ArrayList&lt;Integer&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target == nums[i])&#123;</span><br><span class=\"line\">                list.add(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5939-半径为-k-的子数组平均值\"><a href=\"https://leetcode-cn.com/problems/k-radius-subarray-averages/\">5939. 半径为 k 的子数组平均值</a></h4>\n<p>给你一个下标从 0 开始的数组 <code>nums </code>，数组中有<code>n</code>个整数，另给你一个整数 <code>k</code> 。</p>\n<p>半径为 k 的子数组平均值 是指：<code>nums </code>中一个以下标 i 为 中心 且 半径 为 k 的子数组中所有元素的平均值，即下标在<code>i - k 和 i + k</code>范围（含 i - k 和 i + k）内所有元素的平均值。如果在下标 i 前或后不足 k 个元素，那么 半径为 k 的子数组平均值 是<code> -1</code> 。</p>\n<p>构建并返回一个长度为 n 的数组 avgs ，其中 avgs[i] 是以下标 i 为中心的子数组的 半径为 k 的子数组平均值 。</p>\n<p>x 个元素的 平均值 是 x 个元素相加之和除以 x ，此时使用截断式 整数除法 ，即需要去掉结果的小数部分。</p>\n<ul>\n<li>例如，四个元素 2、3、1 和 5 的平均值是 (2 + 3 + 1 + 5) / 4 = 11 / 4 = 3.75，截断后得到 3 。</li>\n</ul>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211128140036709.png?x-oss-process=style/qingyun\" alt=\"image-20211128140036709\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Solution solution = <span class=\"keyword\">new</span> Solution();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">7</span>,<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">9</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] averages = solution.getAverages(a, <span class=\"number\">3</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> average : averages) &#123;</span><br><span class=\"line\">            System.out.print(average);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] getAverages(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">int</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ints = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">        <span class=\"keyword\">long</span>  sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((i - k) &lt; <span class=\"number\">0</span> || ( i + k ) &gt; nums.length-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                ints[index] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">                index+=<span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (sum == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i-k; j &lt;= i+k; j++) &#123;</span><br><span class=\"line\">                   sum += nums[j];</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               sum =  sum - nums[i-k-<span class=\"number\">1</span>] + nums[i+k];</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">            ints[index] = (<span class=\"keyword\">int</span>) (sum / (k*<span class=\"number\">2</span>+<span class=\"number\">1</span>));</span><br><span class=\"line\">            index++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ints;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"5940-从数组中移除最大值和最小值\"><a href=\"https://leetcode-cn.com/problems/removing-minimum-and-maximum-from-array/\">5940. 从数组中移除最大值和最小值</a></h4>\n<p>给你一个下标从 <strong>0</strong> 开始的数组<code> nums</code> ，数组由若干 互不相同 的整数组成。</p>\n<p><code>nums </code>中有一个值最小的元素和一个值最大的元素。分别称为 <code>最小值 和 最大值 </code>。你的目标是从<code>数组中移除这两个元素</code>。</p>\n<p>一次 <code>删除</code> 操作定义为从数组的 <code>前面</code> 移除一个元素或从数组的 <code>后面</code> 移除一个元素。</p>\n<p>返回将数组中最小值和最大值 <code>都</code> 移除需要的最小删除次数。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,10,7,5,4,1,8,6]</span><br><span class=\"line\">输出：5</span><br><span class=\"line\">解释：</span><br><span class=\"line\">数组中的最小元素是 nums[5] ，值为 1 。</span><br><span class=\"line\">数组中的最大元素是 nums[1] ，值为 10 。</span><br><span class=\"line\">将最大值和最小值都移除需要从数组前面移除 2 个元素，从数组后面移除 3 个元素。</span><br><span class=\"line\">结果是 2 + 3 = 5 ，这是所有可能情况中的最小删除次数。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0,-4,19,1,8,-2,-3,5]</span><br><span class=\"line\">输出：3</span><br><span class=\"line\">解释：</span><br><span class=\"line\">数组中的最小元素是 nums[1] ，值为 -4 。</span><br><span class=\"line\">数组中的最大元素是 nums[2] ，值为 19 。</span><br><span class=\"line\">将最大值和最小值都移除需要从数组前面移除 3 个元素。</span><br><span class=\"line\">结果是 3 ，这是所有可能情况中的最小删除次数。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">                Solution solution = <span class=\"keyword\">new</span> Solution();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] a = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">2</span>,<span class=\"number\">10</span>,<span class=\"number\">7</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">8</span>,<span class=\"number\">6</span>&#125;;</span><br><span class=\"line\">        solution.minimumDeletions(a);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minimumDeletions</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> minInt = Integer.MIN_VALUE; <span class=\"keyword\">int</span> m = <span class=\"number\">0</span>;  <span class=\"comment\">//m 最大值</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> maxInt = Integer.MAX_VALUE; <span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;  <span class=\"comment\">// n 最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; minInt)&#123;</span><br><span class=\"line\">                minInt = nums[i];</span><br><span class=\"line\">                m = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &lt; maxInt)&#123;</span><br><span class=\"line\">                maxInt = nums[i];</span><br><span class=\"line\">                n = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>, right=  <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>  (m &gt; n)&#123;</span><br><span class=\"line\">            right = m;</span><br><span class=\"line\">            left = n;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            right = n;</span><br><span class=\"line\">            left = m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = right +<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = nums.length - left;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> o = left+<span class=\"number\">1</span> + (nums.length  - right);</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ints = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">        ints[<span class=\"number\">0</span>] = r;  ints[<span class=\"number\">1</span>] = l;  ints[<span class=\"number\">2</span>] = o;  <span class=\"keyword\">int</span> mina = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ints[i] &lt; mina)&#123;</span><br><span class=\"line\">                mina = ints[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mina ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>来源：力扣（LeetCode）<br>\n链接：<a href=\"https://leetcode-cn.com/problems/find-target-indices-after-sorting-array\">https://leetcode-cn.com/problems/find-target-indices-after-sorting-array</a><br>\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>\n"},{"title":"20211130","abbrlink":1624661076,"date":"2021-11-30T05:00:30.000Z","_content":"[82. 删除排序链表中的重复元素 II](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/)\n\n\n\n存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现 的数字。\n\n返回同样按升序排列的结果链表。\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/linkedlist1.jpg?x-oss-process=style/qingyun)\n\n```\n输入：head = [1,2,3,3,4,4,5]\n输出：[1,2,5]\n```\n\n思路与算法\n\n![image-20211130125502975](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211130125502975.png?x-oss-process=style/qingyun)\n\n```java\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n        \n        ListNode dummy = new ListNode(0, head);\n\n        ListNode cur = dummy;\n        while (cur.next != null && cur.next.next != null) {\n            if (cur.next.val == cur.next.next.val) {\n                int x = cur.next.val;\n                while (cur.next != null && cur.next.val == x) {\n                    cur.next = cur.next.next;\n                }\n            } else {\n                cur = cur.next;\n            }\n        }\n\n        return dummy.next;\n    }\n}\n```\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/solution/shan-chu-pai-xu-lian-biao-zhong-de-zhong-oayn/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n\n#### [15. 三数之和](https://leetcode-cn.com/problems/3sum/)\n\n\n\n给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。\n\n注意：答案中不可以包含重复的三元组。\n\n**示例 1：**\n\n```\n输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n```\n\n**示例 2：**\n\n```\n输入：nums = []\n输出：[]\n```\n\n**示例 3：**\n\n```\n输入：nums = [0]\n输出：[]\n```\n\n```java\nclass Solution {\n    List<List<Integer>> res;\n    public List<List<Integer>> threeSum(int[] nums) {\n        res = new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > 0) {\n                break;\n            }\n            if (i == 0 || nums[i] != nums[i-1]){\n                twoSum(nums,i);\n            }\n        }\n        return res;\n    }\n\n    private void twoSum(int[] nums, int index) {\n        int i = index+1,j = nums.length - 1,item = nums[index],target = -item;\n        long sum;\n        while (i < j){\n            sum = (long) nums[i] + (long)nums[j];\n            if (sum == target){\n                res.add(Arrays.asList(item,nums[i],nums[j]));\n                while (i+1 < j && nums[i+1] == nums[i]){\n                    i++;\n                }\n                while (j-1 > i && nums[j-1] == nums[j]){\n                    j--;\n                }\n            }\n            if (sum > target){\n                j--;\n            }else {\n                i++;\n            }\n        }\n    }\n}\n```\n\n","source":"_posts/20211130.md","raw":"---\ntitle: 20211130\nabbrlink: 1624661076\ndate: 2021-11-30 13:00:30\ntags:\n  - 力扣\n  - 算法题\ncategories: LeetCode\n---\n[82. 删除排序链表中的重复元素 II](https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/)\n\n\n\n存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现 的数字。\n\n返回同样按升序排列的结果链表。\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/linkedlist1.jpg?x-oss-process=style/qingyun)\n\n```\n输入：head = [1,2,3,3,4,4,5]\n输出：[1,2,5]\n```\n\n思路与算法\n\n![image-20211130125502975](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211130125502975.png?x-oss-process=style/qingyun)\n\n```java\nclass Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        if (head == null) {\n            return head;\n        }\n        \n        ListNode dummy = new ListNode(0, head);\n\n        ListNode cur = dummy;\n        while (cur.next != null && cur.next.next != null) {\n            if (cur.next.val == cur.next.next.val) {\n                int x = cur.next.val;\n                while (cur.next != null && cur.next.val == x) {\n                    cur.next = cur.next.next;\n                }\n            } else {\n                cur = cur.next;\n            }\n        }\n\n        return dummy.next;\n    }\n}\n```\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/solution/shan-chu-pai-xu-lian-biao-zhong-de-zhong-oayn/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n\n#### [15. 三数之和](https://leetcode-cn.com/problems/3sum/)\n\n\n\n给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。\n\n注意：答案中不可以包含重复的三元组。\n\n**示例 1：**\n\n```\n输入：nums = [-1,0,1,2,-1,-4]\n输出：[[-1,-1,2],[-1,0,1]]\n```\n\n**示例 2：**\n\n```\n输入：nums = []\n输出：[]\n```\n\n**示例 3：**\n\n```\n输入：nums = [0]\n输出：[]\n```\n\n```java\nclass Solution {\n    List<List<Integer>> res;\n    public List<List<Integer>> threeSum(int[] nums) {\n        res = new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length; i++) {\n            if (nums[i] > 0) {\n                break;\n            }\n            if (i == 0 || nums[i] != nums[i-1]){\n                twoSum(nums,i);\n            }\n        }\n        return res;\n    }\n\n    private void twoSum(int[] nums, int index) {\n        int i = index+1,j = nums.length - 1,item = nums[index],target = -item;\n        long sum;\n        while (i < j){\n            sum = (long) nums[i] + (long)nums[j];\n            if (sum == target){\n                res.add(Arrays.asList(item,nums[i],nums[j]));\n                while (i+1 < j && nums[i+1] == nums[i]){\n                    i++;\n                }\n                while (j-1 > i && nums[j-1] == nums[j]){\n                    j--;\n                }\n            }\n            if (sum > target){\n                j--;\n            }else {\n                i++;\n            }\n        }\n    }\n}\n```\n\n","slug":"20211130","published":1,"updated":"2021-11-30T05:01:06.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2qz0009o4vbcidl6p4g","content":"<p><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/\">82. 删除排序链表中的重复元素 II</a></p>\n<p>存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现 的数字。</p>\n<p>返回同样按升序排列的结果链表。</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/linkedlist1.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2,3,3,4,4,5]</span><br><span class=\"line\">输出：[1,2,5]</span><br></pre></td></tr></table></figure>\n<p>思路与算法</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211130125502975.png?x-oss-process=style/qingyun\" alt=\"image-20211130125502975\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>, head);</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode cur = dummy;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur.next != <span class=\"keyword\">null</span> &amp;&amp; cur.next.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.next.val == cur.next.next.val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = cur.next.val;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (cur.next != <span class=\"keyword\">null</span> &amp;&amp; cur.next.val == x) &#123;</span><br><span class=\"line\">                    cur.next = cur.next.next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cur = cur.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/solution/shan-chu-pai-xu-lian-biao-zhong-de-zhong-oayn/\">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/solution/shan-chu-pai-xu-lian-biao-zhong-de-zhong-oayn/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h4 id=\"15-三数之和\"><a href=\"https://leetcode-cn.com/problems/3sum/\">15. 三数之和</a></h4>\n<p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p>\n<p>注意：答案中不可以包含重复的三元组。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class=\"line\">输出：[[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = []</span><br><span class=\"line\">输出：[]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0]</span><br><span class=\"line\">输出：[]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">        res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || nums[i] != nums[i-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                twoSum(nums,i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = index+<span class=\"number\">1</span>,j = nums.length - <span class=\"number\">1</span>,item = nums[index],target = -item;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j)&#123;</span><br><span class=\"line\">            sum = (<span class=\"keyword\">long</span>) nums[i] + (<span class=\"keyword\">long</span>)nums[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum == target)&#123;</span><br><span class=\"line\">                res.add(Arrays.asList(item,nums[i],nums[j]));</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (i+<span class=\"number\">1</span> &lt; j &amp;&amp; nums[i+<span class=\"number\">1</span>] == nums[i])&#123;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (j-<span class=\"number\">1</span> &gt; i &amp;&amp; nums[j-<span class=\"number\">1</span>] == nums[j])&#123;</span><br><span class=\"line\">                    j--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &gt; target)&#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<p><a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/\">82. 删除排序链表中的重复元素 II</a></p>\n<p>存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中 没有重复出现 的数字。</p>\n<p>返回同样按升序排列的结果链表。</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/linkedlist1.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：head = [1,2,3,3,4,4,5]</span><br><span class=\"line\">输出：[1,2,5]</span><br></pre></td></tr></table></figure>\n<p>思路与算法</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211130125502975.png?x-oss-process=style/qingyun\" alt=\"image-20211130125502975\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ListNode <span class=\"title\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        ListNode dummy = <span class=\"keyword\">new</span> ListNode(<span class=\"number\">0</span>, head);</span><br><span class=\"line\"></span><br><span class=\"line\">        ListNode cur = dummy;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur.next != <span class=\"keyword\">null</span> &amp;&amp; cur.next.next != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.next.val == cur.next.next.val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = cur.next.val;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (cur.next != <span class=\"keyword\">null</span> &amp;&amp; cur.next.val == x) &#123;</span><br><span class=\"line\">                    cur.next = cur.next.next;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                cur = cur.next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/solution/shan-chu-pai-xu-lian-biao-zhong-de-zhong-oayn/\">https://leetcode-cn.com/problems/remove-duplicates-from-sorted-list-ii/solution/shan-chu-pai-xu-lian-biao-zhong-de-zhong-oayn/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h4 id=\"15-三数之和\"><a href=\"https://leetcode-cn.com/problems/3sum/\">15. 三数之和</a></h4>\n<p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有和为 0 且不重复的三元组。</p>\n<p>注意：答案中不可以包含重复的三元组。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [-1,0,1,2,-1,-4]</span><br><span class=\"line\">输出：[[-1,-1,2],[-1,0,1]]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = []</span><br><span class=\"line\">输出：[]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [0]</span><br><span class=\"line\">输出：[]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class=\"keyword\">int</span>[] nums) &#123;</span><br><span class=\"line\">        res = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        Arrays.sort(nums);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span> || nums[i] != nums[i-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                twoSum(nums,i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">twoSum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = index+<span class=\"number\">1</span>,j = nums.length - <span class=\"number\">1</span>,item = nums[index],target = -item;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j)&#123;</span><br><span class=\"line\">            sum = (<span class=\"keyword\">long</span>) nums[i] + (<span class=\"keyword\">long</span>)nums[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum == target)&#123;</span><br><span class=\"line\">                res.add(Arrays.asList(item,nums[i],nums[j]));</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (i+<span class=\"number\">1</span> &lt; j &amp;&amp; nums[i+<span class=\"number\">1</span>] == nums[i])&#123;</span><br><span class=\"line\">                    i++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (j-<span class=\"number\">1</span> &gt; i &amp;&amp; nums[j-<span class=\"number\">1</span>] == nums[j])&#123;</span><br><span class=\"line\">                    j--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &gt; target)&#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"### 20211123  力扣","abbrlink":2014279217,"date":"2021-11-29T01:01:33.000Z","description":"2021-11-22T16:00:00.000Z","_content":"### 2021/11/23  力扣\n\n#### [543. 二叉树的直径](https://leetcode-cn.com/problems/diameter-of-binary-tree/)\n\n给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n\n \n\n示例 :\n给定二叉树\n\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n\n返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\n\n \n\n注意：两结点之间的路径长度是以它们之间边的数目表示。\n\n解析：\n\n首先我们知道一条路径的长度为该路径经过的节点数减一，所以`求直径（即求路径长度的最大值）等效于求路径经过节点数的最大值减一`。 `length = max - 1;`\n\n而任意一条路径均可以被看作由某个节点为起点，从其`左儿子和右儿子向下遍历的路径拼接得到`。\n\n![543.jpg](http://typa.qingyun.run/img/f39419c0fd3b3225a643ac4f40a1289c93cb03a6fb07a0be9e763c732a49b47d-543.jpg)\n\n如图我们可以知道路径 [9, 4, 2, 5, 7, 8] 可以被看作以 222 为起点，从其左儿子向下遍历的路径 [2, 4, 9] 和从其右儿子向下遍历的路径 [2, 5, 7, 8] 拼接得到。\n\n假设我们知道对于该节点的左儿子向下遍历经过最多的节点数 LLL （即以左儿子为根的子树的深度） 和其右儿子向下遍历经过最多的节点数 R（即以右儿子为根的子树的深度），`那么以该节点为起点的路径经过节点数的最大值即为 L+R+1` 。\n\n我们记节点 node 为起点的路径经过节点数的最大值为 d~noded~ ，那么二叉树的直径就是所有节点  d~noded~的最大值减一。\n\n最后的算法流程为：我们定义一个`递归函数 depth(node) 计算 depth(node)`  ，函数返回该节点为根的子树的深度。先`递归调用左儿子和右儿子求得它们为根的子树的深度 L 和 R `，则该节点为根的子树的深度即为\n\n`max(L,R)+1`\n\n该节点的 depth(node) 值为\n\n`L+R+1`\n\n递归搜索每个节点并设一个`全局变量 ans记录 depth(node) 的最大值，最后返回 ans-1 即为树的直径`。\n\n```java\nclass Solution {\n    int ans;\n    public int diameterOfBinaryTree(TreeNode root) {\n        ans = 1;\n        depth(root);\n        return ans - 1;\n    }\n    public int depth(TreeNode node) {\n        if (node == null) {\n            return 0; // 访问到空节点了，返回0\n        }\n        int L = depth(node.left); // 左儿子为根的子树的深度\n        int R = depth(node.right); // 右儿子为根的子树的深度\n        ans = Math.max(ans, L+R+1); // 计算d_node即L+R+1 并更新ans\n        return Math.max(L, R) + 1; // 返回该节点为根的子树的深度\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N)，其中 N 为二叉树的节点数，即遍历一棵二叉树的时间复杂度，每个结点只被访问一次。\n\n- 空间复杂度：O(Height)其中 Height 为二叉树的高度。由于递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，而递归的深度显然为二叉树的高度，并且每次递归调用的函数里又只用了常数个变量，所以所需空间复杂度为 O(Height)O(Height) 。\n\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/er-cha-shu-de-zhi-jing-by-leetcode-solution/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n#### [560. 和为 K 的子数组](https://leetcode-cn.com/problems/subarray-sum-equals-k/)\n\n给你一个整数数组 `nums `和一个整数 `k `，请你统计并返回该数组中和为 `k `的连续子数组的个数。\n\n**示例 1：**\n\n```\n输入：nums = [1,1,1], k = 2\n输出：2\n```\n\n**示例 2：**\n\n```\n输入：nums = [1,2,3], k = 3\n输出：2\n```\n\n![image-20211123105300590](http://typa.qingyun.run/img/image-20211123105300590.png)\n\n```java\npublic class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int count = 0;\n        for (int start = 0; start < nums.length; ++start) {\n            int sum = 0;\n            for (int end = start; end >= 0; --end) {\n                sum += nums[end];\n                if (sum == k) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n```\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/he-wei-kde-zi-shu-zu-by-leetcode-solution/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n#### [581. 最短无序连续子数组](https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/)\n\n给你一个整数数组 `nums `，你需要找出一个 连续子数组 ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。\n\n请你找出符合题意的 最短 子数组，并输出它的长度。\n\n**示例 1：**\n\n```\n输入：nums = [2,6,4,8,10,9,15]\n输出：5\n解释：你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。\n```\n\n**示例 2：**\n\n```\n输入：nums = [1,2,3,4]\n输出：0\n```\n\n**示例 3：**\n\n```\n输入：nums = [1]\n输出：0\n```\n\n![image-20211123105551003](http://typa.typa.qingyun.run/img/image-20211123105551003.png)\n\n```java\nclass Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        if (isSorted(nums)) {\n            return 0;\n        }\n        int[] numsSorted = new int[nums.length];\n        System.arraycopy(nums, 0, numsSorted, 0, nums.length);\n        Arrays.sort(numsSorted);\n        int left = 0;\n        while (nums[left] == numsSorted[left]) {\n            left++;\n        }\n        int right = nums.length - 1;\n        while (nums[right] == numsSorted[right]) {\n            right--;\n        }\n        return right - left + 1;\n    }\n\n    public boolean isSorted(int[] nums) {\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] < nums[i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/solution/zui-duan-wu-xu-lian-xu-zi-shu-zu-by-leet-yhlf/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n#### [739. 每日温度](https://leetcode-cn.com/problems/daily-temperatures/)\n\n请根据每日 `气温` 列表 `temperatures` ，请计算在每一天需要等几天才会有更高的温度。如果气温在这之后都不会升高，请在该位置用 `0` 来代替。\n\n**示例 1:**\n\n```\n输入: temperatures = [73,74,75,71,69,72,76,73]\n输出: [1,1,4,2,1,1,0,0]\n```\n\n**示例 2:**\n\n```\n输入: temperatures = [30,40,50,60]\n输出: [1,1,1,0]\n```\n\n**示例 3:**\n\n```\n输入: temperatures = [30,60,90]\n输出: [1,1,0]\n```\n\n![image-20211123105752663](http://typa.qingyun.run/img/image-20211123105752663.png)\n\n```java\nclass Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        int length = temperatures.length;\n        int[] ans = new int[length];\n        int[] next = new int[101];\n        Arrays.fill(next, Integer.MAX_VALUE);\n        for (int i = length - 1; i >= 0; --i) {\n            int warmerIndex = Integer.MAX_VALUE;\n            for (int t = temperatures[i] + 1; t <= 100; ++t) {\n                if (next[t] < warmerIndex) {\n                    warmerIndex = next[t];\n                }\n            }\n            if (warmerIndex < Integer.MAX_VALUE) {\n                ans[i] = warmerIndex - i;\n            }\n            next[temperatures[i]] = i;\n        }\n        return ans;\n    }\n}\n\n```\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/daily-temperatures/solution/mei-ri-wen-du-by-leetcode-solution/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n","source":"_posts/20211123-力扣.md","raw":"---\ntitle: '### 20211123  力扣'\ntags:\n  - 力扣\n  - 算法题\ncategories: LeetCode\nabbrlink: 2014279217\ndate: 2021-11-29 09:01:33\ndescription: 2021-11-23 00:00:00\n---\n### 2021/11/23  力扣\n\n#### [543. 二叉树的直径](https://leetcode-cn.com/problems/diameter-of-binary-tree/)\n\n给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。\n\n \n\n示例 :\n给定二叉树\n\n          1\n         / \\\n        2   3\n       / \\     \n      4   5    \n\n返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。\n\n \n\n注意：两结点之间的路径长度是以它们之间边的数目表示。\n\n解析：\n\n首先我们知道一条路径的长度为该路径经过的节点数减一，所以`求直径（即求路径长度的最大值）等效于求路径经过节点数的最大值减一`。 `length = max - 1;`\n\n而任意一条路径均可以被看作由某个节点为起点，从其`左儿子和右儿子向下遍历的路径拼接得到`。\n\n![543.jpg](http://typa.qingyun.run/img/f39419c0fd3b3225a643ac4f40a1289c93cb03a6fb07a0be9e763c732a49b47d-543.jpg)\n\n如图我们可以知道路径 [9, 4, 2, 5, 7, 8] 可以被看作以 222 为起点，从其左儿子向下遍历的路径 [2, 4, 9] 和从其右儿子向下遍历的路径 [2, 5, 7, 8] 拼接得到。\n\n假设我们知道对于该节点的左儿子向下遍历经过最多的节点数 LLL （即以左儿子为根的子树的深度） 和其右儿子向下遍历经过最多的节点数 R（即以右儿子为根的子树的深度），`那么以该节点为起点的路径经过节点数的最大值即为 L+R+1` 。\n\n我们记节点 node 为起点的路径经过节点数的最大值为 d~noded~ ，那么二叉树的直径就是所有节点  d~noded~的最大值减一。\n\n最后的算法流程为：我们定义一个`递归函数 depth(node) 计算 depth(node)`  ，函数返回该节点为根的子树的深度。先`递归调用左儿子和右儿子求得它们为根的子树的深度 L 和 R `，则该节点为根的子树的深度即为\n\n`max(L,R)+1`\n\n该节点的 depth(node) 值为\n\n`L+R+1`\n\n递归搜索每个节点并设一个`全局变量 ans记录 depth(node) 的最大值，最后返回 ans-1 即为树的直径`。\n\n```java\nclass Solution {\n    int ans;\n    public int diameterOfBinaryTree(TreeNode root) {\n        ans = 1;\n        depth(root);\n        return ans - 1;\n    }\n    public int depth(TreeNode node) {\n        if (node == null) {\n            return 0; // 访问到空节点了，返回0\n        }\n        int L = depth(node.left); // 左儿子为根的子树的深度\n        int R = depth(node.right); // 右儿子为根的子树的深度\n        ans = Math.max(ans, L+R+1); // 计算d_node即L+R+1 并更新ans\n        return Math.max(L, R) + 1; // 返回该节点为根的子树的深度\n    }\n}\n```\n\n**复杂度分析**\n\n- 时间复杂度：O(N)，其中 N 为二叉树的节点数，即遍历一棵二叉树的时间复杂度，每个结点只被访问一次。\n\n- 空间复杂度：O(Height)其中 Height 为二叉树的高度。由于递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，而递归的深度显然为二叉树的高度，并且每次递归调用的函数里又只用了常数个变量，所以所需空间复杂度为 O(Height)O(Height) 。\n\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/er-cha-shu-de-zhi-jing-by-leetcode-solution/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n#### [560. 和为 K 的子数组](https://leetcode-cn.com/problems/subarray-sum-equals-k/)\n\n给你一个整数数组 `nums `和一个整数 `k `，请你统计并返回该数组中和为 `k `的连续子数组的个数。\n\n**示例 1：**\n\n```\n输入：nums = [1,1,1], k = 2\n输出：2\n```\n\n**示例 2：**\n\n```\n输入：nums = [1,2,3], k = 3\n输出：2\n```\n\n![image-20211123105300590](http://typa.qingyun.run/img/image-20211123105300590.png)\n\n```java\npublic class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int count = 0;\n        for (int start = 0; start < nums.length; ++start) {\n            int sum = 0;\n            for (int end = start; end >= 0; --end) {\n                sum += nums[end];\n                if (sum == k) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n}\n```\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/he-wei-kde-zi-shu-zu-by-leetcode-solution/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n#### [581. 最短无序连续子数组](https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/)\n\n给你一个整数数组 `nums `，你需要找出一个 连续子数组 ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。\n\n请你找出符合题意的 最短 子数组，并输出它的长度。\n\n**示例 1：**\n\n```\n输入：nums = [2,6,4,8,10,9,15]\n输出：5\n解释：你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。\n```\n\n**示例 2：**\n\n```\n输入：nums = [1,2,3,4]\n输出：0\n```\n\n**示例 3：**\n\n```\n输入：nums = [1]\n输出：0\n```\n\n![image-20211123105551003](http://typa.typa.qingyun.run/img/image-20211123105551003.png)\n\n```java\nclass Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        if (isSorted(nums)) {\n            return 0;\n        }\n        int[] numsSorted = new int[nums.length];\n        System.arraycopy(nums, 0, numsSorted, 0, nums.length);\n        Arrays.sort(numsSorted);\n        int left = 0;\n        while (nums[left] == numsSorted[left]) {\n            left++;\n        }\n        int right = nums.length - 1;\n        while (nums[right] == numsSorted[right]) {\n            right--;\n        }\n        return right - left + 1;\n    }\n\n    public boolean isSorted(int[] nums) {\n        for (int i = 1; i < nums.length; i++) {\n            if (nums[i] < nums[i - 1]) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/solution/zui-duan-wu-xu-lian-xu-zi-shu-zu-by-leet-yhlf/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n#### [739. 每日温度](https://leetcode-cn.com/problems/daily-temperatures/)\n\n请根据每日 `气温` 列表 `temperatures` ，请计算在每一天需要等几天才会有更高的温度。如果气温在这之后都不会升高，请在该位置用 `0` 来代替。\n\n**示例 1:**\n\n```\n输入: temperatures = [73,74,75,71,69,72,76,73]\n输出: [1,1,4,2,1,1,0,0]\n```\n\n**示例 2:**\n\n```\n输入: temperatures = [30,40,50,60]\n输出: [1,1,1,0]\n```\n\n**示例 3:**\n\n```\n输入: temperatures = [30,60,90]\n输出: [1,1,0]\n```\n\n![image-20211123105752663](http://typa.qingyun.run/img/image-20211123105752663.png)\n\n```java\nclass Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        int length = temperatures.length;\n        int[] ans = new int[length];\n        int[] next = new int[101];\n        Arrays.fill(next, Integer.MAX_VALUE);\n        for (int i = length - 1; i >= 0; --i) {\n            int warmerIndex = Integer.MAX_VALUE;\n            for (int t = temperatures[i] + 1; t <= 100; ++t) {\n                if (next[t] < warmerIndex) {\n                    warmerIndex = next[t];\n                }\n            }\n            if (warmerIndex < Integer.MAX_VALUE) {\n                ans[i] = warmerIndex - i;\n            }\n            next[temperatures[i]] = i;\n        }\n        return ans;\n    }\n}\n\n```\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/daily-temperatures/solution/mei-ri-wen-du-by-leetcode-solution/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n","slug":"20211123-力扣","published":1,"updated":"2021-11-29T01:05:24.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2r1000bo4vbetpo75nz","content":"<h3 id=\"2021-11-23-力扣\">2021/11/23  力扣</h3>\n<h4 id=\"543-二叉树的直径\"><a href=\"https://leetcode-cn.com/problems/diameter-of-binary-tree/\">543. 二叉树的直径</a></h4>\n<p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p>\n<p>示例 :<br>\n给定二叉树</p>\n<pre><code>      1\n     / \\\n    2   3\n   / \\     \n  4   5    \n</code></pre>\n<p>返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p>\n<p>注意：两结点之间的路径长度是以它们之间边的数目表示。</p>\n<p>解析：</p>\n<p>首先我们知道一条路径的长度为该路径经过的节点数减一，所以<code>求直径（即求路径长度的最大值）等效于求路径经过节点数的最大值减一</code>。 <code>length = max - 1;</code></p>\n<p>而任意一条路径均可以被看作由某个节点为起点，从其<code>左儿子和右儿子向下遍历的路径拼接得到</code>。</p>\n<p><img src=\"http://typa.qingyun.run/img/f39419c0fd3b3225a643ac4f40a1289c93cb03a6fb07a0be9e763c732a49b47d-543.jpg\" alt=\"543.jpg\"></p>\n<p>如图我们可以知道路径 [9, 4, 2, 5, 7, 8] 可以被看作以 222 为起点，从其左儿子向下遍历的路径 [2, 4, 9] 和从其右儿子向下遍历的路径 [2, 5, 7, 8] 拼接得到。</p>\n<p>假设我们知道对于该节点的左儿子向下遍历经过最多的节点数 LLL （即以左儿子为根的子树的深度） 和其右儿子向下遍历经过最多的节点数 R（即以右儿子为根的子树的深度），<code>那么以该节点为起点的路径经过节点数的最大值即为 L+R+1</code> 。</p>\n<p>我们记节点 node 为起点的路径经过节点数的最大值为 d~noded~ ，那么二叉树的直径就是所有节点  d~noded~的最大值减一。</p>\n<p>最后的算法流程为：我们定义一个<code>递归函数 depth(node) 计算 depth(node)</code>  ，函数返回该节点为根的子树的深度。先<code>递归调用左儿子和右儿子求得它们为根的子树的深度 L 和 R </code>，则该节点为根的子树的深度即为</p>\n<p><code>max(L,R)+1</code></p>\n<p>该节点的 depth(node) 值为</p>\n<p><code>L+R+1</code></p>\n<p>递归搜索每个节点并设一个<code>全局变量 ans记录 depth(node) 的最大值，最后返回 ans-1 即为树的直径</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">diameterOfBinaryTree</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        depth(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">depth</span><span class=\"params\">(TreeNode node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 访问到空节点了，返回0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> L = depth(node.left); <span class=\"comment\">// 左儿子为根的子树的深度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> R = depth(node.right); <span class=\"comment\">// 右儿子为根的子树的深度</span></span><br><span class=\"line\">        ans = Math.max(ans, L+R+<span class=\"number\">1</span>); <span class=\"comment\">// 计算d_node即L+R+1 并更新ans</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(L, R) + <span class=\"number\">1</span>; <span class=\"comment\">// 返回该节点为根的子树的深度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂度分析</strong></p>\n<ul>\n<li>\n<p>时间复杂度：O(N)，其中 N 为二叉树的节点数，即遍历一棵二叉树的时间复杂度，每个结点只被访问一次。</p>\n</li>\n<li>\n<p>空间复杂度：O(Height)其中 Height 为二叉树的高度。由于递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，而递归的深度显然为二叉树的高度，并且每次递归调用的函数里又只用了常数个变量，所以所需空间复杂度为 O(Height)O(Height) 。</p>\n</li>\n</ul>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/er-cha-shu-de-zhi-jing-by-leetcode-solution/\">https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/er-cha-shu-de-zhi-jing-by-leetcode-solution/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h4 id=\"560-和为-K-的子数组\"><a href=\"https://leetcode-cn.com/problems/subarray-sum-equals-k/\">560. 和为 K 的子数组</a></h4>\n<p>给你一个整数数组 <code>nums </code>和一个整数 <code>k </code>，请你统计并返回该数组中和为 <code>k </code>的连续子数组的个数。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,1,1], k = 2</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3], k = 3</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211123105300590.png\" alt=\"image-20211123105300590\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">subarraySum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> start = <span class=\"number\">0</span>; start &lt; nums.length; ++start) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> end = start; end &gt;= <span class=\"number\">0</span>; --end) &#123;</span><br><span class=\"line\">                sum += nums[end];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sum == k) &#123;</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/he-wei-kde-zi-shu-zu-by-leetcode-solution/\">https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/he-wei-kde-zi-shu-zu-by-leetcode-solution/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h4 id=\"581-最短无序连续子数组\"><a href=\"https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/\">581. 最短无序连续子数组</a></h4>\n<p>给你一个整数数组 <code>nums </code>，你需要找出一个 连续子数组 ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。</p>\n<p>请你找出符合题意的 最短 子数组，并输出它的长度。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,6,4,8,10,9,15]</span><br><span class=\"line\">输出：5</span><br><span class=\"line\">解释：你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3,4]</span><br><span class=\"line\">输出：0</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1]</span><br><span class=\"line\">输出：0</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.typa.qingyun.run/img/image-20211123105551003.png\" alt=\"image-20211123105551003\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findUnsortedSubarray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSorted(nums)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numsSorted = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">        System.arraycopy(nums, <span class=\"number\">0</span>, numsSorted, <span class=\"number\">0</span>, nums.length);</span><br><span class=\"line\">        Arrays.sort(numsSorted);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nums[left] == numsSorted[left]) &#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nums[right] == numsSorted[right]) &#123;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right - left + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSorted</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &lt; nums[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/solution/zui-duan-wu-xu-lian-xu-zi-shu-zu-by-leet-yhlf/\">https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/solution/zui-duan-wu-xu-lian-xu-zi-shu-zu-by-leet-yhlf/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h4 id=\"739-每日温度\"><a href=\"https://leetcode-cn.com/problems/daily-temperatures/\">739. 每日温度</a></h4>\n<p>请根据每日 <code>气温</code> 列表 <code>temperatures</code> ，请计算在每一天需要等几天才会有更高的温度。如果气温在这之后都不会升高，请在该位置用 <code>0</code> 来代替。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: temperatures = [73,74,75,71,69,72,76,73]</span><br><span class=\"line\">输出: [1,1,4,2,1,1,0,0]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: temperatures = [30,40,50,60]</span><br><span class=\"line\">输出: [1,1,1,0]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: temperatures = [30,60,90]</span><br><span class=\"line\">输出: [1,1,0]</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211123105752663.png\" alt=\"image-20211123105752663\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] dailyTemperatures(<span class=\"keyword\">int</span>[] temperatures) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = temperatures.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ans = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\">        Arrays.fill(next, Integer.MAX_VALUE);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> warmerIndex = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t = temperatures[i] + <span class=\"number\">1</span>; t &lt;= <span class=\"number\">100</span>; ++t) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (next[t] &lt; warmerIndex) &#123;</span><br><span class=\"line\">                    warmerIndex = next[t];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (warmerIndex &lt; Integer.MAX_VALUE) &#123;</span><br><span class=\"line\">                ans[i] = warmerIndex - i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next[temperatures[i]] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/daily-temperatures/solution/mei-ri-wen-du-by-leetcode-solution/\">https://leetcode-cn.com/problems/daily-temperatures/solution/mei-ri-wen-du-by-leetcode-solution/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<h3 id=\"2021-11-23-力扣\">2021/11/23  力扣</h3>\n<h4 id=\"543-二叉树的直径\"><a href=\"https://leetcode-cn.com/problems/diameter-of-binary-tree/\">543. 二叉树的直径</a></h4>\n<p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过也可能不穿过根结点。</p>\n<p>示例 :<br>\n给定二叉树</p>\n<pre><code>      1\n     / \\\n    2   3\n   / \\     \n  4   5    \n</code></pre>\n<p>返回 3, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p>\n<p>注意：两结点之间的路径长度是以它们之间边的数目表示。</p>\n<p>解析：</p>\n<p>首先我们知道一条路径的长度为该路径经过的节点数减一，所以<code>求直径（即求路径长度的最大值）等效于求路径经过节点数的最大值减一</code>。 <code>length = max - 1;</code></p>\n<p>而任意一条路径均可以被看作由某个节点为起点，从其<code>左儿子和右儿子向下遍历的路径拼接得到</code>。</p>\n<p><img src=\"http://typa.qingyun.run/img/f39419c0fd3b3225a643ac4f40a1289c93cb03a6fb07a0be9e763c732a49b47d-543.jpg\" alt=\"543.jpg\"></p>\n<p>如图我们可以知道路径 [9, 4, 2, 5, 7, 8] 可以被看作以 222 为起点，从其左儿子向下遍历的路径 [2, 4, 9] 和从其右儿子向下遍历的路径 [2, 5, 7, 8] 拼接得到。</p>\n<p>假设我们知道对于该节点的左儿子向下遍历经过最多的节点数 LLL （即以左儿子为根的子树的深度） 和其右儿子向下遍历经过最多的节点数 R（即以右儿子为根的子树的深度），<code>那么以该节点为起点的路径经过节点数的最大值即为 L+R+1</code> 。</p>\n<p>我们记节点 node 为起点的路径经过节点数的最大值为 d~noded~ ，那么二叉树的直径就是所有节点  d~noded~的最大值减一。</p>\n<p>最后的算法流程为：我们定义一个<code>递归函数 depth(node) 计算 depth(node)</code>  ，函数返回该节点为根的子树的深度。先<code>递归调用左儿子和右儿子求得它们为根的子树的深度 L 和 R </code>，则该节点为根的子树的深度即为</p>\n<p><code>max(L,R)+1</code></p>\n<p>该节点的 depth(node) 值为</p>\n<p><code>L+R+1</code></p>\n<p>递归搜索每个节点并设一个<code>全局变量 ans记录 depth(node) 的最大值，最后返回 ans-1 即为树的直径</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">diameterOfBinaryTree</span><span class=\"params\">(TreeNode root)</span> </span>&#123;</span><br><span class=\"line\">        ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">        depth(root);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">depth</span><span class=\"params\">(TreeNode node)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>; <span class=\"comment\">// 访问到空节点了，返回0</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> L = depth(node.left); <span class=\"comment\">// 左儿子为根的子树的深度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> R = depth(node.right); <span class=\"comment\">// 右儿子为根的子树的深度</span></span><br><span class=\"line\">        ans = Math.max(ans, L+R+<span class=\"number\">1</span>); <span class=\"comment\">// 计算d_node即L+R+1 并更新ans</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(L, R) + <span class=\"number\">1</span>; <span class=\"comment\">// 返回该节点为根的子树的深度</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>复杂度分析</strong></p>\n<ul>\n<li>\n<p>时间复杂度：O(N)，其中 N 为二叉树的节点数，即遍历一棵二叉树的时间复杂度，每个结点只被访问一次。</p>\n</li>\n<li>\n<p>空间复杂度：O(Height)其中 Height 为二叉树的高度。由于递归函数在递归过程中需要为每一层递归函数分配栈空间，所以这里需要额外的空间且该空间取决于递归的深度，而递归的深度显然为二叉树的高度，并且每次递归调用的函数里又只用了常数个变量，所以所需空间复杂度为 O(Height)O(Height) 。</p>\n</li>\n</ul>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/er-cha-shu-de-zhi-jing-by-leetcode-solution/\">https://leetcode-cn.com/problems/diameter-of-binary-tree/solution/er-cha-shu-de-zhi-jing-by-leetcode-solution/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h4 id=\"560-和为-K-的子数组\"><a href=\"https://leetcode-cn.com/problems/subarray-sum-equals-k/\">560. 和为 K 的子数组</a></h4>\n<p>给你一个整数数组 <code>nums </code>和一个整数 <code>k </code>，请你统计并返回该数组中和为 <code>k </code>的连续子数组的个数。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,1,1], k = 2</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3], k = 3</span><br><span class=\"line\">输出：2</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211123105300590.png\" alt=\"image-20211123105300590\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">subarraySum</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> start = <span class=\"number\">0</span>; start &lt; nums.length; ++start) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> end = start; end &gt;= <span class=\"number\">0</span>; --end) &#123;</span><br><span class=\"line\">                sum += nums[end];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sum == k) &#123;</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/he-wei-kde-zi-shu-zu-by-leetcode-solution/\">https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/he-wei-kde-zi-shu-zu-by-leetcode-solution/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h4 id=\"581-最短无序连续子数组\"><a href=\"https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/\">581. 最短无序连续子数组</a></h4>\n<p>给你一个整数数组 <code>nums </code>，你需要找出一个 连续子数组 ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。</p>\n<p>请你找出符合题意的 最短 子数组，并输出它的长度。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [2,6,4,8,10,9,15]</span><br><span class=\"line\">输出：5</span><br><span class=\"line\">解释：你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1,2,3,4]</span><br><span class=\"line\">输出：0</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：nums = [1]</span><br><span class=\"line\">输出：0</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.typa.qingyun.run/img/image-20211123105551003.png\" alt=\"image-20211123105551003\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findUnsortedSubarray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isSorted(nums)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] numsSorted = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">        System.arraycopy(nums, <span class=\"number\">0</span>, numsSorted, <span class=\"number\">0</span>, nums.length);</span><br><span class=\"line\">        Arrays.sort(numsSorted);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nums[left] == numsSorted[left]) &#123;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (nums[right] == numsSorted[right]) &#123;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> right - left + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSorted</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i] &lt; nums[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/solution/zui-duan-wu-xu-lian-xu-zi-shu-zu-by-leet-yhlf/\">https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/solution/zui-duan-wu-xu-lian-xu-zi-shu-zu-by-leet-yhlf/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n<h4 id=\"739-每日温度\"><a href=\"https://leetcode-cn.com/problems/daily-temperatures/\">739. 每日温度</a></h4>\n<p>请根据每日 <code>气温</code> 列表 <code>temperatures</code> ，请计算在每一天需要等几天才会有更高的温度。如果气温在这之后都不会升高，请在该位置用 <code>0</code> 来代替。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: temperatures = [73,74,75,71,69,72,76,73]</span><br><span class=\"line\">输出: [1,1,4,2,1,1,0,0]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: temperatures = [30,40,50,60]</span><br><span class=\"line\">输出: [1,1,1,0]</span><br></pre></td></tr></table></figure>\n<p><strong>示例 3:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: temperatures = [30,60,90]</span><br><span class=\"line\">输出: [1,1,0]</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211123105752663.png\" alt=\"image-20211123105752663\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[] dailyTemperatures(<span class=\"keyword\">int</span>[] temperatures) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = temperatures.length;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] ans = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[length];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] next = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">101</span>];</span><br><span class=\"line\">        Arrays.fill(next, Integer.MAX_VALUE);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> warmerIndex = Integer.MAX_VALUE;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> t = temperatures[i] + <span class=\"number\">1</span>; t &lt;= <span class=\"number\">100</span>; ++t) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (next[t] &lt; warmerIndex) &#123;</span><br><span class=\"line\">                    warmerIndex = next[t];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (warmerIndex &lt; Integer.MAX_VALUE) &#123;</span><br><span class=\"line\">                ans[i] = warmerIndex - i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            next[temperatures[i]] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/daily-temperatures/solution/mei-ri-wen-du-by-leetcode-solution/\">https://leetcode-cn.com/problems/daily-temperatures/solution/mei-ri-wen-du-by-leetcode-solution/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"20211203","abbrlink":3501514868,"date":"2021-12-03T01:51:36.000Z","_content":"### 2021/12/2\n\n#### [438. 找到字符串中所有字母异位词](https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/)\n\n给定两个字符串 `s` 和 `p`，找到 `s` 中所有 `p` 的 `异位词 `的子串，返回这些子串的起始索引。不考虑答案输出的`顺序`。\n\n`异位词 `指由相同字母重排列形成的字符串（包括相同的字符串）。\n\n \n\n**示例 1:**\n\n```\n输入: s = \"cbaebabacd\", p = \"abc\"\n输出: [0,6]\n解释:\n起始索引等于 0 的子串是 \"cba\", 它是 \"abc\" 的异位词。\n起始索引等于 6 的子串是 \"bac\", 它是 \"abc\" 的异位词。\n```\n\n **示例 2:**\n\n```\n输入: s = \"abab\", p = \"ab\"\n输出: [0,1,2]\n解释:\n起始索引等于 0 的子串是 \"ab\", 它是 \"ab\" 的异位词。\n起始索引等于 1 的子串是 \"ba\", 它是 \"ab\" 的异位词。\n起始索引等于 2 的子串是 \"ab\", 它是 \"ab\" 的异位词。\n```\n\n方法一：滑动窗口\n\n思路\n\n根据题目要求，我们需要在字符串 s 寻找字符串 p 的异位词。因为字符串 p 的异位词的长度一定与字符串 p 的长度相同，所以我们可以在字符串 s 中构造一个长度为与字符串 p 的长度相同的滑动窗口，并在滑动中维护窗口中每种字母的数量；当窗口中每种字母的数量与字符串 p 中每种字母的数量相同时，则说明当前窗口为字符串 p 的异位词。\n\n算法\n\n在算法的实现中，我们可以使用数组来存储字符串 p 和滑动窗口中每种字母的数量。\n\n细节\n\n当字符串 s 的长度小于字符串 p 的长度时，字符串 s 中一定不存在字符串 p 的异位词。但是因为字符串 s 中无法构造长度与字符串 p 的长度相同的窗口，所以这种情况需要单独处理。\n\n```java\nclass Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n        int sLen = s.length(), pLen = p.length();\n\n        if (sLen < pLen) {\n            return new ArrayList<Integer>();\n        }\n\n        List<Integer> ans = new ArrayList<Integer>();\n        int[] sCount = new int[26];\n        int[] pCount = new int[26];\n        for (int i = 0; i < pLen; ++i) {\n            ++sCount[s.charAt(i) - 'a'];\n            ++pCount[p.charAt(i) - 'a'];\n        }\n\n        if (Arrays.equals(sCount, pCount)) {\n            ans.add(0);\n        }\n\n        for (int i = 0; i < sLen - pLen; ++i) {\n            --sCount[s.charAt(i) - 'a'];\n            ++sCount[s.charAt(i + pLen) - 'a'];\n\n            if (Arrays.equals(sCount, pCount)) {\n                ans.add(i + 1);\n            }\n        }\n\n        return ans;\n    }\n}\n```\n\n[713. 乘积小于K的子数组](https://leetcode-cn.com/problems/subarray-product-less-than-k/)\n\n给定一个正整数数组 `nums`和整数 `k` 。\n\n请找出该数组内乘积小于 `k` 的连续的子数组的个数。\n\n示例 1:\n\n输入: nums = [10,5,2,6], k = 100\n输出: 8\n解释: 8个乘积小于100的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。\n需要注意的是 [10,5,2] 并不是乘积小于100的子数组。\n\n![image-20211203093926591](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211203093926591.png?x-oss-process=style/qingyun)\n\n```java\nclass Solution {\n    public int numSubarrayProductLessThanK(int[] nums, int k) {\n        if (k <= 1) return 0;\n        int prod = 1, ans = 0, left = 0;\n        for (int right = 0; right < nums.length; right++) {\n            prod *= nums[right];\n            while (prod >= k) prod /= nums[left++];\n            ans += right - left + 1;\n        }\n        return ans;\n    }\n}\n```\n\n[209. 长度最小的子数组](https://leetcode-cn.com/problems/minimum-size-subarray-sum/)\n\n给定一个含有 n 个正整数的数组和一个正整数 target 。\n\n找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。\n\n**示例 1：**\n\n```\n输入：target = 7, nums = [2,3,1,2,4,3]\n输出：2\n解释：子数组 [4,3] 是该条件下的长度最小的子数组。\n```\n\n![image-20211203094335615](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211203094335615.png?x-oss-process=style/qingyun)\n\n```java\nclass Solution {\n    public int minSubArrayLen(int s, int[] nums) {\n        int n = nums.length;\n        if (n == 0) {\n            return 0;\n        }\n        int ans = Integer.MAX_VALUE;\n        int start = 0, end = 0;\n        int sum = 0;\n        while (end < n) {\n            sum += nums[end];\n            while (sum >= s) {\n                ans = Math.min(ans, end - start + 1);\n                sum -= nums[start];\n                start++;\n            }\n            end++;\n        }\n        return ans == Integer.MAX_VALUE ? 0 : ans;\n    }\n}\n```\n\n[200. 岛屿数量](https://leetcode-cn.com/problems/number-of-islands/)\n\n给你一个由 `'1'`（陆地）和 `'0'`（水）组成的的二维网格，请你计算网格中岛屿的数量。\n\n岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。\n\n此外，你可以假设该网格的四条边均被水包围。\n\n**示例 1：**\n\n```\n输入：grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\n输出：1\n```\n\n- 思路：遍历岛这个二维数组，如果当前数为1，则进入感染函数并将岛个数+1\n- 感染函数：其实就是一个递归标注的过程，它会将所有相连的1都标注成2。为什么要标注？这样就避免了遍历过程中的重复计数的情况，一个岛所有的1都变成了2后，遍历的时候就不会重复遍历了。建议没想明白的同学画个图看看。\n\n```java\nclass Solution {\n    public int numIslands(char[][] grid) {\n        int count = 0;\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                if (grid[i][j] == '1'){\n                    inject(grid,i,j);\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private void inject(char[][] grid, int i, int j) {\n        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != '1'){\n            return;\n        }\n        grid[i][j] = '2';\n        inject(grid,i-1,j);\n        inject(grid,i+1,j);\n        inject(grid,i,j-1);\n        inject(grid,i,j+1);\n\n    }\n}\n```\n\n[547. 省份数量](https://leetcode-cn.com/problems/number-of-provinces/)\n\n有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。\n\n省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。\n\n给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。\n\n返回矩阵中 省份 的数量。\n\n![image-20211203094627016](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211203094627016.png?x-oss-process=style/qingyun)\n\n方法二：广度优先搜索\n\n也可以通过广度优先搜索的方法得到省份的总数。对于每个城市，如果该城市尚未被访问过，则从该城市开始广度优先搜索，直到同一个连通分量中的所有城市都被访问到，即可得到一个省份。\n\n```java\nclass Solution {\n    public int findCircleNum(int[][] isConnected) {\n        int provinces = isConnected.length;\n        boolean[] visited = new boolean[provinces];\n        int circles = 0;\n        Queue<Integer> queue = new LinkedList<Integer>();\n        for (int i = 0; i < provinces; i++) {\n            if (!visited[i]) {\n                queue.offer(i);\n                while (!queue.isEmpty()) {\n                    int j = queue.poll();\n                    visited[j] = true;\n                    for (int k = 0; k < provinces; k++) {\n                        if (isConnected[j][k] == 1 && !visited[k]) {\n                            queue.offer(k);\n                        }\n                    }\n                }\n                circles++;\n            }\n        }\n        return circles;\n    }\n}\n```\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/number-of-provinces/solution/sheng-fen-shu-liang-by-leetcode-solution-eyk0/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","source":"_posts/20211203.md","raw":"---\ntitle: 20211203\ntags:\n  - 力扣\n  - 算法题\ncategories: LeetCode\nabbrlink: 3501514868\ndate: 2021-12-03 09:51:36\n---\n### 2021/12/2\n\n#### [438. 找到字符串中所有字母异位词](https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/)\n\n给定两个字符串 `s` 和 `p`，找到 `s` 中所有 `p` 的 `异位词 `的子串，返回这些子串的起始索引。不考虑答案输出的`顺序`。\n\n`异位词 `指由相同字母重排列形成的字符串（包括相同的字符串）。\n\n \n\n**示例 1:**\n\n```\n输入: s = \"cbaebabacd\", p = \"abc\"\n输出: [0,6]\n解释:\n起始索引等于 0 的子串是 \"cba\", 它是 \"abc\" 的异位词。\n起始索引等于 6 的子串是 \"bac\", 它是 \"abc\" 的异位词。\n```\n\n **示例 2:**\n\n```\n输入: s = \"abab\", p = \"ab\"\n输出: [0,1,2]\n解释:\n起始索引等于 0 的子串是 \"ab\", 它是 \"ab\" 的异位词。\n起始索引等于 1 的子串是 \"ba\", 它是 \"ab\" 的异位词。\n起始索引等于 2 的子串是 \"ab\", 它是 \"ab\" 的异位词。\n```\n\n方法一：滑动窗口\n\n思路\n\n根据题目要求，我们需要在字符串 s 寻找字符串 p 的异位词。因为字符串 p 的异位词的长度一定与字符串 p 的长度相同，所以我们可以在字符串 s 中构造一个长度为与字符串 p 的长度相同的滑动窗口，并在滑动中维护窗口中每种字母的数量；当窗口中每种字母的数量与字符串 p 中每种字母的数量相同时，则说明当前窗口为字符串 p 的异位词。\n\n算法\n\n在算法的实现中，我们可以使用数组来存储字符串 p 和滑动窗口中每种字母的数量。\n\n细节\n\n当字符串 s 的长度小于字符串 p 的长度时，字符串 s 中一定不存在字符串 p 的异位词。但是因为字符串 s 中无法构造长度与字符串 p 的长度相同的窗口，所以这种情况需要单独处理。\n\n```java\nclass Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n        int sLen = s.length(), pLen = p.length();\n\n        if (sLen < pLen) {\n            return new ArrayList<Integer>();\n        }\n\n        List<Integer> ans = new ArrayList<Integer>();\n        int[] sCount = new int[26];\n        int[] pCount = new int[26];\n        for (int i = 0; i < pLen; ++i) {\n            ++sCount[s.charAt(i) - 'a'];\n            ++pCount[p.charAt(i) - 'a'];\n        }\n\n        if (Arrays.equals(sCount, pCount)) {\n            ans.add(0);\n        }\n\n        for (int i = 0; i < sLen - pLen; ++i) {\n            --sCount[s.charAt(i) - 'a'];\n            ++sCount[s.charAt(i + pLen) - 'a'];\n\n            if (Arrays.equals(sCount, pCount)) {\n                ans.add(i + 1);\n            }\n        }\n\n        return ans;\n    }\n}\n```\n\n[713. 乘积小于K的子数组](https://leetcode-cn.com/problems/subarray-product-less-than-k/)\n\n给定一个正整数数组 `nums`和整数 `k` 。\n\n请找出该数组内乘积小于 `k` 的连续的子数组的个数。\n\n示例 1:\n\n输入: nums = [10,5,2,6], k = 100\n输出: 8\n解释: 8个乘积小于100的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。\n需要注意的是 [10,5,2] 并不是乘积小于100的子数组。\n\n![image-20211203093926591](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211203093926591.png?x-oss-process=style/qingyun)\n\n```java\nclass Solution {\n    public int numSubarrayProductLessThanK(int[] nums, int k) {\n        if (k <= 1) return 0;\n        int prod = 1, ans = 0, left = 0;\n        for (int right = 0; right < nums.length; right++) {\n            prod *= nums[right];\n            while (prod >= k) prod /= nums[left++];\n            ans += right - left + 1;\n        }\n        return ans;\n    }\n}\n```\n\n[209. 长度最小的子数组](https://leetcode-cn.com/problems/minimum-size-subarray-sum/)\n\n给定一个含有 n 个正整数的数组和一个正整数 target 。\n\n找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。\n\n**示例 1：**\n\n```\n输入：target = 7, nums = [2,3,1,2,4,3]\n输出：2\n解释：子数组 [4,3] 是该条件下的长度最小的子数组。\n```\n\n![image-20211203094335615](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211203094335615.png?x-oss-process=style/qingyun)\n\n```java\nclass Solution {\n    public int minSubArrayLen(int s, int[] nums) {\n        int n = nums.length;\n        if (n == 0) {\n            return 0;\n        }\n        int ans = Integer.MAX_VALUE;\n        int start = 0, end = 0;\n        int sum = 0;\n        while (end < n) {\n            sum += nums[end];\n            while (sum >= s) {\n                ans = Math.min(ans, end - start + 1);\n                sum -= nums[start];\n                start++;\n            }\n            end++;\n        }\n        return ans == Integer.MAX_VALUE ? 0 : ans;\n    }\n}\n```\n\n[200. 岛屿数量](https://leetcode-cn.com/problems/number-of-islands/)\n\n给你一个由 `'1'`（陆地）和 `'0'`（水）组成的的二维网格，请你计算网格中岛屿的数量。\n\n岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。\n\n此外，你可以假设该网格的四条边均被水包围。\n\n**示例 1：**\n\n```\n输入：grid = [\n  [\"1\",\"1\",\"1\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"1\",\"0\"],\n  [\"1\",\"1\",\"0\",\"0\",\"0\"],\n  [\"0\",\"0\",\"0\",\"0\",\"0\"]\n]\n输出：1\n```\n\n- 思路：遍历岛这个二维数组，如果当前数为1，则进入感染函数并将岛个数+1\n- 感染函数：其实就是一个递归标注的过程，它会将所有相连的1都标注成2。为什么要标注？这样就避免了遍历过程中的重复计数的情况，一个岛所有的1都变成了2后，遍历的时候就不会重复遍历了。建议没想明白的同学画个图看看。\n\n```java\nclass Solution {\n    public int numIslands(char[][] grid) {\n        int count = 0;\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[0].length; j++) {\n                if (grid[i][j] == '1'){\n                    inject(grid,i,j);\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n\n    private void inject(char[][] grid, int i, int j) {\n        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != '1'){\n            return;\n        }\n        grid[i][j] = '2';\n        inject(grid,i-1,j);\n        inject(grid,i+1,j);\n        inject(grid,i,j-1);\n        inject(grid,i,j+1);\n\n    }\n}\n```\n\n[547. 省份数量](https://leetcode-cn.com/problems/number-of-provinces/)\n\n有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。\n\n省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。\n\n给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。\n\n返回矩阵中 省份 的数量。\n\n![image-20211203094627016](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211203094627016.png?x-oss-process=style/qingyun)\n\n方法二：广度优先搜索\n\n也可以通过广度优先搜索的方法得到省份的总数。对于每个城市，如果该城市尚未被访问过，则从该城市开始广度优先搜索，直到同一个连通分量中的所有城市都被访问到，即可得到一个省份。\n\n```java\nclass Solution {\n    public int findCircleNum(int[][] isConnected) {\n        int provinces = isConnected.length;\n        boolean[] visited = new boolean[provinces];\n        int circles = 0;\n        Queue<Integer> queue = new LinkedList<Integer>();\n        for (int i = 0; i < provinces; i++) {\n            if (!visited[i]) {\n                queue.offer(i);\n                while (!queue.isEmpty()) {\n                    int j = queue.poll();\n                    visited[j] = true;\n                    for (int k = 0; k < provinces; k++) {\n                        if (isConnected[j][k] == 1 && !visited[k]) {\n                            queue.offer(k);\n                        }\n                    }\n                }\n                circles++;\n            }\n        }\n        return circles;\n    }\n}\n```\n\n作者：LeetCode-Solution\n链接：https://leetcode-cn.com/problems/number-of-provinces/solution/sheng-fen-shu-liang-by-leetcode-solution-eyk0/\n来源：力扣（LeetCode）\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","slug":"20211203","published":1,"updated":"2021-12-03T01:53:14.552Z","_id":"ckwpqg2r4000fo4vb4zhsdawu","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"2021-12-2\">2021/12/2</h3>\n<h4 id=\"438-找到字符串中所有字母异位词\"><a href=\"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\">438. 找到字符串中所有字母异位词</a></h4>\n<p>给定两个字符串 <code>s</code> 和 <code>p</code>，找到 <code>s</code> 中所有 <code>p</code> 的 <code>异位词 </code>的子串，返回这些子串的起始索引。不考虑答案输出的<code>顺序</code>。</p>\n<p><code>异位词 </code>指由相同字母重排列形成的字符串（包括相同的字符串）。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;</span><br><span class=\"line\">输出: [0,6]</span><br><span class=\"line\">解释:</span><br><span class=\"line\">起始索引等于 0 的子串是 &quot;cba&quot;, 它是 &quot;abc&quot; 的异位词。</span><br><span class=\"line\">起始索引等于 6 的子串是 &quot;bac&quot;, 它是 &quot;abc&quot; 的异位词。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;abab&quot;, p = &quot;ab&quot;</span><br><span class=\"line\">输出: [0,1,2]</span><br><span class=\"line\">解释:</span><br><span class=\"line\">起始索引等于 0 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的异位词。</span><br><span class=\"line\">起始索引等于 1 的子串是 &quot;ba&quot;, 它是 &quot;ab&quot; 的异位词。</span><br><span class=\"line\">起始索引等于 2 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的异位词。</span><br></pre></td></tr></table></figure>\n<p>方法一：滑动窗口</p>\n<p>思路</p>\n<p>根据题目要求，我们需要在字符串 s 寻找字符串 p 的异位词。因为字符串 p 的异位词的长度一定与字符串 p 的长度相同，所以我们可以在字符串 s 中构造一个长度为与字符串 p 的长度相同的滑动窗口，并在滑动中维护窗口中每种字母的数量；当窗口中每种字母的数量与字符串 p 中每种字母的数量相同时，则说明当前窗口为字符串 p 的异位词。</p>\n<p>算法</p>\n<p>在算法的实现中，我们可以使用数组来存储字符串 p 和滑动窗口中每种字母的数量。</p>\n<p>细节</p>\n<p>当字符串 s 的长度小于字符串 p 的长度时，字符串 s 中一定不存在字符串 p 的异位词。但是因为字符串 s 中无法构造长度与字符串 p 的长度相同的窗口，所以这种情况需要单独处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">findAnagrams</span><span class=\"params\">(String s, String p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sLen = s.length(), pLen = p.length();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sLen &lt; pLen) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] sCount = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] pCount = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pLen; ++i) &#123;</span><br><span class=\"line\">            ++sCount[s.charAt(i) - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">            ++pCount[p.charAt(i) - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Arrays.equals(sCount, pCount)) &#123;</span><br><span class=\"line\">            ans.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sLen - pLen; ++i) &#123;</span><br><span class=\"line\">            --sCount[s.charAt(i) - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">            ++sCount[s.charAt(i + pLen) - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Arrays.equals(sCount, pCount)) &#123;</span><br><span class=\"line\">                ans.add(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/subarray-product-less-than-k/\">713. 乘积小于K的子数组</a></p>\n<p>给定一个正整数数组 <code>nums</code>和整数 <code>k</code> 。</p>\n<p>请找出该数组内乘积小于 <code>k</code> 的连续的子数组的个数。</p>\n<p>示例 1:</p>\n<p>输入: nums = [10,5,2,6], k = 100<br>\n输出: 8<br>\n解释: 8个乘积小于100的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。<br>\n需要注意的是 [10,5,2] 并不是乘积小于100的子数组。</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211203093926591.png?x-oss-process=style/qingyun\" alt=\"image-20211203093926591\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numSubarrayProductLessThanK</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prod = <span class=\"number\">1</span>, ans = <span class=\"number\">0</span>, left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> right = <span class=\"number\">0</span>; right &lt; nums.length; right++) &#123;</span><br><span class=\"line\">            prod *= nums[right];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (prod &gt;= k) prod /= nums[left++];</span><br><span class=\"line\">            ans += right - left + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/minimum-size-subarray-sum/\">209. 长度最小的子数组</a></p>\n<p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p>\n<p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211203094335615.png?x-oss-process=style/qingyun\" alt=\"image-20211203094335615\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minSubArrayLen</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (end &lt; n) &#123;</span><br><span class=\"line\">            sum += nums[end];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (sum &gt;= s) &#123;</span><br><span class=\"line\">                ans = Math.min(ans, end - start + <span class=\"number\">1</span>);</span><br><span class=\"line\">                sum -= nums[start];</span><br><span class=\"line\">                start++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            end++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans == Integer.MAX_VALUE ? <span class=\"number\">0</span> : ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/number-of-islands/\">200. 岛屿数量</a></p>\n<p>给你一个由 <code>'1'</code>（陆地）和 <code>'0'</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>\n<p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p>\n<p>此外，你可以假设该网格的四条边均被水包围。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：grid = [</span><br><span class=\"line\">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class=\"line\">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class=\"line\">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class=\"line\">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>思路：遍历岛这个二维数组，如果当前数为1，则进入感染函数并将岛个数+1</li>\n<li>感染函数：其实就是一个递归标注的过程，它会将所有相连的1都标注成2。为什么要标注？这样就避免了遍历过程中的重复计数的情况，一个岛所有的1都变成了2后，遍历的时候就不会重复遍历了。建议没想明白的同学画个图看看。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">                    inject(grid,i,j);</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= grid.length || j &lt; <span class=\"number\">0</span> || j &gt;= grid[<span class=\"number\">0</span>].length || grid[i][j] != <span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grid[i][j] = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">        inject(grid,i-<span class=\"number\">1</span>,j);</span><br><span class=\"line\">        inject(grid,i+<span class=\"number\">1</span>,j);</span><br><span class=\"line\">        inject(grid,i,j-<span class=\"number\">1</span>);</span><br><span class=\"line\">        inject(grid,i,j+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/number-of-provinces/\">547. 省份数量</a></p>\n<p>有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。</p>\n<p>省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p>\n<p>给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。</p>\n<p>返回矩阵中 省份 的数量。</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211203094627016.png?x-oss-process=style/qingyun\" alt=\"image-20211203094627016\"></p>\n<p>方法二：广度优先搜索</p>\n<p>也可以通过广度优先搜索的方法得到省份的总数。对于每个城市，如果该城市尚未被访问过，则从该城市开始广度优先搜索，直到同一个连通分量中的所有城市都被访问到，即可得到一个省份。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findCircleNum</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] isConnected)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> provinces = isConnected.length;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[provinces];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> circles = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Queue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; provinces; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[i]) &#123;</span><br><span class=\"line\">                queue.offer(i);</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> j = queue.poll();</span><br><span class=\"line\">                    visited[j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; provinces; k++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (isConnected[j][k] == <span class=\"number\">1</span> &amp;&amp; !visited[k]) &#123;</span><br><span class=\"line\">                            queue.offer(k);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                circles++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> circles;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/number-of-provinces/solution/sheng-fen-shu-liang-by-leetcode-solution-eyk0/\">https://leetcode-cn.com/problems/number-of-provinces/solution/sheng-fen-shu-liang-by-leetcode-solution-eyk0/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<h3 id=\"2021-12-2\">2021/12/2</h3>\n<h4 id=\"438-找到字符串中所有字母异位词\"><a href=\"https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/\">438. 找到字符串中所有字母异位词</a></h4>\n<p>给定两个字符串 <code>s</code> 和 <code>p</code>，找到 <code>s</code> 中所有 <code>p</code> 的 <code>异位词 </code>的子串，返回这些子串的起始索引。不考虑答案输出的<code>顺序</code>。</p>\n<p><code>异位词 </code>指由相同字母重排列形成的字符串（包括相同的字符串）。</p>\n<p><strong>示例 1:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;cbaebabacd&quot;, p = &quot;abc&quot;</span><br><span class=\"line\">输出: [0,6]</span><br><span class=\"line\">解释:</span><br><span class=\"line\">起始索引等于 0 的子串是 &quot;cba&quot;, 它是 &quot;abc&quot; 的异位词。</span><br><span class=\"line\">起始索引等于 6 的子串是 &quot;bac&quot;, 它是 &quot;abc&quot; 的异位词。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: s = &quot;abab&quot;, p = &quot;ab&quot;</span><br><span class=\"line\">输出: [0,1,2]</span><br><span class=\"line\">解释:</span><br><span class=\"line\">起始索引等于 0 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的异位词。</span><br><span class=\"line\">起始索引等于 1 的子串是 &quot;ba&quot;, 它是 &quot;ab&quot; 的异位词。</span><br><span class=\"line\">起始索引等于 2 的子串是 &quot;ab&quot;, 它是 &quot;ab&quot; 的异位词。</span><br></pre></td></tr></table></figure>\n<p>方法一：滑动窗口</p>\n<p>思路</p>\n<p>根据题目要求，我们需要在字符串 s 寻找字符串 p 的异位词。因为字符串 p 的异位词的长度一定与字符串 p 的长度相同，所以我们可以在字符串 s 中构造一个长度为与字符串 p 的长度相同的滑动窗口，并在滑动中维护窗口中每种字母的数量；当窗口中每种字母的数量与字符串 p 中每种字母的数量相同时，则说明当前窗口为字符串 p 的异位词。</p>\n<p>算法</p>\n<p>在算法的实现中，我们可以使用数组来存储字符串 p 和滑动窗口中每种字母的数量。</p>\n<p>细节</p>\n<p>当字符串 s 的长度小于字符串 p 的长度时，字符串 s 中一定不存在字符串 p 的异位词。但是因为字符串 s 中无法构造长度与字符串 p 的长度相同的窗口，所以这种情况需要单独处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title\">findAnagrams</span><span class=\"params\">(String s, String p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sLen = s.length(), pLen = p.length();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sLen &lt; pLen) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        List&lt;Integer&gt; ans = <span class=\"keyword\">new</span> ArrayList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] sCount = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] pCount = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; pLen; ++i) &#123;</span><br><span class=\"line\">            ++sCount[s.charAt(i) - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">            ++pCount[p.charAt(i) - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Arrays.equals(sCount, pCount)) &#123;</span><br><span class=\"line\">            ans.add(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sLen - pLen; ++i) &#123;</span><br><span class=\"line\">            --sCount[s.charAt(i) - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">            ++sCount[s.charAt(i + pLen) - <span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Arrays.equals(sCount, pCount)) &#123;</span><br><span class=\"line\">                ans.add(i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/subarray-product-less-than-k/\">713. 乘积小于K的子数组</a></p>\n<p>给定一个正整数数组 <code>nums</code>和整数 <code>k</code> 。</p>\n<p>请找出该数组内乘积小于 <code>k</code> 的连续的子数组的个数。</p>\n<p>示例 1:</p>\n<p>输入: nums = [10,5,2,6], k = 100<br>\n输出: 8<br>\n解释: 8个乘积小于100的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。<br>\n需要注意的是 [10,5,2] 并不是乘积小于100的子数组。</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211203093926591.png?x-oss-process=style/qingyun\" alt=\"image-20211203093926591\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numSubarrayProductLessThanK</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> prod = <span class=\"number\">1</span>, ans = <span class=\"number\">0</span>, left = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> right = <span class=\"number\">0</span>; right &lt; nums.length; right++) &#123;</span><br><span class=\"line\">            prod *= nums[right];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (prod &gt;= k) prod /= nums[left++];</span><br><span class=\"line\">            ans += right - left + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/minimum-size-subarray-sum/\">209. 长度最小的子数组</a></p>\n<p>给定一个含有 n 个正整数的数组和一个正整数 target 。</p>\n<p>找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, …, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class=\"line\">输出：2</span><br><span class=\"line\">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211203094335615.png?x-oss-process=style/qingyun\" alt=\"image-20211203094335615\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">minSubArrayLen</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (end &lt; n) &#123;</span><br><span class=\"line\">            sum += nums[end];</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (sum &gt;= s) &#123;</span><br><span class=\"line\">                ans = Math.min(ans, end - start + <span class=\"number\">1</span>);</span><br><span class=\"line\">                sum -= nums[start];</span><br><span class=\"line\">                start++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            end++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans == Integer.MAX_VALUE ? <span class=\"number\">0</span> : ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/number-of-islands/\">200. 岛屿数量</a></p>\n<p>给你一个由 <code>'1'</code>（陆地）和 <code>'0'</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p>\n<p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p>\n<p>此外，你可以假设该网格的四条边均被水包围。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：grid = [</span><br><span class=\"line\">  [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class=\"line\">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;],</span><br><span class=\"line\">  [&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;],</span><br><span class=\"line\">  [&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;,&quot;0&quot;]</span><br><span class=\"line\">]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<ul>\n<li>思路：遍历岛这个二维数组，如果当前数为1，则进入感染函数并将岛个数+1</li>\n<li>感染函数：其实就是一个递归标注的过程，它会将所有相连的1都标注成2。为什么要标注？这样就避免了遍历过程中的重复计数的情况，一个岛所有的1都变成了2后，遍历的时候就不会重复遍历了。建议没想明白的同学画个图看看。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (grid[i][j] == <span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">                    inject(grid,i,j);</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">inject</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt;= grid.length || j &lt; <span class=\"number\">0</span> || j &gt;= grid[<span class=\"number\">0</span>].length || grid[i][j] != <span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grid[i][j] = <span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">        inject(grid,i-<span class=\"number\">1</span>,j);</span><br><span class=\"line\">        inject(grid,i+<span class=\"number\">1</span>,j);</span><br><span class=\"line\">        inject(grid,i,j-<span class=\"number\">1</span>);</span><br><span class=\"line\">        inject(grid,i,j+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/number-of-provinces/\">547. 省份数量</a></p>\n<p>有 n 个城市，其中一些彼此相连，另一些没有相连。如果城市 a 与城市 b 直接相连，且城市 b 与城市 c 直接相连，那么城市 a 与城市 c 间接相连。</p>\n<p>省份 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p>\n<p>给你一个 n x n 的矩阵 isConnected ，其中 isConnected[i][j] = 1 表示第 i 个城市和第 j 个城市直接相连，而 isConnected[i][j] = 0 表示二者不直接相连。</p>\n<p>返回矩阵中 省份 的数量。</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211203094627016.png?x-oss-process=style/qingyun\" alt=\"image-20211203094627016\"></p>\n<p>方法二：广度优先搜索</p>\n<p>也可以通过广度优先搜索的方法得到省份的总数。对于每个城市，如果该城市尚未被访问过，则从该城市开始广度优先搜索，直到同一个连通分量中的所有城市都被访问到，即可得到一个省份。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">findCircleNum</span><span class=\"params\">(<span class=\"keyword\">int</span>[][] isConnected)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> provinces = isConnected.length;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span>[] visited = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[provinces];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> circles = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Queue&lt;Integer&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;Integer&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; provinces; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!visited[i]) &#123;</span><br><span class=\"line\">                queue.offer(i);</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (!queue.isEmpty()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> j = queue.poll();</span><br><span class=\"line\">                    visited[j] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; provinces; k++) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (isConnected[j][k] == <span class=\"number\">1</span> &amp;&amp; !visited[k]) &#123;</span><br><span class=\"line\">                            queue.offer(k);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                circles++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> circles;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者：LeetCode-Solution<br>\n链接：<a href=\"https://leetcode-cn.com/problems/number-of-provinces/solution/sheng-fen-shu-liang-by-leetcode-solution-eyk0/\">https://leetcode-cn.com/problems/number-of-provinces/solution/sheng-fen-shu-liang-by-leetcode-solution-eyk0/</a><br>\n来源：力扣（LeetCode）<br>\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n"},{"title":"20211201","abbrlink":1052410200,"date":"2021-12-01T02:06:50.000Z","_content":"### 20211201\n\n#### [844. 比较含退格的字符串](https://leetcode-cn.com/problems/backspace-string-compare/)\n\n给定 `s` 和 `t` 两个字符串，当它们分别被输入到空白的文本编辑器后，请你判断二者是否相等。`#` 代表退格字符。\n\n如果相等，返回 `true` ；否则，返回 `false` 。\n\n**注意：**如果对空文本输入退格字符，文本继续为空。\n\n **示例 1：**\n\n```\n输入：s = \"ab#c\", t = \"ad#c\"\n输出：true\n解释：S 和 T 都会变成 “ac”。\n```\n\n**示例 2：**\n\n```\n输入：s = \"ab##\", t = \"c#d#\"\n输出：true\n解释：s 和 t 都会变成 “”\n```\n\n方法一：重构字符串\n\n思路及算法\n\n最容易想到的方法是将给定的字符串中的退格符和应当被删除的字符都去除，还原给定字符串的一般形式。然后直接比较两字符串是否相等即可。\n\n具体地，我们用栈处理遍历过程，每次我们遍历到一个字符：\n\n    如果它是退格符，那么我们将栈顶弹出；\n    \n    如果它是普通字符，那么我们将其压入栈中。\n\n```java\nclass Solution {\npublic boolean backspaceCompare(String s, String t) {\n        StringBuffer a = new StringBuffer();\n        StringBuffer b = new StringBuffer();\n        String f = Cut(s,a);\n        String m = Cut(t,b);\n        return f.equals(m);\n    }\n\n    private String Cut(String s, StringBuffer a) {\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) != '#'){\n                a.append(s.charAt(i));\n            }else {\n                if (a.length() != 0){\n                    a.deleteCharAt(a.length()-1);\n                }\n            }\n        }\n        return a.toString();\n    }\n}\n```\n\n#### [986. 区间列表的交集](https://leetcode-cn.com/problems/interval-list-intersections/)\n\n给定两个由一些 `闭区间` 组成的列表，`firstList` 和` secondList` ，其中` firstList[i] = [starti, endi] `而 `secondList[j] = [startj, endj] `。`每个区间列表都是成对 不相交 的，并且 已经排序 。`\n\n返回这 两个区间列表的交集 。\n\n形式上，闭区间` [a, b]（其中 a <= b）`表示实数 x 的集合，而 `a <= x <= b `。\n\n两个闭区间的 交集 是一组实数，要么为空集，要么为闭区间。例如，[1`, 3] 和 [2, 4] 的交集为 [2, 3]` 。\n\n![image-20211201095842428](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211201095844424.png?x-oss-process=style/qingyun)\n\n**方法：归并区间**\n\n思路\n\n我们称 `b` 为区间 `[a, b]` 的末端点。\n\n在两个数组给定的所有区间中，假设拥有最小末端点的区间是 A[0]。（为了不失一般性，该区间出现在数组 A 中)\n\n然后，在数组` B `的区间中，` A[0] `只可能与数组` B` 中的至多一个区间相交。（如果 B 中存在两个区间均与 A[0] 相交，那么它们将共同包含 A[0] 的末端点，但是 B 中的区间应该是不相交的，所以存在矛盾）\n\n算法\n\n如果 A[0] 拥有最小的末端点，那么它只可能与 B[0] 相交。然后我们就可以删除区间 A[0]，因为它不能与其他任何区间再相交了。\n\n相似的，如果 B[0] 拥有最小的末端点，那么它只可能与区间 A[0] 相交，然后我们就可以将 B[0] 删除，因为它无法再与其他区间相交了。\n\n我们用两个指针 i 与 j 来模拟完成删除 A[0] 或 B[0] 的操作。\n\n```java\nclass Solution {\n    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {\n        List<int[]> ans = new ArrayList<>();\n        int i = 0, j = 0;\n        while (i < firstList.length && j<secondList.length){\n            int lo = Math.max(firstList[i][0],secondList[j][0]);\n            int hi = Math.min(firstList[i][1],secondList[j][1]);\n            if (lo<=hi){\n                ans.add(new int[]{lo,hi});\n            }\n\n            if (firstList[i][1] < secondList[j][1]){\n                i++;\n            }else {\n                j++;\n            }\n        }\n        return ans.toArray(new int[ans.size()][]);\n    }\n}\n```\n\n#### [11. 盛最多水的容器](https://leetcode-cn.com/problems/container-with-most-water/)\n\n给你 `n` 个非负整数 `a1，a2，...，an`，每个数代表坐标中的一个点 `(i, ai)` 。在坐标内画 `n `条垂直线，垂直线` i `的两个端点分别为 `(i, ai) 和 (i, 0) `。找出其中的两条线，使得它们与 `x `轴共同构成的容器可以容纳最多的水。\n\n`说明：你不能倾斜容器。`\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/question_11.jpg?x-oss-process=style/qingyun)\n\n```\n输入：[1,8,6,2,5,4,8,3,7]\n输出：49 \n解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n```\n\n**示例 2：**\n\n```\n输入：height = [1,1]\n输出：1\n```\n\nhttps://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/\n\n```java\nclass Solution {\n    public int maxArea(int[] height) {\n        int left = 0 , right = height.length -1; int ans = 0;\n        while (left < right){\n            if (height[left] < height[right]){\n                ans = Math.max(ans,(right - left) * height[left]);\n                left++;\n            }else {\n                ans = Math.max(ans , (right - left) * height[right]);\n                right--;\n            }\n        }\n        return ans;\n    }\n}\n```","source":"_posts/20211201.md","raw":"---\ntitle: 20211201\nabbrlink: 1052410200\ndate: 2021-12-01 10:06:50\ntags:\n  - 力扣\n  - 算法题\ncategories: LeetCode\n---\n### 20211201\n\n#### [844. 比较含退格的字符串](https://leetcode-cn.com/problems/backspace-string-compare/)\n\n给定 `s` 和 `t` 两个字符串，当它们分别被输入到空白的文本编辑器后，请你判断二者是否相等。`#` 代表退格字符。\n\n如果相等，返回 `true` ；否则，返回 `false` 。\n\n**注意：**如果对空文本输入退格字符，文本继续为空。\n\n **示例 1：**\n\n```\n输入：s = \"ab#c\", t = \"ad#c\"\n输出：true\n解释：S 和 T 都会变成 “ac”。\n```\n\n**示例 2：**\n\n```\n输入：s = \"ab##\", t = \"c#d#\"\n输出：true\n解释：s 和 t 都会变成 “”\n```\n\n方法一：重构字符串\n\n思路及算法\n\n最容易想到的方法是将给定的字符串中的退格符和应当被删除的字符都去除，还原给定字符串的一般形式。然后直接比较两字符串是否相等即可。\n\n具体地，我们用栈处理遍历过程，每次我们遍历到一个字符：\n\n    如果它是退格符，那么我们将栈顶弹出；\n    \n    如果它是普通字符，那么我们将其压入栈中。\n\n```java\nclass Solution {\npublic boolean backspaceCompare(String s, String t) {\n        StringBuffer a = new StringBuffer();\n        StringBuffer b = new StringBuffer();\n        String f = Cut(s,a);\n        String m = Cut(t,b);\n        return f.equals(m);\n    }\n\n    private String Cut(String s, StringBuffer a) {\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) != '#'){\n                a.append(s.charAt(i));\n            }else {\n                if (a.length() != 0){\n                    a.deleteCharAt(a.length()-1);\n                }\n            }\n        }\n        return a.toString();\n    }\n}\n```\n\n#### [986. 区间列表的交集](https://leetcode-cn.com/problems/interval-list-intersections/)\n\n给定两个由一些 `闭区间` 组成的列表，`firstList` 和` secondList` ，其中` firstList[i] = [starti, endi] `而 `secondList[j] = [startj, endj] `。`每个区间列表都是成对 不相交 的，并且 已经排序 。`\n\n返回这 两个区间列表的交集 。\n\n形式上，闭区间` [a, b]（其中 a <= b）`表示实数 x 的集合，而 `a <= x <= b `。\n\n两个闭区间的 交集 是一组实数，要么为空集，要么为闭区间。例如，[1`, 3] 和 [2, 4] 的交集为 [2, 3]` 。\n\n![image-20211201095842428](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211201095844424.png?x-oss-process=style/qingyun)\n\n**方法：归并区间**\n\n思路\n\n我们称 `b` 为区间 `[a, b]` 的末端点。\n\n在两个数组给定的所有区间中，假设拥有最小末端点的区间是 A[0]。（为了不失一般性，该区间出现在数组 A 中)\n\n然后，在数组` B `的区间中，` A[0] `只可能与数组` B` 中的至多一个区间相交。（如果 B 中存在两个区间均与 A[0] 相交，那么它们将共同包含 A[0] 的末端点，但是 B 中的区间应该是不相交的，所以存在矛盾）\n\n算法\n\n如果 A[0] 拥有最小的末端点，那么它只可能与 B[0] 相交。然后我们就可以删除区间 A[0]，因为它不能与其他任何区间再相交了。\n\n相似的，如果 B[0] 拥有最小的末端点，那么它只可能与区间 A[0] 相交，然后我们就可以将 B[0] 删除，因为它无法再与其他区间相交了。\n\n我们用两个指针 i 与 j 来模拟完成删除 A[0] 或 B[0] 的操作。\n\n```java\nclass Solution {\n    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {\n        List<int[]> ans = new ArrayList<>();\n        int i = 0, j = 0;\n        while (i < firstList.length && j<secondList.length){\n            int lo = Math.max(firstList[i][0],secondList[j][0]);\n            int hi = Math.min(firstList[i][1],secondList[j][1]);\n            if (lo<=hi){\n                ans.add(new int[]{lo,hi});\n            }\n\n            if (firstList[i][1] < secondList[j][1]){\n                i++;\n            }else {\n                j++;\n            }\n        }\n        return ans.toArray(new int[ans.size()][]);\n    }\n}\n```\n\n#### [11. 盛最多水的容器](https://leetcode-cn.com/problems/container-with-most-water/)\n\n给你 `n` 个非负整数 `a1，a2，...，an`，每个数代表坐标中的一个点 `(i, ai)` 。在坐标内画 `n `条垂直线，垂直线` i `的两个端点分别为 `(i, ai) 和 (i, 0) `。找出其中的两条线，使得它们与 `x `轴共同构成的容器可以容纳最多的水。\n\n`说明：你不能倾斜容器。`\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/question_11.jpg?x-oss-process=style/qingyun)\n\n```\n输入：[1,8,6,2,5,4,8,3,7]\n输出：49 \n解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。\n```\n\n**示例 2：**\n\n```\n输入：height = [1,1]\n输出：1\n```\n\nhttps://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/\n\n```java\nclass Solution {\n    public int maxArea(int[] height) {\n        int left = 0 , right = height.length -1; int ans = 0;\n        while (left < right){\n            if (height[left] < height[right]){\n                ans = Math.max(ans,(right - left) * height[left]);\n                left++;\n            }else {\n                ans = Math.max(ans , (right - left) * height[right]);\n                right--;\n            }\n        }\n        return ans;\n    }\n}\n```","slug":"20211201","published":1,"updated":"2021-12-01T02:07:30.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2r5000ho4vb4qe98lpx","content":"<h3 id=\"20211201\">20211201</h3>\n<h4 id=\"844-比较含退格的字符串\"><a href=\"https://leetcode-cn.com/problems/backspace-string-compare/\">844. 比较含退格的字符串</a></h4>\n<p>给定 <code>s</code> 和 <code>t</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，请你判断二者是否相等。<code>#</code> 代表退格字符。</p>\n<p>如果相等，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p>**注意：**如果对空文本输入退格字符，文本继续为空。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;ab#c&quot;, t = &quot;ad#c&quot;</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：S 和 T 都会变成 “ac”。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;ab##&quot;, t = &quot;c#d#&quot;</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：s 和 t 都会变成 “”</span><br></pre></td></tr></table></figure>\n<p>方法一：重构字符串</p>\n<p>思路及算法</p>\n<p>最容易想到的方法是将给定的字符串中的退格符和应当被删除的字符都去除，还原给定字符串的一般形式。然后直接比较两字符串是否相等即可。</p>\n<p>具体地，我们用栈处理遍历过程，每次我们遍历到一个字符：</p>\n<pre><code>如果它是退格符，那么我们将栈顶弹出；\n\n如果它是普通字符，那么我们将其压入栈中。\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">backspaceCompare</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">        StringBuffer a = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        StringBuffer b = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        String f = Cut(s,a);</span><br><span class=\"line\">        String m = Cut(t,b);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f.equals(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">Cut</span><span class=\"params\">(String s, StringBuffer a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.charAt(i) != <span class=\"string\">&#x27;#&#x27;</span>)&#123;</span><br><span class=\"line\">                a.append(s.charAt(i));</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a.length() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    a.deleteCharAt(a.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"986-区间列表的交集\"><a href=\"https://leetcode-cn.com/problems/interval-list-intersections/\">986. 区间列表的交集</a></h4>\n<p>给定两个由一些 <code>闭区间</code> 组成的列表，<code>firstList</code> 和<code> secondList</code> ，其中<code>firstList[i] = [starti, endi]</code>而 <code>secondList[j] = [startj, endj] </code>。<code>每个区间列表都是成对 不相交 的，并且 已经排序 。</code></p>\n<p>返回这 两个区间列表的交集 。</p>\n<p>形式上，闭区间<code> [a, b]（其中 a &lt;= b）</code>表示实数 x 的集合，而 <code>a &lt;= x &lt;= b </code>。</p>\n<p>两个闭区间的 交集 是一组实数，要么为空集，要么为闭区间。例如，[1<code>, 3] 和 [2, 4] 的交集为 [2, 3]</code> 。</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211201095844424.png?x-oss-process=style/qingyun\" alt=\"image-20211201095842428\"></p>\n<p><strong>方法：归并区间</strong></p>\n<p>思路</p>\n<p>我们称 <code>b</code> 为区间 <code>[a, b]</code> 的末端点。</p>\n<p>在两个数组给定的所有区间中，假设拥有最小末端点的区间是 A[0]。（为了不失一般性，该区间出现在数组 A 中)</p>\n<p>然后，在数组<code>B</code>的区间中，<code>A[0]</code>只可能与数组<code> B</code> 中的至多一个区间相交。（如果 B 中存在两个区间均与 A[0] 相交，那么它们将共同包含 A[0] 的末端点，但是 B 中的区间应该是不相交的，所以存在矛盾）</p>\n<p>算法</p>\n<p>如果 A[0] 拥有最小的末端点，那么它只可能与 B[0] 相交。然后我们就可以删除区间 A[0]，因为它不能与其他任何区间再相交了。</p>\n<p>相似的，如果 B[0] 拥有最小的末端点，那么它只可能与区间 A[0] 相交，然后我们就可以将 B[0] 删除，因为它无法再与其他区间相交了。</p>\n<p>我们用两个指针 i 与 j 来模拟完成删除 A[0] 或 B[0] 的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[][] intervalIntersection(<span class=\"keyword\">int</span>[][] firstList, <span class=\"keyword\">int</span>[][] secondList) &#123;</span><br><span class=\"line\">        List&lt;<span class=\"keyword\">int</span>[]&gt; ans = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; firstList.length &amp;&amp; j&lt;secondList.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> lo = Math.max(firstList[i][<span class=\"number\">0</span>],secondList[j][<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> hi = Math.min(firstList[i][<span class=\"number\">1</span>],secondList[j][<span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lo&lt;=hi)&#123;</span><br><span class=\"line\">                ans.add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;lo,hi&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (firstList[i][<span class=\"number\">1</span>] &lt; secondList[j][<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans.toArray(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[ans.size()][]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"11-盛最多水的容器\"><a href=\"https://leetcode-cn.com/problems/container-with-most-water/\">11. 盛最多水的容器</a></h4>\n<p>给你 <code>n</code> 个非负整数 <code>a1，a2，...，an</code>，每个数代表坐标中的一个点 <code>(i, ai)</code> 。在坐标内画 <code>n </code>条垂直线，垂直线<code>i</code>的两个端点分别为 <code>(i, ai) 和 (i, 0) </code>。找出其中的两条线，使得它们与 <code>x </code>轴共同构成的容器可以容纳最多的水。</p>\n<p><code>说明：你不能倾斜容器。</code></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/question_11.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class=\"line\">输出：49 </span><br><span class=\"line\">解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：height = [1,1]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/\">https://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"keyword\">int</span>[] height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span> , right = height.length -<span class=\"number\">1</span>; <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (height[left] &lt; height[right])&#123;</span><br><span class=\"line\">                ans = Math.max(ans,(right - left) * height[left]);</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans = Math.max(ans , (right - left) * height[right]);</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<h3 id=\"20211201\">20211201</h3>\n<h4 id=\"844-比较含退格的字符串\"><a href=\"https://leetcode-cn.com/problems/backspace-string-compare/\">844. 比较含退格的字符串</a></h4>\n<p>给定 <code>s</code> 和 <code>t</code> 两个字符串，当它们分别被输入到空白的文本编辑器后，请你判断二者是否相等。<code>#</code> 代表退格字符。</p>\n<p>如果相等，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n<p>**注意：**如果对空文本输入退格字符，文本继续为空。</p>\n<p><strong>示例 1：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;ab#c&quot;, t = &quot;ad#c&quot;</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：S 和 T 都会变成 “ac”。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：s = &quot;ab##&quot;, t = &quot;c#d#&quot;</span><br><span class=\"line\">输出：true</span><br><span class=\"line\">解释：s 和 t 都会变成 “”</span><br></pre></td></tr></table></figure>\n<p>方法一：重构字符串</p>\n<p>思路及算法</p>\n<p>最容易想到的方法是将给定的字符串中的退格符和应当被删除的字符都去除，还原给定字符串的一般形式。然后直接比较两字符串是否相等即可。</p>\n<p>具体地，我们用栈处理遍历过程，每次我们遍历到一个字符：</p>\n<pre><code>如果它是退格符，那么我们将栈顶弹出；\n\n如果它是普通字符，那么我们将其压入栈中。\n</code></pre>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">backspaceCompare</span><span class=\"params\">(String s, String t)</span> </span>&#123;</span><br><span class=\"line\">        StringBuffer a = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        StringBuffer b = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">        String f = Cut(s,a);</span><br><span class=\"line\">        String m = Cut(t,b);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> f.equals(m);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">Cut</span><span class=\"params\">(String s, StringBuffer a)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.charAt(i) != <span class=\"string\">&#x27;#&#x27;</span>)&#123;</span><br><span class=\"line\">                a.append(s.charAt(i));</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a.length() != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    a.deleteCharAt(a.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"986-区间列表的交集\"><a href=\"https://leetcode-cn.com/problems/interval-list-intersections/\">986. 区间列表的交集</a></h4>\n<p>给定两个由一些 <code>闭区间</code> 组成的列表，<code>firstList</code> 和<code> secondList</code> ，其中<code>firstList[i] = [starti, endi]</code>而 <code>secondList[j] = [startj, endj] </code>。<code>每个区间列表都是成对 不相交 的，并且 已经排序 。</code></p>\n<p>返回这 两个区间列表的交集 。</p>\n<p>形式上，闭区间<code> [a, b]（其中 a &lt;= b）</code>表示实数 x 的集合，而 <code>a &lt;= x &lt;= b </code>。</p>\n<p>两个闭区间的 交集 是一组实数，要么为空集，要么为闭区间。例如，[1<code>, 3] 和 [2, 4] 的交集为 [2, 3]</code> 。</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211201095844424.png?x-oss-process=style/qingyun\" alt=\"image-20211201095842428\"></p>\n<p><strong>方法：归并区间</strong></p>\n<p>思路</p>\n<p>我们称 <code>b</code> 为区间 <code>[a, b]</code> 的末端点。</p>\n<p>在两个数组给定的所有区间中，假设拥有最小末端点的区间是 A[0]。（为了不失一般性，该区间出现在数组 A 中)</p>\n<p>然后，在数组<code>B</code>的区间中，<code>A[0]</code>只可能与数组<code> B</code> 中的至多一个区间相交。（如果 B 中存在两个区间均与 A[0] 相交，那么它们将共同包含 A[0] 的末端点，但是 B 中的区间应该是不相交的，所以存在矛盾）</p>\n<p>算法</p>\n<p>如果 A[0] 拥有最小的末端点，那么它只可能与 B[0] 相交。然后我们就可以删除区间 A[0]，因为它不能与其他任何区间再相交了。</p>\n<p>相似的，如果 B[0] 拥有最小的末端点，那么它只可能与区间 A[0] 相交，然后我们就可以将 B[0] 删除，因为它无法再与其他区间相交了。</p>\n<p>我们用两个指针 i 与 j 来模拟完成删除 A[0] 或 B[0] 的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">int</span>[][] intervalIntersection(<span class=\"keyword\">int</span>[][] firstList, <span class=\"keyword\">int</span>[][] secondList) &#123;</span><br><span class=\"line\">        List&lt;<span class=\"keyword\">int</span>[]&gt; ans = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; firstList.length &amp;&amp; j&lt;secondList.length)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> lo = Math.max(firstList[i][<span class=\"number\">0</span>],secondList[j][<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> hi = Math.min(firstList[i][<span class=\"number\">1</span>],secondList[j][<span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lo&lt;=hi)&#123;</span><br><span class=\"line\">                ans.add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;lo,hi&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (firstList[i][<span class=\"number\">1</span>] &lt; secondList[j][<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                j++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans.toArray(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[ans.size()][]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"11-盛最多水的容器\"><a href=\"https://leetcode-cn.com/problems/container-with-most-water/\">11. 盛最多水的容器</a></h4>\n<p>给你 <code>n</code> 个非负整数 <code>a1，a2，...，an</code>，每个数代表坐标中的一个点 <code>(i, ai)</code> 。在坐标内画 <code>n </code>条垂直线，垂直线<code>i</code>的两个端点分别为 <code>(i, ai) 和 (i, 0) </code>。找出其中的两条线，使得它们与 <code>x </code>轴共同构成的容器可以容纳最多的水。</p>\n<p><code>说明：你不能倾斜容器。</code></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/question_11.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：[1,8,6,2,5,4,8,3,7]</span><br><span class=\"line\">输出：49 </span><br><span class=\"line\">解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</span><br></pre></td></tr></table></figure>\n<p><strong>示例 2：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：height = [1,1]</span><br><span class=\"line\">输出：1</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/\">https://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"keyword\">int</span>[] height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = <span class=\"number\">0</span> , right = height.length -<span class=\"number\">1</span>; <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (height[left] &lt; height[right])&#123;</span><br><span class=\"line\">                ans = Math.max(ans,(right - left) * height[left]);</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ans = Math.max(ans , (right - left) * height[right]);</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Docker 容器挂载","abbrlink":1612373770,"date":"2021-11-29T01:14:23.000Z","description":"Docker 挂载命令解析","_content":"**Docker 容器挂载**\n\n```\n// 运行容器并挂载命令\ndocker run --name mynginx  //容器起名为nginx\n-d //后台运行 \n-p 80:80 //把主机80端口映射到容器80端口\n--restart=always \n--privileged=true //防止挂载时权限不够 \n-v /export/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n-v /export/nginx/html:/etc/nginx/html \n-v /export/nginx/log:/var/log/nginx \n//把文件挂载到主机目，主机文件目录:容器文件目录 \nnginx //运行镜像的名称REPOSTITORY\n```\n\n```\ndocker run --name my-nginx -p 80:80 -v /export/www/nginx/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx\n```\n\n","source":"_posts/Docker-容器挂载.md","raw":"---\ntitle: Docker 容器挂载\nabbrlink: 1612373770\ndate: 2021-11-29 09:14:23\ntags:\n  - Docker\ncategories: Docker\ndescription: Docker 挂载命令解析\n---\n**Docker 容器挂载**\n\n```\n// 运行容器并挂载命令\ndocker run --name mynginx  //容器起名为nginx\n-d //后台运行 \n-p 80:80 //把主机80端口映射到容器80端口\n--restart=always \n--privileged=true //防止挂载时权限不够 \n-v /export/nginx/conf/nginx.conf:/etc/nginx/nginx.conf\n-v /export/nginx/html:/etc/nginx/html \n-v /export/nginx/log:/var/log/nginx \n//把文件挂载到主机目，主机文件目录:容器文件目录 \nnginx //运行镜像的名称REPOSTITORY\n```\n\n```\ndocker run --name my-nginx -p 80:80 -v /export/www/nginx/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx\n```\n\n","slug":"Docker-容器挂载","published":1,"updated":"2021-11-29T01:15:52.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2r7000no4vbarqoeh5f","content":"<p><strong>Docker 容器挂载</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 运行容器并挂载命令</span><br><span class=\"line\">docker run --name mynginx  //容器起名为nginx</span><br><span class=\"line\">-d //后台运行 </span><br><span class=\"line\">-p 80:80 //把主机80端口映射到容器80端口</span><br><span class=\"line\">--restart=always </span><br><span class=\"line\">--privileged=true //防止挂载时权限不够 </span><br><span class=\"line\">-v /export/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span><br><span class=\"line\">-v /export/nginx/html:/etc/nginx/html </span><br><span class=\"line\">-v /export/nginx/log:/var/log/nginx </span><br><span class=\"line\">//把文件挂载到主机目，主机文件目录:容器文件目录 </span><br><span class=\"line\">nginx //运行镜像的名称REPOSTITORY</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-nginx -p 80:80 -v /export/www/nginx/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p><strong>Docker 容器挂载</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 运行容器并挂载命令</span><br><span class=\"line\">docker run --name mynginx  //容器起名为nginx</span><br><span class=\"line\">-d //后台运行 </span><br><span class=\"line\">-p 80:80 //把主机80端口映射到容器80端口</span><br><span class=\"line\">--restart=always </span><br><span class=\"line\">--privileged=true //防止挂载时权限不够 </span><br><span class=\"line\">-v /export/nginx/conf/nginx.conf:/etc/nginx/nginx.conf</span><br><span class=\"line\">-v /export/nginx/html:/etc/nginx/html </span><br><span class=\"line\">-v /export/nginx/log:/var/log/nginx </span><br><span class=\"line\">//把文件挂载到主机目，主机文件目录:容器文件目录 </span><br><span class=\"line\">nginx //运行镜像的名称REPOSTITORY</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-nginx -p 80:80 -v /export/www/nginx/nginx.conf:/etc/nginx/nginx.conf:ro -d nginx</span><br></pre></td></tr></table></figure>\n"},{"title":"JAVA调用CMD","description":"JAVA调用Python","abbrlink":3445041162,"date":"2021-11-26T08:48:35.000Z","_content":"\n\n## JAVA  调用cmd命令 从而调用Python命令\n\n\n\n### CMD的命令\n\n```cmd\ncmd /c cd /f F:\\JS\\CuteR\\CuteR-master\\CuteR-master && CuteR -c 10 -e H -o sample_output.png -v 10 sample_input.png http://www.chinuno.com\n```\n\n\n\n### 本质是通过传参数实现调用python命令来实现效果\n\n```java\npackage edu.sdut.CMD;\n\nimport java.io.IOException;\n\n/**\n * 调用CMD命令\n * @author qingyun\n * @version 1.0\n * @date 2021/9/29 16:49\n */\npublic class CallCmd {\n\n\n    /**\n     * 异步方式调用CMD生成二维码\n     * @param InputPath  输入的图片地址\n     * @param OutPath    输出的图片地址\n     * @param content    图片二维码的内容\n     */\n    public static void Cmd(String InputPath , String OutPath ,String content) throws IOException {\n        Runtime.getRuntime().exec(\"cmd /c cd  F:\\\\JS\\\\CuteR\\\\CuteR-master\\\\CuteR-master && CuteR -c 10 -e H -o \"+OutPath+\" -v 10 \"+InputPath+\" \"+content);\n    }\n\n\n    public static void main(String[] args) throws IOException {\n//            Cmd(null,null);\n    }\n}\n\n```\n\n### 下面的写法可通过控制线程来判断是否完成任务，达到同步执行线程的效果\n\n```java\npackage edu.sdut.CMD;\n\nimport java.io.IOException;\n\n/**\n * 调用CMD命令\n * @author qingyun\n * @version 1.0\n * @date 2021/9/29 16:49\n */\npublic class CallCmd {\n\n\n    /**\n     * 通过控制子线程判断是否执行完毕\n     * 异步方式调用CMD生成二维码\n     * @param InputPath  输入的图片地址\n     * @param OutPath    输出的图片地址\n     * @param content    图片二维码的内容\n     */\n    public static Integer Cmd(String InputPath , String OutPath ,String content) throws IOException, InterruptedException {\n        // Process可以控制该子进程的执行或获取该子进程的信息\n        Process process;\n        process = Runtime.getRuntime().exec(\"cmd /c cd  F:\\\\JS\\\\CuteR\\\\CuteR-master\\\\CuteR-master && CuteR -c 10 -e H -o \"+OutPath+\" -v 10 \"+InputPath+\" \"+content);\n        int i = process.waitFor();\n        return i;\n    }\n\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n//            Cmd(null,null);\n        Integer cmd = Cmd(\"\", \"\", \"\");\n        System.out.println(cmd);\n    }\n}\n\n```\n\n","source":"_posts/JAVA  调用cmd命令 从而调用Python命令.md","raw":"---\ntitle: JAVA调用CMD\ntags:\n  - JAVA\ncategories: JAVA\ndescription: JAVA调用Python\nabbrlink: 3445041162\ndate: 2021-11-26 16:48:35\n---\n\n\n## JAVA  调用cmd命令 从而调用Python命令\n\n\n\n### CMD的命令\n\n```cmd\ncmd /c cd /f F:\\JS\\CuteR\\CuteR-master\\CuteR-master && CuteR -c 10 -e H -o sample_output.png -v 10 sample_input.png http://www.chinuno.com\n```\n\n\n\n### 本质是通过传参数实现调用python命令来实现效果\n\n```java\npackage edu.sdut.CMD;\n\nimport java.io.IOException;\n\n/**\n * 调用CMD命令\n * @author qingyun\n * @version 1.0\n * @date 2021/9/29 16:49\n */\npublic class CallCmd {\n\n\n    /**\n     * 异步方式调用CMD生成二维码\n     * @param InputPath  输入的图片地址\n     * @param OutPath    输出的图片地址\n     * @param content    图片二维码的内容\n     */\n    public static void Cmd(String InputPath , String OutPath ,String content) throws IOException {\n        Runtime.getRuntime().exec(\"cmd /c cd  F:\\\\JS\\\\CuteR\\\\CuteR-master\\\\CuteR-master && CuteR -c 10 -e H -o \"+OutPath+\" -v 10 \"+InputPath+\" \"+content);\n    }\n\n\n    public static void main(String[] args) throws IOException {\n//            Cmd(null,null);\n    }\n}\n\n```\n\n### 下面的写法可通过控制线程来判断是否完成任务，达到同步执行线程的效果\n\n```java\npackage edu.sdut.CMD;\n\nimport java.io.IOException;\n\n/**\n * 调用CMD命令\n * @author qingyun\n * @version 1.0\n * @date 2021/9/29 16:49\n */\npublic class CallCmd {\n\n\n    /**\n     * 通过控制子线程判断是否执行完毕\n     * 异步方式调用CMD生成二维码\n     * @param InputPath  输入的图片地址\n     * @param OutPath    输出的图片地址\n     * @param content    图片二维码的内容\n     */\n    public static Integer Cmd(String InputPath , String OutPath ,String content) throws IOException, InterruptedException {\n        // Process可以控制该子进程的执行或获取该子进程的信息\n        Process process;\n        process = Runtime.getRuntime().exec(\"cmd /c cd  F:\\\\JS\\\\CuteR\\\\CuteR-master\\\\CuteR-master && CuteR -c 10 -e H -o \"+OutPath+\" -v 10 \"+InputPath+\" \"+content);\n        int i = process.waitFor();\n        return i;\n    }\n\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n//            Cmd(null,null);\n        Integer cmd = Cmd(\"\", \"\", \"\");\n        System.out.println(cmd);\n    }\n}\n\n```\n\n","slug":"JAVA  调用cmd命令 从而调用Python命令","published":1,"updated":"2021-11-26T12:42:53.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2r8000qo4vbh7co9l3m","content":"<h2 id=\"JAVA-调用cmd命令-从而调用Python命令\">JAVA  调用cmd命令 从而调用Python命令</h2>\n<h3 id=\"CMD的命令\">CMD的命令</h3>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cmd</span> /c <span class=\"built_in\">cd</span> /f F:\\JS\\CuteR\\CuteR-master\\CuteR-master &amp;&amp; CuteR -c <span class=\"number\">10</span> -e H -o sample_output.png -v <span class=\"number\">10</span> sample_input.png http://www.chinuno.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"本质是通过传参数实现调用python命令来实现效果\">本质是通过传参数实现调用python命令来实现效果</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.CMD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 调用CMD命令</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/29 16:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallCmd</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 异步方式调用CMD生成二维码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> InputPath  输入的图片地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> OutPath    输出的图片地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content    图片二维码的内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Cmd</span><span class=\"params\">(String InputPath , String OutPath ,String content)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Runtime.getRuntime().exec(<span class=\"string\">&quot;cmd /c cd  F:\\\\JS\\\\CuteR\\\\CuteR-master\\\\CuteR-master &amp;&amp; CuteR -c 10 -e H -o &quot;</span>+OutPath+<span class=\"string\">&quot; -v 10 &quot;</span>+InputPath+<span class=\"string\">&quot; &quot;</span>+content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//            Cmd(null,null);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"下面的写法可通过控制线程来判断是否完成任务，达到同步执行线程的效果\">下面的写法可通过控制线程来判断是否完成任务，达到同步执行线程的效果</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.CMD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 调用CMD命令</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/29 16:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallCmd</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过控制子线程判断是否执行完毕</span></span><br><span class=\"line\"><span class=\"comment\">     * 异步方式调用CMD生成二维码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> InputPath  输入的图片地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> OutPath    输出的图片地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content    图片二维码的内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">Cmd</span><span class=\"params\">(String InputPath , String OutPath ,String content)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Process可以控制该子进程的执行或获取该子进程的信息</span></span><br><span class=\"line\">        Process process;</span><br><span class=\"line\">        process = Runtime.getRuntime().exec(<span class=\"string\">&quot;cmd /c cd  F:\\\\JS\\\\CuteR\\\\CuteR-master\\\\CuteR-master &amp;&amp; CuteR -c 10 -e H -o &quot;</span>+OutPath+<span class=\"string\">&quot; -v 10 &quot;</span>+InputPath+<span class=\"string\">&quot; &quot;</span>+content);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = process.waitFor();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//            Cmd(null,null);</span></span><br><span class=\"line\">        Integer cmd = Cmd(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        System.out.println(cmd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com - 304024 sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<h2 id=\"JAVA-调用cmd命令-从而调用Python命令\">JAVA  调用cmd命令 从而调用Python命令</h2>\n<h3 id=\"CMD的命令\">CMD的命令</h3>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cmd</span> /c <span class=\"built_in\">cd</span> /f F:\\JS\\CuteR\\CuteR-master\\CuteR-master &amp;&amp; CuteR -c <span class=\"number\">10</span> -e H -o sample_output.png -v <span class=\"number\">10</span> sample_input.png http://www.chinuno.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"本质是通过传参数实现调用python命令来实现效果\">本质是通过传参数实现调用python命令来实现效果</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.CMD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 调用CMD命令</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/29 16:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallCmd</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 异步方式调用CMD生成二维码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> InputPath  输入的图片地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> OutPath    输出的图片地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content    图片二维码的内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Cmd</span><span class=\"params\">(String InputPath , String OutPath ,String content)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Runtime.getRuntime().exec(<span class=\"string\">&quot;cmd /c cd  F:\\\\JS\\\\CuteR\\\\CuteR-master\\\\CuteR-master &amp;&amp; CuteR -c 10 -e H -o &quot;</span>+OutPath+<span class=\"string\">&quot; -v 10 &quot;</span>+InputPath+<span class=\"string\">&quot; &quot;</span>+content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//            Cmd(null,null);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"下面的写法可通过控制线程来判断是否完成任务，达到同步执行线程的效果\">下面的写法可通过控制线程来判断是否完成任务，达到同步执行线程的效果</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.CMD;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 调用CMD命令</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/29 16:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallCmd</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通过控制子线程判断是否执行完毕</span></span><br><span class=\"line\"><span class=\"comment\">     * 异步方式调用CMD生成二维码</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> InputPath  输入的图片地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> OutPath    输出的图片地址</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content    图片二维码的内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">Cmd</span><span class=\"params\">(String InputPath , String OutPath ,String content)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Process可以控制该子进程的执行或获取该子进程的信息</span></span><br><span class=\"line\">        Process process;</span><br><span class=\"line\">        process = Runtime.getRuntime().exec(<span class=\"string\">&quot;cmd /c cd  F:\\\\JS\\\\CuteR\\\\CuteR-master\\\\CuteR-master &amp;&amp; CuteR -c 10 -e H -o &quot;</span>+OutPath+<span class=\"string\">&quot; -v 10 &quot;</span>+InputPath+<span class=\"string\">&quot; &quot;</span>+content);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = process.waitFor();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//            Cmd(null,null);</span></span><br><span class=\"line\">        Integer cmd = Cmd(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        System.out.println(cmd);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"JAVA实现图片合并","abbrlink":756143886,"date":"2021-11-29T01:31:05.000Z","description":"JAVA应用 实现两张图片合并（可多张未实现）","_content":"JAVA  实现两张图片合并（可多张未实现）\n\n```java\npackage edu.sdut.Picture.Main;\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/9/28 20:13\n */\n//实现图片合并\npublic class PictureMerge {\n\n\n    private  Graphics2D g        = null;\n\n    //读取网络图片\n//    public static BufferedImage readUrl(String ImageUrl){\n//        BufferedImage bf = null;\n//        try{\n//            URL urlfile = new URL(ImageUrl);\n//            InputStream inStream = urlfile.openStream();\n//            bf = ImageIO.read(inStream);\n//        }catch (IOException e) {\n//            e.printStackTrace();\n//        }\n//        return bf;\n//    }\n\n\n    /**\n     * 导入本地图片到缓冲区\n     */\n    public BufferedImage loadImageLocal(String imgName) {\n        try {\n            return ImageIO.read(new File(imgName));\n        } catch (IOException e) {\n            System.out.println(e.getMessage());\n        }\n        return null;\n    }\n\n    /**\n     * 将两张图片合并在一起\n     * @param b\n     * @param d\n     * @return\n     */\n    public BufferedImage modifyImagetogeter(BufferedImage b, BufferedImage d) {\n        try {\n            int w = b.getWidth();\n            int h = b.getHeight();\n            //进行图片绘制\n            g = d.createGraphics();\n            g.drawImage(b, 300, -800, w, h, null);\n            g.dispose();\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n        return d;\n    }\n\n\n    /**\n     * 生成新图片到本地\n     */\n    public void writeImageLocal(String newImage, BufferedImage img) {\n        if (newImage != null && img != null) {\n            try {\n                File outputfile = new File(newImage);\n                ImageIO.write(img, \"jpg\", outputfile);\n            } catch (IOException e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n\n    /**\n     * 图片测试\n     * @param args\n     */\n    public static void main(String[] args) {\n        PictureMerge pictureMerge = new PictureMerge();\n        //图片A\n        BufferedImage d = pictureMerge.loadImageLocal(\"D:\\\\GIF\\\\jpg\\\\1.jpg\");\n        //t\n        BufferedImage b = pictureMerge.loadImageLocal(\"D:\\\\GIF\\\\jpg\\\\2.jpg\");\n        pictureMerge.writeImageLocal(\"D:\\\\GIF\\\\gif\\\\10.jpg\", pictureMerge.modifyImagetogeter(b, d));\n        //将多张图片合在一起\n        System.out.println(\"success\");\n    }\n}\n\n```\n\n测试图片![1](http://typa.qingyun.run/img/1.jpg)\n\n![2](http://typa.qingyun.run/img/2.jpg)\n\n生成图片如下\n\n![10](http://typa.qingyun.run/img/10.jpg)\n\n不符合期望，故进行代码修改\n\n修改后代码如下\n\n```java\npackage edu.sdut.Picture.Main;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/9/28 20:13\n */\n//实现图片合并\npublic class PictureMerge {\n\n\n    private  Graphics2D g        = null;\n\n    //读取网络图片\n//    public static BufferedImage readUrl(String ImageUrl){\n//        BufferedImage bf = null;\n//        try{\n//            URL urlfile = new URL(ImageUrl);\n//            InputStream inStream = urlfile.openStream();\n//            bf = ImageIO.read(inStream);\n//        }catch (IOException e) {\n//            e.printStackTrace();\n//        }\n//        return bf;\n//    }\n\n\n    /**\n     * 导入本地图片到缓冲区\n     */\n    public BufferedImage loadImageLocal(String imgName) {\n        try {\n            return ImageIO.read(new File(imgName));\n        } catch (IOException e) {\n            System.out.println(e.getMessage());\n        }\n        return null;\n    }\n\n    /**\n     * 将两张图片合并在一起\n     * @param b\n     * @param d\n     * @return\n     */\n    public BufferedImage modifyImagetogeter(BufferedImage b, BufferedImage d) {\n        try {\n            int w = d.getWidth();\n            int h = d.getHeight();\n            //进行图片绘制\n            g = d.createGraphics();\n            //更改生成的位置  图片进行覆盖\n            g.drawImage(b, 0, 0, w, h, null);\n            g.dispose();\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n        return d;\n    }\n\n\n    /**\n     * 生成新图片到本地\n     */\n    public void writeImageLocal(String newImage, BufferedImage img) {\n        if (newImage != null && img != null) {\n            try {\n                File outputfile = new File(newImage);\n                ImageIO.write(img, \"jpg\", outputfile);\n            } catch (IOException e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n\n\n\n    /**\n     * 将背景替换为透明\n     *\n     * @return\n     * @throws IOException the io exception\n     * @author Jack Que\n     * @created 2021 -07-08 10:25:10 Change img color.\n     */\n    public static BufferedImage changeImgColor(BufferedImage bi) throws IOException {\n        Image image = (Image) bi;\n        //将原图片的二进制转化为ImageIcon\n        ImageIcon imageIcon = new ImageIcon(image);\n        int width = imageIcon.getIconWidth();\n        int height = imageIcon.getIconHeight();\n        //图片缓冲流\n        BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);\n        Graphics2D graphics2D = (Graphics2D) bufferedImage.getGraphics();\n        graphics2D.drawImage(imageIcon.getImage(), 0, 0, imageIcon.getImageObserver());\n        int alpha = 255;\n        //这个背景底色的选择，我这里选择的是比较偏的位置，可以修改位置。背景色选择不知道有没有别的更优的方式（比如先过滤一遍获取颜色次数最多的，但是因为感觉做起来会比较复杂没去实现），如果有可以评论。\n        int RGB=bufferedImage.getRGB(width-1, height-1);\n        for(int i = bufferedImage.getMinX(); i < width; i++) {\n            for(int j = bufferedImage.getMinY(); j < height; j++) {\n                int rgb = bufferedImage.getRGB(i, j);\n                int r = (rgb & 0xff0000) >>16;\n                int g = (rgb & 0xff00) >> 8;\n                int b = (rgb & 0xff);\n                int R = (RGB & 0xff0000) >>16;\n                int G = (RGB & 0xff00) >> 8;\n                int B = (RGB & 0xff);\n                //a为色差范围值，渐变色边缘处理，数值需要具体测试，50左右的效果比较可以\n                int a = 45;\n                if(Math.abs(R-r) < a && Math.abs(G-g) < a && Math.abs(B-b) < a ) {\n                    alpha = 0;\n                } else {\n                    alpha = 255;\n                }\n                rgb = (alpha << 24)|(rgb & 0x00ffffff);\n                bufferedImage.setRGB(i,j,rgb);\n            }\n        }\n            return bufferedImage;\n    }\n    public static String convertRgbStr(int color) {\n        // 获取color(RGB)中R位\n        int red = (color & 0xff0000) >> 16;\n        // 获取color(RGB)中G位\n        int green = (color & 0x00ff00) >> 8;\n        // 获取color(RGB)中B位\n        int blue = (color & 0x0000ff);\n        return red + \",\" + green + \",\" + blue;\n    }\n\n\n    /**\n     * 图片测试\n     * @param args\n     */\n    public static void main(String[] args) throws IOException {\n        PictureMerge pictureMerge = new PictureMerge();\n        //图片A\n        BufferedImage d = pictureMerge.loadImageLocal(\"D:\\\\GIF\\\\gif\\\\1.jpg\");\n        //t\n        BufferedImage b = pictureMerge.loadImageLocal(\"D:\\\\GIF\\\\jpg\\\\2.jpg\");\n        //实现图片透明\n//        d = changeImgColor(d);\n        b = changeImgColor(b);\n        pictureMerge.writeImageLocal(\"D:\\\\GIF\\\\gif\\\\10.jpg\", pictureMerge.modifyImagetogeter(b, d));\n        //将多张图片合在一起\n        System.out.println(\"success\");\n    }\n}\n\n```\n\n产生效果如下  （修改了背景图片素描画并且进行了透明化但不符合期望，继续修改）\n\n![11](http://typa.qingyun.run/img/11.jpg)\n\n替换了另一套代码 使用透明度进行图片合并 代码如下\n\n```java\npackage edu.sdut.Picture.Main;\nimport java.awt.AlphaComposite;\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStream;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/9/28 22:23\n */\npublic class ImageMarkLogoByIcon {\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        String srcImgPath = \"D:\\\\GIF\\\\jpg\\\\1.jpg\";\n        String iconPath = \"D:\\\\GIF\\\\jpg\\\\2.jpg\";\n        String targerPath = \"D:\\\\GIF\\\\gif\\\\3.jpg\" ;\n        // 给图片添加水印\n        ImageMarkLogoByIcon.markImageByIcon(iconPath, srcImgPath, targerPath , 0);\n    }\n    /**\n     * 给图片添加水印\n     * @param iconPath 水印图片路径\n     * @param srcImgPath 源图片路径\n     * @param targerPath 目标图片路径\n     */\n    public static void markImageByIcon(String iconPath, String srcImgPath,\n                                       String targerPath) {\n        markImageByIcon(iconPath, srcImgPath, targerPath, null) ;\n    }\n    /**\n     * 给图片添加水印、可设置水印图片旋转角度\n     * @param iconPath 水印图片路径\n     * @param srcImgPath 源图片路径\n     * @param targerPath 目标图片路径\n     * @param degree 水印图片旋转角度\n     */\n    public static void markImageByIcon(String iconPath, String srcImgPath,\n                                       String targerPath, Integer degree) {\n        OutputStream os = null;\n        try {\n            Image srcImg = ImageIO.read(new File(srcImgPath));\n            BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null),\n                    srcImg.getHeight(null), BufferedImage.TYPE_INT_RGB);\n            // 得到画笔对象\n            // Graphics g= buffImg.getGraphics();\n            Graphics2D g = buffImg.createGraphics();\n\n            // 设置对线段的锯齿状边缘处理\n            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n\n            g.drawImage(srcImg.getScaledInstance(srcImg.getWidth(null), srcImg\n                    .getHeight(null), Image.SCALE_SMOOTH), 0, 0, null);\n\n            if (null != degree) {\n                // 设置水印旋转\n                g.rotate(Math.toRadians(degree),\n                        (double) buffImg.getWidth() / 2, (double) buffImg\n                                .getHeight() / 2);\n            }\n            // 水印图象的路径 水印一般为gif或者png的，这样可设置透明度\n            ImageIcon imgIcon = new ImageIcon(iconPath);\n            // 得到Image对象。\n            Image img = imgIcon.getImage();\n            float alpha = 0.65f; // 透明度\n            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,\n                    alpha));\n            // 表示水印图片的位置\n            g.drawImage(img, 0, 0,buffImg.getWidth(),buffImg.getHeight(), null);\n            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));\n            g.dispose();\n            os = new FileOutputStream(targerPath);\n            // 生成图片\n            ImageIO.write(buffImg, \"JPG\", os);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (null != os){\n                    os.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n\n效果如下\n\n![3](http://typa.qingyun.run/img/3.jpg)\n\n本次处理到此为止，后续更改再次更新\n\n","source":"_posts/JAVA实现图片合并.md","raw":"---\ntitle: JAVA实现图片合并\nabbrlink: 756143886\ndate: 2021-11-29 09:31:05\ntags:\n  - JAVA\ncategories: JAVA\ndescription: JAVA应用 实现两张图片合并（可多张未实现）\n---\nJAVA  实现两张图片合并（可多张未实现）\n\n```java\npackage edu.sdut.Picture.Main;\n\nimport javax.imageio.ImageIO;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/9/28 20:13\n */\n//实现图片合并\npublic class PictureMerge {\n\n\n    private  Graphics2D g        = null;\n\n    //读取网络图片\n//    public static BufferedImage readUrl(String ImageUrl){\n//        BufferedImage bf = null;\n//        try{\n//            URL urlfile = new URL(ImageUrl);\n//            InputStream inStream = urlfile.openStream();\n//            bf = ImageIO.read(inStream);\n//        }catch (IOException e) {\n//            e.printStackTrace();\n//        }\n//        return bf;\n//    }\n\n\n    /**\n     * 导入本地图片到缓冲区\n     */\n    public BufferedImage loadImageLocal(String imgName) {\n        try {\n            return ImageIO.read(new File(imgName));\n        } catch (IOException e) {\n            System.out.println(e.getMessage());\n        }\n        return null;\n    }\n\n    /**\n     * 将两张图片合并在一起\n     * @param b\n     * @param d\n     * @return\n     */\n    public BufferedImage modifyImagetogeter(BufferedImage b, BufferedImage d) {\n        try {\n            int w = b.getWidth();\n            int h = b.getHeight();\n            //进行图片绘制\n            g = d.createGraphics();\n            g.drawImage(b, 300, -800, w, h, null);\n            g.dispose();\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n        return d;\n    }\n\n\n    /**\n     * 生成新图片到本地\n     */\n    public void writeImageLocal(String newImage, BufferedImage img) {\n        if (newImage != null && img != null) {\n            try {\n                File outputfile = new File(newImage);\n                ImageIO.write(img, \"jpg\", outputfile);\n            } catch (IOException e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n\n    /**\n     * 图片测试\n     * @param args\n     */\n    public static void main(String[] args) {\n        PictureMerge pictureMerge = new PictureMerge();\n        //图片A\n        BufferedImage d = pictureMerge.loadImageLocal(\"D:\\\\GIF\\\\jpg\\\\1.jpg\");\n        //t\n        BufferedImage b = pictureMerge.loadImageLocal(\"D:\\\\GIF\\\\jpg\\\\2.jpg\");\n        pictureMerge.writeImageLocal(\"D:\\\\GIF\\\\gif\\\\10.jpg\", pictureMerge.modifyImagetogeter(b, d));\n        //将多张图片合在一起\n        System.out.println(\"success\");\n    }\n}\n\n```\n\n测试图片![1](http://typa.qingyun.run/img/1.jpg)\n\n![2](http://typa.qingyun.run/img/2.jpg)\n\n生成图片如下\n\n![10](http://typa.qingyun.run/img/10.jpg)\n\n不符合期望，故进行代码修改\n\n修改后代码如下\n\n```java\npackage edu.sdut.Picture.Main;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.URL;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/9/28 20:13\n */\n//实现图片合并\npublic class PictureMerge {\n\n\n    private  Graphics2D g        = null;\n\n    //读取网络图片\n//    public static BufferedImage readUrl(String ImageUrl){\n//        BufferedImage bf = null;\n//        try{\n//            URL urlfile = new URL(ImageUrl);\n//            InputStream inStream = urlfile.openStream();\n//            bf = ImageIO.read(inStream);\n//        }catch (IOException e) {\n//            e.printStackTrace();\n//        }\n//        return bf;\n//    }\n\n\n    /**\n     * 导入本地图片到缓冲区\n     */\n    public BufferedImage loadImageLocal(String imgName) {\n        try {\n            return ImageIO.read(new File(imgName));\n        } catch (IOException e) {\n            System.out.println(e.getMessage());\n        }\n        return null;\n    }\n\n    /**\n     * 将两张图片合并在一起\n     * @param b\n     * @param d\n     * @return\n     */\n    public BufferedImage modifyImagetogeter(BufferedImage b, BufferedImage d) {\n        try {\n            int w = d.getWidth();\n            int h = d.getHeight();\n            //进行图片绘制\n            g = d.createGraphics();\n            //更改生成的位置  图片进行覆盖\n            g.drawImage(b, 0, 0, w, h, null);\n            g.dispose();\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n        return d;\n    }\n\n\n    /**\n     * 生成新图片到本地\n     */\n    public void writeImageLocal(String newImage, BufferedImage img) {\n        if (newImage != null && img != null) {\n            try {\n                File outputfile = new File(newImage);\n                ImageIO.write(img, \"jpg\", outputfile);\n            } catch (IOException e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n\n\n\n    /**\n     * 将背景替换为透明\n     *\n     * @return\n     * @throws IOException the io exception\n     * @author Jack Que\n     * @created 2021 -07-08 10:25:10 Change img color.\n     */\n    public static BufferedImage changeImgColor(BufferedImage bi) throws IOException {\n        Image image = (Image) bi;\n        //将原图片的二进制转化为ImageIcon\n        ImageIcon imageIcon = new ImageIcon(image);\n        int width = imageIcon.getIconWidth();\n        int height = imageIcon.getIconHeight();\n        //图片缓冲流\n        BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);\n        Graphics2D graphics2D = (Graphics2D) bufferedImage.getGraphics();\n        graphics2D.drawImage(imageIcon.getImage(), 0, 0, imageIcon.getImageObserver());\n        int alpha = 255;\n        //这个背景底色的选择，我这里选择的是比较偏的位置，可以修改位置。背景色选择不知道有没有别的更优的方式（比如先过滤一遍获取颜色次数最多的，但是因为感觉做起来会比较复杂没去实现），如果有可以评论。\n        int RGB=bufferedImage.getRGB(width-1, height-1);\n        for(int i = bufferedImage.getMinX(); i < width; i++) {\n            for(int j = bufferedImage.getMinY(); j < height; j++) {\n                int rgb = bufferedImage.getRGB(i, j);\n                int r = (rgb & 0xff0000) >>16;\n                int g = (rgb & 0xff00) >> 8;\n                int b = (rgb & 0xff);\n                int R = (RGB & 0xff0000) >>16;\n                int G = (RGB & 0xff00) >> 8;\n                int B = (RGB & 0xff);\n                //a为色差范围值，渐变色边缘处理，数值需要具体测试，50左右的效果比较可以\n                int a = 45;\n                if(Math.abs(R-r) < a && Math.abs(G-g) < a && Math.abs(B-b) < a ) {\n                    alpha = 0;\n                } else {\n                    alpha = 255;\n                }\n                rgb = (alpha << 24)|(rgb & 0x00ffffff);\n                bufferedImage.setRGB(i,j,rgb);\n            }\n        }\n            return bufferedImage;\n    }\n    public static String convertRgbStr(int color) {\n        // 获取color(RGB)中R位\n        int red = (color & 0xff0000) >> 16;\n        // 获取color(RGB)中G位\n        int green = (color & 0x00ff00) >> 8;\n        // 获取color(RGB)中B位\n        int blue = (color & 0x0000ff);\n        return red + \",\" + green + \",\" + blue;\n    }\n\n\n    /**\n     * 图片测试\n     * @param args\n     */\n    public static void main(String[] args) throws IOException {\n        PictureMerge pictureMerge = new PictureMerge();\n        //图片A\n        BufferedImage d = pictureMerge.loadImageLocal(\"D:\\\\GIF\\\\gif\\\\1.jpg\");\n        //t\n        BufferedImage b = pictureMerge.loadImageLocal(\"D:\\\\GIF\\\\jpg\\\\2.jpg\");\n        //实现图片透明\n//        d = changeImgColor(d);\n        b = changeImgColor(b);\n        pictureMerge.writeImageLocal(\"D:\\\\GIF\\\\gif\\\\10.jpg\", pictureMerge.modifyImagetogeter(b, d));\n        //将多张图片合在一起\n        System.out.println(\"success\");\n    }\n}\n\n```\n\n产生效果如下  （修改了背景图片素描画并且进行了透明化但不符合期望，继续修改）\n\n![11](http://typa.qingyun.run/img/11.jpg)\n\n替换了另一套代码 使用透明度进行图片合并 代码如下\n\n```java\npackage edu.sdut.Picture.Main;\nimport java.awt.AlphaComposite;\nimport java.awt.Graphics2D;\nimport java.awt.Image;\nimport java.awt.RenderingHints;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.OutputStream;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/9/28 22:23\n */\npublic class ImageMarkLogoByIcon {\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        String srcImgPath = \"D:\\\\GIF\\\\jpg\\\\1.jpg\";\n        String iconPath = \"D:\\\\GIF\\\\jpg\\\\2.jpg\";\n        String targerPath = \"D:\\\\GIF\\\\gif\\\\3.jpg\" ;\n        // 给图片添加水印\n        ImageMarkLogoByIcon.markImageByIcon(iconPath, srcImgPath, targerPath , 0);\n    }\n    /**\n     * 给图片添加水印\n     * @param iconPath 水印图片路径\n     * @param srcImgPath 源图片路径\n     * @param targerPath 目标图片路径\n     */\n    public static void markImageByIcon(String iconPath, String srcImgPath,\n                                       String targerPath) {\n        markImageByIcon(iconPath, srcImgPath, targerPath, null) ;\n    }\n    /**\n     * 给图片添加水印、可设置水印图片旋转角度\n     * @param iconPath 水印图片路径\n     * @param srcImgPath 源图片路径\n     * @param targerPath 目标图片路径\n     * @param degree 水印图片旋转角度\n     */\n    public static void markImageByIcon(String iconPath, String srcImgPath,\n                                       String targerPath, Integer degree) {\n        OutputStream os = null;\n        try {\n            Image srcImg = ImageIO.read(new File(srcImgPath));\n            BufferedImage buffImg = new BufferedImage(srcImg.getWidth(null),\n                    srcImg.getHeight(null), BufferedImage.TYPE_INT_RGB);\n            // 得到画笔对象\n            // Graphics g= buffImg.getGraphics();\n            Graphics2D g = buffImg.createGraphics();\n\n            // 设置对线段的锯齿状边缘处理\n            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n\n            g.drawImage(srcImg.getScaledInstance(srcImg.getWidth(null), srcImg\n                    .getHeight(null), Image.SCALE_SMOOTH), 0, 0, null);\n\n            if (null != degree) {\n                // 设置水印旋转\n                g.rotate(Math.toRadians(degree),\n                        (double) buffImg.getWidth() / 2, (double) buffImg\n                                .getHeight() / 2);\n            }\n            // 水印图象的路径 水印一般为gif或者png的，这样可设置透明度\n            ImageIcon imgIcon = new ImageIcon(iconPath);\n            // 得到Image对象。\n            Image img = imgIcon.getImage();\n            float alpha = 0.65f; // 透明度\n            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,\n                    alpha));\n            // 表示水印图片的位置\n            g.drawImage(img, 0, 0,buffImg.getWidth(),buffImg.getHeight(), null);\n            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));\n            g.dispose();\n            os = new FileOutputStream(targerPath);\n            // 生成图片\n            ImageIO.write(buffImg, \"JPG\", os);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (null != os){\n                    os.close();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n\n```\n\n效果如下\n\n![3](http://typa.qingyun.run/img/3.jpg)\n\n本次处理到此为止，后续更改再次更新\n\n","slug":"JAVA实现图片合并","published":1,"updated":"2021-11-29T01:32:04.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2ra000vo4vbd8c6cagi","content":"<p>JAVA  实现两张图片合并（可多张未实现）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.Picture.Main;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/28 20:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//实现图片合并</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PictureMerge</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  Graphics2D g        = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取网络图片</span></span><br><span class=\"line\"><span class=\"comment\">//    public static BufferedImage readUrl(String ImageUrl)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        BufferedImage bf = null;</span></span><br><span class=\"line\"><span class=\"comment\">//        try&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            URL urlfile = new URL(ImageUrl);</span></span><br><span class=\"line\"><span class=\"comment\">//            InputStream inStream = urlfile.openStream();</span></span><br><span class=\"line\"><span class=\"comment\">//            bf = ImageIO.read(inStream);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        return bf;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 导入本地图片到缓冲区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BufferedImage <span class=\"title\">loadImageLocal</span><span class=\"params\">(String imgName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ImageIO.read(<span class=\"keyword\">new</span> File(imgName));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将两张图片合并在一起</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> d</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BufferedImage <span class=\"title\">modifyImagetogeter</span><span class=\"params\">(BufferedImage b, BufferedImage d)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> w = b.getWidth();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> h = b.getHeight();</span><br><span class=\"line\">            <span class=\"comment\">//进行图片绘制</span></span><br><span class=\"line\">            g = d.createGraphics();</span><br><span class=\"line\">            g.drawImage(b, <span class=\"number\">300</span>, -<span class=\"number\">800</span>, w, h, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            g.dispose();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成新图片到本地</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeImageLocal</span><span class=\"params\">(String newImage, BufferedImage img)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newImage != <span class=\"keyword\">null</span> &amp;&amp; img != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                File outputfile = <span class=\"keyword\">new</span> File(newImage);</span><br><span class=\"line\">                ImageIO.write(img, <span class=\"string\">&quot;jpg&quot;</span>, outputfile);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                System.out.println(e.getMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片测试</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        PictureMerge pictureMerge = <span class=\"keyword\">new</span> PictureMerge();</span><br><span class=\"line\">        <span class=\"comment\">//图片A</span></span><br><span class=\"line\">        BufferedImage d = pictureMerge.loadImageLocal(<span class=\"string\">&quot;D:\\\\GIF\\\\jpg\\\\1.jpg&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//t</span></span><br><span class=\"line\">        BufferedImage b = pictureMerge.loadImageLocal(<span class=\"string\">&quot;D:\\\\GIF\\\\jpg\\\\2.jpg&quot;</span>);</span><br><span class=\"line\">        pictureMerge.writeImageLocal(<span class=\"string\">&quot;D:\\\\GIF\\\\gif\\\\10.jpg&quot;</span>, pictureMerge.modifyImagetogeter(b, d));</span><br><span class=\"line\">        <span class=\"comment\">//将多张图片合在一起</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>测试图片<img src=\"http://typa.qingyun.run/img/1.jpg\" alt=\"1\"></p>\n<p><img src=\"http://typa.qingyun.run/img/2.jpg\" alt=\"2\"></p>\n<p>生成图片如下</p>\n<p><img src=\"http://typa.qingyun.run/img/10.jpg\" alt=\"10\"></p>\n<p>不符合期望，故进行代码修改</p>\n<p>修改后代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.Picture.Main;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/28 20:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//实现图片合并</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PictureMerge</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  Graphics2D g        = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取网络图片</span></span><br><span class=\"line\"><span class=\"comment\">//    public static BufferedImage readUrl(String ImageUrl)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        BufferedImage bf = null;</span></span><br><span class=\"line\"><span class=\"comment\">//        try&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            URL urlfile = new URL(ImageUrl);</span></span><br><span class=\"line\"><span class=\"comment\">//            InputStream inStream = urlfile.openStream();</span></span><br><span class=\"line\"><span class=\"comment\">//            bf = ImageIO.read(inStream);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        return bf;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 导入本地图片到缓冲区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BufferedImage <span class=\"title\">loadImageLocal</span><span class=\"params\">(String imgName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ImageIO.read(<span class=\"keyword\">new</span> File(imgName));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将两张图片合并在一起</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> d</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BufferedImage <span class=\"title\">modifyImagetogeter</span><span class=\"params\">(BufferedImage b, BufferedImage d)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> w = d.getWidth();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> h = d.getHeight();</span><br><span class=\"line\">            <span class=\"comment\">//进行图片绘制</span></span><br><span class=\"line\">            g = d.createGraphics();</span><br><span class=\"line\">            <span class=\"comment\">//更改生成的位置  图片进行覆盖</span></span><br><span class=\"line\">            g.drawImage(b, <span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            g.dispose();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成新图片到本地</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeImageLocal</span><span class=\"params\">(String newImage, BufferedImage img)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newImage != <span class=\"keyword\">null</span> &amp;&amp; img != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                File outputfile = <span class=\"keyword\">new</span> File(newImage);</span><br><span class=\"line\">                ImageIO.write(img, <span class=\"string\">&quot;jpg&quot;</span>, outputfile);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                System.out.println(e.getMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将背景替换为透明</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException the io exception</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> Jack Que</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@created</span> 2021 -07-08 10:25:10 Change img color.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">changeImgColor</span><span class=\"params\">(BufferedImage bi)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Image image = (Image) bi;</span><br><span class=\"line\">        <span class=\"comment\">//将原图片的二进制转化为ImageIcon</span></span><br><span class=\"line\">        ImageIcon imageIcon = <span class=\"keyword\">new</span> ImageIcon(image);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = imageIcon.getIconWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = imageIcon.getIconHeight();</span><br><span class=\"line\">        <span class=\"comment\">//图片缓冲流</span></span><br><span class=\"line\">        BufferedImage bufferedImage = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);</span><br><span class=\"line\">        Graphics2D graphics2D = (Graphics2D) bufferedImage.getGraphics();</span><br><span class=\"line\">        graphics2D.drawImage(imageIcon.getImage(), <span class=\"number\">0</span>, <span class=\"number\">0</span>, imageIcon.getImageObserver());</span><br><span class=\"line\">        <span class=\"keyword\">int</span> alpha = <span class=\"number\">255</span>;</span><br><span class=\"line\">        <span class=\"comment\">//这个背景底色的选择，我这里选择的是比较偏的位置，可以修改位置。背景色选择不知道有没有别的更优的方式（比如先过滤一遍获取颜色次数最多的，但是因为感觉做起来会比较复杂没去实现），如果有可以评论。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> RGB=bufferedImage.getRGB(width-<span class=\"number\">1</span>, height-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = bufferedImage.getMinX(); i &lt; width; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = bufferedImage.getMinY(); j &lt; height; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> rgb = bufferedImage.getRGB(i, j);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> r = (rgb &amp; <span class=\"number\">0xff0000</span>) &gt;&gt;<span class=\"number\">16</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> g = (rgb &amp; <span class=\"number\">0xff00</span>) &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> b = (rgb &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> R = (RGB &amp; <span class=\"number\">0xff0000</span>) &gt;&gt;<span class=\"number\">16</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> G = (RGB &amp; <span class=\"number\">0xff00</span>) &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> B = (RGB &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">                <span class=\"comment\">//a为色差范围值，渐变色边缘处理，数值需要具体测试，50左右的效果比较可以</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> a = <span class=\"number\">45</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Math.abs(R-r) &lt; a &amp;&amp; Math.abs(G-g) &lt; a &amp;&amp; Math.abs(B-b) &lt; a ) &#123;</span><br><span class=\"line\">                    alpha = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    alpha = <span class=\"number\">255</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rgb = (alpha &lt;&lt; <span class=\"number\">24</span>)|(rgb &amp; <span class=\"number\">0x00ffffff</span>);</span><br><span class=\"line\">                bufferedImage.setRGB(i,j,rgb);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bufferedImage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">convertRgbStr</span><span class=\"params\">(<span class=\"keyword\">int</span> color)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取color(RGB)中R位</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> red = (color &amp; <span class=\"number\">0xff0000</span>) &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取color(RGB)中G位</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> green = (color &amp; <span class=\"number\">0x00ff00</span>) &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取color(RGB)中B位</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> blue = (color &amp; <span class=\"number\">0x0000ff</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> red + <span class=\"string\">&quot;,&quot;</span> + green + <span class=\"string\">&quot;,&quot;</span> + blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片测试</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        PictureMerge pictureMerge = <span class=\"keyword\">new</span> PictureMerge();</span><br><span class=\"line\">        <span class=\"comment\">//图片A</span></span><br><span class=\"line\">        BufferedImage d = pictureMerge.loadImageLocal(<span class=\"string\">&quot;D:\\\\GIF\\\\gif\\\\1.jpg&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//t</span></span><br><span class=\"line\">        BufferedImage b = pictureMerge.loadImageLocal(<span class=\"string\">&quot;D:\\\\GIF\\\\jpg\\\\2.jpg&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//实现图片透明</span></span><br><span class=\"line\"><span class=\"comment\">//        d = changeImgColor(d);</span></span><br><span class=\"line\">        b = changeImgColor(b);</span><br><span class=\"line\">        pictureMerge.writeImageLocal(<span class=\"string\">&quot;D:\\\\GIF\\\\gif\\\\10.jpg&quot;</span>, pictureMerge.modifyImagetogeter(b, d));</span><br><span class=\"line\">        <span class=\"comment\">//将多张图片合在一起</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>产生效果如下  （修改了背景图片素描画并且进行了透明化但不符合期望，继续修改）</p>\n<p><img src=\"http://typa.qingyun.run/img/11.jpg\" alt=\"11\"></p>\n<p>替换了另一套代码 使用透明度进行图片合并 代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.Picture.Main;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.AlphaComposite;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics2D;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Image;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.RenderingHints;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.ImageIcon;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/28 22:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageMarkLogoByIcon</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String srcImgPath = <span class=\"string\">&quot;D:\\\\GIF\\\\jpg\\\\1.jpg&quot;</span>;</span><br><span class=\"line\">        String iconPath = <span class=\"string\">&quot;D:\\\\GIF\\\\jpg\\\\2.jpg&quot;</span>;</span><br><span class=\"line\">        String targerPath = <span class=\"string\">&quot;D:\\\\GIF\\\\gif\\\\3.jpg&quot;</span> ;</span><br><span class=\"line\">        <span class=\"comment\">// 给图片添加水印</span></span><br><span class=\"line\">        ImageMarkLogoByIcon.markImageByIcon(iconPath, srcImgPath, targerPath , <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给图片添加水印</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> iconPath 水印图片路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> srcImgPath 源图片路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targerPath 目标图片路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">markImageByIcon</span><span class=\"params\">(String iconPath, String srcImgPath,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                       String targerPath)</span> </span>&#123;</span><br><span class=\"line\">        markImageByIcon(iconPath, srcImgPath, targerPath, <span class=\"keyword\">null</span>) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给图片添加水印、可设置水印图片旋转角度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> iconPath 水印图片路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> srcImgPath 源图片路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targerPath 目标图片路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> degree 水印图片旋转角度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">markImageByIcon</span><span class=\"params\">(String iconPath, String srcImgPath,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                       String targerPath, Integer degree)</span> </span>&#123;</span><br><span class=\"line\">        OutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Image srcImg = ImageIO.read(<span class=\"keyword\">new</span> File(srcImgPath));</span><br><span class=\"line\">            BufferedImage buffImg = <span class=\"keyword\">new</span> BufferedImage(srcImg.getWidth(<span class=\"keyword\">null</span>),</span><br><span class=\"line\">                    srcImg.getHeight(<span class=\"keyword\">null</span>), BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">            <span class=\"comment\">// 得到画笔对象</span></span><br><span class=\"line\">            <span class=\"comment\">// Graphics g= buffImg.getGraphics();</span></span><br><span class=\"line\">            Graphics2D g = buffImg.createGraphics();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 设置对线段的锯齿状边缘处理</span></span><br><span class=\"line\">            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,</span><br><span class=\"line\">                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);</span><br><span class=\"line\"></span><br><span class=\"line\">            g.drawImage(srcImg.getScaledInstance(srcImg.getWidth(<span class=\"keyword\">null</span>), srcImg</span><br><span class=\"line\">                    .getHeight(<span class=\"keyword\">null</span>), Image.SCALE_SMOOTH), <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != degree) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置水印旋转</span></span><br><span class=\"line\">                g.rotate(Math.toRadians(degree),</span><br><span class=\"line\">                        (<span class=\"keyword\">double</span>) buffImg.getWidth() / <span class=\"number\">2</span>, (<span class=\"keyword\">double</span>) buffImg</span><br><span class=\"line\">                                .getHeight() / <span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 水印图象的路径 水印一般为gif或者png的，这样可设置透明度</span></span><br><span class=\"line\">            ImageIcon imgIcon = <span class=\"keyword\">new</span> ImageIcon(iconPath);</span><br><span class=\"line\">            <span class=\"comment\">// 得到Image对象。</span></span><br><span class=\"line\">            Image img = imgIcon.getImage();</span><br><span class=\"line\">            <span class=\"keyword\">float</span> alpha = <span class=\"number\">0.65f</span>; <span class=\"comment\">// 透明度</span></span><br><span class=\"line\">            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,</span><br><span class=\"line\">                    alpha));</span><br><span class=\"line\">            <span class=\"comment\">// 表示水印图片的位置</span></span><br><span class=\"line\">            g.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>,buffImg.getWidth(),buffImg.getHeight(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));</span><br><span class=\"line\">            g.dispose();</span><br><span class=\"line\">            os = <span class=\"keyword\">new</span> FileOutputStream(targerPath);</span><br><span class=\"line\">            <span class=\"comment\">// 生成图片</span></span><br><span class=\"line\">            ImageIO.write(buffImg, <span class=\"string\">&quot;JPG&quot;</span>, os);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != os)&#123;</span><br><span class=\"line\">                    os.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>效果如下</p>\n<p><img src=\"http://typa.qingyun.run/img/3.jpg\" alt=\"3\"></p>\n<p>本次处理到此为止，后续更改再次更新</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<p>JAVA  实现两张图片合并（可多张未实现）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.Picture.Main;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/28 20:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//实现图片合并</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PictureMerge</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  Graphics2D g        = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取网络图片</span></span><br><span class=\"line\"><span class=\"comment\">//    public static BufferedImage readUrl(String ImageUrl)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        BufferedImage bf = null;</span></span><br><span class=\"line\"><span class=\"comment\">//        try&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            URL urlfile = new URL(ImageUrl);</span></span><br><span class=\"line\"><span class=\"comment\">//            InputStream inStream = urlfile.openStream();</span></span><br><span class=\"line\"><span class=\"comment\">//            bf = ImageIO.read(inStream);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        return bf;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 导入本地图片到缓冲区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BufferedImage <span class=\"title\">loadImageLocal</span><span class=\"params\">(String imgName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ImageIO.read(<span class=\"keyword\">new</span> File(imgName));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将两张图片合并在一起</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> d</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BufferedImage <span class=\"title\">modifyImagetogeter</span><span class=\"params\">(BufferedImage b, BufferedImage d)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> w = b.getWidth();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> h = b.getHeight();</span><br><span class=\"line\">            <span class=\"comment\">//进行图片绘制</span></span><br><span class=\"line\">            g = d.createGraphics();</span><br><span class=\"line\">            g.drawImage(b, <span class=\"number\">300</span>, -<span class=\"number\">800</span>, w, h, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            g.dispose();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成新图片到本地</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeImageLocal</span><span class=\"params\">(String newImage, BufferedImage img)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newImage != <span class=\"keyword\">null</span> &amp;&amp; img != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                File outputfile = <span class=\"keyword\">new</span> File(newImage);</span><br><span class=\"line\">                ImageIO.write(img, <span class=\"string\">&quot;jpg&quot;</span>, outputfile);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                System.out.println(e.getMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片测试</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        PictureMerge pictureMerge = <span class=\"keyword\">new</span> PictureMerge();</span><br><span class=\"line\">        <span class=\"comment\">//图片A</span></span><br><span class=\"line\">        BufferedImage d = pictureMerge.loadImageLocal(<span class=\"string\">&quot;D:\\\\GIF\\\\jpg\\\\1.jpg&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//t</span></span><br><span class=\"line\">        BufferedImage b = pictureMerge.loadImageLocal(<span class=\"string\">&quot;D:\\\\GIF\\\\jpg\\\\2.jpg&quot;</span>);</span><br><span class=\"line\">        pictureMerge.writeImageLocal(<span class=\"string\">&quot;D:\\\\GIF\\\\gif\\\\10.jpg&quot;</span>, pictureMerge.modifyImagetogeter(b, d));</span><br><span class=\"line\">        <span class=\"comment\">//将多张图片合在一起</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>测试图片<img src=\"http://typa.qingyun.run/img/1.jpg\" alt=\"1\"></p>\n<p><img src=\"http://typa.qingyun.run/img/2.jpg\" alt=\"2\"></p>\n<p>生成图片如下</p>\n<p><img src=\"http://typa.qingyun.run/img/10.jpg\" alt=\"10\"></p>\n<p>不符合期望，故进行代码修改</p>\n<p>修改后代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.Picture.Main;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/28 20:13</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//实现图片合并</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PictureMerge</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  Graphics2D g        = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取网络图片</span></span><br><span class=\"line\"><span class=\"comment\">//    public static BufferedImage readUrl(String ImageUrl)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//        BufferedImage bf = null;</span></span><br><span class=\"line\"><span class=\"comment\">//        try&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            URL urlfile = new URL(ImageUrl);</span></span><br><span class=\"line\"><span class=\"comment\">//            InputStream inStream = urlfile.openStream();</span></span><br><span class=\"line\"><span class=\"comment\">//            bf = ImageIO.read(inStream);</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//        return bf;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 导入本地图片到缓冲区</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BufferedImage <span class=\"title\">loadImageLocal</span><span class=\"params\">(String imgName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ImageIO.read(<span class=\"keyword\">new</span> File(imgName));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将两张图片合并在一起</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> b</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> d</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> BufferedImage <span class=\"title\">modifyImagetogeter</span><span class=\"params\">(BufferedImage b, BufferedImage d)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> w = d.getWidth();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> h = d.getHeight();</span><br><span class=\"line\">            <span class=\"comment\">//进行图片绘制</span></span><br><span class=\"line\">            g = d.createGraphics();</span><br><span class=\"line\">            <span class=\"comment\">//更改生成的位置  图片进行覆盖</span></span><br><span class=\"line\">            g.drawImage(b, <span class=\"number\">0</span>, <span class=\"number\">0</span>, w, h, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            g.dispose();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(e.getMessage());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 生成新图片到本地</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeImageLocal</span><span class=\"params\">(String newImage, BufferedImage img)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newImage != <span class=\"keyword\">null</span> &amp;&amp; img != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                File outputfile = <span class=\"keyword\">new</span> File(newImage);</span><br><span class=\"line\">                ImageIO.write(img, <span class=\"string\">&quot;jpg&quot;</span>, outputfile);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                System.out.println(e.getMessage());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将背景替换为透明</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException the io exception</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> Jack Que</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@created</span> 2021 -07-08 10:25:10 Change img color.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">changeImgColor</span><span class=\"params\">(BufferedImage bi)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        Image image = (Image) bi;</span><br><span class=\"line\">        <span class=\"comment\">//将原图片的二进制转化为ImageIcon</span></span><br><span class=\"line\">        ImageIcon imageIcon = <span class=\"keyword\">new</span> ImageIcon(image);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = imageIcon.getIconWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = imageIcon.getIconHeight();</span><br><span class=\"line\">        <span class=\"comment\">//图片缓冲流</span></span><br><span class=\"line\">        BufferedImage bufferedImage = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);</span><br><span class=\"line\">        Graphics2D graphics2D = (Graphics2D) bufferedImage.getGraphics();</span><br><span class=\"line\">        graphics2D.drawImage(imageIcon.getImage(), <span class=\"number\">0</span>, <span class=\"number\">0</span>, imageIcon.getImageObserver());</span><br><span class=\"line\">        <span class=\"keyword\">int</span> alpha = <span class=\"number\">255</span>;</span><br><span class=\"line\">        <span class=\"comment\">//这个背景底色的选择，我这里选择的是比较偏的位置，可以修改位置。背景色选择不知道有没有别的更优的方式（比如先过滤一遍获取颜色次数最多的，但是因为感觉做起来会比较复杂没去实现），如果有可以评论。</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> RGB=bufferedImage.getRGB(width-<span class=\"number\">1</span>, height-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = bufferedImage.getMinX(); i &lt; width; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = bufferedImage.getMinY(); j &lt; height; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> rgb = bufferedImage.getRGB(i, j);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> r = (rgb &amp; <span class=\"number\">0xff0000</span>) &gt;&gt;<span class=\"number\">16</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> g = (rgb &amp; <span class=\"number\">0xff00</span>) &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> b = (rgb &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> R = (RGB &amp; <span class=\"number\">0xff0000</span>) &gt;&gt;<span class=\"number\">16</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> G = (RGB &amp; <span class=\"number\">0xff00</span>) &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> B = (RGB &amp; <span class=\"number\">0xff</span>);</span><br><span class=\"line\">                <span class=\"comment\">//a为色差范围值，渐变色边缘处理，数值需要具体测试，50左右的效果比较可以</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> a = <span class=\"number\">45</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(Math.abs(R-r) &lt; a &amp;&amp; Math.abs(G-g) &lt; a &amp;&amp; Math.abs(B-b) &lt; a ) &#123;</span><br><span class=\"line\">                    alpha = <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    alpha = <span class=\"number\">255</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                rgb = (alpha &lt;&lt; <span class=\"number\">24</span>)|(rgb &amp; <span class=\"number\">0x00ffffff</span>);</span><br><span class=\"line\">                bufferedImage.setRGB(i,j,rgb);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bufferedImage;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">convertRgbStr</span><span class=\"params\">(<span class=\"keyword\">int</span> color)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取color(RGB)中R位</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> red = (color &amp; <span class=\"number\">0xff0000</span>) &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取color(RGB)中G位</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> green = (color &amp; <span class=\"number\">0x00ff00</span>) &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 获取color(RGB)中B位</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> blue = (color &amp; <span class=\"number\">0x0000ff</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> red + <span class=\"string\">&quot;,&quot;</span> + green + <span class=\"string\">&quot;,&quot;</span> + blue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片测试</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        PictureMerge pictureMerge = <span class=\"keyword\">new</span> PictureMerge();</span><br><span class=\"line\">        <span class=\"comment\">//图片A</span></span><br><span class=\"line\">        BufferedImage d = pictureMerge.loadImageLocal(<span class=\"string\">&quot;D:\\\\GIF\\\\gif\\\\1.jpg&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//t</span></span><br><span class=\"line\">        BufferedImage b = pictureMerge.loadImageLocal(<span class=\"string\">&quot;D:\\\\GIF\\\\jpg\\\\2.jpg&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//实现图片透明</span></span><br><span class=\"line\"><span class=\"comment\">//        d = changeImgColor(d);</span></span><br><span class=\"line\">        b = changeImgColor(b);</span><br><span class=\"line\">        pictureMerge.writeImageLocal(<span class=\"string\">&quot;D:\\\\GIF\\\\gif\\\\10.jpg&quot;</span>, pictureMerge.modifyImagetogeter(b, d));</span><br><span class=\"line\">        <span class=\"comment\">//将多张图片合在一起</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>产生效果如下  （修改了背景图片素描画并且进行了透明化但不符合期望，继续修改）</p>\n<p><img src=\"http://typa.qingyun.run/img/11.jpg\" alt=\"11\"></p>\n<p>替换了另一套代码 使用透明度进行图片合并 代码如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.Picture.Main;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.AlphaComposite;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Graphics2D;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Image;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.RenderingHints;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.ImageIcon;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/28 22:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ImageMarkLogoByIcon</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String srcImgPath = <span class=\"string\">&quot;D:\\\\GIF\\\\jpg\\\\1.jpg&quot;</span>;</span><br><span class=\"line\">        String iconPath = <span class=\"string\">&quot;D:\\\\GIF\\\\jpg\\\\2.jpg&quot;</span>;</span><br><span class=\"line\">        String targerPath = <span class=\"string\">&quot;D:\\\\GIF\\\\gif\\\\3.jpg&quot;</span> ;</span><br><span class=\"line\">        <span class=\"comment\">// 给图片添加水印</span></span><br><span class=\"line\">        ImageMarkLogoByIcon.markImageByIcon(iconPath, srcImgPath, targerPath , <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给图片添加水印</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> iconPath 水印图片路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> srcImgPath 源图片路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targerPath 目标图片路径</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">markImageByIcon</span><span class=\"params\">(String iconPath, String srcImgPath,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                       String targerPath)</span> </span>&#123;</span><br><span class=\"line\">        markImageByIcon(iconPath, srcImgPath, targerPath, <span class=\"keyword\">null</span>) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 给图片添加水印、可设置水印图片旋转角度</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> iconPath 水印图片路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> srcImgPath 源图片路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> targerPath 目标图片路径</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> degree 水印图片旋转角度</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">markImageByIcon</span><span class=\"params\">(String iconPath, String srcImgPath,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                       String targerPath, Integer degree)</span> </span>&#123;</span><br><span class=\"line\">        OutputStream os = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Image srcImg = ImageIO.read(<span class=\"keyword\">new</span> File(srcImgPath));</span><br><span class=\"line\">            BufferedImage buffImg = <span class=\"keyword\">new</span> BufferedImage(srcImg.getWidth(<span class=\"keyword\">null</span>),</span><br><span class=\"line\">                    srcImg.getHeight(<span class=\"keyword\">null</span>), BufferedImage.TYPE_INT_RGB);</span><br><span class=\"line\">            <span class=\"comment\">// 得到画笔对象</span></span><br><span class=\"line\">            <span class=\"comment\">// Graphics g= buffImg.getGraphics();</span></span><br><span class=\"line\">            Graphics2D g = buffImg.createGraphics();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 设置对线段的锯齿状边缘处理</span></span><br><span class=\"line\">            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,</span><br><span class=\"line\">                    RenderingHints.VALUE_INTERPOLATION_BILINEAR);</span><br><span class=\"line\"></span><br><span class=\"line\">            g.drawImage(srcImg.getScaledInstance(srcImg.getWidth(<span class=\"keyword\">null</span>), srcImg</span><br><span class=\"line\">                    .getHeight(<span class=\"keyword\">null</span>), Image.SCALE_SMOOTH), <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != degree) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置水印旋转</span></span><br><span class=\"line\">                g.rotate(Math.toRadians(degree),</span><br><span class=\"line\">                        (<span class=\"keyword\">double</span>) buffImg.getWidth() / <span class=\"number\">2</span>, (<span class=\"keyword\">double</span>) buffImg</span><br><span class=\"line\">                                .getHeight() / <span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 水印图象的路径 水印一般为gif或者png的，这样可设置透明度</span></span><br><span class=\"line\">            ImageIcon imgIcon = <span class=\"keyword\">new</span> ImageIcon(iconPath);</span><br><span class=\"line\">            <span class=\"comment\">// 得到Image对象。</span></span><br><span class=\"line\">            Image img = imgIcon.getImage();</span><br><span class=\"line\">            <span class=\"keyword\">float</span> alpha = <span class=\"number\">0.65f</span>; <span class=\"comment\">// 透明度</span></span><br><span class=\"line\">            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,</span><br><span class=\"line\">                    alpha));</span><br><span class=\"line\">            <span class=\"comment\">// 表示水印图片的位置</span></span><br><span class=\"line\">            g.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>,buffImg.getWidth(),buffImg.getHeight(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">            g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));</span><br><span class=\"line\">            g.dispose();</span><br><span class=\"line\">            os = <span class=\"keyword\">new</span> FileOutputStream(targerPath);</span><br><span class=\"line\">            <span class=\"comment\">// 生成图片</span></span><br><span class=\"line\">            ImageIO.write(buffImg, <span class=\"string\">&quot;JPG&quot;</span>, os);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != os)&#123;</span><br><span class=\"line\">                    os.close();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>效果如下</p>\n<p><img src=\"http://typa.qingyun.run/img/3.jpg\" alt=\"3\"></p>\n<p>本次处理到此为止，后续更改再次更新</p>\n"},{"title":"Mysql数据库课程 Md文档","abbrlink":2655269665,"date":"2021-11-29T02:39:20.000Z","_content":"## 数据库\n```sql\nCREATE TABLE IF NOT EXISTS `Student`(\n   `ID` INT UNSIGNED AUTO_INCREMENT,  -- 序号\n   `Stu_ID` VARCHAR(100) NOT NULL ,   -- 学号\n   `Stu_NAME` VARCHAR(100)  ,   -- 姓名\n   `Stu_CourseID` VARCHAR(100) ,  -- 课程号\n   `Stu_Grade` VARCHAR(40) ,  -- 成绩\n   PRIMARY KEY ( `ID` )\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n```\n\n\n\n```sql\nINSERT INTO Student ( Stu_ID, Stu_NAME,Stu_CourseID,Stu_Grade )\n                      VALUES\n                    ( 181114930, '小青',036611,90),\n                    ( 181114930, '小青',036612,50),\n                    ( 181114931, '小红',036612,82),\n                    ( 181114932, '小蓝',036613,85); \n```\n\n\n\n```sql\nCREATE TABLE IF NOT EXISTS `Teacher`(\n   `ID` INT UNSIGNED AUTO_INCREMENT,  -- 序号\n   `Tea_ID` VARCHAR(100) NOT NULL ,   -- 教师学号\n   `Tea_NAME` VARCHAR(100)  ,   -- 教师姓名\n   `Tea_CourseID` VARCHAR(100),  -- 教授课程编号\n   PRIMARY KEY ( `ID` )\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n\n\n```sql\nINSERT INTO Teacher ( Tea_ID, Tea_NAME,Tea_CourseID )\n                       VALUES\n                       ( 159850, '王倩',036611),\n                       ( 159850, '王倩',036612),\n                       ( 159850, '王倩',036613),\n                       ( 159851, '王宇',036611),\n                       ( 159852, '王宇',036612),\n                       ( 159853, '王刚',036613);\n```\n\n\n\n```sql\nCREATE TABLE IF NOT EXISTS `Course`(\n   `Cour_ID` VARCHAR(100) NOT NULL ,   -- 课程编号\n   `Cour_NAME` VARCHAR(100) ,   -- 课程科目\n   PRIMARY KEY ( `Cour_ID` )\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n\n\n```sql\nINSERT INTO Course ( Cour_ID, Cour_NAME)\n                       VALUES\n                       ( 036611, '物理' );\n                       \nINSERT INTO Course ( Cour_ID, Cour_NAME)\n                       VALUES\n                       ( 036612, '生物' );\n                       \nINSERT INTO Course ( Cour_ID, Cour_NAME)\n                       VALUES\n                       ( 036613, '化学' );\n```\n## 数据库导入\n- 数据库导入\n  - ![image-20210902191100639](http://typa.qingyun.run/img/image-20210902191100639.png)\n\n- 选择导入向导\n- 选择Excel文件\n- 选择文件位置\n- 后续基本就是直接导入\n- 如图\n- ![image-20210902191403193](http://typa.qingyun.run/img/image-20210902191403193.png)\n\n![image-20210902191532235](http://typa.qingyun.run/img/image-20210902191532235.png)\n\n头名不建议使用中文，后续手动修改\n\n## 数据库查询\n例如：查询学号为181114930的课程名称\n\n```sql\nselect a.Stu_NAME,b.Cour_Name\nfrom student a left join course b on a.Stu_CourseID = b.Cour_ID\nwhere Stu_ID = '181114930';\n```\n\n\n\n例如：查询各个老师旗下学生的名字(老师教授课程与学生选报的课程)\n\n``` sql\nselect distinct a.Tea_Name ,c.Stu_Name \nfrom Teacher a \nleft join course b on a.Tea_CourseID  = b.Cour_ID\nleft join student c on b.Cour_ID =  c.Stu_CourseID \n```\n\n\n\n例如：查询各个科目的平均分且按照科目的平均分降序排列\n\n```sql\nselect b.Cour_NAME , AVG(a.Stu_Grade) as Stu_Grade \nfrom Student a \nLEFT JOIN Course b on a.Stu_CourseID = b.Cour_ID\ngroup by Stu_CourseID,Cour_NAME\nORDER BY Stu_Grade DESC\n```\n\n\n\n例如：计算学生的平均分(传入值为学号)\n\n```sql\ndelimiter $\ncreate procedure stu_AvgGrade(in StudentID varchar(100))\nbegin\n    select avg(Stu_Grade)  from Student where Stu_ID = StudentID;\nend $\n\ndelimiter ;\n\ncall stu_AvgGrade('181114930');\n```\n## 简历触发器\n创建测试表\n\n```sql\nCREATE TABLE IF NOT EXISTS `triggertest`(\n   `ID` INT ,  -- 序号\n    `Name` varchar(100), -- 名字\n   `createDate` datetime ,   -- 创建时间\n  `updateDate` datetime    -- 修改时间\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n查询所有触发器（当前库）\n\n```sql\nshow TRIGGERS\n```\n\n建立触发器（插入数据时，自动生成插入的时间）\n\n```sql\nDELIMITER $$\n \nCREATE\n    TRIGGER `create_time` BEFORE INSERT\n    ON `triggertest`\n    FOR EACH ROW BEGIN\n\tSET new.createDate=NOW();\n    END$$\n \nDELIMITER ;\n```\n\n\n\n修改数据时，自动生成修改的时间\n\n```sql\nDELIMITER $$\n \nCREATE\n    TRIGGER `update_time` BEFORE UPDATE\n    ON `triggertest`\n    FOR EACH ROW BEGIN\n\tSET new.updateDate=NOW();\n    END$$\n \nDELIMITER ;\n```\n\n## 数据库定时备份\n\n- 优先执行一次全量备份(此处为导出数据库的所有数据结构与数据内容)\n\n- ```bash\n  D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqldump --flush-logs --single-transaction --master-data=2 -u root -p test_db  > D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\log\\backup.sql\n  ```\n\n  ```\n      参数 --lock-all-tables\n  \n  对于InnoDB将替换为 --single-transaction。\n  该选项在导出数据之前提交一个 BEGIN SQL语句，BEGIN 不会阻塞任何应用程序且能保证导出时数据库的一致性状态。它只适用于事务表，例如 InnoDB 和 BDB。本选项和 --lock-tables 选项是互斥的，因为 LOCK TABLES 会使任何挂起的事务隐含提交。要想导出大表的话，应结合使用 --quick 选项。\n  \n      参数 --flush-logs，结束当前日志，生成并使用新日志文件\n  \n      参数 --master-data=2，该选项将会在输出SQL中记录下完全备份后新日志文件的名称，用于日后恢复时参考，例如输出的备份SQL文件中含有：CHANGE MASTER TO MASTER_LOG_FILE='MySQL-bin.000002', MASTER_LOG_POS=106;\n  \n      参数 test，该处的test表示数据库test，如果想要将所有的数据库备份，可以换成参数 --all-databases\n  \n      参数 --databases 指定多个数据库\n  \n      参数 --quick或-q，该选项在导出大表时很有用，它强制 MySQLdump 从服务器查询取得记录直接输出而不是取得所有记录后将它们缓存到内存中。\n  \n      参数 --ignore-table，忽略某个数据表，如 --ignore-table test.user 忽略数据库test里的user表\n  \n      更多mysqldump 参数，请参考网址\n  \n  ```\n\n- 全量数据库恢复\n\n- ```sql\n  D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysql -u  root  -proot test_db   <  D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\log\\backup.sql\n  ```\n\n查询当前数据库日志版本\n\n```sql\nshow master status;\n```\n\n刷新增量日志版本\n\n```bash\nD:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqladmin -uroot -proot flush-logs\n```\n\n恢复日志\n\n```bash\nD:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqlbinlog --no-defaults D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\data\\binlog.000003 | D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysql -uroot -proot test_db\n```\n\n## 数据库索引\n- 通过存储过程批量插入数据\n\n  ```sql\n  delimiter $\n  create procedure InstertData(in Num int(10))\n  begin\n  declare i int;\n  set i=1;\n  while  i < Num  do\n  insert into initdata(Sno) values(2);\n  set  i=i+1;\n  end while ;\n  end $\n  delimiter ;\n  ```\n\n- 数据库索引\n\n  可以采用导入的数据\n\n  执行语句\n\n  ```sql\n  select a.major,a.instructor,a.SName from initdata a where major = \"会计学\" and instructor = \"靳祺\" \n  ```\n\n  ![image-20210902211120473](http://typa.qingyun.run/img/image-20210902211120473.png)\n\n不建立索引的情况下  执行时间为0.44s\n\n建立聚合索引\n\n```sql\ncreate index selectName On indata(major,instructor,SName)\n```\n\n![image-20210902211314332](http://typa.qingyun.run/img/image-20210902211314332.png)\n\n符合索引条件\n\n执行时间为0.25s\n\n近一倍的时间差值\n\n\n\n索引在工作中非常重要，但是难以学习，需要花费很深的功夫去研究！（mysql 优化机制 ）\n\n## 增量备份\n### 增量备份\n\n#### 1. 检查log_bin是否开启\n\n进入mysql命令行，执行 `show variables like '%log_bin%' `\n\n```\nmysql> show variables like '%log_bin%';\n+---------------------------------+-------+\n| Variable_name                   | Value |\n+---------------------------------+-------+\n| log_bin                         | OFF   |\n| log_bin_basename                |       |\n| log_bin_index                   |       |\n| log_bin_trust_function_creators | OFF   |\n| log_bin_use_v1_row_events       | OFF   |\n| sql_log_bin                     | ON    |\n+---------------------------------+-------+\n6 rows in set (0.01 sec)\n```\n\n如上所示，log_bin 未开启；如果log_bin开启，则跳过第2步，直接进入第3步。\n\n#### 2. 开启 log_bin，并重启mysql\n\n- 编辑 mysql 的配置文件 `vim /etc/my.cnf`，在 mysqld 下面添加下面2条配置\n\n```\n[mysqld]\nlog-bin=/var/lib/mysql/mysql-bin\nserver_id=152\n```\n\nTip1: 一定要加 server_id，否则会报错。至于server_id的值，随便设就可以。\n Tip2: log_bin 中间可以下划线_相连，也可以-减号相连。同理server_id也一样。\n\n- 重启mysql\n\n```\nservice mysqld restart\n```\n\n- 再次在mysql命令行中执行 `show variables like '%log_bin%'`\n\n```\nmysql> show variables like '%log_bin%';\n+---------------------------------+--------------------------------+\n| Variable_name                   | Value                          |\n+---------------------------------+--------------------------------+\n| log_bin                         | ON                             |\n| log_bin_basename                | /var/lib/mysql/mysql-bin       |\n| log_bin_index                   | /var/lib/mysql/mysql-bin.index |\n| log_bin_trust_function_creators | OFF                            |\n| log_bin_use_v1_row_events       | OFF                            |\n| sql_log_bin                     | ON                             |\n+---------------------------------+--------------------------------+\n6 rows in set (0.01 sec)\n```\n\n## SQL\n/*\n Navicat Premium Data Transfer\n\n Source Server         : mysql\n Source Server Type    : MySQL\n Source Server Version : 80020\n Source Host           : localhost:3306\n Source Schema         : test_db\n\n Target Server Type    : MySQL\n Target Server Version : 80020\n File Encoding         : 65001\n\n Date: 02/09/2021 19:31:31\n*/\n\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for data\n-- ----------------------------\nDROP TABLE IF EXISTS `data`;\nCREATE TABLE `data`  (\n  `ID` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `major` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `instructor` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `instructor_Tell` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `class` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `Sno` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `SName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `SParentName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `address` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;\n\nSET FOREIGN_KEY_CHECKS = 1;\n\n## Mysql全量备份\nD:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqldump --flush-logs --single-transaction --master-data=3 -u root -proot test_db  > D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\log\\backup.sql\n\n## mysql增量备份\nD:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqladmin -uroot -proot flush-logs","source":"_posts/Mysql数据库课程-Md文档.md","raw":"---\ntitle: Mysql数据库课程 Md文档\nabbrlink: 2655269665\ndate: 2021-11-29 10:39:20\ntags:\n  - Mysql\n  - 数据库\ncategories: \n  - 数据库\n  - Mysql \n---\n## 数据库\n```sql\nCREATE TABLE IF NOT EXISTS `Student`(\n   `ID` INT UNSIGNED AUTO_INCREMENT,  -- 序号\n   `Stu_ID` VARCHAR(100) NOT NULL ,   -- 学号\n   `Stu_NAME` VARCHAR(100)  ,   -- 姓名\n   `Stu_CourseID` VARCHAR(100) ,  -- 课程号\n   `Stu_Grade` VARCHAR(40) ,  -- 成绩\n   PRIMARY KEY ( `ID` )\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n```\n\n\n\n```sql\nINSERT INTO Student ( Stu_ID, Stu_NAME,Stu_CourseID,Stu_Grade )\n                      VALUES\n                    ( 181114930, '小青',036611,90),\n                    ( 181114930, '小青',036612,50),\n                    ( 181114931, '小红',036612,82),\n                    ( 181114932, '小蓝',036613,85); \n```\n\n\n\n```sql\nCREATE TABLE IF NOT EXISTS `Teacher`(\n   `ID` INT UNSIGNED AUTO_INCREMENT,  -- 序号\n   `Tea_ID` VARCHAR(100) NOT NULL ,   -- 教师学号\n   `Tea_NAME` VARCHAR(100)  ,   -- 教师姓名\n   `Tea_CourseID` VARCHAR(100),  -- 教授课程编号\n   PRIMARY KEY ( `ID` )\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n\n\n```sql\nINSERT INTO Teacher ( Tea_ID, Tea_NAME,Tea_CourseID )\n                       VALUES\n                       ( 159850, '王倩',036611),\n                       ( 159850, '王倩',036612),\n                       ( 159850, '王倩',036613),\n                       ( 159851, '王宇',036611),\n                       ( 159852, '王宇',036612),\n                       ( 159853, '王刚',036613);\n```\n\n\n\n```sql\nCREATE TABLE IF NOT EXISTS `Course`(\n   `Cour_ID` VARCHAR(100) NOT NULL ,   -- 课程编号\n   `Cour_NAME` VARCHAR(100) ,   -- 课程科目\n   PRIMARY KEY ( `Cour_ID` )\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n\n\n```sql\nINSERT INTO Course ( Cour_ID, Cour_NAME)\n                       VALUES\n                       ( 036611, '物理' );\n                       \nINSERT INTO Course ( Cour_ID, Cour_NAME)\n                       VALUES\n                       ( 036612, '生物' );\n                       \nINSERT INTO Course ( Cour_ID, Cour_NAME)\n                       VALUES\n                       ( 036613, '化学' );\n```\n## 数据库导入\n- 数据库导入\n  - ![image-20210902191100639](http://typa.qingyun.run/img/image-20210902191100639.png)\n\n- 选择导入向导\n- 选择Excel文件\n- 选择文件位置\n- 后续基本就是直接导入\n- 如图\n- ![image-20210902191403193](http://typa.qingyun.run/img/image-20210902191403193.png)\n\n![image-20210902191532235](http://typa.qingyun.run/img/image-20210902191532235.png)\n\n头名不建议使用中文，后续手动修改\n\n## 数据库查询\n例如：查询学号为181114930的课程名称\n\n```sql\nselect a.Stu_NAME,b.Cour_Name\nfrom student a left join course b on a.Stu_CourseID = b.Cour_ID\nwhere Stu_ID = '181114930';\n```\n\n\n\n例如：查询各个老师旗下学生的名字(老师教授课程与学生选报的课程)\n\n``` sql\nselect distinct a.Tea_Name ,c.Stu_Name \nfrom Teacher a \nleft join course b on a.Tea_CourseID  = b.Cour_ID\nleft join student c on b.Cour_ID =  c.Stu_CourseID \n```\n\n\n\n例如：查询各个科目的平均分且按照科目的平均分降序排列\n\n```sql\nselect b.Cour_NAME , AVG(a.Stu_Grade) as Stu_Grade \nfrom Student a \nLEFT JOIN Course b on a.Stu_CourseID = b.Cour_ID\ngroup by Stu_CourseID,Cour_NAME\nORDER BY Stu_Grade DESC\n```\n\n\n\n例如：计算学生的平均分(传入值为学号)\n\n```sql\ndelimiter $\ncreate procedure stu_AvgGrade(in StudentID varchar(100))\nbegin\n    select avg(Stu_Grade)  from Student where Stu_ID = StudentID;\nend $\n\ndelimiter ;\n\ncall stu_AvgGrade('181114930');\n```\n## 简历触发器\n创建测试表\n\n```sql\nCREATE TABLE IF NOT EXISTS `triggertest`(\n   `ID` INT ,  -- 序号\n    `Name` varchar(100), -- 名字\n   `createDate` datetime ,   -- 创建时间\n  `updateDate` datetime    -- 修改时间\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;\n```\n\n查询所有触发器（当前库）\n\n```sql\nshow TRIGGERS\n```\n\n建立触发器（插入数据时，自动生成插入的时间）\n\n```sql\nDELIMITER $$\n \nCREATE\n    TRIGGER `create_time` BEFORE INSERT\n    ON `triggertest`\n    FOR EACH ROW BEGIN\n\tSET new.createDate=NOW();\n    END$$\n \nDELIMITER ;\n```\n\n\n\n修改数据时，自动生成修改的时间\n\n```sql\nDELIMITER $$\n \nCREATE\n    TRIGGER `update_time` BEFORE UPDATE\n    ON `triggertest`\n    FOR EACH ROW BEGIN\n\tSET new.updateDate=NOW();\n    END$$\n \nDELIMITER ;\n```\n\n## 数据库定时备份\n\n- 优先执行一次全量备份(此处为导出数据库的所有数据结构与数据内容)\n\n- ```bash\n  D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqldump --flush-logs --single-transaction --master-data=2 -u root -p test_db  > D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\log\\backup.sql\n  ```\n\n  ```\n      参数 --lock-all-tables\n  \n  对于InnoDB将替换为 --single-transaction。\n  该选项在导出数据之前提交一个 BEGIN SQL语句，BEGIN 不会阻塞任何应用程序且能保证导出时数据库的一致性状态。它只适用于事务表，例如 InnoDB 和 BDB。本选项和 --lock-tables 选项是互斥的，因为 LOCK TABLES 会使任何挂起的事务隐含提交。要想导出大表的话，应结合使用 --quick 选项。\n  \n      参数 --flush-logs，结束当前日志，生成并使用新日志文件\n  \n      参数 --master-data=2，该选项将会在输出SQL中记录下完全备份后新日志文件的名称，用于日后恢复时参考，例如输出的备份SQL文件中含有：CHANGE MASTER TO MASTER_LOG_FILE='MySQL-bin.000002', MASTER_LOG_POS=106;\n  \n      参数 test，该处的test表示数据库test，如果想要将所有的数据库备份，可以换成参数 --all-databases\n  \n      参数 --databases 指定多个数据库\n  \n      参数 --quick或-q，该选项在导出大表时很有用，它强制 MySQLdump 从服务器查询取得记录直接输出而不是取得所有记录后将它们缓存到内存中。\n  \n      参数 --ignore-table，忽略某个数据表，如 --ignore-table test.user 忽略数据库test里的user表\n  \n      更多mysqldump 参数，请参考网址\n  \n  ```\n\n- 全量数据库恢复\n\n- ```sql\n  D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysql -u  root  -proot test_db   <  D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\log\\backup.sql\n  ```\n\n查询当前数据库日志版本\n\n```sql\nshow master status;\n```\n\n刷新增量日志版本\n\n```bash\nD:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqladmin -uroot -proot flush-logs\n```\n\n恢复日志\n\n```bash\nD:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqlbinlog --no-defaults D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\data\\binlog.000003 | D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysql -uroot -proot test_db\n```\n\n## 数据库索引\n- 通过存储过程批量插入数据\n\n  ```sql\n  delimiter $\n  create procedure InstertData(in Num int(10))\n  begin\n  declare i int;\n  set i=1;\n  while  i < Num  do\n  insert into initdata(Sno) values(2);\n  set  i=i+1;\n  end while ;\n  end $\n  delimiter ;\n  ```\n\n- 数据库索引\n\n  可以采用导入的数据\n\n  执行语句\n\n  ```sql\n  select a.major,a.instructor,a.SName from initdata a where major = \"会计学\" and instructor = \"靳祺\" \n  ```\n\n  ![image-20210902211120473](http://typa.qingyun.run/img/image-20210902211120473.png)\n\n不建立索引的情况下  执行时间为0.44s\n\n建立聚合索引\n\n```sql\ncreate index selectName On indata(major,instructor,SName)\n```\n\n![image-20210902211314332](http://typa.qingyun.run/img/image-20210902211314332.png)\n\n符合索引条件\n\n执行时间为0.25s\n\n近一倍的时间差值\n\n\n\n索引在工作中非常重要，但是难以学习，需要花费很深的功夫去研究！（mysql 优化机制 ）\n\n## 增量备份\n### 增量备份\n\n#### 1. 检查log_bin是否开启\n\n进入mysql命令行，执行 `show variables like '%log_bin%' `\n\n```\nmysql> show variables like '%log_bin%';\n+---------------------------------+-------+\n| Variable_name                   | Value |\n+---------------------------------+-------+\n| log_bin                         | OFF   |\n| log_bin_basename                |       |\n| log_bin_index                   |       |\n| log_bin_trust_function_creators | OFF   |\n| log_bin_use_v1_row_events       | OFF   |\n| sql_log_bin                     | ON    |\n+---------------------------------+-------+\n6 rows in set (0.01 sec)\n```\n\n如上所示，log_bin 未开启；如果log_bin开启，则跳过第2步，直接进入第3步。\n\n#### 2. 开启 log_bin，并重启mysql\n\n- 编辑 mysql 的配置文件 `vim /etc/my.cnf`，在 mysqld 下面添加下面2条配置\n\n```\n[mysqld]\nlog-bin=/var/lib/mysql/mysql-bin\nserver_id=152\n```\n\nTip1: 一定要加 server_id，否则会报错。至于server_id的值，随便设就可以。\n Tip2: log_bin 中间可以下划线_相连，也可以-减号相连。同理server_id也一样。\n\n- 重启mysql\n\n```\nservice mysqld restart\n```\n\n- 再次在mysql命令行中执行 `show variables like '%log_bin%'`\n\n```\nmysql> show variables like '%log_bin%';\n+---------------------------------+--------------------------------+\n| Variable_name                   | Value                          |\n+---------------------------------+--------------------------------+\n| log_bin                         | ON                             |\n| log_bin_basename                | /var/lib/mysql/mysql-bin       |\n| log_bin_index                   | /var/lib/mysql/mysql-bin.index |\n| log_bin_trust_function_creators | OFF                            |\n| log_bin_use_v1_row_events       | OFF                            |\n| sql_log_bin                     | ON                             |\n+---------------------------------+--------------------------------+\n6 rows in set (0.01 sec)\n```\n\n## SQL\n/*\n Navicat Premium Data Transfer\n\n Source Server         : mysql\n Source Server Type    : MySQL\n Source Server Version : 80020\n Source Host           : localhost:3306\n Source Schema         : test_db\n\n Target Server Type    : MySQL\n Target Server Version : 80020\n File Encoding         : 65001\n\n Date: 02/09/2021 19:31:31\n*/\n\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for data\n-- ----------------------------\nDROP TABLE IF EXISTS `data`;\nCREATE TABLE `data`  (\n  `ID` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `major` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `instructor` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `instructor_Tell` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `class` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `Sno` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `SName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `SParentName` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,\n  `address` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;\n\nSET FOREIGN_KEY_CHECKS = 1;\n\n## Mysql全量备份\nD:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqldump --flush-logs --single-transaction --master-data=3 -u root -proot test_db  > D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\log\\backup.sql\n\n## mysql增量备份\nD:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqladmin -uroot -proot flush-logs","slug":"Mysql数据库课程-Md文档","published":1,"updated":"2021-11-29T02:45:18.379Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rb000yo4vbf3zmh8ep","content":"<h2 id=\"数据库\">数据库</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `Student`(</span><br><span class=\"line\">   `ID` <span class=\"type\">INT</span> UNSIGNED AUTO_INCREMENT,  <span class=\"comment\">-- 序号</span></span><br><span class=\"line\">   `Stu_ID` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> ,   <span class=\"comment\">-- 学号</span></span><br><span class=\"line\">   `Stu_NAME` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>)  ,   <span class=\"comment\">-- 姓名</span></span><br><span class=\"line\">   `Stu_CourseID` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) ,  <span class=\"comment\">-- 课程号</span></span><br><span class=\"line\">   `Stu_Grade` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>) ,  <span class=\"comment\">-- 成绩</span></span><br><span class=\"line\">   <span class=\"keyword\">PRIMARY</span> KEY ( `ID` )</span><br><span class=\"line\">)ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Student ( Stu_ID, Stu_NAME,Stu_CourseID,Stu_Grade )</span><br><span class=\"line\">                      <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">                    ( <span class=\"number\">181114930</span>, <span class=\"string\">&#x27;小青&#x27;</span>,<span class=\"number\">036611</span>,<span class=\"number\">90</span>),</span><br><span class=\"line\">                    ( <span class=\"number\">181114930</span>, <span class=\"string\">&#x27;小青&#x27;</span>,<span class=\"number\">036612</span>,<span class=\"number\">50</span>),</span><br><span class=\"line\">                    ( <span class=\"number\">181114931</span>, <span class=\"string\">&#x27;小红&#x27;</span>,<span class=\"number\">036612</span>,<span class=\"number\">82</span>),</span><br><span class=\"line\">                    ( <span class=\"number\">181114932</span>, <span class=\"string\">&#x27;小蓝&#x27;</span>,<span class=\"number\">036613</span>,<span class=\"number\">85</span>); </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `Teacher`(</span><br><span class=\"line\">   `ID` <span class=\"type\">INT</span> UNSIGNED AUTO_INCREMENT,  <span class=\"comment\">-- 序号</span></span><br><span class=\"line\">   `Tea_ID` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> ,   <span class=\"comment\">-- 教师学号</span></span><br><span class=\"line\">   `Tea_NAME` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>)  ,   <span class=\"comment\">-- 教师姓名</span></span><br><span class=\"line\">   `Tea_CourseID` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>),  <span class=\"comment\">-- 教授课程编号</span></span><br><span class=\"line\">   <span class=\"keyword\">PRIMARY</span> KEY ( `ID` )</span><br><span class=\"line\">)ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Teacher ( Tea_ID, Tea_NAME,Tea_CourseID )</span><br><span class=\"line\">                       <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">                       ( <span class=\"number\">159850</span>, <span class=\"string\">&#x27;王倩&#x27;</span>,<span class=\"number\">036611</span>),</span><br><span class=\"line\">                       ( <span class=\"number\">159850</span>, <span class=\"string\">&#x27;王倩&#x27;</span>,<span class=\"number\">036612</span>),</span><br><span class=\"line\">                       ( <span class=\"number\">159850</span>, <span class=\"string\">&#x27;王倩&#x27;</span>,<span class=\"number\">036613</span>),</span><br><span class=\"line\">                       ( <span class=\"number\">159851</span>, <span class=\"string\">&#x27;王宇&#x27;</span>,<span class=\"number\">036611</span>),</span><br><span class=\"line\">                       ( <span class=\"number\">159852</span>, <span class=\"string\">&#x27;王宇&#x27;</span>,<span class=\"number\">036612</span>),</span><br><span class=\"line\">                       ( <span class=\"number\">159853</span>, <span class=\"string\">&#x27;王刚&#x27;</span>,<span class=\"number\">036613</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `Course`(</span><br><span class=\"line\">   `Cour_ID` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> ,   <span class=\"comment\">-- 课程编号</span></span><br><span class=\"line\">   `Cour_NAME` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) ,   <span class=\"comment\">-- 课程科目</span></span><br><span class=\"line\">   <span class=\"keyword\">PRIMARY</span> KEY ( `Cour_ID` )</span><br><span class=\"line\">)ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Course ( Cour_ID, Cour_NAME)</span><br><span class=\"line\">                       <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">                       ( <span class=\"number\">036611</span>, <span class=\"string\">&#x27;物理&#x27;</span> );</span><br><span class=\"line\">                       </span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Course ( Cour_ID, Cour_NAME)</span><br><span class=\"line\">                       <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">                       ( <span class=\"number\">036612</span>, <span class=\"string\">&#x27;生物&#x27;</span> );</span><br><span class=\"line\">                       </span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Course ( Cour_ID, Cour_NAME)</span><br><span class=\"line\">                       <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">                       ( <span class=\"number\">036613</span>, <span class=\"string\">&#x27;化学&#x27;</span> );</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据库导入\">数据库导入</h2>\n<ul>\n<li>\n<p>数据库导入</p>\n<ul>\n<li><img src=\"http://typa.qingyun.run/img/image-20210902191100639.png\" alt=\"image-20210902191100639\"></li>\n</ul>\n</li>\n<li>\n<p>选择导入向导</p>\n</li>\n<li>\n<p>选择Excel文件</p>\n</li>\n<li>\n<p>选择文件位置</p>\n</li>\n<li>\n<p>后续基本就是直接导入</p>\n</li>\n<li>\n<p>如图</p>\n</li>\n<li>\n<p><img src=\"http://typa.qingyun.run/img/image-20210902191403193.png\" alt=\"image-20210902191403193\"></p>\n</li>\n</ul>\n<p><img src=\"http://typa.qingyun.run/img/image-20210902191532235.png\" alt=\"image-20210902191532235\"></p>\n<p>头名不建议使用中文，后续手动修改</p>\n<h2 id=\"数据库查询\">数据库查询</h2>\n<p>例如：查询学号为181114930的课程名称</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> a.Stu_NAME,b.Cour_Name</span><br><span class=\"line\"><span class=\"keyword\">from</span> student a <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> course b <span class=\"keyword\">on</span> a.Stu_CourseID <span class=\"operator\">=</span> b.Cour_ID</span><br><span class=\"line\"><span class=\"keyword\">where</span> Stu_ID <span class=\"operator\">=</span> <span class=\"string\">&#x27;181114930&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>例如：查询各个老师旗下学生的名字(老师教授课程与学生选报的课程)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> a.Tea_Name ,c.Stu_Name </span><br><span class=\"line\"><span class=\"keyword\">from</span> Teacher a </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> course b <span class=\"keyword\">on</span> a.Tea_CourseID  <span class=\"operator\">=</span> b.Cour_ID</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> student c <span class=\"keyword\">on</span> b.Cour_ID <span class=\"operator\">=</span>  c.Stu_CourseID </span><br></pre></td></tr></table></figure>\n<p>例如：查询各个科目的平均分且按照科目的平均分降序排列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> b.Cour_NAME , <span class=\"built_in\">AVG</span>(a.Stu_Grade) <span class=\"keyword\">as</span> Stu_Grade </span><br><span class=\"line\"><span class=\"keyword\">from</span> Student a </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> Course b <span class=\"keyword\">on</span> a.Stu_CourseID <span class=\"operator\">=</span> b.Cour_ID</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> Stu_CourseID,Cour_NAME</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> Stu_Grade <span class=\"keyword\">DESC</span></span><br></pre></td></tr></table></figure>\n<p>例如：计算学生的平均分(传入值为学号)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter $</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> stu_AvgGrade(<span class=\"keyword\">in</span> StudentID <span class=\"type\">varchar</span>(<span class=\"number\">100</span>))</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"built_in\">avg</span>(Stu_Grade)  <span class=\"keyword\">from</span> Student <span class=\"keyword\">where</span> Stu_ID <span class=\"operator\">=</span> StudentID;</span><br><span class=\"line\"><span class=\"keyword\">end</span> $</span><br><span class=\"line\"></span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">call</span> stu_AvgGrade(<span class=\"string\">&#x27;181114930&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"简历触发器\">简历触发器</h2>\n<p>创建测试表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `triggertest`(</span><br><span class=\"line\">   `ID` <span class=\"type\">INT</span> ,  <span class=\"comment\">-- 序号</span></span><br><span class=\"line\">    `Name` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>), <span class=\"comment\">-- 名字</span></span><br><span class=\"line\">   `createDate` datetime ,   <span class=\"comment\">-- 创建时间</span></span><br><span class=\"line\">  `updateDate` datetime    <span class=\"comment\">-- 修改时间</span></span><br><span class=\"line\">)ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n<p>查询所有触发器（当前库）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> TRIGGERS</span><br></pre></td></tr></table></figure>\n<p>建立触发器（插入数据时，自动生成插入的时间）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">CREATE</span></span><br><span class=\"line\">    <span class=\"keyword\">TRIGGER</span> `create_time` BEFORE <span class=\"keyword\">INSERT</span></span><br><span class=\"line\">    <span class=\"keyword\">ON</span> `triggertest`</span><br><span class=\"line\">    <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span> <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> new.createDate<span class=\"operator\">=</span>NOW();</span><br><span class=\"line\">    <span class=\"keyword\">END</span>$$</span><br><span class=\"line\"> </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>修改数据时，自动生成修改的时间</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">CREATE</span></span><br><span class=\"line\">    <span class=\"keyword\">TRIGGER</span> `update_time` BEFORE UPDATE</span><br><span class=\"line\">    <span class=\"keyword\">ON</span> `triggertest`</span><br><span class=\"line\">    <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span> <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> new.updateDate<span class=\"operator\">=</span>NOW();</span><br><span class=\"line\">    <span class=\"keyword\">END</span>$$</span><br><span class=\"line\"> </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据库定时备份\">数据库定时备份</h2>\n<ul>\n<li>\n<p>优先执行一次全量备份(此处为导出数据库的所有数据结构与数据内容)</p>\n</li>\n<li>\n<pre><code class=\"language-bash\">D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqldump --flush-logs --single-transaction --master-data=2 -u root -p test_db  &gt; D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\log\\backup.sql\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n    参数 --lock-all-tables\n\n对于InnoDB将替换为 --single-transaction。\n该选项在导出数据之前提交一个 BEGIN SQL语句，BEGIN 不会阻塞任何应用程序且能保证导出时数据库的一致性状态。它只适用于事务表，例如 InnoDB 和 BDB。本选项和 --lock-tables 选项是互斥的，因为 LOCK TABLES 会使任何挂起的事务隐含提交。要想导出大表的话，应结合使用 --quick 选项。\n\n    参数 --flush-logs，结束当前日志，生成并使用新日志文件\n\n    参数 --master-data=2，该选项将会在输出SQL中记录下完全备份后新日志文件的名称，用于日后恢复时参考，例如输出的备份SQL文件中含有：CHANGE MASTER TO MASTER_LOG_FILE='MySQL-bin.000002', MASTER_LOG_POS=106;\n\n    参数 test，该处的test表示数据库test，如果想要将所有的数据库备份，可以换成参数 --all-databases\n\n    参数 --databases 指定多个数据库\n\n    参数 --quick或-q，该选项在导出大表时很有用，它强制 MySQLdump 从服务器查询取得记录直接输出而不是取得所有记录后将它们缓存到内存中。\n\n    参数 --ignore-table，忽略某个数据表，如 --ignore-table test.user 忽略数据库test里的user表\n\n    更多mysqldump 参数，请参考网址\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 全量数据库恢复</span><br><span class=\"line\"></span><br><span class=\"line\">- ```sql</span><br><span class=\"line\">  D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysql -u  root  -proot test_db   &lt;  D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\log\\backup.sql</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ul>\n<p>查询当前数据库日志版本</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> master status;</span><br></pre></td></tr></table></figure>\n<p>刷新增量日志版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqladmin -uroot -proot flush-logs</span><br></pre></td></tr></table></figure>\n<p>恢复日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqlbinlog --no-defaults D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\data\\binlog.000003 | D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysql -uroot -proot test_db</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据库索引\">数据库索引</h2>\n<ul>\n<li>\n<p>通过存储过程批量插入数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter $</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> InstertData(<span class=\"keyword\">in</span> Num <span class=\"type\">int</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> i <span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> i<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\">while  i <span class=\"operator\">&lt;</span> Num  do</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> initdata(Sno) <span class=\"keyword\">values</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">set</span>  i<span class=\"operator\">=</span>i<span class=\"operator\">+</span><span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span> while ;</span><br><span class=\"line\"><span class=\"keyword\">end</span> $</span><br><span class=\"line\">delimiter ;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>数据库索引</p>\n<p>可以采用导入的数据</p>\n<p>执行语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> a.major,a.instructor,a.SName <span class=\"keyword\">from</span> initdata a <span class=\"keyword\">where</span> major <span class=\"operator\">=</span> &quot;会计学&quot; <span class=\"keyword\">and</span> instructor <span class=\"operator\">=</span> &quot;靳祺&quot; </span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20210902211120473.png\" alt=\"image-20210902211120473\"></p>\n</li>\n</ul>\n<p>不建立索引的情况下  执行时间为0.44s</p>\n<p>建立聚合索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> index selectName <span class=\"keyword\">On</span> indata(major,instructor,SName)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20210902211314332.png\" alt=\"image-20210902211314332\"></p>\n<p>符合索引条件</p>\n<p>执行时间为0.25s</p>\n<p>近一倍的时间差值</p>\n<p>索引在工作中非常重要，但是难以学习，需要花费很深的功夫去研究！（mysql 优化机制 ）</p>\n<h2 id=\"增量备份\">增量备份</h2>\n<h3 id=\"增量备份-2\">增量备份</h3>\n<h4 id=\"1-检查log-bin是否开启\">1. 检查log_bin是否开启</h4>\n<p>进入mysql命令行，执行 <code>show variables like '%log_bin%' </code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#x27;%log_bin%&#x27;;</span><br><span class=\"line\">+---------------------------------+-------+</span><br><span class=\"line\">| Variable_name                   | Value |</span><br><span class=\"line\">+---------------------------------+-------+</span><br><span class=\"line\">| log_bin                         | OFF   |</span><br><span class=\"line\">| log_bin_basename                |       |</span><br><span class=\"line\">| log_bin_index                   |       |</span><br><span class=\"line\">| log_bin_trust_function_creators | OFF   |</span><br><span class=\"line\">| log_bin_use_v1_row_events       | OFF   |</span><br><span class=\"line\">| sql_log_bin                     | ON    |</span><br><span class=\"line\">+---------------------------------+-------+</span><br><span class=\"line\">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n<p>如上所示，log_bin 未开启；如果log_bin开启，则跳过第2步，直接进入第3步。</p>\n<h4 id=\"2-开启-log-bin，并重启mysql\">2. 开启 log_bin，并重启mysql</h4>\n<ul>\n<li>编辑 mysql 的配置文件 <code>vim /etc/my.cnf</code>，在 mysqld 下面添加下面2条配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=/var/lib/mysql/mysql-bin</span><br><span class=\"line\">server_id=152</span><br></pre></td></tr></table></figure>\n<p>Tip1: 一定要加 server_id，否则会报错。至于server_id的值，随便设就可以。<br>\nTip2: log_bin 中间可以下划线_相连，也可以-减号相连。同理server_id也一样。</p>\n<ul>\n<li>重启mysql</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n<ul>\n<li>再次在mysql命令行中执行 <code>show variables like '%log_bin%'</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#x27;%log_bin%&#x27;;</span><br><span class=\"line\">+---------------------------------+--------------------------------+</span><br><span class=\"line\">| Variable_name                   | Value                          |</span><br><span class=\"line\">+---------------------------------+--------------------------------+</span><br><span class=\"line\">| log_bin                         | ON                             |</span><br><span class=\"line\">| log_bin_basename                | /var/lib/mysql/mysql-bin       |</span><br><span class=\"line\">| log_bin_index                   | /var/lib/mysql/mysql-bin.index |</span><br><span class=\"line\">| log_bin_trust_function_creators | OFF                            |</span><br><span class=\"line\">| log_bin_use_v1_row_events       | OFF                            |</span><br><span class=\"line\">| sql_log_bin                     | ON                             |</span><br><span class=\"line\">+---------------------------------+--------------------------------+</span><br><span class=\"line\">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n<h2 id=\"SQL\">SQL</h2>\n<p>/*<br>\nNavicat Premium Data Transfer</p>\n<p>Source Server         : mysql<br>\nSource Server Type    : MySQL<br>\nSource Server Version : 80020<br>\nSource Host           : localhost:3306<br>\nSource Schema         : test_db</p>\n<p>Target Server Type    : MySQL<br>\nTarget Server Version : 80020<br>\nFile Encoding         : 65001</p>\n<p>Date: 02/09/2021 19:31:31<br>\n*/</p>\n<p>SET NAMES utf8mb4;<br>\nSET FOREIGN_KEY_CHECKS = 0;</p>\n<hr>\n<p>– Table structure for data</p>\n<hr>\n<p>DROP TABLE IF EXISTS <code>data</code>;<br>\nCREATE TABLE <code>data</code>  (<br>\n<code>ID</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>major</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>instructor</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>instructor_Tell</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>class</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>Sno</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>SName</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>SParentName</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>address</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL<br>\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;</p>\n<p>SET FOREIGN_KEY_CHECKS = 1;</p>\n<h2 id=\"Mysql全量备份\">Mysql全量备份</h2>\n<p>D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqldump --flush-logs --single-transaction --master-data=3 -u root -proot test_db  &gt; D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\log\\backup.sql</p>\n<h2 id=\"mysql增量备份\">mysql增量备份</h2>\n<p>D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqladmin -uroot -proot flush-logs</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com - 304024 sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<h2 id=\"数据库\">数据库</h2>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `Student`(</span><br><span class=\"line\">   `ID` <span class=\"type\">INT</span> UNSIGNED AUTO_INCREMENT,  <span class=\"comment\">-- 序号</span></span><br><span class=\"line\">   `Stu_ID` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> ,   <span class=\"comment\">-- 学号</span></span><br><span class=\"line\">   `Stu_NAME` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>)  ,   <span class=\"comment\">-- 姓名</span></span><br><span class=\"line\">   `Stu_CourseID` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) ,  <span class=\"comment\">-- 课程号</span></span><br><span class=\"line\">   `Stu_Grade` <span class=\"type\">VARCHAR</span>(<span class=\"number\">40</span>) ,  <span class=\"comment\">-- 成绩</span></span><br><span class=\"line\">   <span class=\"keyword\">PRIMARY</span> KEY ( `ID` )</span><br><span class=\"line\">)ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Student ( Stu_ID, Stu_NAME,Stu_CourseID,Stu_Grade )</span><br><span class=\"line\">                      <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">                    ( <span class=\"number\">181114930</span>, <span class=\"string\">&#x27;小青&#x27;</span>,<span class=\"number\">036611</span>,<span class=\"number\">90</span>),</span><br><span class=\"line\">                    ( <span class=\"number\">181114930</span>, <span class=\"string\">&#x27;小青&#x27;</span>,<span class=\"number\">036612</span>,<span class=\"number\">50</span>),</span><br><span class=\"line\">                    ( <span class=\"number\">181114931</span>, <span class=\"string\">&#x27;小红&#x27;</span>,<span class=\"number\">036612</span>,<span class=\"number\">82</span>),</span><br><span class=\"line\">                    ( <span class=\"number\">181114932</span>, <span class=\"string\">&#x27;小蓝&#x27;</span>,<span class=\"number\">036613</span>,<span class=\"number\">85</span>); </span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `Teacher`(</span><br><span class=\"line\">   `ID` <span class=\"type\">INT</span> UNSIGNED AUTO_INCREMENT,  <span class=\"comment\">-- 序号</span></span><br><span class=\"line\">   `Tea_ID` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> ,   <span class=\"comment\">-- 教师学号</span></span><br><span class=\"line\">   `Tea_NAME` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>)  ,   <span class=\"comment\">-- 教师姓名</span></span><br><span class=\"line\">   `Tea_CourseID` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>),  <span class=\"comment\">-- 教授课程编号</span></span><br><span class=\"line\">   <span class=\"keyword\">PRIMARY</span> KEY ( `ID` )</span><br><span class=\"line\">)ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Teacher ( Tea_ID, Tea_NAME,Tea_CourseID )</span><br><span class=\"line\">                       <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">                       ( <span class=\"number\">159850</span>, <span class=\"string\">&#x27;王倩&#x27;</span>,<span class=\"number\">036611</span>),</span><br><span class=\"line\">                       ( <span class=\"number\">159850</span>, <span class=\"string\">&#x27;王倩&#x27;</span>,<span class=\"number\">036612</span>),</span><br><span class=\"line\">                       ( <span class=\"number\">159850</span>, <span class=\"string\">&#x27;王倩&#x27;</span>,<span class=\"number\">036613</span>),</span><br><span class=\"line\">                       ( <span class=\"number\">159851</span>, <span class=\"string\">&#x27;王宇&#x27;</span>,<span class=\"number\">036611</span>),</span><br><span class=\"line\">                       ( <span class=\"number\">159852</span>, <span class=\"string\">&#x27;王宇&#x27;</span>,<span class=\"number\">036612</span>),</span><br><span class=\"line\">                       ( <span class=\"number\">159853</span>, <span class=\"string\">&#x27;王刚&#x27;</span>,<span class=\"number\">036613</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `Course`(</span><br><span class=\"line\">   `Cour_ID` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> ,   <span class=\"comment\">-- 课程编号</span></span><br><span class=\"line\">   `Cour_NAME` <span class=\"type\">VARCHAR</span>(<span class=\"number\">100</span>) ,   <span class=\"comment\">-- 课程科目</span></span><br><span class=\"line\">   <span class=\"keyword\">PRIMARY</span> KEY ( `Cour_ID` )</span><br><span class=\"line\">)ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Course ( Cour_ID, Cour_NAME)</span><br><span class=\"line\">                       <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">                       ( <span class=\"number\">036611</span>, <span class=\"string\">&#x27;物理&#x27;</span> );</span><br><span class=\"line\">                       </span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Course ( Cour_ID, Cour_NAME)</span><br><span class=\"line\">                       <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">                       ( <span class=\"number\">036612</span>, <span class=\"string\">&#x27;生物&#x27;</span> );</span><br><span class=\"line\">                       </span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> Course ( Cour_ID, Cour_NAME)</span><br><span class=\"line\">                       <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">                       ( <span class=\"number\">036613</span>, <span class=\"string\">&#x27;化学&#x27;</span> );</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据库导入\">数据库导入</h2>\n<ul>\n<li>\n<p>数据库导入</p>\n<ul>\n<li><img src=\"http://typa.qingyun.run/img/image-20210902191100639.png\" alt=\"image-20210902191100639\"></li>\n</ul>\n</li>\n<li>\n<p>选择导入向导</p>\n</li>\n<li>\n<p>选择Excel文件</p>\n</li>\n<li>\n<p>选择文件位置</p>\n</li>\n<li>\n<p>后续基本就是直接导入</p>\n</li>\n<li>\n<p>如图</p>\n</li>\n<li>\n<p><img src=\"http://typa.qingyun.run/img/image-20210902191403193.png\" alt=\"image-20210902191403193\"></p>\n</li>\n</ul>\n<p><img src=\"http://typa.qingyun.run/img/image-20210902191532235.png\" alt=\"image-20210902191532235\"></p>\n<p>头名不建议使用中文，后续手动修改</p>\n<h2 id=\"数据库查询\">数据库查询</h2>\n<p>例如：查询学号为181114930的课程名称</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> a.Stu_NAME,b.Cour_Name</span><br><span class=\"line\"><span class=\"keyword\">from</span> student a <span class=\"keyword\">left</span> <span class=\"keyword\">join</span> course b <span class=\"keyword\">on</span> a.Stu_CourseID <span class=\"operator\">=</span> b.Cour_ID</span><br><span class=\"line\"><span class=\"keyword\">where</span> Stu_ID <span class=\"operator\">=</span> <span class=\"string\">&#x27;181114930&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>例如：查询各个老师旗下学生的名字(老师教授课程与学生选报的课程)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"keyword\">distinct</span> a.Tea_Name ,c.Stu_Name </span><br><span class=\"line\"><span class=\"keyword\">from</span> Teacher a </span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> course b <span class=\"keyword\">on</span> a.Tea_CourseID  <span class=\"operator\">=</span> b.Cour_ID</span><br><span class=\"line\"><span class=\"keyword\">left</span> <span class=\"keyword\">join</span> student c <span class=\"keyword\">on</span> b.Cour_ID <span class=\"operator\">=</span>  c.Stu_CourseID </span><br></pre></td></tr></table></figure>\n<p>例如：查询各个科目的平均分且按照科目的平均分降序排列</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> b.Cour_NAME , <span class=\"built_in\">AVG</span>(a.Stu_Grade) <span class=\"keyword\">as</span> Stu_Grade </span><br><span class=\"line\"><span class=\"keyword\">from</span> Student a </span><br><span class=\"line\"><span class=\"keyword\">LEFT</span> <span class=\"keyword\">JOIN</span> Course b <span class=\"keyword\">on</span> a.Stu_CourseID <span class=\"operator\">=</span> b.Cour_ID</span><br><span class=\"line\"><span class=\"keyword\">group</span> <span class=\"keyword\">by</span> Stu_CourseID,Cour_NAME</span><br><span class=\"line\"><span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> Stu_Grade <span class=\"keyword\">DESC</span></span><br></pre></td></tr></table></figure>\n<p>例如：计算学生的平均分(传入值为学号)</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter $</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> stu_AvgGrade(<span class=\"keyword\">in</span> StudentID <span class=\"type\">varchar</span>(<span class=\"number\">100</span>))</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">select</span> <span class=\"built_in\">avg</span>(Stu_Grade)  <span class=\"keyword\">from</span> Student <span class=\"keyword\">where</span> Stu_ID <span class=\"operator\">=</span> StudentID;</span><br><span class=\"line\"><span class=\"keyword\">end</span> $</span><br><span class=\"line\"></span><br><span class=\"line\">delimiter ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">call</span> stu_AvgGrade(<span class=\"string\">&#x27;181114930&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"简历触发器\">简历触发器</h2>\n<p>创建测试表</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> `triggertest`(</span><br><span class=\"line\">   `ID` <span class=\"type\">INT</span> ,  <span class=\"comment\">-- 序号</span></span><br><span class=\"line\">    `Name` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>), <span class=\"comment\">-- 名字</span></span><br><span class=\"line\">   `createDate` datetime ,   <span class=\"comment\">-- 创建时间</span></span><br><span class=\"line\">  `updateDate` datetime    <span class=\"comment\">-- 修改时间</span></span><br><span class=\"line\">)ENGINE<span class=\"operator\">=</span>InnoDB <span class=\"keyword\">DEFAULT</span> CHARSET<span class=\"operator\">=</span>utf8;</span><br></pre></td></tr></table></figure>\n<p>查询所有触发器（当前库）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> TRIGGERS</span><br></pre></td></tr></table></figure>\n<p>建立触发器（插入数据时，自动生成插入的时间）</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">CREATE</span></span><br><span class=\"line\">    <span class=\"keyword\">TRIGGER</span> `create_time` BEFORE <span class=\"keyword\">INSERT</span></span><br><span class=\"line\">    <span class=\"keyword\">ON</span> `triggertest`</span><br><span class=\"line\">    <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span> <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> new.createDate<span class=\"operator\">=</span>NOW();</span><br><span class=\"line\">    <span class=\"keyword\">END</span>$$</span><br><span class=\"line\"> </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<p>修改数据时，自动生成修改的时间</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DELIMITER $$</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">CREATE</span></span><br><span class=\"line\">    <span class=\"keyword\">TRIGGER</span> `update_time` BEFORE UPDATE</span><br><span class=\"line\">    <span class=\"keyword\">ON</span> `triggertest`</span><br><span class=\"line\">    <span class=\"keyword\">FOR</span> <span class=\"keyword\">EACH</span> <span class=\"type\">ROW</span> <span class=\"keyword\">BEGIN</span></span><br><span class=\"line\">\t<span class=\"keyword\">SET</span> new.updateDate<span class=\"operator\">=</span>NOW();</span><br><span class=\"line\">    <span class=\"keyword\">END</span>$$</span><br><span class=\"line\"> </span><br><span class=\"line\">DELIMITER ;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据库定时备份\">数据库定时备份</h2>\n<ul>\n<li>\n<p>优先执行一次全量备份(此处为导出数据库的所有数据结构与数据内容)</p>\n</li>\n<li>\n<pre><code class=\"language-bash\">D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqldump --flush-logs --single-transaction --master-data=2 -u root -p test_db  &gt; D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\log\\backup.sql\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n    参数 --lock-all-tables\n\n对于InnoDB将替换为 --single-transaction。\n该选项在导出数据之前提交一个 BEGIN SQL语句，BEGIN 不会阻塞任何应用程序且能保证导出时数据库的一致性状态。它只适用于事务表，例如 InnoDB 和 BDB。本选项和 --lock-tables 选项是互斥的，因为 LOCK TABLES 会使任何挂起的事务隐含提交。要想导出大表的话，应结合使用 --quick 选项。\n\n    参数 --flush-logs，结束当前日志，生成并使用新日志文件\n\n    参数 --master-data=2，该选项将会在输出SQL中记录下完全备份后新日志文件的名称，用于日后恢复时参考，例如输出的备份SQL文件中含有：CHANGE MASTER TO MASTER_LOG_FILE='MySQL-bin.000002', MASTER_LOG_POS=106;\n\n    参数 test，该处的test表示数据库test，如果想要将所有的数据库备份，可以换成参数 --all-databases\n\n    参数 --databases 指定多个数据库\n\n    参数 --quick或-q，该选项在导出大表时很有用，它强制 MySQLdump 从服务器查询取得记录直接输出而不是取得所有记录后将它们缓存到内存中。\n\n    参数 --ignore-table，忽略某个数据表，如 --ignore-table test.user 忽略数据库test里的user表\n\n    更多mysqldump 参数，请参考网址\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 全量数据库恢复</span><br><span class=\"line\"></span><br><span class=\"line\">- ```sql</span><br><span class=\"line\">  D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysql -u  root  -proot test_db   &lt;  D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\log\\backup.sql</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ul>\n<p>查询当前数据库日志版本</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> master status;</span><br></pre></td></tr></table></figure>\n<p>刷新增量日志版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqladmin -uroot -proot flush-logs</span><br></pre></td></tr></table></figure>\n<p>恢复日志</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqlbinlog --no-defaults D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\data\\binlog.000003 | D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysql -uroot -proot test_db</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据库索引\">数据库索引</h2>\n<ul>\n<li>\n<p>通过存储过程批量插入数据</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delimiter $</span><br><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">procedure</span> InstertData(<span class=\"keyword\">in</span> Num <span class=\"type\">int</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"keyword\">begin</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> i <span class=\"type\">int</span>;</span><br><span class=\"line\"><span class=\"keyword\">set</span> i<span class=\"operator\">=</span><span class=\"number\">1</span>;</span><br><span class=\"line\">while  i <span class=\"operator\">&lt;</span> Num  do</span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> initdata(Sno) <span class=\"keyword\">values</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"keyword\">set</span>  i<span class=\"operator\">=</span>i<span class=\"operator\">+</span><span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">end</span> while ;</span><br><span class=\"line\"><span class=\"keyword\">end</span> $</span><br><span class=\"line\">delimiter ;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>数据库索引</p>\n<p>可以采用导入的数据</p>\n<p>执行语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> a.major,a.instructor,a.SName <span class=\"keyword\">from</span> initdata a <span class=\"keyword\">where</span> major <span class=\"operator\">=</span> &quot;会计学&quot; <span class=\"keyword\">and</span> instructor <span class=\"operator\">=</span> &quot;靳祺&quot; </span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20210902211120473.png\" alt=\"image-20210902211120473\"></p>\n</li>\n</ul>\n<p>不建立索引的情况下  执行时间为0.44s</p>\n<p>建立聚合索引</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> index selectName <span class=\"keyword\">On</span> indata(major,instructor,SName)</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20210902211314332.png\" alt=\"image-20210902211314332\"></p>\n<p>符合索引条件</p>\n<p>执行时间为0.25s</p>\n<p>近一倍的时间差值</p>\n<p>索引在工作中非常重要，但是难以学习，需要花费很深的功夫去研究！（mysql 优化机制 ）</p>\n<h2 id=\"增量备份\">增量备份</h2>\n<h3 id=\"增量备份-2\">增量备份</h3>\n<h4 id=\"1-检查log-bin是否开启\">1. 检查log_bin是否开启</h4>\n<p>进入mysql命令行，执行 <code>show variables like '%log_bin%' </code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#x27;%log_bin%&#x27;;</span><br><span class=\"line\">+---------------------------------+-------+</span><br><span class=\"line\">| Variable_name                   | Value |</span><br><span class=\"line\">+---------------------------------+-------+</span><br><span class=\"line\">| log_bin                         | OFF   |</span><br><span class=\"line\">| log_bin_basename                |       |</span><br><span class=\"line\">| log_bin_index                   |       |</span><br><span class=\"line\">| log_bin_trust_function_creators | OFF   |</span><br><span class=\"line\">| log_bin_use_v1_row_events       | OFF   |</span><br><span class=\"line\">| sql_log_bin                     | ON    |</span><br><span class=\"line\">+---------------------------------+-------+</span><br><span class=\"line\">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n<p>如上所示，log_bin 未开启；如果log_bin开启，则跳过第2步，直接进入第3步。</p>\n<h4 id=\"2-开启-log-bin，并重启mysql\">2. 开启 log_bin，并重启mysql</h4>\n<ul>\n<li>编辑 mysql 的配置文件 <code>vim /etc/my.cnf</code>，在 mysqld 下面添加下面2条配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=/var/lib/mysql/mysql-bin</span><br><span class=\"line\">server_id=152</span><br></pre></td></tr></table></figure>\n<p>Tip1: 一定要加 server_id，否则会报错。至于server_id的值，随便设就可以。<br>\nTip2: log_bin 中间可以下划线_相连，也可以-减号相连。同理server_id也一样。</p>\n<ul>\n<li>重启mysql</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n<ul>\n<li>再次在mysql命令行中执行 <code>show variables like '%log_bin%'</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show variables like &#x27;%log_bin%&#x27;;</span><br><span class=\"line\">+---------------------------------+--------------------------------+</span><br><span class=\"line\">| Variable_name                   | Value                          |</span><br><span class=\"line\">+---------------------------------+--------------------------------+</span><br><span class=\"line\">| log_bin                         | ON                             |</span><br><span class=\"line\">| log_bin_basename                | /var/lib/mysql/mysql-bin       |</span><br><span class=\"line\">| log_bin_index                   | /var/lib/mysql/mysql-bin.index |</span><br><span class=\"line\">| log_bin_trust_function_creators | OFF                            |</span><br><span class=\"line\">| log_bin_use_v1_row_events       | OFF                            |</span><br><span class=\"line\">| sql_log_bin                     | ON                             |</span><br><span class=\"line\">+---------------------------------+--------------------------------+</span><br><span class=\"line\">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>\n<h2 id=\"SQL\">SQL</h2>\n<p>/*<br>\nNavicat Premium Data Transfer</p>\n<p>Source Server         : mysql<br>\nSource Server Type    : MySQL<br>\nSource Server Version : 80020<br>\nSource Host           : localhost:3306<br>\nSource Schema         : test_db</p>\n<p>Target Server Type    : MySQL<br>\nTarget Server Version : 80020<br>\nFile Encoding         : 65001</p>\n<p>Date: 02/09/2021 19:31:31<br>\n*/</p>\n<p>SET NAMES utf8mb4;<br>\nSET FOREIGN_KEY_CHECKS = 0;</p>\n<hr>\n<p>– Table structure for data</p>\n<hr>\n<p>DROP TABLE IF EXISTS <code>data</code>;<br>\nCREATE TABLE <code>data</code>  (<br>\n<code>ID</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>major</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>instructor</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>instructor_Tell</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>class</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>Sno</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>SName</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>SParentName</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,<br>\n<code>address</code> varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL<br>\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin ROW_FORMAT = Dynamic;</p>\n<p>SET FOREIGN_KEY_CHECKS = 1;</p>\n<h2 id=\"Mysql全量备份\">Mysql全量备份</h2>\n<p>D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqldump --flush-logs --single-transaction --master-data=3 -u root -proot test_db  &gt; D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\log\\backup.sql</p>\n<h2 id=\"mysql增量备份\">mysql增量备份</h2>\n<p>D:\\mysql-8.0.18-winx64\\mysql-8.0.20-winx64\\mysql-8.0.20-winx64\\bin\\mysqladmin -uroot -proot flush-logs</p>\n"},{"title":"Mysql讲解 课程大纲设计","abbrlink":3330459815,"date":"2021-11-29T02:32:00.000Z","_content":"# MYSQL\n\n## 建立数据库\n\n### 建库语句\n\n- create database  IF NOT EXISTS TEST_DB DEFAULT CHARACTER Set UTF8 DEFAULT COLLATE utf8_bin;\n- 创建一个测试数据库，命名为 test_db，指定其默认字符集为 utf8，默认校对规则为 utf8_bin\n\n### 建表语句\n\n- CREATE TABLE IF NOT EXISTS `Student`(\n  `ID` INT UNSIGNED AUTO_INCREMENT,  -- 序号\n  `Stu_ID` VARCHAR(100) NOT NULL ,   -- 学号\n  `Stu_NAME` VARCHAR(100)  ,   -- 姓名\n  `Stu_CourseID` VARCHAR(100) ,  -- 课程号\n  `Stu_Grade` VARCHAR(40) ,  -- 成绩\n  PRIMARY KEY ( `ID` )\n  )ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\n\t- 建立学生表\n\n- CREATE TABLE IF NOT EXISTS `Teacher`(\n  `ID` INT UNSIGNED AUTO_INCREMENT,  -- 序号\n  `Tea_ID` VARCHAR(100) NOT NULL ,   -- 教师学号\n  `Tea_NAME` VARCHAR(100)  ,   -- 教师姓名\n  `Tea_CourseID` VARCHAR(100),  -- 教授课程编号\n  PRIMARY KEY ( `ID` )\n  )ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n  - 建立教师表\n\n- CREATE TABLE IF NOT EXISTS `Course`(\n  `Cour_ID` VARCHAR(100) NOT NULL ,   -- 科目编号\n  `Cour_NAME` VARCHAR(100) ,   -- 课程科目\n  PRIMARY KEY ( `Cour_ID` )\n  )ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n  - 建立科目表\n\n### 插入数据\n\n- 逐条插入\n\n  - INSERT INTO Course ( Cour_ID, Cour_NAME)\n        VALUES\n        ( 036611, '物理' );\n        \n\nINSERT INTO Course ( Cour_ID, Cour_NAME)\n                       VALUES\n                       ( 036612, '生物' );\n                       \nINSERT INTO Course ( Cour_ID, Cour_NAME)\n                       VALUES\n                       ( 036613, '化学' );\n\n\t\t- 课程表\n\n- 批量插入\n\n  - INSERT INTO Student ( Stu_ID, Stu_NAME,Stu_CourseID,Stu_Grade )\n        VALUES\n      ( 181114930, '小青',036611,90),\n      ( 181114930, '小青',036612,50),\n      ( 181114931, '小红',036612,82),\n      ( 181114932, '小蓝',036613,85); \n  - INSERT INTO Teacher ( Tea_ID, Tea_NAME,Tea_CourseID )\n        VALUES\n        ( 159850, '王倩',036611),\n        ( 159850, '王倩',036612),\n        ( 159850, '王倩',036613),\n        ( 159851, '王宇',036611),\n        ( 159852, '王宇',036612),\n        ( 159853, '王刚',036613);\n\n- ETL工具\n\n## 数据查询\n\n### 简单查询\n\n- 例如：查询学号为181114930的课程名称\n\n  - select a.Stu_NAME,b.Cour_Name\n    from student a left join course b on a.Stu_CourseID = b.Cour_ID\n    where Stu_ID = '181114930';\n\n- 例如：查询各个老师旗下学生的名字(老师教授课程与学生选报的课程)\n\n  - select distinct a.Tea_Name ,c.Stu_Name \n    from Teacher a \n    left join course b on a.Tea_CourseID  = b.Cour_ID\n    left join student c on b.Cour_ID =  c.Stu_CourseID \n\n### 函数查询\n\n- 例如：查询各个科目的平均分且按照科目的平均分降序排列\n\n  - select b.Cour_NAME , AVG(a.Stu_Grade) as Stu_Grade \n    from Student a \n    LEFT JOIN Course b on a.Stu_CourseID = b.Cour_ID\n    group by Stu_CourseID,Cour_NAME\n    ORDER BY Stu_Grade DESC\n\n### 存储过程查询\n\n- 例如：计算学生的平均分(传入值为学号)\n\n  - delimiter $\n    create procedure stu_AvgGrade(in StudentID varchar(100))\n    begin\n    select avg(Stu_Grade)  from Student where Stu_ID = StudentID;\n    end $\n\ndelimiter ;\n\ncall stu_AvgGrade('181114930');\n\n## 数据库导入\n\n### 此处使用的是Excel导入，在企业中，应该是使用ETL工具导入\n\n## 数据库备份与恢复\n\n## 数据库日志\n\n## ETL\n\n## 帆软\n\n*XMind - Trial Version*","source":"_posts/Mysql讲解-课程大纲设计.md","raw":"---\ntitle: Mysql讲解 课程大纲设计\nabbrlink: 3330459815\ndate: 2021-11-29 10:32:00\ntags:\n  - Mysql\n  - 数据库\ncategories: \n  - 数据库\n  - Mysql \n---\n# MYSQL\n\n## 建立数据库\n\n### 建库语句\n\n- create database  IF NOT EXISTS TEST_DB DEFAULT CHARACTER Set UTF8 DEFAULT COLLATE utf8_bin;\n- 创建一个测试数据库，命名为 test_db，指定其默认字符集为 utf8，默认校对规则为 utf8_bin\n\n### 建表语句\n\n- CREATE TABLE IF NOT EXISTS `Student`(\n  `ID` INT UNSIGNED AUTO_INCREMENT,  -- 序号\n  `Stu_ID` VARCHAR(100) NOT NULL ,   -- 学号\n  `Stu_NAME` VARCHAR(100)  ,   -- 姓名\n  `Stu_CourseID` VARCHAR(100) ,  -- 课程号\n  `Stu_Grade` VARCHAR(40) ,  -- 成绩\n  PRIMARY KEY ( `ID` )\n  )ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n\n\t- 建立学生表\n\n- CREATE TABLE IF NOT EXISTS `Teacher`(\n  `ID` INT UNSIGNED AUTO_INCREMENT,  -- 序号\n  `Tea_ID` VARCHAR(100) NOT NULL ,   -- 教师学号\n  `Tea_NAME` VARCHAR(100)  ,   -- 教师姓名\n  `Tea_CourseID` VARCHAR(100),  -- 教授课程编号\n  PRIMARY KEY ( `ID` )\n  )ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n  - 建立教师表\n\n- CREATE TABLE IF NOT EXISTS `Course`(\n  `Cour_ID` VARCHAR(100) NOT NULL ,   -- 科目编号\n  `Cour_NAME` VARCHAR(100) ,   -- 课程科目\n  PRIMARY KEY ( `Cour_ID` )\n  )ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\n  - 建立科目表\n\n### 插入数据\n\n- 逐条插入\n\n  - INSERT INTO Course ( Cour_ID, Cour_NAME)\n        VALUES\n        ( 036611, '物理' );\n        \n\nINSERT INTO Course ( Cour_ID, Cour_NAME)\n                       VALUES\n                       ( 036612, '生物' );\n                       \nINSERT INTO Course ( Cour_ID, Cour_NAME)\n                       VALUES\n                       ( 036613, '化学' );\n\n\t\t- 课程表\n\n- 批量插入\n\n  - INSERT INTO Student ( Stu_ID, Stu_NAME,Stu_CourseID,Stu_Grade )\n        VALUES\n      ( 181114930, '小青',036611,90),\n      ( 181114930, '小青',036612,50),\n      ( 181114931, '小红',036612,82),\n      ( 181114932, '小蓝',036613,85); \n  - INSERT INTO Teacher ( Tea_ID, Tea_NAME,Tea_CourseID )\n        VALUES\n        ( 159850, '王倩',036611),\n        ( 159850, '王倩',036612),\n        ( 159850, '王倩',036613),\n        ( 159851, '王宇',036611),\n        ( 159852, '王宇',036612),\n        ( 159853, '王刚',036613);\n\n- ETL工具\n\n## 数据查询\n\n### 简单查询\n\n- 例如：查询学号为181114930的课程名称\n\n  - select a.Stu_NAME,b.Cour_Name\n    from student a left join course b on a.Stu_CourseID = b.Cour_ID\n    where Stu_ID = '181114930';\n\n- 例如：查询各个老师旗下学生的名字(老师教授课程与学生选报的课程)\n\n  - select distinct a.Tea_Name ,c.Stu_Name \n    from Teacher a \n    left join course b on a.Tea_CourseID  = b.Cour_ID\n    left join student c on b.Cour_ID =  c.Stu_CourseID \n\n### 函数查询\n\n- 例如：查询各个科目的平均分且按照科目的平均分降序排列\n\n  - select b.Cour_NAME , AVG(a.Stu_Grade) as Stu_Grade \n    from Student a \n    LEFT JOIN Course b on a.Stu_CourseID = b.Cour_ID\n    group by Stu_CourseID,Cour_NAME\n    ORDER BY Stu_Grade DESC\n\n### 存储过程查询\n\n- 例如：计算学生的平均分(传入值为学号)\n\n  - delimiter $\n    create procedure stu_AvgGrade(in StudentID varchar(100))\n    begin\n    select avg(Stu_Grade)  from Student where Stu_ID = StudentID;\n    end $\n\ndelimiter ;\n\ncall stu_AvgGrade('181114930');\n\n## 数据库导入\n\n### 此处使用的是Excel导入，在企业中，应该是使用ETL工具导入\n\n## 数据库备份与恢复\n\n## 数据库日志\n\n## ETL\n\n## 帆软\n\n*XMind - Trial Version*","slug":"Mysql讲解-课程大纲设计","published":1,"updated":"2021-11-29T02:34:10.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rd0012o4vb68qzhoun","content":"<h1>MYSQL</h1>\n<h2 id=\"建立数据库\">建立数据库</h2>\n<h3 id=\"建库语句\">建库语句</h3>\n<ul>\n<li>create database  IF NOT EXISTS TEST_DB DEFAULT CHARACTER Set UTF8 DEFAULT COLLATE utf8_bin;</li>\n<li>创建一个测试数据库，命名为 test_db，指定其默认字符集为 utf8，默认校对规则为 utf8_bin</li>\n</ul>\n<h3 id=\"建表语句\">建表语句</h3>\n<ul>\n<li>\n<p>CREATE TABLE IF NOT EXISTS <code>Student</code>(<br>\n<code>ID</code> INT UNSIGNED AUTO_INCREMENT,  – 序号<br>\n<code>Stu_ID</code> VARCHAR(100) NOT NULL ,   – 学号<br>\n<code>Stu_NAME</code> VARCHAR(100)  ,   – 姓名<br>\n<code>Stu_CourseID</code> VARCHAR(100) ,  – 课程号<br>\n<code>Stu_Grade</code> VARCHAR(40) ,  – 成绩<br>\nPRIMARY KEY ( <code>ID</code> )<br>\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>\n<ul>\n<li>建立学生表</li>\n</ul>\n</li>\n<li>\n<p>CREATE TABLE IF NOT EXISTS <code>Teacher</code>(<br>\n<code>ID</code> INT UNSIGNED AUTO_INCREMENT,  – 序号<br>\n<code>Tea_ID</code> VARCHAR(100) NOT NULL ,   – 教师学号<br>\n<code>Tea_NAME</code> VARCHAR(100)  ,   – 教师姓名<br>\n<code>Tea_CourseID</code> VARCHAR(100),  – 教授课程编号<br>\nPRIMARY KEY ( <code>ID</code> )<br>\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>\n<ul>\n<li>建立教师表</li>\n</ul>\n</li>\n<li>\n<p>CREATE TABLE IF NOT EXISTS <code>Course</code>(<br>\n<code>Cour_ID</code> VARCHAR(100) NOT NULL ,   – 科目编号<br>\n<code>Cour_NAME</code> VARCHAR(100) ,   – 课程科目<br>\nPRIMARY KEY ( <code>Cour_ID</code> )<br>\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>\n<ul>\n<li>建立科目表</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"插入数据\">插入数据</h3>\n<ul>\n<li>\n<p>逐条插入</p>\n<ul>\n<li>INSERT INTO Course ( Cour_ID, Cour_NAME)<br>\nVALUES<br>\n( 036611, ‘物理’ );</li>\n</ul>\n</li>\n</ul>\n<p>INSERT INTO Course ( Cour_ID, Cour_NAME)<br>\nVALUES<br>\n( 036612, ‘生物’ );</p>\n<p>INSERT INTO Course ( Cour_ID, Cour_NAME)<br>\nVALUES<br>\n( 036613, ‘化学’ );</p>\n<pre><code>\t- 课程表\n</code></pre>\n<ul>\n<li>\n<p>批量插入</p>\n<ul>\n<li>INSERT INTO Student ( Stu_ID, Stu_NAME,Stu_CourseID,Stu_Grade )<br>\nVALUES<br>\n( 181114930, ‘小青’,036611,90),<br>\n( 181114930, ‘小青’,036612,50),<br>\n( 181114931, ‘小红’,036612,82),<br>\n( 181114932, ‘小蓝’,036613,85);</li>\n<li>INSERT INTO Teacher ( Tea_ID, Tea_NAME,Tea_CourseID )<br>\nVALUES<br>\n( 159850, ‘王倩’,036611),<br>\n( 159850, ‘王倩’,036612),<br>\n( 159850, ‘王倩’,036613),<br>\n( 159851, ‘王宇’,036611),<br>\n( 159852, ‘王宇’,036612),<br>\n( 159853, ‘王刚’,036613);</li>\n</ul>\n</li>\n<li>\n<p>ETL工具</p>\n</li>\n</ul>\n<h2 id=\"数据查询\">数据查询</h2>\n<h3 id=\"简单查询\">简单查询</h3>\n<ul>\n<li>\n<p>例如：查询学号为181114930的课程名称</p>\n<ul>\n<li>select a.Stu_NAME,b.Cour_Name<br>\nfrom student a left join course b on a.Stu_CourseID = b.Cour_ID<br>\nwhere Stu_ID = ‘181114930’;</li>\n</ul>\n</li>\n<li>\n<p>例如：查询各个老师旗下学生的名字(老师教授课程与学生选报的课程)</p>\n<ul>\n<li>select distinct a.Tea_Name ,c.Stu_Name<br>\nfrom Teacher a<br>\nleft join course b on a.Tea_CourseID  = b.Cour_ID<br>\nleft join student c on b.Cour_ID =  c.Stu_CourseID</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数查询\">函数查询</h3>\n<ul>\n<li>\n<p>例如：查询各个科目的平均分且按照科目的平均分降序排列</p>\n<ul>\n<li>select b.Cour_NAME , AVG(a.Stu_Grade) as Stu_Grade<br>\nfrom Student a<br>\nLEFT JOIN Course b on a.Stu_CourseID = b.Cour_ID<br>\ngroup by Stu_CourseID,Cour_NAME<br>\nORDER BY Stu_Grade DESC</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"存储过程查询\">存储过程查询</h3>\n<ul>\n<li>\n<p>例如：计算学生的平均分(传入值为学号)</p>\n<ul>\n<li>delimiter $<br>\ncreate procedure stu_AvgGrade(in StudentID varchar(100))<br>\nbegin<br>\nselect avg(Stu_Grade)  from Student where Stu_ID = StudentID;<br>\nend $</li>\n</ul>\n</li>\n</ul>\n<p>delimiter ;</p>\n<p>call stu_AvgGrade(‘181114930’);</p>\n<h2 id=\"数据库导入\">数据库导入</h2>\n<h3 id=\"此处使用的是Excel导入，在企业中，应该是使用ETL工具导入\">此处使用的是Excel导入，在企业中，应该是使用ETL工具导入</h3>\n<h2 id=\"数据库备份与恢复\">数据库备份与恢复</h2>\n<h2 id=\"数据库日志\">数据库日志</h2>\n<h2 id=\"ETL\">ETL</h2>\n<h2 id=\"帆软\">帆软</h2>\n<p><em>XMind - Trial Version</em></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<h1>MYSQL</h1>\n<h2 id=\"建立数据库\">建立数据库</h2>\n<h3 id=\"建库语句\">建库语句</h3>\n<ul>\n<li>create database  IF NOT EXISTS TEST_DB DEFAULT CHARACTER Set UTF8 DEFAULT COLLATE utf8_bin;</li>\n<li>创建一个测试数据库，命名为 test_db，指定其默认字符集为 utf8，默认校对规则为 utf8_bin</li>\n</ul>\n<h3 id=\"建表语句\">建表语句</h3>\n<ul>\n<li>\n<p>CREATE TABLE IF NOT EXISTS <code>Student</code>(<br>\n<code>ID</code> INT UNSIGNED AUTO_INCREMENT,  – 序号<br>\n<code>Stu_ID</code> VARCHAR(100) NOT NULL ,   – 学号<br>\n<code>Stu_NAME</code> VARCHAR(100)  ,   – 姓名<br>\n<code>Stu_CourseID</code> VARCHAR(100) ,  – 课程号<br>\n<code>Stu_Grade</code> VARCHAR(40) ,  – 成绩<br>\nPRIMARY KEY ( <code>ID</code> )<br>\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>\n<ul>\n<li>建立学生表</li>\n</ul>\n</li>\n<li>\n<p>CREATE TABLE IF NOT EXISTS <code>Teacher</code>(<br>\n<code>ID</code> INT UNSIGNED AUTO_INCREMENT,  – 序号<br>\n<code>Tea_ID</code> VARCHAR(100) NOT NULL ,   – 教师学号<br>\n<code>Tea_NAME</code> VARCHAR(100)  ,   – 教师姓名<br>\n<code>Tea_CourseID</code> VARCHAR(100),  – 教授课程编号<br>\nPRIMARY KEY ( <code>ID</code> )<br>\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>\n<ul>\n<li>建立教师表</li>\n</ul>\n</li>\n<li>\n<p>CREATE TABLE IF NOT EXISTS <code>Course</code>(<br>\n<code>Cour_ID</code> VARCHAR(100) NOT NULL ,   – 科目编号<br>\n<code>Cour_NAME</code> VARCHAR(100) ,   – 课程科目<br>\nPRIMARY KEY ( <code>Cour_ID</code> )<br>\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;</p>\n<ul>\n<li>建立科目表</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"插入数据\">插入数据</h3>\n<ul>\n<li>\n<p>逐条插入</p>\n<ul>\n<li>INSERT INTO Course ( Cour_ID, Cour_NAME)<br>\nVALUES<br>\n( 036611, ‘物理’ );</li>\n</ul>\n</li>\n</ul>\n<p>INSERT INTO Course ( Cour_ID, Cour_NAME)<br>\nVALUES<br>\n( 036612, ‘生物’ );</p>\n<p>INSERT INTO Course ( Cour_ID, Cour_NAME)<br>\nVALUES<br>\n( 036613, ‘化学’ );</p>\n<pre><code>\t- 课程表\n</code></pre>\n<ul>\n<li>\n<p>批量插入</p>\n<ul>\n<li>INSERT INTO Student ( Stu_ID, Stu_NAME,Stu_CourseID,Stu_Grade )<br>\nVALUES<br>\n( 181114930, ‘小青’,036611,90),<br>\n( 181114930, ‘小青’,036612,50),<br>\n( 181114931, ‘小红’,036612,82),<br>\n( 181114932, ‘小蓝’,036613,85);</li>\n<li>INSERT INTO Teacher ( Tea_ID, Tea_NAME,Tea_CourseID )<br>\nVALUES<br>\n( 159850, ‘王倩’,036611),<br>\n( 159850, ‘王倩’,036612),<br>\n( 159850, ‘王倩’,036613),<br>\n( 159851, ‘王宇’,036611),<br>\n( 159852, ‘王宇’,036612),<br>\n( 159853, ‘王刚’,036613);</li>\n</ul>\n</li>\n<li>\n<p>ETL工具</p>\n</li>\n</ul>\n<h2 id=\"数据查询\">数据查询</h2>\n<h3 id=\"简单查询\">简单查询</h3>\n<ul>\n<li>\n<p>例如：查询学号为181114930的课程名称</p>\n<ul>\n<li>select a.Stu_NAME,b.Cour_Name<br>\nfrom student a left join course b on a.Stu_CourseID = b.Cour_ID<br>\nwhere Stu_ID = ‘181114930’;</li>\n</ul>\n</li>\n<li>\n<p>例如：查询各个老师旗下学生的名字(老师教授课程与学生选报的课程)</p>\n<ul>\n<li>select distinct a.Tea_Name ,c.Stu_Name<br>\nfrom Teacher a<br>\nleft join course b on a.Tea_CourseID  = b.Cour_ID<br>\nleft join student c on b.Cour_ID =  c.Stu_CourseID</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"函数查询\">函数查询</h3>\n<ul>\n<li>\n<p>例如：查询各个科目的平均分且按照科目的平均分降序排列</p>\n<ul>\n<li>select b.Cour_NAME , AVG(a.Stu_Grade) as Stu_Grade<br>\nfrom Student a<br>\nLEFT JOIN Course b on a.Stu_CourseID = b.Cour_ID<br>\ngroup by Stu_CourseID,Cour_NAME<br>\nORDER BY Stu_Grade DESC</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"存储过程查询\">存储过程查询</h3>\n<ul>\n<li>\n<p>例如：计算学生的平均分(传入值为学号)</p>\n<ul>\n<li>delimiter $<br>\ncreate procedure stu_AvgGrade(in StudentID varchar(100))<br>\nbegin<br>\nselect avg(Stu_Grade)  from Student where Stu_ID = StudentID;<br>\nend $</li>\n</ul>\n</li>\n</ul>\n<p>delimiter ;</p>\n<p>call stu_AvgGrade(‘181114930’);</p>\n<h2 id=\"数据库导入\">数据库导入</h2>\n<h3 id=\"此处使用的是Excel导入，在企业中，应该是使用ETL工具导入\">此处使用的是Excel导入，在企业中，应该是使用ETL工具导入</h3>\n<h2 id=\"数据库备份与恢复\">数据库备份与恢复</h2>\n<h2 id=\"数据库日志\">数据库日志</h2>\n<h2 id=\"ETL\">ETL</h2>\n<h2 id=\"帆软\">帆软</h2>\n<p><em>XMind - Trial Version</em></p>\n"},{"title":"Ubuntu安装Docker并启动Nginx","abbrlink":3003506474,"date":"2021-11-29T01:16:50.000Z","description":"Ubuntu使用Docker简单记录","_content":"**Ubuntu安装Docker并启动Nginx**\n\nUbuntu 安装docker\n\n```bash\n# step 1: 安装必要的一些系统工具\nsudo apt-get update\nsudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common\n# step 2: 安装GPG证书\ncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n# Step 3: 写入软件源信息\nsudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n# Step 4: 更新并安装Docker-CE\nsudo apt-get -y update\nsudo apt-get -y install docker-ce\n\n# 安装指定版本的Docker-CE:\n# Step 1: 查找Docker-CE的版本:\n# apt-cache madison docker-ce\n#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages\n#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages\n# Step 2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.1~ce-0~ubuntu-xenial)\n# sudo apt-get -y install docker-ce=[VERSION]\n\n```\n\n```bash\nsudo usermod -aG docker ubuntu   #docker命令授权\n```\n\n### Docker安装nginx\n\n```nginx\ndocker pull nginx\n```\n\n简单运行\n\n```bash\ndocker run --name my-nginx -p 80:80 -d nginx\ndocker ps | grep my-nginx\n```\n\n![image-20211125160341793](http://typa.qingyun.run/img/image-20211125160341793.png?x-oss-process=style/qingyun)\n\n```\nIP:80\n```\n\n最基础的配置\n\n### 云服务器安装node + hexo\n\n```bash\nsudo apt install nodejs\n```\n\n![image-20211125160841079](http://typa.qingyun.run/img/image-20211125160841079.png?x-oss-process=style/qingyun)\n\n```bash\nsudo apt install npm\n```\n\n![image-20211125161855785](http://typa.qingyun.run/img/image-20211125161855785.png?x-oss-process=style/qingyun)\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\nnpm config get registry\n```\n\n```bash\nnpm install -g hexo-cli\n```\n\n","source":"_posts/Ubuntu安装Docker并启动Nginx.md","raw":"---\ntitle: Ubuntu安装Docker并启动Nginx\nabbrlink: 3003506474\ndate: 2021-11-29 09:16:50\ntags:\n  - Docker\ncategories: Docker\ndescription: Ubuntu使用Docker简单记录\n---\n**Ubuntu安装Docker并启动Nginx**\n\nUbuntu 安装docker\n\n```bash\n# step 1: 安装必要的一些系统工具\nsudo apt-get update\nsudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common\n# step 2: 安装GPG证书\ncurl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -\n# Step 3: 写入软件源信息\nsudo add-apt-repository \"deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable\"\n# Step 4: 更新并安装Docker-CE\nsudo apt-get -y update\nsudo apt-get -y install docker-ce\n\n# 安装指定版本的Docker-CE:\n# Step 1: 查找Docker-CE的版本:\n# apt-cache madison docker-ce\n#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages\n#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages\n# Step 2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.1~ce-0~ubuntu-xenial)\n# sudo apt-get -y install docker-ce=[VERSION]\n\n```\n\n```bash\nsudo usermod -aG docker ubuntu   #docker命令授权\n```\n\n### Docker安装nginx\n\n```nginx\ndocker pull nginx\n```\n\n简单运行\n\n```bash\ndocker run --name my-nginx -p 80:80 -d nginx\ndocker ps | grep my-nginx\n```\n\n![image-20211125160341793](http://typa.qingyun.run/img/image-20211125160341793.png?x-oss-process=style/qingyun)\n\n```\nIP:80\n```\n\n最基础的配置\n\n### 云服务器安装node + hexo\n\n```bash\nsudo apt install nodejs\n```\n\n![image-20211125160841079](http://typa.qingyun.run/img/image-20211125160841079.png?x-oss-process=style/qingyun)\n\n```bash\nsudo apt install npm\n```\n\n![image-20211125161855785](http://typa.qingyun.run/img/image-20211125161855785.png?x-oss-process=style/qingyun)\n\n```bash\nnpm config set registry https://registry.npm.taobao.org\nnpm config get registry\n```\n\n```bash\nnpm install -g hexo-cli\n```\n\n","slug":"Ubuntu安装Docker并启动Nginx","published":1,"updated":"2021-11-29T01:18:02.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2re0016o4vbe8d2ccuu","content":"<p><strong>Ubuntu安装Docker并启动Nginx</strong></p>\n<p>Ubuntu 安装docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># step 1: 安装必要的一些系统工具</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class=\"line\"><span class=\"comment\"># step 2: 安装GPG证书</span></span><br><span class=\"line\">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\"><span class=\"comment\"># Step 3: 写入软件源信息</span></span><br><span class=\"line\">sudo add-apt-repository <span class=\"string\">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># Step 4: 更新并安装Docker-CE</span></span><br><span class=\"line\">sudo apt-get -y update</span><br><span class=\"line\">sudo apt-get -y install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装指定版本的Docker-CE:</span></span><br><span class=\"line\"><span class=\"comment\"># Step 1: 查找Docker-CE的版本:</span></span><br><span class=\"line\"><span class=\"comment\"># apt-cache madison docker-ce</span></span><br><span class=\"line\"><span class=\"comment\">#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class=\"line\"><span class=\"comment\">#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class=\"line\"><span class=\"comment\"># Step 2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.1~ce-0~ubuntu-xenial)</span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt-get -y install docker-ce=[VERSION]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker ubuntu   <span class=\"comment\">#docker命令授权</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Docker安装nginx\">Docker安装nginx</h3>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> pull nginx</span><br></pre></td></tr></table></figure>\n<p>简单运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-nginx -p 80:80 -d nginx</span><br><span class=\"line\">docker ps | grep my-nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211125160341793.png?x-oss-process=style/qingyun\" alt=\"image-20211125160341793\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IP:80</span><br></pre></td></tr></table></figure>\n<p>最基础的配置</p>\n<h3 id=\"云服务器安装node-hexo\">云服务器安装node + hexo</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install nodejs</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211125160841079.png?x-oss-process=style/qingyun\" alt=\"image-20211125160841079\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install npm</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211125161855785.png?x-oss-process=style/qingyun\" alt=\"image-20211125161855785\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<p><strong>Ubuntu安装Docker并启动Nginx</strong></p>\n<p>Ubuntu 安装docker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># step 1: 安装必要的一些系统工具</span></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class=\"line\"><span class=\"comment\"># step 2: 安装GPG证书</span></span><br><span class=\"line\">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class=\"line\"><span class=\"comment\"># Step 3: 写入软件源信息</span></span><br><span class=\"line\">sudo add-apt-repository <span class=\"string\">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class=\"subst\">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># Step 4: 更新并安装Docker-CE</span></span><br><span class=\"line\">sudo apt-get -y update</span><br><span class=\"line\">sudo apt-get -y install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装指定版本的Docker-CE:</span></span><br><span class=\"line\"><span class=\"comment\"># Step 1: 查找Docker-CE的版本:</span></span><br><span class=\"line\"><span class=\"comment\"># apt-cache madison docker-ce</span></span><br><span class=\"line\"><span class=\"comment\">#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class=\"line\"><span class=\"comment\">#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class=\"line\"><span class=\"comment\"># Step 2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.1~ce-0~ubuntu-xenial)</span></span><br><span class=\"line\"><span class=\"comment\"># sudo apt-get -y install docker-ce=[VERSION]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker ubuntu   <span class=\"comment\">#docker命令授权</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Docker安装nginx\">Docker安装nginx</h3>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">docker</span> pull nginx</span><br></pre></td></tr></table></figure>\n<p>简单运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --name my-nginx -p 80:80 -d nginx</span><br><span class=\"line\">docker ps | grep my-nginx</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211125160341793.png?x-oss-process=style/qingyun\" alt=\"image-20211125160341793\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IP:80</span><br></pre></td></tr></table></figure>\n<p>最基础的配置</p>\n<h3 id=\"云服务器安装node-hexo\">云服务器安装node + hexo</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install nodejs</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211125160841079.png?x-oss-process=style/qingyun\" alt=\"image-20211125160841079\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install npm</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://typa.qingyun.run/img/image-20211125161855785.png?x-oss-process=style/qingyun\" alt=\"image-20211125161855785\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> registry https://registry.npm.taobao.org</span><br><span class=\"line\">npm config get registry</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n"},{"title":"Typora常用快捷键（翻译）","abbrlink":3103457537,"date":"2021-11-29T01:20:09.000Z","description":"Typora的命令指南","_content":"<h2><a name=\"t0\"></a><a id=\"_2\"></a>摘要</h2> \n<p>您可以使用快捷键快速插入或修改样式，或者执行 Typora 支持的其他操作。</p> \n<p>您可以在菜单栏中的每个菜单项的右侧找到快捷键。</p> \n<h2><a name=\"t1\"></a><a id=\"_8\"></a>常用快捷键</h2> \n<h3><a name=\"t2\"></a><a id=\"_10\"></a>自动完成</h3> \n<p>在macOS上，您可以按Esc键打开内联数学预览、自动完成表情符号等功能。</p> \n<h3><a name=\"t3\"></a><a id=\"_14\"></a>文件</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">新建</td><td align=\"left\">Ctrl + N</td><td>Command + N</td></tr><tr><td align=\"left\">新窗口</td><td align=\"left\">Ctrl + Shift + N</td><td>Command + Shift + N</td></tr><tr><td align=\"left\">新标签</td><td align=\"left\"><em>（不支持）</em></td><td>Command + T</td></tr><tr><td align=\"left\">打开</td><td align=\"left\">Ctrl + O</td><td>Command + O</td></tr><tr><td align=\"left\">快速打开</td><td align=\"left\">Ctrl + P</td><td>Command + Shift + O</td></tr><tr><td align=\"left\">重新打开已关闭文件</td><td align=\"left\">Ctrl + Shift + T</td><td>Command + Shift + T</td></tr><tr><td align=\"left\">保存</td><td align=\"left\">Ctrl + S</td><td>Command + S</td></tr><tr><td align=\"left\">另存为/复制</td><td align=\"left\">Ctrl + Shift + S</td><td>Command + Shift + S</td></tr><tr><td align=\"left\">偏好</td><td align=\"left\">Ctrl + ，</td><td>Command + ，</td></tr><tr><td align=\"left\">关闭</td><td align=\"left\">Ctrl + W</td><td>Command + W</td></tr></tbody></table></div>\n<h3><a name=\"t4\"></a><a id=\"_29\"></a>编辑</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">新段落</td><td align=\"left\">Enter</td><td>Enter</td></tr><tr><td align=\"left\">新线</td><td align=\"left\">Shift + Enter</td><td>Shift + Enter</td></tr><tr><td align=\"left\">剪切</td><td align=\"left\">Ctrl + X</td><td>Command + X</td></tr><tr><td align=\"left\">复制</td><td align=\"left\">Ctrl + C</td><td>Command + C</td></tr><tr><td align=\"left\">粘贴</td><td align=\"left\">Ctrl + V</td><td>Command + V</td></tr><tr><td align=\"left\">复制为 Markdown</td><td align=\"left\">Ctrl + Shift + C</td><td>Command + Shift + C</td></tr><tr><td align=\"left\">粘贴为纯文本</td><td align=\"left\">Ctrl + Shift + V</td><td>Command + Shift + V</td></tr><tr><td align=\"left\">全选</td><td align=\"left\">Ctrl + A</td><td>Command + A</td></tr><tr><td align=\"left\">选择行/句子 <br>选择行（在表中）</td><td align=\"left\">Ctrl + L</td><td>Command + L</td></tr><tr><td align=\"left\">删除行（在表中）</td><td align=\"left\">Ctrl + Shift +退格键</td><td>Command + Shift + 退格键</td></tr><tr><td align=\"left\">选择样式范围<br>选择单元格（在表中）</td><td align=\"left\">Ctrl + E</td><td>Command + E</td></tr><tr><td align=\"left\">选择单词</td><td align=\"left\">Ctrl + D</td><td>Command + D</td></tr><tr><td align=\"left\">删除单词</td><td align=\"left\">Ctrl + Shift + D</td><td>Command + Shift + D</td></tr><tr><td align=\"left\">跳到顶部</td><td align=\"left\">Ctrl +Home</td><td>Command + ↑</td></tr><tr><td align=\"left\">跳至选择</td><td align=\"left\">Ctrl + J</td><td>Command + J</td></tr><tr><td align=\"left\">跳到底部</td><td align=\"left\">Ctrl + End</td><td>Command + ↓</td></tr><tr><td align=\"left\">查找</td><td align=\"left\">Ctrl + F</td><td>Command + F</td></tr><tr><td align=\"left\">查找下一个</td><td align=\"left\">F3 / Enter</td><td>Command + G / Enter</td></tr><tr><td align=\"left\">查找上一个</td><td align=\"left\">Shift + F3 / Shift + Enter</td><td>Command + Shift + G / Shift + Enter</td></tr><tr><td align=\"left\">替换</td><td align=\"left\">Ctrl + H</td><td>Command + H</td></tr></tbody></table></div>\n<h3><a name=\"t5\"></a><a id=\"_54\"></a>段落</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">标题 1 至 6</td><td align=\"left\">Ctrl + 1/2/3/4/5/6</td><td>Command + 1/2/3/4/5/6</td></tr><tr><td align=\"left\">段落</td><td align=\"left\">Ctrl + 0</td><td>Command + 0</td></tr><tr><td align=\"left\">增加标题级别</td><td align=\"left\">Ctrl + =</td><td>Command + =</td></tr><tr><td align=\"left\">降低标题级别</td><td align=\"left\">Ctrl ±</td><td>Command + -</td></tr><tr><td align=\"left\">表</td><td align=\"left\">Ctrl + T</td><td>Command + Option + T</td></tr><tr><td align=\"left\">代码围栏</td><td align=\"left\">Ctrl + Shift + K</td><td>Command + Option + C</td></tr><tr><td align=\"left\">数学块</td><td align=\"left\">Ctrl + Shift + M</td><td>Command + Option + B</td></tr><tr><td align=\"left\">引用</td><td align=\"left\">Ctrl + Shift + Q</td><td>Command + Option + Q</td></tr><tr><td align=\"left\">有序列表</td><td align=\"left\">Ctrl + Shift + [</td><td>Command + Option + O</td></tr><tr><td align=\"left\">无序列表</td><td align=\"left\">Ctrl + Shift +]</td><td>Command + Option + U</td></tr><tr><td align=\"left\">缩进</td><td align=\"left\">Ctrl + [ / Tab</td><td>Command + [ / Tab</td></tr><tr><td align=\"left\">突出</td><td align=\"left\">Ctrl +] / Shift + Tab</td><td>Command +] / Shift + Tab</td></tr></tbody></table></div>\n<h3><a name=\"t6\"></a><a id=\"_71\"></a>格式</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">加粗</td><td align=\"left\">Ctrl + B</td><td>Command + B</td></tr><tr><td align=\"left\">重点</td><td align=\"left\">Ctrl + I</td><td>Command + I</td></tr><tr><td align=\"left\">下划线</td><td align=\"left\">Ctrl + U</td><td>Command + U</td></tr><tr><td align=\"left\">代码</td><td align=\"left\">Ctrl + Shift + <code>| Command + Shift +</code></td><td></td></tr><tr><td align=\"left\">Strike</td><td align=\"left\">Alt + Shift + 5</td><td>Ctrl + Shift + `</td></tr><tr><td align=\"left\">超链接</td><td align=\"left\">Ctrl + K</td><td>Command + K</td></tr><tr><td align=\"left\">图片</td><td align=\"left\">Ctrl + Shift + I</td><td>Command + Control + I</td></tr><tr><td align=\"left\">清除格式</td><td align=\"left\">Ctrl + \\</td><td>Comand + \\</td></tr></tbody></table></div>\n<h3><a name=\"t7\"></a><a id=\"_84\"></a>查看</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">切换侧边栏</td><td align=\"left\">Ctrl + Shift + L</td><td>Command + Shift + L</td></tr><tr><td align=\"left\">大纲</td><td align=\"left\">Ctrl + Shift + 1</td><td>Command + Shift + 1</td></tr><tr><td align=\"left\">文章</td><td align=\"left\">Ctrl + Shift + 2</td><td>Command + Control + 2</td></tr><tr><td align=\"left\">文件树</td><td align=\"left\">Ctrl + Shift + 3</td><td>Command + Control + 3</td></tr><tr><td align=\"left\">源代码模式</td><td align=\"left\">Ctrl + /</td><td>Command + /</td></tr><tr><td align=\"left\">聚焦模式</td><td align=\"left\">F8</td><td>F8</td></tr><tr><td align=\"left\">打字机模式</td><td align=\"left\">F9</td><td>F9</td></tr><tr><td align=\"left\">切换全屏</td><td align=\"left\">F11</td><td>Command + Option + F</td></tr><tr><td align=\"left\">实际尺寸</td><td align=\"left\">Ctrl + Shift + 0</td><td><em>（不支持）</em></td></tr><tr><td align=\"left\">放大</td><td align=\"left\">Ctrl + Shift + =</td><td><em>（不支持）</em></td></tr><tr><td align=\"left\">缩小</td><td align=\"left\">Ctrl + Shift ±</td><td><em>（不支持）</em></td></tr><tr><td align=\"left\">在打开的文档之间切换</td><td align=\"left\">Ctrl + Tab</td><td>Command + `</td></tr><tr><td align=\"left\">切换开发工具</td><td align=\"left\">Ctrl + Shift + I</td><td>-</td></tr></tbody></table></div>","source":"_posts/Typora常用快捷键（翻译）.md","raw":"---\ntitle: Typora常用快捷键（翻译）\nabbrlink: 3103457537\ndate: 2021-11-29 09:20:09\ntags:\n    - Typora\ncategories: Typora\ndescription: Typora的命令指南\n---\n<h2><a name=\"t0\"></a><a id=\"_2\"></a>摘要</h2> \n<p>您可以使用快捷键快速插入或修改样式，或者执行 Typora 支持的其他操作。</p> \n<p>您可以在菜单栏中的每个菜单项的右侧找到快捷键。</p> \n<h2><a name=\"t1\"></a><a id=\"_8\"></a>常用快捷键</h2> \n<h3><a name=\"t2\"></a><a id=\"_10\"></a>自动完成</h3> \n<p>在macOS上，您可以按Esc键打开内联数学预览、自动完成表情符号等功能。</p> \n<h3><a name=\"t3\"></a><a id=\"_14\"></a>文件</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">新建</td><td align=\"left\">Ctrl + N</td><td>Command + N</td></tr><tr><td align=\"left\">新窗口</td><td align=\"left\">Ctrl + Shift + N</td><td>Command + Shift + N</td></tr><tr><td align=\"left\">新标签</td><td align=\"left\"><em>（不支持）</em></td><td>Command + T</td></tr><tr><td align=\"left\">打开</td><td align=\"left\">Ctrl + O</td><td>Command + O</td></tr><tr><td align=\"left\">快速打开</td><td align=\"left\">Ctrl + P</td><td>Command + Shift + O</td></tr><tr><td align=\"left\">重新打开已关闭文件</td><td align=\"left\">Ctrl + Shift + T</td><td>Command + Shift + T</td></tr><tr><td align=\"left\">保存</td><td align=\"left\">Ctrl + S</td><td>Command + S</td></tr><tr><td align=\"left\">另存为/复制</td><td align=\"left\">Ctrl + Shift + S</td><td>Command + Shift + S</td></tr><tr><td align=\"left\">偏好</td><td align=\"left\">Ctrl + ，</td><td>Command + ，</td></tr><tr><td align=\"left\">关闭</td><td align=\"left\">Ctrl + W</td><td>Command + W</td></tr></tbody></table></div>\n<h3><a name=\"t4\"></a><a id=\"_29\"></a>编辑</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">新段落</td><td align=\"left\">Enter</td><td>Enter</td></tr><tr><td align=\"left\">新线</td><td align=\"left\">Shift + Enter</td><td>Shift + Enter</td></tr><tr><td align=\"left\">剪切</td><td align=\"left\">Ctrl + X</td><td>Command + X</td></tr><tr><td align=\"left\">复制</td><td align=\"left\">Ctrl + C</td><td>Command + C</td></tr><tr><td align=\"left\">粘贴</td><td align=\"left\">Ctrl + V</td><td>Command + V</td></tr><tr><td align=\"left\">复制为 Markdown</td><td align=\"left\">Ctrl + Shift + C</td><td>Command + Shift + C</td></tr><tr><td align=\"left\">粘贴为纯文本</td><td align=\"left\">Ctrl + Shift + V</td><td>Command + Shift + V</td></tr><tr><td align=\"left\">全选</td><td align=\"left\">Ctrl + A</td><td>Command + A</td></tr><tr><td align=\"left\">选择行/句子 <br>选择行（在表中）</td><td align=\"left\">Ctrl + L</td><td>Command + L</td></tr><tr><td align=\"left\">删除行（在表中）</td><td align=\"left\">Ctrl + Shift +退格键</td><td>Command + Shift + 退格键</td></tr><tr><td align=\"left\">选择样式范围<br>选择单元格（在表中）</td><td align=\"left\">Ctrl + E</td><td>Command + E</td></tr><tr><td align=\"left\">选择单词</td><td align=\"left\">Ctrl + D</td><td>Command + D</td></tr><tr><td align=\"left\">删除单词</td><td align=\"left\">Ctrl + Shift + D</td><td>Command + Shift + D</td></tr><tr><td align=\"left\">跳到顶部</td><td align=\"left\">Ctrl +Home</td><td>Command + ↑</td></tr><tr><td align=\"left\">跳至选择</td><td align=\"left\">Ctrl + J</td><td>Command + J</td></tr><tr><td align=\"left\">跳到底部</td><td align=\"left\">Ctrl + End</td><td>Command + ↓</td></tr><tr><td align=\"left\">查找</td><td align=\"left\">Ctrl + F</td><td>Command + F</td></tr><tr><td align=\"left\">查找下一个</td><td align=\"left\">F3 / Enter</td><td>Command + G / Enter</td></tr><tr><td align=\"left\">查找上一个</td><td align=\"left\">Shift + F3 / Shift + Enter</td><td>Command + Shift + G / Shift + Enter</td></tr><tr><td align=\"left\">替换</td><td align=\"left\">Ctrl + H</td><td>Command + H</td></tr></tbody></table></div>\n<h3><a name=\"t5\"></a><a id=\"_54\"></a>段落</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">标题 1 至 6</td><td align=\"left\">Ctrl + 1/2/3/4/5/6</td><td>Command + 1/2/3/4/5/6</td></tr><tr><td align=\"left\">段落</td><td align=\"left\">Ctrl + 0</td><td>Command + 0</td></tr><tr><td align=\"left\">增加标题级别</td><td align=\"left\">Ctrl + =</td><td>Command + =</td></tr><tr><td align=\"left\">降低标题级别</td><td align=\"left\">Ctrl ±</td><td>Command + -</td></tr><tr><td align=\"left\">表</td><td align=\"left\">Ctrl + T</td><td>Command + Option + T</td></tr><tr><td align=\"left\">代码围栏</td><td align=\"left\">Ctrl + Shift + K</td><td>Command + Option + C</td></tr><tr><td align=\"left\">数学块</td><td align=\"left\">Ctrl + Shift + M</td><td>Command + Option + B</td></tr><tr><td align=\"left\">引用</td><td align=\"left\">Ctrl + Shift + Q</td><td>Command + Option + Q</td></tr><tr><td align=\"left\">有序列表</td><td align=\"left\">Ctrl + Shift + [</td><td>Command + Option + O</td></tr><tr><td align=\"left\">无序列表</td><td align=\"left\">Ctrl + Shift +]</td><td>Command + Option + U</td></tr><tr><td align=\"left\">缩进</td><td align=\"left\">Ctrl + [ / Tab</td><td>Command + [ / Tab</td></tr><tr><td align=\"left\">突出</td><td align=\"left\">Ctrl +] / Shift + Tab</td><td>Command +] / Shift + Tab</td></tr></tbody></table></div>\n<h3><a name=\"t6\"></a><a id=\"_71\"></a>格式</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">加粗</td><td align=\"left\">Ctrl + B</td><td>Command + B</td></tr><tr><td align=\"left\">重点</td><td align=\"left\">Ctrl + I</td><td>Command + I</td></tr><tr><td align=\"left\">下划线</td><td align=\"left\">Ctrl + U</td><td>Command + U</td></tr><tr><td align=\"left\">代码</td><td align=\"left\">Ctrl + Shift + <code>| Command + Shift +</code></td><td></td></tr><tr><td align=\"left\">Strike</td><td align=\"left\">Alt + Shift + 5</td><td>Ctrl + Shift + `</td></tr><tr><td align=\"left\">超链接</td><td align=\"left\">Ctrl + K</td><td>Command + K</td></tr><tr><td align=\"left\">图片</td><td align=\"left\">Ctrl + Shift + I</td><td>Command + Control + I</td></tr><tr><td align=\"left\">清除格式</td><td align=\"left\">Ctrl + \\</td><td>Comand + \\</td></tr></tbody></table></div>\n<h3><a name=\"t7\"></a><a id=\"_84\"></a>查看</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">切换侧边栏</td><td align=\"left\">Ctrl + Shift + L</td><td>Command + Shift + L</td></tr><tr><td align=\"left\">大纲</td><td align=\"left\">Ctrl + Shift + 1</td><td>Command + Shift + 1</td></tr><tr><td align=\"left\">文章</td><td align=\"left\">Ctrl + Shift + 2</td><td>Command + Control + 2</td></tr><tr><td align=\"left\">文件树</td><td align=\"left\">Ctrl + Shift + 3</td><td>Command + Control + 3</td></tr><tr><td align=\"left\">源代码模式</td><td align=\"left\">Ctrl + /</td><td>Command + /</td></tr><tr><td align=\"left\">聚焦模式</td><td align=\"left\">F8</td><td>F8</td></tr><tr><td align=\"left\">打字机模式</td><td align=\"left\">F9</td><td>F9</td></tr><tr><td align=\"left\">切换全屏</td><td align=\"left\">F11</td><td>Command + Option + F</td></tr><tr><td align=\"left\">实际尺寸</td><td align=\"left\">Ctrl + Shift + 0</td><td><em>（不支持）</em></td></tr><tr><td align=\"left\">放大</td><td align=\"left\">Ctrl + Shift + =</td><td><em>（不支持）</em></td></tr><tr><td align=\"left\">缩小</td><td align=\"left\">Ctrl + Shift ±</td><td><em>（不支持）</em></td></tr><tr><td align=\"left\">在打开的文档之间切换</td><td align=\"left\">Ctrl + Tab</td><td>Command + `</td></tr><tr><td align=\"left\">切换开发工具</td><td align=\"left\">Ctrl + Shift + I</td><td>-</td></tr></tbody></table></div>","slug":"Typora常用快捷键（翻译）","published":1,"updated":"2021-11-29T01:23:01.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rf001ao4vb6ca8cwey","content":"<h2><a name=\"t0\"></a><a id=\"_2\"></a>摘要</h2> \n<p>您可以使用快捷键快速插入或修改样式，或者执行 Typora 支持的其他操作。</p> \n<p>您可以在菜单栏中的每个菜单项的右侧找到快捷键。</p> \n<h2><a name=\"t1\"></a><a id=\"_8\"></a>常用快捷键</h2> \n<h3><a name=\"t2\"></a><a id=\"_10\"></a>自动完成</h3> \n<p>在macOS上，您可以按Esc键打开内联数学预览、自动完成表情符号等功能。</p> \n<h3><a name=\"t3\"></a><a id=\"_14\"></a>文件</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">新建</td><td align=\"left\">Ctrl + N</td><td>Command + N</td></tr><tr><td align=\"left\">新窗口</td><td align=\"left\">Ctrl + Shift + N</td><td>Command + Shift + N</td></tr><tr><td align=\"left\">新标签</td><td align=\"left\"><em>（不支持）</em></td><td>Command + T</td></tr><tr><td align=\"left\">打开</td><td align=\"left\">Ctrl + O</td><td>Command + O</td></tr><tr><td align=\"left\">快速打开</td><td align=\"left\">Ctrl + P</td><td>Command + Shift + O</td></tr><tr><td align=\"left\">重新打开已关闭文件</td><td align=\"left\">Ctrl + Shift + T</td><td>Command + Shift + T</td></tr><tr><td align=\"left\">保存</td><td align=\"left\">Ctrl + S</td><td>Command + S</td></tr><tr><td align=\"left\">另存为/复制</td><td align=\"left\">Ctrl + Shift + S</td><td>Command + Shift + S</td></tr><tr><td align=\"left\">偏好</td><td align=\"left\">Ctrl + ，</td><td>Command + ，</td></tr><tr><td align=\"left\">关闭</td><td align=\"left\">Ctrl + W</td><td>Command + W</td></tr></tbody></table></div>\n<h3><a name=\"t4\"></a><a id=\"_29\"></a>编辑</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">新段落</td><td align=\"left\">Enter</td><td>Enter</td></tr><tr><td align=\"left\">新线</td><td align=\"left\">Shift + Enter</td><td>Shift + Enter</td></tr><tr><td align=\"left\">剪切</td><td align=\"left\">Ctrl + X</td><td>Command + X</td></tr><tr><td align=\"left\">复制</td><td align=\"left\">Ctrl + C</td><td>Command + C</td></tr><tr><td align=\"left\">粘贴</td><td align=\"left\">Ctrl + V</td><td>Command + V</td></tr><tr><td align=\"left\">复制为 Markdown</td><td align=\"left\">Ctrl + Shift + C</td><td>Command + Shift + C</td></tr><tr><td align=\"left\">粘贴为纯文本</td><td align=\"left\">Ctrl + Shift + V</td><td>Command + Shift + V</td></tr><tr><td align=\"left\">全选</td><td align=\"left\">Ctrl + A</td><td>Command + A</td></tr><tr><td align=\"left\">选择行/句子 <br>选择行（在表中）</td><td align=\"left\">Ctrl + L</td><td>Command + L</td></tr><tr><td align=\"left\">删除行（在表中）</td><td align=\"left\">Ctrl + Shift +退格键</td><td>Command + Shift + 退格键</td></tr><tr><td align=\"left\">选择样式范围<br>选择单元格（在表中）</td><td align=\"left\">Ctrl + E</td><td>Command + E</td></tr><tr><td align=\"left\">选择单词</td><td align=\"left\">Ctrl + D</td><td>Command + D</td></tr><tr><td align=\"left\">删除单词</td><td align=\"left\">Ctrl + Shift + D</td><td>Command + Shift + D</td></tr><tr><td align=\"left\">跳到顶部</td><td align=\"left\">Ctrl +Home</td><td>Command + ↑</td></tr><tr><td align=\"left\">跳至选择</td><td align=\"left\">Ctrl + J</td><td>Command + J</td></tr><tr><td align=\"left\">跳到底部</td><td align=\"left\">Ctrl + End</td><td>Command + ↓</td></tr><tr><td align=\"left\">查找</td><td align=\"left\">Ctrl + F</td><td>Command + F</td></tr><tr><td align=\"left\">查找下一个</td><td align=\"left\">F3 / Enter</td><td>Command + G / Enter</td></tr><tr><td align=\"left\">查找上一个</td><td align=\"left\">Shift + F3 / Shift + Enter</td><td>Command + Shift + G / Shift + Enter</td></tr><tr><td align=\"left\">替换</td><td align=\"left\">Ctrl + H</td><td>Command + H</td></tr></tbody></table></div>\n<h3><a name=\"t5\"></a><a id=\"_54\"></a>段落</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">标题 1 至 6</td><td align=\"left\">Ctrl + 1/2/3/4/5/6</td><td>Command + 1/2/3/4/5/6</td></tr><tr><td align=\"left\">段落</td><td align=\"left\">Ctrl + 0</td><td>Command + 0</td></tr><tr><td align=\"left\">增加标题级别</td><td align=\"left\">Ctrl + =</td><td>Command + =</td></tr><tr><td align=\"left\">降低标题级别</td><td align=\"left\">Ctrl ±</td><td>Command + -</td></tr><tr><td align=\"left\">表</td><td align=\"left\">Ctrl + T</td><td>Command + Option + T</td></tr><tr><td align=\"left\">代码围栏</td><td align=\"left\">Ctrl + Shift + K</td><td>Command + Option + C</td></tr><tr><td align=\"left\">数学块</td><td align=\"left\">Ctrl + Shift + M</td><td>Command + Option + B</td></tr><tr><td align=\"left\">引用</td><td align=\"left\">Ctrl + Shift + Q</td><td>Command + Option + Q</td></tr><tr><td align=\"left\">有序列表</td><td align=\"left\">Ctrl + Shift + [</td><td>Command + Option + O</td></tr><tr><td align=\"left\">无序列表</td><td align=\"left\">Ctrl + Shift +]</td><td>Command + Option + U</td></tr><tr><td align=\"left\">缩进</td><td align=\"left\">Ctrl + [ / Tab</td><td>Command + [ / Tab</td></tr><tr><td align=\"left\">突出</td><td align=\"left\">Ctrl +] / Shift + Tab</td><td>Command +] / Shift + Tab</td></tr></tbody></table></div>\n<h3><a name=\"t6\"></a><a id=\"_71\"></a>格式</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">加粗</td><td align=\"left\">Ctrl + B</td><td>Command + B</td></tr><tr><td align=\"left\">重点</td><td align=\"left\">Ctrl + I</td><td>Command + I</td></tr><tr><td align=\"left\">下划线</td><td align=\"left\">Ctrl + U</td><td>Command + U</td></tr><tr><td align=\"left\">代码</td><td align=\"left\">Ctrl + Shift + <code>| Command + Shift +</code></td><td></td></tr><tr><td align=\"left\">Strike</td><td align=\"left\">Alt + Shift + 5</td><td>Ctrl + Shift + `</td></tr><tr><td align=\"left\">超链接</td><td align=\"left\">Ctrl + K</td><td>Command + K</td></tr><tr><td align=\"left\">图片</td><td align=\"left\">Ctrl + Shift + I</td><td>Command + Control + I</td></tr><tr><td align=\"left\">清除格式</td><td align=\"left\">Ctrl + \\</td><td>Comand + \\</td></tr></tbody></table></div>\n<h3><a name=\"t7\"></a><a id=\"_84\"></a>查看</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">切换侧边栏</td><td align=\"left\">Ctrl + Shift + L</td><td>Command + Shift + L</td></tr><tr><td align=\"left\">大纲</td><td align=\"left\">Ctrl + Shift + 1</td><td>Command + Shift + 1</td></tr><tr><td align=\"left\">文章</td><td align=\"left\">Ctrl + Shift + 2</td><td>Command + Control + 2</td></tr><tr><td align=\"left\">文件树</td><td align=\"left\">Ctrl + Shift + 3</td><td>Command + Control + 3</td></tr><tr><td align=\"left\">源代码模式</td><td align=\"left\">Ctrl + /</td><td>Command + /</td></tr><tr><td align=\"left\">聚焦模式</td><td align=\"left\">F8</td><td>F8</td></tr><tr><td align=\"left\">打字机模式</td><td align=\"left\">F9</td><td>F9</td></tr><tr><td align=\"left\">切换全屏</td><td align=\"left\">F11</td><td>Command + Option + F</td></tr><tr><td align=\"left\">实际尺寸</td><td align=\"left\">Ctrl + Shift + 0</td><td><em>（不支持）</em></td></tr><tr><td align=\"left\">放大</td><td align=\"left\">Ctrl + Shift + =</td><td><em>（不支持）</em></td></tr><tr><td align=\"left\">缩小</td><td align=\"left\">Ctrl + Shift ±</td><td><em>（不支持）</em></td></tr><tr><td align=\"left\">在打开的文档之间切换</td><td align=\"left\">Ctrl + Tab</td><td>Command + `</td></tr><tr><td align=\"left\">切换开发工具</td><td align=\"left\">Ctrl + Shift + I</td><td>-</td></tr></tbody></table></div>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<h2><a name=\"t0\"></a><a id=\"_2\"></a>摘要</h2> \n<p>您可以使用快捷键快速插入或修改样式，或者执行 Typora 支持的其他操作。</p> \n<p>您可以在菜单栏中的每个菜单项的右侧找到快捷键。</p> \n<h2><a name=\"t1\"></a><a id=\"_8\"></a>常用快捷键</h2> \n<h3><a name=\"t2\"></a><a id=\"_10\"></a>自动完成</h3> \n<p>在macOS上，您可以按Esc键打开内联数学预览、自动完成表情符号等功能。</p> \n<h3><a name=\"t3\"></a><a id=\"_14\"></a>文件</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">新建</td><td align=\"left\">Ctrl + N</td><td>Command + N</td></tr><tr><td align=\"left\">新窗口</td><td align=\"left\">Ctrl + Shift + N</td><td>Command + Shift + N</td></tr><tr><td align=\"left\">新标签</td><td align=\"left\"><em>（不支持）</em></td><td>Command + T</td></tr><tr><td align=\"left\">打开</td><td align=\"left\">Ctrl + O</td><td>Command + O</td></tr><tr><td align=\"left\">快速打开</td><td align=\"left\">Ctrl + P</td><td>Command + Shift + O</td></tr><tr><td align=\"left\">重新打开已关闭文件</td><td align=\"left\">Ctrl + Shift + T</td><td>Command + Shift + T</td></tr><tr><td align=\"left\">保存</td><td align=\"left\">Ctrl + S</td><td>Command + S</td></tr><tr><td align=\"left\">另存为/复制</td><td align=\"left\">Ctrl + Shift + S</td><td>Command + Shift + S</td></tr><tr><td align=\"left\">偏好</td><td align=\"left\">Ctrl + ，</td><td>Command + ，</td></tr><tr><td align=\"left\">关闭</td><td align=\"left\">Ctrl + W</td><td>Command + W</td></tr></tbody></table></div>\n<h3><a name=\"t4\"></a><a id=\"_29\"></a>编辑</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">新段落</td><td align=\"left\">Enter</td><td>Enter</td></tr><tr><td align=\"left\">新线</td><td align=\"left\">Shift + Enter</td><td>Shift + Enter</td></tr><tr><td align=\"left\">剪切</td><td align=\"left\">Ctrl + X</td><td>Command + X</td></tr><tr><td align=\"left\">复制</td><td align=\"left\">Ctrl + C</td><td>Command + C</td></tr><tr><td align=\"left\">粘贴</td><td align=\"left\">Ctrl + V</td><td>Command + V</td></tr><tr><td align=\"left\">复制为 Markdown</td><td align=\"left\">Ctrl + Shift + C</td><td>Command + Shift + C</td></tr><tr><td align=\"left\">粘贴为纯文本</td><td align=\"left\">Ctrl + Shift + V</td><td>Command + Shift + V</td></tr><tr><td align=\"left\">全选</td><td align=\"left\">Ctrl + A</td><td>Command + A</td></tr><tr><td align=\"left\">选择行/句子 <br>选择行（在表中）</td><td align=\"left\">Ctrl + L</td><td>Command + L</td></tr><tr><td align=\"left\">删除行（在表中）</td><td align=\"left\">Ctrl + Shift +退格键</td><td>Command + Shift + 退格键</td></tr><tr><td align=\"left\">选择样式范围<br>选择单元格（在表中）</td><td align=\"left\">Ctrl + E</td><td>Command + E</td></tr><tr><td align=\"left\">选择单词</td><td align=\"left\">Ctrl + D</td><td>Command + D</td></tr><tr><td align=\"left\">删除单词</td><td align=\"left\">Ctrl + Shift + D</td><td>Command + Shift + D</td></tr><tr><td align=\"left\">跳到顶部</td><td align=\"left\">Ctrl +Home</td><td>Command + ↑</td></tr><tr><td align=\"left\">跳至选择</td><td align=\"left\">Ctrl + J</td><td>Command + J</td></tr><tr><td align=\"left\">跳到底部</td><td align=\"left\">Ctrl + End</td><td>Command + ↓</td></tr><tr><td align=\"left\">查找</td><td align=\"left\">Ctrl + F</td><td>Command + F</td></tr><tr><td align=\"left\">查找下一个</td><td align=\"left\">F3 / Enter</td><td>Command + G / Enter</td></tr><tr><td align=\"left\">查找上一个</td><td align=\"left\">Shift + F3 / Shift + Enter</td><td>Command + Shift + G / Shift + Enter</td></tr><tr><td align=\"left\">替换</td><td align=\"left\">Ctrl + H</td><td>Command + H</td></tr></tbody></table></div>\n<h3><a name=\"t5\"></a><a id=\"_54\"></a>段落</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">标题 1 至 6</td><td align=\"left\">Ctrl + 1/2/3/4/5/6</td><td>Command + 1/2/3/4/5/6</td></tr><tr><td align=\"left\">段落</td><td align=\"left\">Ctrl + 0</td><td>Command + 0</td></tr><tr><td align=\"left\">增加标题级别</td><td align=\"left\">Ctrl + =</td><td>Command + =</td></tr><tr><td align=\"left\">降低标题级别</td><td align=\"left\">Ctrl ±</td><td>Command + -</td></tr><tr><td align=\"left\">表</td><td align=\"left\">Ctrl + T</td><td>Command + Option + T</td></tr><tr><td align=\"left\">代码围栏</td><td align=\"left\">Ctrl + Shift + K</td><td>Command + Option + C</td></tr><tr><td align=\"left\">数学块</td><td align=\"left\">Ctrl + Shift + M</td><td>Command + Option + B</td></tr><tr><td align=\"left\">引用</td><td align=\"left\">Ctrl + Shift + Q</td><td>Command + Option + Q</td></tr><tr><td align=\"left\">有序列表</td><td align=\"left\">Ctrl + Shift + [</td><td>Command + Option + O</td></tr><tr><td align=\"left\">无序列表</td><td align=\"left\">Ctrl + Shift +]</td><td>Command + Option + U</td></tr><tr><td align=\"left\">缩进</td><td align=\"left\">Ctrl + [ / Tab</td><td>Command + [ / Tab</td></tr><tr><td align=\"left\">突出</td><td align=\"left\">Ctrl +] / Shift + Tab</td><td>Command +] / Shift + Tab</td></tr></tbody></table></div>\n<h3><a name=\"t6\"></a><a id=\"_71\"></a>格式</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">加粗</td><td align=\"left\">Ctrl + B</td><td>Command + B</td></tr><tr><td align=\"left\">重点</td><td align=\"left\">Ctrl + I</td><td>Command + I</td></tr><tr><td align=\"left\">下划线</td><td align=\"left\">Ctrl + U</td><td>Command + U</td></tr><tr><td align=\"left\">代码</td><td align=\"left\">Ctrl + Shift + <code>| Command + Shift +</code></td><td></td></tr><tr><td align=\"left\">Strike</td><td align=\"left\">Alt + Shift + 5</td><td>Ctrl + Shift + `</td></tr><tr><td align=\"left\">超链接</td><td align=\"left\">Ctrl + K</td><td>Command + K</td></tr><tr><td align=\"left\">图片</td><td align=\"left\">Ctrl + Shift + I</td><td>Command + Control + I</td></tr><tr><td align=\"left\">清除格式</td><td align=\"left\">Ctrl + \\</td><td>Comand + \\</td></tr></tbody></table></div>\n<h3><a name=\"t7\"></a><a id=\"_84\"></a>查看</h3> \n<div class=\"table-box\"><table><thead><tr><th align=\"left\">功能</th><th align=\"left\">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align=\"left\">切换侧边栏</td><td align=\"left\">Ctrl + Shift + L</td><td>Command + Shift + L</td></tr><tr><td align=\"left\">大纲</td><td align=\"left\">Ctrl + Shift + 1</td><td>Command + Shift + 1</td></tr><tr><td align=\"left\">文章</td><td align=\"left\">Ctrl + Shift + 2</td><td>Command + Control + 2</td></tr><tr><td align=\"left\">文件树</td><td align=\"left\">Ctrl + Shift + 3</td><td>Command + Control + 3</td></tr><tr><td align=\"left\">源代码模式</td><td align=\"left\">Ctrl + /</td><td>Command + /</td></tr><tr><td align=\"left\">聚焦模式</td><td align=\"left\">F8</td><td>F8</td></tr><tr><td align=\"left\">打字机模式</td><td align=\"left\">F9</td><td>F9</td></tr><tr><td align=\"left\">切换全屏</td><td align=\"left\">F11</td><td>Command + Option + F</td></tr><tr><td align=\"left\">实际尺寸</td><td align=\"left\">Ctrl + Shift + 0</td><td><em>（不支持）</em></td></tr><tr><td align=\"left\">放大</td><td align=\"left\">Ctrl + Shift + =</td><td><em>（不支持）</em></td></tr><tr><td align=\"left\">缩小</td><td align=\"left\">Ctrl + Shift ±</td><td><em>（不支持）</em></td></tr><tr><td align=\"left\">在打开的文档之间切换</td><td align=\"left\">Ctrl + Tab</td><td>Command + `</td></tr><tr><td align=\"left\">切换开发工具</td><td align=\"left\">Ctrl + Shift + I</td><td>-</td></tr></tbody></table></div>"},{"title":"从B站学习的Netty01","abbrlink":1051297182,"date":"2021-11-29T01:42:25.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n\n### Selector（选择器）\n\n### 基本介绍\n\n1. `Java` 的 `NIO`，用非阻塞的 `IO` 方式。可以用一个线程，处理多个的客户端连接，就会使用到 `Selector`（选择器）。\n2. `Selector` 能够检测多个注册的通道上是否有事件发生（注意：多个 `Channel` 以事件的方式可以注册到同一个 `Selector`），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求。\n3. 只有在连接/通道真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程。\n4. 避免了多线程之间的上下文切换导致的开销。\n\n### Selector 示意图和特点说明\n\n![img](http://typa.qingyun.run/img/0017.png)\n\n说明如下：\n\n1. `Netty` 的 `IO` 线程 `NioEventLoop` 聚合了 `Selector`（选择器，也叫多路复用器），可以同时并发处理成百上千个客户端连接。\n2. 当线程从某客户端 `Socket` 通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。\n3. 线程通常将非阻塞 `IO` 的空闲时间用于在其他通道上执行 `IO` 操作，所以单独的线程可以管理多个输入和输出通道。\n4. 由于读写操作都是非阻塞的，这就可以充分提升 `IO` 线程的运行效率，避免由于频繁 `I/O` 阻塞导致的线程挂起。\n5. 一个 `I/O` 线程可以并发处理 `N` 个客户端连接和读写操作，这从根本上解决了传统同步阻塞 `I/O` 一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。\n\n### Selector 类相关方法\n\n![img](http://typa.qingyun.run/img/0018.png)\n\n### 注意事项\n\n1. `NIO` 中的 `ServerSocketChannel` 功能类似 `ServerSocket`、`SocketChannel` 功能类似 `Socket`。\n\n2. ```\n   Selector\n   ```\n\n    相关方法说明\n\n   - `selector.select();` //阻塞\n   - `selector.select(1000);` //阻塞 1000 毫秒，在 1000 毫秒后返回\n   - `selector.wakeup();` //唤醒 selector\n   - `selector.selectNow();` //不阻塞，立马返还\n\n## NIO 非阻塞网络编程原理分析图\n\n`NIO` 非阻塞网络编程相关的（`Selector`、`SelectionKey`、`ServerScoketChannel` 和 `SocketChannel`）关系梳理图\n\n![img](http://typa.qingyun.run/img/0019.png)\n\n对上图的说明：\n\n1. 当客户端连接时，会通过 `ServerSocketChannel` 得到 `SocketChannel`。\n2. `Selector` 进行监听 `select` 方法，返回有事件发生的通道的个数。\n3. 将 `socketChannel` 注册到 `Selector` 上，`register(Selector sel, int ops)`，一个 `Selector` 上可以注册多个 `SocketChannel`。\n4. 注册后返回一个 `SelectionKey`，会和该 `Selector` 关联（集合）。\n5. 进一步得到各个 `SelectionKey`（有事件发生）。\n6. 在通过 `SelectionKey` 反向获取 `SocketChannel`，方法 `channel()`。\n7. 可以通过得到的 `channel`，完成业务处理。\n\n## NIO 非阻塞网络编程快速入门\n\n案例：\n\n1. 编写一个 `NIO` 入门案例，实现服务器端和客户端之间的数据简单通讯（非阻塞）\n2. 目的：理解 `NIO` 非阻塞网络编程机制\n\n```java\npackage edu.IO.query;\n\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/11/22 20:51\n */\npublic class NIOServer {\n    public static void main(String[] args) throws Exception{\n\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n\n        Selector selector = Selector.open();\n\n        serverSocketChannel.socket().bind(new InetSocketAddress(6666));\n\n        serverSocketChannel.configureBlocking(false);\n\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        while (true){\n            if (selector.select(1000) == 0){\n                System.out.println(\"服务器等待了1秒钟，无连接\");\n                continue;\n            }\n\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n\n            Iterator<SelectionKey> keyiterator = selectionKeys.iterator();\n\n            while (keyiterator.hasNext()){\n                SelectionKey key = keyiterator.next();\n                if (key.isAcceptable()){\n                    SocketChannel socketChannel = serverSocketChannel.accept();\n                    socketChannel.register(selector,SelectionKey.OP_READ, ByteBuffer.allocate(1024));\n                }\n                if (key.isConnectable()){\n                    SocketChannel channel = (SocketChannel) key.channel();\n                    ByteBuffer buffer = (ByteBuffer) key.attachment();\n                    channel.read(buffer);\n                    System.out.println(\"form 客户端\" + new String(buffer.array()));\n                }\n                keyiterator.remove();\n            }\n\n\n        }\n    }\n}\n\n```\n\n> pos1：\n>\n> 1、对操作系统有一定了解的同学，就会大概知道这里监听的是一个Accept通道。这个通道的\n> 作用就是监听，实际建立连接了还会有一个通道。\n> 2、简单说一下为什么。因为客户端发请求的时候，服务器这边是肯定要先有一个监听通道，\n> 监听某个端口是否有客户端要建立链接，如果有客户端想要建立链接，那么会再创建一个和\n> 客户端真正通信的通道。\n> 3、如果有其它客户端还想要建立链接，这个Accept监听端口监听到了，就会再创建几个真正\n> 的通信通道。\n> 4、也就是Server的一个端口可以建立多个TCP连接，因为IP层协议通过\n> 目标地址+端口+源地址+源端口四个信息识别一个上下文\n>\n> **顺便插一句嘴：因为学netty的过程中，发现计算机网络和操作系统蛮重要的，所以接下来会写几篇这方面的文章**\n\n```java\npackage edu.IO.query;\n\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SocketChannel;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/11/22 21:08\n */\npublic class NIOClient {\n    public static void main(String[] args) throws Exception{\n\n        SocketChannel socketChannel = SocketChannel.open();\n        socketChannel.configureBlocking(false);\n\n        InetSocketAddress inetSocketAddress = new InetSocketAddress(6666);\n\n        if (!socketChannel.connect(inetSocketAddress)){\n            while (!socketChannel.finishConnect()){\n                System.out.println(\"连接服务器需要时间，客户端不会阻塞，可以做其他工作\");\n            }\n        }\n        String str = \"hello ,lingYun\";\n        ByteBuffer byteBuffer = ByteBuffer.wrap(str.getBytes());\n        socketChannel.write(byteBuffer);\n        byteBuffer.clear();\n        socketChannel.read(byteBuffer);\n\n        System.in.read();\n    }\n}\n\n```\n\n### SelectionKey\n\n1. ```\n   SelectionKey\n   ```\n\n   ，表示 \n\n   ```\n   Selector\n   ```\n\n    和网络通道的注册关系，共四种：\n\n   - `int OP_ACCEPT`：有新的网络连接可以 `accept`，值为 `16`\n   - `int OP_CONNECT`：代表连接已经建立，值为 `8`\n   - `int OP_READ`：代表读操作，值为 `1`\n   - `int OP_WRITE`：代表写操作，值为 `4`\n\n源码中：\n\n```java\npublic static final int OP_READ = 1 << 0;\npublic static final int OP_WRITE = 1 << 2;\npublic static final int OP_CONNECT = 1 << 3;\npublic static final int OP_ACCEPT = 1 << 4;\n```\n\n`SelectionKey` 相关方法\n\n![img](http://typa.qingyun.run/img/0020.png)\n\n### ServerSocketChannel\n\n1. `ServerSocketChannel` 在服务器端监听新的客户端 `Socket` 连接，负责监听，不负责实际的读写操作\n2. 相关方法如下\n\n![img](http://typa.qingyun.run/img/0021.png)\n\n### SocketChannel\n\n1. `SocketChannel`，网络 `IO` 通道，**具体负责进行读写操作**。`NIO` 把缓冲区的数据写入通道，或者把通道里的数据读到缓冲区。\n2. 相关方法如下\n\n![img](http://typa.qingyun.run/img/0022.png)\n\n","source":"_posts/从B站学习的Netty01.md","raw":"---\ntitle: 从B站学习的Netty01\nabbrlink: 1051297182\ndate: 2021-11-29 09:42:25\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n\n### Selector（选择器）\n\n### 基本介绍\n\n1. `Java` 的 `NIO`，用非阻塞的 `IO` 方式。可以用一个线程，处理多个的客户端连接，就会使用到 `Selector`（选择器）。\n2. `Selector` 能够检测多个注册的通道上是否有事件发生（注意：多个 `Channel` 以事件的方式可以注册到同一个 `Selector`），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求。\n3. 只有在连接/通道真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程。\n4. 避免了多线程之间的上下文切换导致的开销。\n\n### Selector 示意图和特点说明\n\n![img](http://typa.qingyun.run/img/0017.png)\n\n说明如下：\n\n1. `Netty` 的 `IO` 线程 `NioEventLoop` 聚合了 `Selector`（选择器，也叫多路复用器），可以同时并发处理成百上千个客户端连接。\n2. 当线程从某客户端 `Socket` 通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。\n3. 线程通常将非阻塞 `IO` 的空闲时间用于在其他通道上执行 `IO` 操作，所以单独的线程可以管理多个输入和输出通道。\n4. 由于读写操作都是非阻塞的，这就可以充分提升 `IO` 线程的运行效率，避免由于频繁 `I/O` 阻塞导致的线程挂起。\n5. 一个 `I/O` 线程可以并发处理 `N` 个客户端连接和读写操作，这从根本上解决了传统同步阻塞 `I/O` 一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。\n\n### Selector 类相关方法\n\n![img](http://typa.qingyun.run/img/0018.png)\n\n### 注意事项\n\n1. `NIO` 中的 `ServerSocketChannel` 功能类似 `ServerSocket`、`SocketChannel` 功能类似 `Socket`。\n\n2. ```\n   Selector\n   ```\n\n    相关方法说明\n\n   - `selector.select();` //阻塞\n   - `selector.select(1000);` //阻塞 1000 毫秒，在 1000 毫秒后返回\n   - `selector.wakeup();` //唤醒 selector\n   - `selector.selectNow();` //不阻塞，立马返还\n\n## NIO 非阻塞网络编程原理分析图\n\n`NIO` 非阻塞网络编程相关的（`Selector`、`SelectionKey`、`ServerScoketChannel` 和 `SocketChannel`）关系梳理图\n\n![img](http://typa.qingyun.run/img/0019.png)\n\n对上图的说明：\n\n1. 当客户端连接时，会通过 `ServerSocketChannel` 得到 `SocketChannel`。\n2. `Selector` 进行监听 `select` 方法，返回有事件发生的通道的个数。\n3. 将 `socketChannel` 注册到 `Selector` 上，`register(Selector sel, int ops)`，一个 `Selector` 上可以注册多个 `SocketChannel`。\n4. 注册后返回一个 `SelectionKey`，会和该 `Selector` 关联（集合）。\n5. 进一步得到各个 `SelectionKey`（有事件发生）。\n6. 在通过 `SelectionKey` 反向获取 `SocketChannel`，方法 `channel()`。\n7. 可以通过得到的 `channel`，完成业务处理。\n\n## NIO 非阻塞网络编程快速入门\n\n案例：\n\n1. 编写一个 `NIO` 入门案例，实现服务器端和客户端之间的数据简单通讯（非阻塞）\n2. 目的：理解 `NIO` 非阻塞网络编程机制\n\n```java\npackage edu.IO.query;\n\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Set;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/11/22 20:51\n */\npublic class NIOServer {\n    public static void main(String[] args) throws Exception{\n\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n\n        Selector selector = Selector.open();\n\n        serverSocketChannel.socket().bind(new InetSocketAddress(6666));\n\n        serverSocketChannel.configureBlocking(false);\n\n        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);\n\n        while (true){\n            if (selector.select(1000) == 0){\n                System.out.println(\"服务器等待了1秒钟，无连接\");\n                continue;\n            }\n\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n\n            Iterator<SelectionKey> keyiterator = selectionKeys.iterator();\n\n            while (keyiterator.hasNext()){\n                SelectionKey key = keyiterator.next();\n                if (key.isAcceptable()){\n                    SocketChannel socketChannel = serverSocketChannel.accept();\n                    socketChannel.register(selector,SelectionKey.OP_READ, ByteBuffer.allocate(1024));\n                }\n                if (key.isConnectable()){\n                    SocketChannel channel = (SocketChannel) key.channel();\n                    ByteBuffer buffer = (ByteBuffer) key.attachment();\n                    channel.read(buffer);\n                    System.out.println(\"form 客户端\" + new String(buffer.array()));\n                }\n                keyiterator.remove();\n            }\n\n\n        }\n    }\n}\n\n```\n\n> pos1：\n>\n> 1、对操作系统有一定了解的同学，就会大概知道这里监听的是一个Accept通道。这个通道的\n> 作用就是监听，实际建立连接了还会有一个通道。\n> 2、简单说一下为什么。因为客户端发请求的时候，服务器这边是肯定要先有一个监听通道，\n> 监听某个端口是否有客户端要建立链接，如果有客户端想要建立链接，那么会再创建一个和\n> 客户端真正通信的通道。\n> 3、如果有其它客户端还想要建立链接，这个Accept监听端口监听到了，就会再创建几个真正\n> 的通信通道。\n> 4、也就是Server的一个端口可以建立多个TCP连接，因为IP层协议通过\n> 目标地址+端口+源地址+源端口四个信息识别一个上下文\n>\n> **顺便插一句嘴：因为学netty的过程中，发现计算机网络和操作系统蛮重要的，所以接下来会写几篇这方面的文章**\n\n```java\npackage edu.IO.query;\n\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SocketChannel;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/11/22 21:08\n */\npublic class NIOClient {\n    public static void main(String[] args) throws Exception{\n\n        SocketChannel socketChannel = SocketChannel.open();\n        socketChannel.configureBlocking(false);\n\n        InetSocketAddress inetSocketAddress = new InetSocketAddress(6666);\n\n        if (!socketChannel.connect(inetSocketAddress)){\n            while (!socketChannel.finishConnect()){\n                System.out.println(\"连接服务器需要时间，客户端不会阻塞，可以做其他工作\");\n            }\n        }\n        String str = \"hello ,lingYun\";\n        ByteBuffer byteBuffer = ByteBuffer.wrap(str.getBytes());\n        socketChannel.write(byteBuffer);\n        byteBuffer.clear();\n        socketChannel.read(byteBuffer);\n\n        System.in.read();\n    }\n}\n\n```\n\n### SelectionKey\n\n1. ```\n   SelectionKey\n   ```\n\n   ，表示 \n\n   ```\n   Selector\n   ```\n\n    和网络通道的注册关系，共四种：\n\n   - `int OP_ACCEPT`：有新的网络连接可以 `accept`，值为 `16`\n   - `int OP_CONNECT`：代表连接已经建立，值为 `8`\n   - `int OP_READ`：代表读操作，值为 `1`\n   - `int OP_WRITE`：代表写操作，值为 `4`\n\n源码中：\n\n```java\npublic static final int OP_READ = 1 << 0;\npublic static final int OP_WRITE = 1 << 2;\npublic static final int OP_CONNECT = 1 << 3;\npublic static final int OP_ACCEPT = 1 << 4;\n```\n\n`SelectionKey` 相关方法\n\n![img](http://typa.qingyun.run/img/0020.png)\n\n### ServerSocketChannel\n\n1. `ServerSocketChannel` 在服务器端监听新的客户端 `Socket` 连接，负责监听，不负责实际的读写操作\n2. 相关方法如下\n\n![img](http://typa.qingyun.run/img/0021.png)\n\n### SocketChannel\n\n1. `SocketChannel`，网络 `IO` 通道，**具体负责进行读写操作**。`NIO` 把缓冲区的数据写入通道，或者把通道里的数据读到缓冲区。\n2. 相关方法如下\n\n![img](http://typa.qingyun.run/img/0022.png)\n\n","slug":"从B站学习的Netty01","published":1,"updated":"2021-11-29T02:02:55.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rg001eo4vb9lq3anqp","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h3 id=\"Selector（选择器）\">Selector（选择器）</h3>\n<h3 id=\"基本介绍\">基本介绍</h3>\n<ol>\n<li><code>Java</code> 的 <code>NIO</code>，用非阻塞的 <code>IO</code> 方式。可以用一个线程，处理多个的客户端连接，就会使用到 <code>Selector</code>（选择器）。</li>\n<li><code>Selector</code> 能够检测多个注册的通道上是否有事件发生（注意：多个 <code>Channel</code> 以事件的方式可以注册到同一个 <code>Selector</code>），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求。</li>\n<li>只有在连接/通道真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程。</li>\n<li>避免了多线程之间的上下文切换导致的开销。</li>\n</ol>\n<h3 id=\"Selector-示意图和特点说明\">Selector 示意图和特点说明</h3>\n<p><img src=\"http://typa.qingyun.run/img/0017.png\" alt=\"img\"></p>\n<p>说明如下：</p>\n<ol>\n<li><code>Netty</code> 的 <code>IO</code> 线程 <code>NioEventLoop</code> 聚合了 <code>Selector</code>（选择器，也叫多路复用器），可以同时并发处理成百上千个客户端连接。</li>\n<li>当线程从某客户端 <code>Socket</code> 通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。</li>\n<li>线程通常将非阻塞 <code>IO</code> 的空闲时间用于在其他通道上执行 <code>IO</code> 操作，所以单独的线程可以管理多个输入和输出通道。</li>\n<li>由于读写操作都是非阻塞的，这就可以充分提升 <code>IO</code> 线程的运行效率，避免由于频繁 <code>I/O</code> 阻塞导致的线程挂起。</li>\n<li>一个 <code>I/O</code> 线程可以并发处理 <code>N</code> 个客户端连接和读写操作，这从根本上解决了传统同步阻塞 <code>I/O</code> 一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。</li>\n</ol>\n<h3 id=\"Selector-类相关方法\">Selector 类相关方法</h3>\n<p><img src=\"http://typa.qingyun.run/img/0018.png\" alt=\"img\"></p>\n<h3 id=\"注意事项\">注意事项</h3>\n<ol>\n<li>\n<p><code>NIO</code> 中的 <code>ServerSocketChannel</code> 功能类似 <code>ServerSocket</code>、<code>SocketChannel</code> 功能类似 <code>Socket</code>。</p>\n</li>\n<li>\n<pre><code>Selector\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    相关方法说明</span><br><span class=\"line\"></span><br><span class=\"line\">   - `selector.select();` //阻塞</span><br><span class=\"line\">   - `selector.select(1000);` //阻塞 1000 毫秒，在 1000 毫秒后返回</span><br><span class=\"line\">   - `selector.wakeup();` //唤醒 selector</span><br><span class=\"line\">   - `selector.selectNow();` //不阻塞，立马返还</span><br><span class=\"line\"></span><br><span class=\"line\">## NIO 非阻塞网络编程原理分析图</span><br><span class=\"line\"></span><br><span class=\"line\">`NIO` 非阻塞网络编程相关的（`Selector`、`SelectionKey`、`ServerScoketChannel` 和 `SocketChannel`）关系梳理图</span><br><span class=\"line\"></span><br><span class=\"line\">![img](http://typa.qingyun.run/img/0019.png)</span><br><span class=\"line\"></span><br><span class=\"line\">对上图的说明：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 当客户端连接时，会通过 `ServerSocketChannel` 得到 `SocketChannel`。</span><br><span class=\"line\">2. `Selector` 进行监听 `select` 方法，返回有事件发生的通道的个数。</span><br><span class=\"line\">3. 将 `socketChannel` 注册到 `Selector` 上，`register(Selector sel, int ops)`，一个 `Selector` 上可以注册多个 `SocketChannel`。</span><br><span class=\"line\">4. 注册后返回一个 `SelectionKey`，会和该 `Selector` 关联（集合）。</span><br><span class=\"line\">5. 进一步得到各个 `SelectionKey`（有事件发生）。</span><br><span class=\"line\">6. 在通过 `SelectionKey` 反向获取 `SocketChannel`，方法 `channel()`。</span><br><span class=\"line\">7. 可以通过得到的 `channel`，完成业务处理。</span><br><span class=\"line\"></span><br><span class=\"line\">## NIO 非阻塞网络编程快速入门</span><br><span class=\"line\"></span><br><span class=\"line\">案例：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 编写一个 `NIO` 入门案例，实现服务器端和客户端之间的数据简单通讯（非阻塞）</span><br><span class=\"line\">2. 目的：理解 `NIO` 非阻塞网络编程机制</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">package edu.IO.query;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.net.InetSocketAddress;</span><br><span class=\"line\">import java.nio.ByteBuffer;</span><br><span class=\"line\">import java.nio.channels.SelectionKey;</span><br><span class=\"line\">import java.nio.channels.Selector;</span><br><span class=\"line\">import java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\">import java.nio.channels.SocketChannel;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\">import java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author qingyun</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @date 2021/11/22 20:51</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NIOServer &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">        Selector selector = Selector.open();</span><br><span class=\"line\"></span><br><span class=\"line\">        serverSocketChannel.socket().bind(new InetSocketAddress(6666));</span><br><span class=\"line\"></span><br><span class=\"line\">        serverSocketChannel.configureBlocking(false);</span><br><span class=\"line\"></span><br><span class=\"line\">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\"></span><br><span class=\"line\">        while (true)&#123;</span><br><span class=\"line\">            if (selector.select(1000) == 0)&#123;</span><br><span class=\"line\">                System.out.println(&quot;服务器等待了1秒钟，无连接&quot;);</span><br><span class=\"line\">                continue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class=\"line\"></span><br><span class=\"line\">            Iterator&lt;SelectionKey&gt; keyiterator = selectionKeys.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">            while (keyiterator.hasNext())&#123;</span><br><span class=\"line\">                SelectionKey key = keyiterator.next();</span><br><span class=\"line\">                if (key.isAcceptable())&#123;</span><br><span class=\"line\">                    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class=\"line\">                    socketChannel.register(selector,SelectionKey.OP_READ, ByteBuffer.allocate(1024));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (key.isConnectable())&#123;</span><br><span class=\"line\">                    SocketChannel channel = (SocketChannel) key.channel();</span><br><span class=\"line\">                    ByteBuffer buffer = (ByteBuffer) key.attachment();</span><br><span class=\"line\">                    channel.read(buffer);</span><br><span class=\"line\">                    System.out.println(&quot;form 客户端&quot; + new String(buffer.array()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                keyiterator.remove();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>pos1：</p>\n<p>1、对操作系统有一定了解的同学，就会大概知道这里监听的是一个Accept通道。这个通道的<br>\n作用就是监听，实际建立连接了还会有一个通道。<br>\n2、简单说一下为什么。因为客户端发请求的时候，服务器这边是肯定要先有一个监听通道，<br>\n监听某个端口是否有客户端要建立链接，如果有客户端想要建立链接，那么会再创建一个和<br>\n客户端真正通信的通道。<br>\n3、如果有其它客户端还想要建立链接，这个Accept监听端口监听到了，就会再创建几个真正<br>\n的通信通道。<br>\n4、也就是Server的一个端口可以建立多个TCP连接，因为IP层协议通过<br>\n目标地址+端口+源地址+源端口四个信息识别一个上下文</p>\n<p><strong>顺便插一句嘴：因为学netty的过程中，发现计算机网络和操作系统蛮重要的，所以接下来会写几篇这方面的文章</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.query;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/11/22 21:08</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NIOClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class=\"line\">        socketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        InetSocketAddress inetSocketAddress = <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">6666</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!socketChannel.connect(inetSocketAddress))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!socketChannel.finishConnect())&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;连接服务器需要时间，客户端不会阻塞，可以做其他工作&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String str = <span class=\"string\">&quot;hello ,lingYun&quot;</span>;</span><br><span class=\"line\">        ByteBuffer byteBuffer = ByteBuffer.wrap(str.getBytes());</span><br><span class=\"line\">        socketChannel.write(byteBuffer);</span><br><span class=\"line\">        byteBuffer.clear();</span><br><span class=\"line\">        socketChannel.read(byteBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.in.read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"SelectionKey\">SelectionKey</h3>\n<ol>\n<li>\n<pre><code>SelectionKey\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">，表示 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nSelector\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    和网络通道的注册关系，共四种：</span><br><span class=\"line\"></span><br><span class=\"line\">   - `int OP_ACCEPT`：有新的网络连接可以 `accept`，值为 `16`</span><br><span class=\"line\">   - `int OP_CONNECT`：代表连接已经建立，值为 `8`</span><br><span class=\"line\">   - `int OP_READ`：代表读操作，值为 `1`</span><br><span class=\"line\">   - `int OP_WRITE`：代表写操作，值为 `4`</span><br><span class=\"line\"></span><br><span class=\"line\">源码中：</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public static final int OP_READ = 1 &lt;&lt; 0;</span><br><span class=\"line\">public static final int OP_WRITE = 1 &lt;&lt; 2;</span><br><span class=\"line\">public static final int OP_CONNECT = 1 &lt;&lt; 3;</span><br><span class=\"line\">public static final int OP_ACCEPT = 1 &lt;&lt; 4;</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ol>\n<p><code>SelectionKey</code> 相关方法</p>\n<p><img src=\"http://typa.qingyun.run/img/0020.png\" alt=\"img\"></p>\n<h3 id=\"ServerSocketChannel\">ServerSocketChannel</h3>\n<ol>\n<li><code>ServerSocketChannel</code> 在服务器端监听新的客户端 <code>Socket</code> 连接，负责监听，不负责实际的读写操作</li>\n<li>相关方法如下</li>\n</ol>\n<p><img src=\"http://typa.qingyun.run/img/0021.png\" alt=\"img\"></p>\n<h3 id=\"SocketChannel\">SocketChannel</h3>\n<ol>\n<li><code>SocketChannel</code>，网络 <code>IO</code> 通道，<strong>具体负责进行读写操作</strong>。<code>NIO</code> 把缓冲区的数据写入通道，或者把通道里的数据读到缓冲区。</li>\n<li>相关方法如下</li>\n</ol>\n<p><img src=\"http://typa.qingyun.run/img/0022.png\" alt=\"img\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h3 id=\"Selector（选择器）\">Selector（选择器）</h3>\n<h3 id=\"基本介绍\">基本介绍</h3>\n<ol>\n<li><code>Java</code> 的 <code>NIO</code>，用非阻塞的 <code>IO</code> 方式。可以用一个线程，处理多个的客户端连接，就会使用到 <code>Selector</code>（选择器）。</li>\n<li><code>Selector</code> 能够检测多个注册的通道上是否有事件发生（注意：多个 <code>Channel</code> 以事件的方式可以注册到同一个 <code>Selector</code>），如果有事件发生，便获取事件然后针对每个事件进行相应的处理。这样就可以只用一个单线程去管理多个通道，也就是管理多个连接和请求。</li>\n<li>只有在连接/通道真正有读写事件发生时，才会进行读写，就大大地减少了系统开销，并且不必为每个连接都创建一个线程，不用去维护多个线程。</li>\n<li>避免了多线程之间的上下文切换导致的开销。</li>\n</ol>\n<h3 id=\"Selector-示意图和特点说明\">Selector 示意图和特点说明</h3>\n<p><img src=\"http://typa.qingyun.run/img/0017.png\" alt=\"img\"></p>\n<p>说明如下：</p>\n<ol>\n<li><code>Netty</code> 的 <code>IO</code> 线程 <code>NioEventLoop</code> 聚合了 <code>Selector</code>（选择器，也叫多路复用器），可以同时并发处理成百上千个客户端连接。</li>\n<li>当线程从某客户端 <code>Socket</code> 通道进行读写数据时，若没有数据可用时，该线程可以进行其他任务。</li>\n<li>线程通常将非阻塞 <code>IO</code> 的空闲时间用于在其他通道上执行 <code>IO</code> 操作，所以单独的线程可以管理多个输入和输出通道。</li>\n<li>由于读写操作都是非阻塞的，这就可以充分提升 <code>IO</code> 线程的运行效率，避免由于频繁 <code>I/O</code> 阻塞导致的线程挂起。</li>\n<li>一个 <code>I/O</code> 线程可以并发处理 <code>N</code> 个客户端连接和读写操作，这从根本上解决了传统同步阻塞 <code>I/O</code> 一连接一线程模型，架构的性能、弹性伸缩能力和可靠性都得到了极大的提升。</li>\n</ol>\n<h3 id=\"Selector-类相关方法\">Selector 类相关方法</h3>\n<p><img src=\"http://typa.qingyun.run/img/0018.png\" alt=\"img\"></p>\n<h3 id=\"注意事项\">注意事项</h3>\n<ol>\n<li>\n<p><code>NIO</code> 中的 <code>ServerSocketChannel</code> 功能类似 <code>ServerSocket</code>、<code>SocketChannel</code> 功能类似 <code>Socket</code>。</p>\n</li>\n<li>\n<pre><code>Selector\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    相关方法说明</span><br><span class=\"line\"></span><br><span class=\"line\">   - `selector.select();` //阻塞</span><br><span class=\"line\">   - `selector.select(1000);` //阻塞 1000 毫秒，在 1000 毫秒后返回</span><br><span class=\"line\">   - `selector.wakeup();` //唤醒 selector</span><br><span class=\"line\">   - `selector.selectNow();` //不阻塞，立马返还</span><br><span class=\"line\"></span><br><span class=\"line\">## NIO 非阻塞网络编程原理分析图</span><br><span class=\"line\"></span><br><span class=\"line\">`NIO` 非阻塞网络编程相关的（`Selector`、`SelectionKey`、`ServerScoketChannel` 和 `SocketChannel`）关系梳理图</span><br><span class=\"line\"></span><br><span class=\"line\">![img](http://typa.qingyun.run/img/0019.png)</span><br><span class=\"line\"></span><br><span class=\"line\">对上图的说明：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 当客户端连接时，会通过 `ServerSocketChannel` 得到 `SocketChannel`。</span><br><span class=\"line\">2. `Selector` 进行监听 `select` 方法，返回有事件发生的通道的个数。</span><br><span class=\"line\">3. 将 `socketChannel` 注册到 `Selector` 上，`register(Selector sel, int ops)`，一个 `Selector` 上可以注册多个 `SocketChannel`。</span><br><span class=\"line\">4. 注册后返回一个 `SelectionKey`，会和该 `Selector` 关联（集合）。</span><br><span class=\"line\">5. 进一步得到各个 `SelectionKey`（有事件发生）。</span><br><span class=\"line\">6. 在通过 `SelectionKey` 反向获取 `SocketChannel`，方法 `channel()`。</span><br><span class=\"line\">7. 可以通过得到的 `channel`，完成业务处理。</span><br><span class=\"line\"></span><br><span class=\"line\">## NIO 非阻塞网络编程快速入门</span><br><span class=\"line\"></span><br><span class=\"line\">案例：</span><br><span class=\"line\"></span><br><span class=\"line\">1. 编写一个 `NIO` 入门案例，实现服务器端和客户端之间的数据简单通讯（非阻塞）</span><br><span class=\"line\">2. 目的：理解 `NIO` 非阻塞网络编程机制</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">package edu.IO.query;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.net.InetSocketAddress;</span><br><span class=\"line\">import java.nio.ByteBuffer;</span><br><span class=\"line\">import java.nio.channels.SelectionKey;</span><br><span class=\"line\">import java.nio.channels.Selector;</span><br><span class=\"line\">import java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\">import java.nio.channels.SocketChannel;</span><br><span class=\"line\">import java.util.Iterator;</span><br><span class=\"line\">import java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * @author qingyun</span><br><span class=\"line\"> * @version 1.0</span><br><span class=\"line\"> * @date 2021/11/22 20:51</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class NIOServer &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\"></span><br><span class=\"line\">        Selector selector = Selector.open();</span><br><span class=\"line\"></span><br><span class=\"line\">        serverSocketChannel.socket().bind(new InetSocketAddress(6666));</span><br><span class=\"line\"></span><br><span class=\"line\">        serverSocketChannel.configureBlocking(false);</span><br><span class=\"line\"></span><br><span class=\"line\">        serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\"></span><br><span class=\"line\">        while (true)&#123;</span><br><span class=\"line\">            if (selector.select(1000) == 0)&#123;</span><br><span class=\"line\">                System.out.println(&quot;服务器等待了1秒钟，无连接&quot;);</span><br><span class=\"line\">                continue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class=\"line\"></span><br><span class=\"line\">            Iterator&lt;SelectionKey&gt; keyiterator = selectionKeys.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">            while (keyiterator.hasNext())&#123;</span><br><span class=\"line\">                SelectionKey key = keyiterator.next();</span><br><span class=\"line\">                if (key.isAcceptable())&#123;</span><br><span class=\"line\">                    SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class=\"line\">                    socketChannel.register(selector,SelectionKey.OP_READ, ByteBuffer.allocate(1024));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                if (key.isConnectable())&#123;</span><br><span class=\"line\">                    SocketChannel channel = (SocketChannel) key.channel();</span><br><span class=\"line\">                    ByteBuffer buffer = (ByteBuffer) key.attachment();</span><br><span class=\"line\">                    channel.read(buffer);</span><br><span class=\"line\">                    System.out.println(&quot;form 客户端&quot; + new String(buffer.array()));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                keyiterator.remove();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p>pos1：</p>\n<p>1、对操作系统有一定了解的同学，就会大概知道这里监听的是一个Accept通道。这个通道的<br>\n作用就是监听，实际建立连接了还会有一个通道。<br>\n2、简单说一下为什么。因为客户端发请求的时候，服务器这边是肯定要先有一个监听通道，<br>\n监听某个端口是否有客户端要建立链接，如果有客户端想要建立链接，那么会再创建一个和<br>\n客户端真正通信的通道。<br>\n3、如果有其它客户端还想要建立链接，这个Accept监听端口监听到了，就会再创建几个真正<br>\n的通信通道。<br>\n4、也就是Server的一个端口可以建立多个TCP连接，因为IP层协议通过<br>\n目标地址+端口+源地址+源端口四个信息识别一个上下文</p>\n<p><strong>顺便插一句嘴：因为学netty的过程中，发现计算机网络和操作系统蛮重要的，所以接下来会写几篇这方面的文章</strong></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.query;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/11/22 21:08</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NIOClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class=\"line\">        socketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        InetSocketAddress inetSocketAddress = <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">6666</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!socketChannel.connect(inetSocketAddress))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (!socketChannel.finishConnect())&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;连接服务器需要时间，客户端不会阻塞，可以做其他工作&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String str = <span class=\"string\">&quot;hello ,lingYun&quot;</span>;</span><br><span class=\"line\">        ByteBuffer byteBuffer = ByteBuffer.wrap(str.getBytes());</span><br><span class=\"line\">        socketChannel.write(byteBuffer);</span><br><span class=\"line\">        byteBuffer.clear();</span><br><span class=\"line\">        socketChannel.read(byteBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.in.read();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"SelectionKey\">SelectionKey</h3>\n<ol>\n<li>\n<pre><code>SelectionKey\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">，表示 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nSelector\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    和网络通道的注册关系，共四种：</span><br><span class=\"line\"></span><br><span class=\"line\">   - `int OP_ACCEPT`：有新的网络连接可以 `accept`，值为 `16`</span><br><span class=\"line\">   - `int OP_CONNECT`：代表连接已经建立，值为 `8`</span><br><span class=\"line\">   - `int OP_READ`：代表读操作，值为 `1`</span><br><span class=\"line\">   - `int OP_WRITE`：代表写操作，值为 `4`</span><br><span class=\"line\"></span><br><span class=\"line\">源码中：</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public static final int OP_READ = 1 &lt;&lt; 0;</span><br><span class=\"line\">public static final int OP_WRITE = 1 &lt;&lt; 2;</span><br><span class=\"line\">public static final int OP_CONNECT = 1 &lt;&lt; 3;</span><br><span class=\"line\">public static final int OP_ACCEPT = 1 &lt;&lt; 4;</span><br></pre></td></tr></table></figure>\n\n</code></pre>\n</li>\n</ol>\n<p><code>SelectionKey</code> 相关方法</p>\n<p><img src=\"http://typa.qingyun.run/img/0020.png\" alt=\"img\"></p>\n<h3 id=\"ServerSocketChannel\">ServerSocketChannel</h3>\n<ol>\n<li><code>ServerSocketChannel</code> 在服务器端监听新的客户端 <code>Socket</code> 连接，负责监听，不负责实际的读写操作</li>\n<li>相关方法如下</li>\n</ol>\n<p><img src=\"http://typa.qingyun.run/img/0021.png\" alt=\"img\"></p>\n<h3 id=\"SocketChannel\">SocketChannel</h3>\n<ol>\n<li><code>SocketChannel</code>，网络 <code>IO</code> 通道，<strong>具体负责进行读写操作</strong>。<code>NIO</code> 把缓冲区的数据写入通道，或者把通道里的数据读到缓冲区。</li>\n<li>相关方法如下</li>\n</ol>\n<p><img src=\"http://typa.qingyun.run/img/0022.png\" alt=\"img\"></p>\n"},{"title":"从B站学习的Netty02","abbrlink":2812335140,"date":"2021-11-29T02:03:35.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n## NIO网络编程应用实例 - 群聊系统\n\nhttps://imlql.cn/post/3f9283e7.html\n\n实例要求：\n\n1. 编写一个 `NIO` 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞）\n2. 实现多人群聊\n3. 服务器端：可以监测用户上线，离线，并实现消息转发功能\n4. 客户端：通过 `Channel` 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息（有服务器转发得到）\n5. 目的：进一步理解 `NIO` 非阻塞网络编程机制\n6. 示意图分析和代码\n\n![img](http://typa.qingyun.run/img/0023.png)\n\n```java\npackage edu.IO.Group;\n// 服务端：\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.Channel;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Scanner;\n\npublic class GroupChatServer {\n\n    //定义属性\n    private Selector selector;\n    private ServerSocketChannel listenChannel;\n\n    private static final int PORT = 6667;\n\n    //构造器\n    //初始化工作\n    public GroupChatServer() {\n        try {\n            //得到选择器\n            selector = Selector.open();\n            //ServerSocketChannel\n            listenChannel = ServerSocketChannel.open();\n            //绑定端口\n            listenChannel.socket().bind(new InetSocketAddress(PORT));\n            //设置非阻塞模式\n            listenChannel.configureBlocking(false);\n            //将该 listenChannel 注册到 selector\n            listenChannel.register(selector, SelectionKey.OP_ACCEPT);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void listen() {\n        try {\n            //循环处理\n            while (true) {\n                int count = selector.select();\n                if (count > 0) { //有事件处理\n                    // 遍历得到 selectionKey 集合\n                    Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();\n                    while (iterator.hasNext()) {\n                        //取出 selectionkey\n                        SelectionKey key = iterator.next();\n                        //监听到 accept\n                        if (key.isAcceptable()) {\n                            SocketChannel sc = listenChannel.accept();\n                            sc.configureBlocking(false);\n                            //将该 sc 注册到 seletor\n                            sc.register(selector, SelectionKey.OP_READ);\n                            //提示\n                            System.out.println(sc.getRemoteAddress() + \" 上线 \");\n                        }\n                        if (key.isReadable()) {//通道发送read事件，即通道是可读的状态\n                            // 处理读(专门写方法..)\n                            readData(key);\n                        }\n                        //当前的 key 删除，防止重复处理\n                        iterator.remove();\n                    }\n                } else {\n                    System.out.println(\"等待....\");\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //发生异常处理....\n        }\n    }\n\n    //读取客户端消息\n    public void readData(SelectionKey key) {\n        SocketChannel channel = null;\n        try {\n            //得到 channel\n            channel = (SocketChannel) key.channel();\n            //创建 buffer\n            ByteBuffer buffer = ByteBuffer.allocate(1024);\n            int count = channel.read(buffer);\n            //根据 count 的值做处理\n            if (count > 0) {\n                //把缓存区的数据转成字符串\n                String msg = new String(buffer.array());\n                //输出该消息\n                System.out.println(\"form客户端:\" + msg);\n                //向其它的客户端转发消息(去掉自己),专门写一个方法来处理\n                sendInfoToOtherClients(msg, channel);\n            }\n        } catch (IOException e) {\n            try {\n                System.out.println(channel.getRemoteAddress() + \"离线了..\");\n                //取消注册\n                key.cancel();\n                //关闭通道\n                channel.close();\n            } catch (IOException e2) {\n                e2.printStackTrace();\n            }\n        }\n    }\n\n    //转发消息给其它客户(通道)\n    private void sendInfoToOtherClients(String msg, SocketChannel self) throws IOException {\n\n        System.out.println(\"服务器转发消息中...\");\n        //遍历所有注册到 selector 上的 SocketChannel,并排除 self\n        for (SelectionKey key : selector.keys()) {\n            //通过 key 取出对应的 SocketChannel\n            Channel targetChannel = key.channel();\n            //排除自己\n            if (targetChannel instanceof SocketChannel && targetChannel != self) {\n                //转型\n                SocketChannel dest = (SocketChannel) targetChannel;\n                //将 msg 存储到 buffer\n                ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());\n                //将 buffer 的数据写入通道\n                dest.write(buffer);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        //创建服务器对象\n        GroupChatServer groupChatServer = new GroupChatServer();\n        groupChatServer.listen();\n    }\n}\n\n```\n\n```java\npackage edu.IO.Group;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Scanner;\npublic class GroupChatClient {\n\n    //定义相关的属性\n    private final String HOST = \"127.0.0.1\";//服务器的ip\n    private final int PORT = 6667;//服务器端口\n    private Selector selector;\n    private SocketChannel socketChannel;\n    private String username;\n\n    //构造器,完成初始化工作\n    public GroupChatClient() throws IOException {\n\n        selector = Selector.open();\n        //连接服务器\n        socketChannel = SocketChannel.open(new InetSocketAddress(HOST, PORT));\n        //设置非阻塞\n        socketChannel.configureBlocking(false);\n        //将 channel 注册到selector\n        socketChannel.register(selector, SelectionKey.OP_READ);\n        //得到 username\n        username = socketChannel.getLocalAddress().toString().substring(1);\n        System.out.println(username + \" is ok...\");\n    }\n\n    //向服务器发送消息\n    public void sendInfo(String info) {\n        info = username + \" 说：\" + info;\n        try {\n            socketChannel.write(ByteBuffer.wrap(info.getBytes()));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    //读取从服务器端回复的消息\n    public void readInfo() {\n        try {\n            int readChannels = selector.select();\n            if (readChannels > 0) {//有可以用的通道\n                Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();\n                while (iterator.hasNext()) {\n                    SelectionKey key = iterator.next();\n                    if (key.isReadable()) {\n                        //得到相关的通道\n                        SocketChannel sc = (SocketChannel) key.channel();\n                        //得到一个 Buffer\n                        ByteBuffer buffer = ByteBuffer.allocate(1024);\n                        //读取\n                        sc.read(buffer);\n                        //把读到的缓冲区的数据转成字符串\n                        String msg = new String(buffer.array());\n                        System.out.println(msg.trim());\n                    }\n                }\n                iterator.remove(); //删除当前的 selectionKey,防止重复操作\n            } else {\n                //System.out.println(\"没有可以用的通道...\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n\n        //启动我们客户端\n        GroupChatClient chatClient = new GroupChatClient();\n        //启动一个线程,每个 3 秒，读取从服务器发送数据\n        new Thread(() -> {\n            while (true) {\n                chatClient.readInfo();\n                try {\n                    Thread.sleep(3000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n\n        //发送数据给服务器端\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextLine()) {\n            String s = scanner.nextLine();\n            chatClient.sendInfo(s);\n        }\n    }\n}\n```\n\n","source":"_posts/从B站学习的Netty02.md","raw":"---\ntitle: 从B站学习的Netty02\nabbrlink: 2812335140\ndate: 2021-11-29 10:03:35\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n## NIO网络编程应用实例 - 群聊系统\n\nhttps://imlql.cn/post/3f9283e7.html\n\n实例要求：\n\n1. 编写一个 `NIO` 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞）\n2. 实现多人群聊\n3. 服务器端：可以监测用户上线，离线，并实现消息转发功能\n4. 客户端：通过 `Channel` 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息（有服务器转发得到）\n5. 目的：进一步理解 `NIO` 非阻塞网络编程机制\n6. 示意图分析和代码\n\n![img](http://typa.qingyun.run/img/0023.png)\n\n```java\npackage edu.IO.Group;\n// 服务端：\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.Channel;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Scanner;\n\npublic class GroupChatServer {\n\n    //定义属性\n    private Selector selector;\n    private ServerSocketChannel listenChannel;\n\n    private static final int PORT = 6667;\n\n    //构造器\n    //初始化工作\n    public GroupChatServer() {\n        try {\n            //得到选择器\n            selector = Selector.open();\n            //ServerSocketChannel\n            listenChannel = ServerSocketChannel.open();\n            //绑定端口\n            listenChannel.socket().bind(new InetSocketAddress(PORT));\n            //设置非阻塞模式\n            listenChannel.configureBlocking(false);\n            //将该 listenChannel 注册到 selector\n            listenChannel.register(selector, SelectionKey.OP_ACCEPT);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void listen() {\n        try {\n            //循环处理\n            while (true) {\n                int count = selector.select();\n                if (count > 0) { //有事件处理\n                    // 遍历得到 selectionKey 集合\n                    Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();\n                    while (iterator.hasNext()) {\n                        //取出 selectionkey\n                        SelectionKey key = iterator.next();\n                        //监听到 accept\n                        if (key.isAcceptable()) {\n                            SocketChannel sc = listenChannel.accept();\n                            sc.configureBlocking(false);\n                            //将该 sc 注册到 seletor\n                            sc.register(selector, SelectionKey.OP_READ);\n                            //提示\n                            System.out.println(sc.getRemoteAddress() + \" 上线 \");\n                        }\n                        if (key.isReadable()) {//通道发送read事件，即通道是可读的状态\n                            // 处理读(专门写方法..)\n                            readData(key);\n                        }\n                        //当前的 key 删除，防止重复处理\n                        iterator.remove();\n                    }\n                } else {\n                    System.out.println(\"等待....\");\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //发生异常处理....\n        }\n    }\n\n    //读取客户端消息\n    public void readData(SelectionKey key) {\n        SocketChannel channel = null;\n        try {\n            //得到 channel\n            channel = (SocketChannel) key.channel();\n            //创建 buffer\n            ByteBuffer buffer = ByteBuffer.allocate(1024);\n            int count = channel.read(buffer);\n            //根据 count 的值做处理\n            if (count > 0) {\n                //把缓存区的数据转成字符串\n                String msg = new String(buffer.array());\n                //输出该消息\n                System.out.println(\"form客户端:\" + msg);\n                //向其它的客户端转发消息(去掉自己),专门写一个方法来处理\n                sendInfoToOtherClients(msg, channel);\n            }\n        } catch (IOException e) {\n            try {\n                System.out.println(channel.getRemoteAddress() + \"离线了..\");\n                //取消注册\n                key.cancel();\n                //关闭通道\n                channel.close();\n            } catch (IOException e2) {\n                e2.printStackTrace();\n            }\n        }\n    }\n\n    //转发消息给其它客户(通道)\n    private void sendInfoToOtherClients(String msg, SocketChannel self) throws IOException {\n\n        System.out.println(\"服务器转发消息中...\");\n        //遍历所有注册到 selector 上的 SocketChannel,并排除 self\n        for (SelectionKey key : selector.keys()) {\n            //通过 key 取出对应的 SocketChannel\n            Channel targetChannel = key.channel();\n            //排除自己\n            if (targetChannel instanceof SocketChannel && targetChannel != self) {\n                //转型\n                SocketChannel dest = (SocketChannel) targetChannel;\n                //将 msg 存储到 buffer\n                ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());\n                //将 buffer 的数据写入通道\n                dest.write(buffer);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        //创建服务器对象\n        GroupChatServer groupChatServer = new GroupChatServer();\n        groupChatServer.listen();\n    }\n}\n\n```\n\n```java\npackage edu.IO.Group;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.SelectionKey;\nimport java.nio.channels.Selector;\nimport java.nio.channels.SocketChannel;\nimport java.util.Iterator;\nimport java.util.Scanner;\npublic class GroupChatClient {\n\n    //定义相关的属性\n    private final String HOST = \"127.0.0.1\";//服务器的ip\n    private final int PORT = 6667;//服务器端口\n    private Selector selector;\n    private SocketChannel socketChannel;\n    private String username;\n\n    //构造器,完成初始化工作\n    public GroupChatClient() throws IOException {\n\n        selector = Selector.open();\n        //连接服务器\n        socketChannel = SocketChannel.open(new InetSocketAddress(HOST, PORT));\n        //设置非阻塞\n        socketChannel.configureBlocking(false);\n        //将 channel 注册到selector\n        socketChannel.register(selector, SelectionKey.OP_READ);\n        //得到 username\n        username = socketChannel.getLocalAddress().toString().substring(1);\n        System.out.println(username + \" is ok...\");\n    }\n\n    //向服务器发送消息\n    public void sendInfo(String info) {\n        info = username + \" 说：\" + info;\n        try {\n            socketChannel.write(ByteBuffer.wrap(info.getBytes()));\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    //读取从服务器端回复的消息\n    public void readInfo() {\n        try {\n            int readChannels = selector.select();\n            if (readChannels > 0) {//有可以用的通道\n                Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();\n                while (iterator.hasNext()) {\n                    SelectionKey key = iterator.next();\n                    if (key.isReadable()) {\n                        //得到相关的通道\n                        SocketChannel sc = (SocketChannel) key.channel();\n                        //得到一个 Buffer\n                        ByteBuffer buffer = ByteBuffer.allocate(1024);\n                        //读取\n                        sc.read(buffer);\n                        //把读到的缓冲区的数据转成字符串\n                        String msg = new String(buffer.array());\n                        System.out.println(msg.trim());\n                    }\n                }\n                iterator.remove(); //删除当前的 selectionKey,防止重复操作\n            } else {\n                //System.out.println(\"没有可以用的通道...\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n\n        //启动我们客户端\n        GroupChatClient chatClient = new GroupChatClient();\n        //启动一个线程,每个 3 秒，读取从服务器发送数据\n        new Thread(() -> {\n            while (true) {\n                chatClient.readInfo();\n                try {\n                    Thread.sleep(3000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n\n        //发送数据给服务器端\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextLine()) {\n            String s = scanner.nextLine();\n            chatClient.sendInfo(s);\n        }\n    }\n}\n```\n\n","slug":"从B站学习的Netty02","published":1,"updated":"2021-11-29T02:05:12.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rh001go4vb7gu5csyc","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h2 id=\"NIO网络编程应用实例-群聊系统\">NIO网络编程应用实例 - 群聊系统</h2>\n<p><a href=\"https://imlql.cn/post/3f9283e7.html\">https://imlql.cn/post/3f9283e7.html</a></p>\n<p>实例要求：</p>\n<ol>\n<li>编写一个 <code>NIO</code> 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞）</li>\n<li>实现多人群聊</li>\n<li>服务器端：可以监测用户上线，离线，并实现消息转发功能</li>\n<li>客户端：通过 <code>Channel</code> 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息（有服务器转发得到）</li>\n<li>目的：进一步理解 <code>NIO</code> 非阻塞网络编程机制</li>\n<li>示意图分析和代码</li>\n</ol>\n<p><img src=\"http://typa.qingyun.run/img/0023.png\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.Group;</span><br><span class=\"line\"><span class=\"comment\">// 服务端：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupChatServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Selector selector;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServerSocketChannel listenChannel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">6667</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化工作</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GroupChatServer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//得到选择器</span></span><br><span class=\"line\">            selector = Selector.open();</span><br><span class=\"line\">            <span class=\"comment\">//ServerSocketChannel</span></span><br><span class=\"line\">            listenChannel = ServerSocketChannel.open();</span><br><span class=\"line\">            <span class=\"comment\">//绑定端口</span></span><br><span class=\"line\">            listenChannel.socket().bind(<span class=\"keyword\">new</span> InetSocketAddress(PORT));</span><br><span class=\"line\">            <span class=\"comment\">//设置非阻塞模式</span></span><br><span class=\"line\">            listenChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">//将该 listenChannel 注册到 selector</span></span><br><span class=\"line\">            listenChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//循环处理</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> count = selector.select();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//有事件处理</span></span><br><span class=\"line\">                    <span class=\"comment\">// 遍历得到 selectionKey 集合</span></span><br><span class=\"line\">                    Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//取出 selectionkey</span></span><br><span class=\"line\">                        SelectionKey key = iterator.next();</span><br><span class=\"line\">                        <span class=\"comment\">//监听到 accept</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (key.isAcceptable()) &#123;</span><br><span class=\"line\">                            SocketChannel sc = listenChannel.accept();</span><br><span class=\"line\">                            sc.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                            <span class=\"comment\">//将该 sc 注册到 seletor</span></span><br><span class=\"line\">                            sc.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">                            <span class=\"comment\">//提示</span></span><br><span class=\"line\">                            System.out.println(sc.getRemoteAddress() + <span class=\"string\">&quot; 上线 &quot;</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (key.isReadable()) &#123;<span class=\"comment\">//通道发送read事件，即通道是可读的状态</span></span><br><span class=\"line\">                            <span class=\"comment\">// 处理读(专门写方法..)</span></span><br><span class=\"line\">                            readData(key);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//当前的 key 删除，防止重复处理</span></span><br><span class=\"line\">                        iterator.remove();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;等待....&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//发生异常处理....</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取客户端消息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readData</span><span class=\"params\">(SelectionKey key)</span> </span>&#123;</span><br><span class=\"line\">        SocketChannel channel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//得到 channel</span></span><br><span class=\"line\">            channel = (SocketChannel) key.channel();</span><br><span class=\"line\">            <span class=\"comment\">//创建 buffer</span></span><br><span class=\"line\">            ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = channel.read(buffer);</span><br><span class=\"line\">            <span class=\"comment\">//根据 count 的值做处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//把缓存区的数据转成字符串</span></span><br><span class=\"line\">                String msg = <span class=\"keyword\">new</span> String(buffer.array());</span><br><span class=\"line\">                <span class=\"comment\">//输出该消息</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;form客户端:&quot;</span> + msg);</span><br><span class=\"line\">                <span class=\"comment\">//向其它的客户端转发消息(去掉自己),专门写一个方法来处理</span></span><br><span class=\"line\">                sendInfoToOtherClients(msg, channel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(channel.getRemoteAddress() + <span class=\"string\">&quot;离线了..&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//取消注册</span></span><br><span class=\"line\">                key.cancel();</span><br><span class=\"line\">                <span class=\"comment\">//关闭通道</span></span><br><span class=\"line\">                channel.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e2) &#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//转发消息给其它客户(通道)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sendInfoToOtherClients</span><span class=\"params\">(String msg, SocketChannel self)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器转发消息中...&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//遍历所有注册到 selector 上的 SocketChannel,并排除 self</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SelectionKey key : selector.keys()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//通过 key 取出对应的 SocketChannel</span></span><br><span class=\"line\">            Channel targetChannel = key.channel();</span><br><span class=\"line\">            <span class=\"comment\">//排除自己</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetChannel <span class=\"keyword\">instanceof</span> SocketChannel &amp;&amp; targetChannel != self) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//转型</span></span><br><span class=\"line\">                SocketChannel dest = (SocketChannel) targetChannel;</span><br><span class=\"line\">                <span class=\"comment\">//将 msg 存储到 buffer</span></span><br><span class=\"line\">                ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class=\"line\">                <span class=\"comment\">//将 buffer 的数据写入通道</span></span><br><span class=\"line\">                dest.write(buffer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建服务器对象</span></span><br><span class=\"line\">        GroupChatServer groupChatServer = <span class=\"keyword\">new</span> GroupChatServer();</span><br><span class=\"line\">        groupChatServer.listen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.Group;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupChatClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义相关的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String HOST = <span class=\"string\">&quot;127.0.0.1&quot;</span>;<span class=\"comment\">//服务器的ip</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">6667</span>;<span class=\"comment\">//服务器端口</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Selector selector;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SocketChannel socketChannel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器,完成初始化工作</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GroupChatClient</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        selector = Selector.open();</span><br><span class=\"line\">        <span class=\"comment\">//连接服务器</span></span><br><span class=\"line\">        socketChannel = SocketChannel.open(<span class=\"keyword\">new</span> InetSocketAddress(HOST, PORT));</span><br><span class=\"line\">        <span class=\"comment\">//设置非阻塞</span></span><br><span class=\"line\">        socketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将 channel 注册到selector</span></span><br><span class=\"line\">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">        <span class=\"comment\">//得到 username</span></span><br><span class=\"line\">        username = socketChannel.getLocalAddress().toString().substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(username + <span class=\"string\">&quot; is ok...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向服务器发送消息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendInfo</span><span class=\"params\">(String info)</span> </span>&#123;</span><br><span class=\"line\">        info = username + <span class=\"string\">&quot; 说：&quot;</span> + info;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            socketChannel.write(ByteBuffer.wrap(info.getBytes()));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取从服务器端回复的消息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> readChannels = selector.select();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (readChannels &gt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//有可以用的通道</span></span><br><span class=\"line\">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                    SelectionKey key = iterator.next();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//得到相关的通道</span></span><br><span class=\"line\">                        SocketChannel sc = (SocketChannel) key.channel();</span><br><span class=\"line\">                        <span class=\"comment\">//得到一个 Buffer</span></span><br><span class=\"line\">                        ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//读取</span></span><br><span class=\"line\">                        sc.read(buffer);</span><br><span class=\"line\">                        <span class=\"comment\">//把读到的缓冲区的数据转成字符串</span></span><br><span class=\"line\">                        String msg = <span class=\"keyword\">new</span> String(buffer.array());</span><br><span class=\"line\">                        System.out.println(msg.trim());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                iterator.remove(); <span class=\"comment\">//删除当前的 selectionKey,防止重复操作</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//System.out.println(&quot;没有可以用的通道...&quot;);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//启动我们客户端</span></span><br><span class=\"line\">        GroupChatClient chatClient = <span class=\"keyword\">new</span> GroupChatClient();</span><br><span class=\"line\">        <span class=\"comment\">//启动一个线程,每个 3 秒，读取从服务器发送数据</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                chatClient.readInfo();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//发送数据给服务器端</span></span><br><span class=\"line\">        Scanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (scanner.hasNextLine()) &#123;</span><br><span class=\"line\">            String s = scanner.nextLine();</span><br><span class=\"line\">            chatClient.sendInfo(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h2 id=\"NIO网络编程应用实例-群聊系统\">NIO网络编程应用实例 - 群聊系统</h2>\n<p><a href=\"https://imlql.cn/post/3f9283e7.html\">https://imlql.cn/post/3f9283e7.html</a></p>\n<p>实例要求：</p>\n<ol>\n<li>编写一个 <code>NIO</code> 群聊系统，实现服务器端和客户端之间的数据简单通讯（非阻塞）</li>\n<li>实现多人群聊</li>\n<li>服务器端：可以监测用户上线，离线，并实现消息转发功能</li>\n<li>客户端：通过 <code>Channel</code> 可以无阻塞发送消息给其它所有用户，同时可以接受其它用户发送的消息（有服务器转发得到）</li>\n<li>目的：进一步理解 <code>NIO</code> 非阻塞网络编程机制</li>\n<li>示意图分析和代码</li>\n</ol>\n<p><img src=\"http://typa.qingyun.run/img/0023.png\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.Group;</span><br><span class=\"line\"><span class=\"comment\">// 服务端：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupChatServer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Selector selector;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServerSocketChannel listenChannel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">6667</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器</span></span><br><span class=\"line\">    <span class=\"comment\">//初始化工作</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GroupChatServer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//得到选择器</span></span><br><span class=\"line\">            selector = Selector.open();</span><br><span class=\"line\">            <span class=\"comment\">//ServerSocketChannel</span></span><br><span class=\"line\">            listenChannel = ServerSocketChannel.open();</span><br><span class=\"line\">            <span class=\"comment\">//绑定端口</span></span><br><span class=\"line\">            listenChannel.socket().bind(<span class=\"keyword\">new</span> InetSocketAddress(PORT));</span><br><span class=\"line\">            <span class=\"comment\">//设置非阻塞模式</span></span><br><span class=\"line\">            listenChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            <span class=\"comment\">//将该 listenChannel 注册到 selector</span></span><br><span class=\"line\">            listenChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">listen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//循环处理</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> count = selector.select();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123; <span class=\"comment\">//有事件处理</span></span><br><span class=\"line\">                    <span class=\"comment\">// 遍历得到 selectionKey 集合</span></span><br><span class=\"line\">                    Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//取出 selectionkey</span></span><br><span class=\"line\">                        SelectionKey key = iterator.next();</span><br><span class=\"line\">                        <span class=\"comment\">//监听到 accept</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (key.isAcceptable()) &#123;</span><br><span class=\"line\">                            SocketChannel sc = listenChannel.accept();</span><br><span class=\"line\">                            sc.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                            <span class=\"comment\">//将该 sc 注册到 seletor</span></span><br><span class=\"line\">                            sc.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">                            <span class=\"comment\">//提示</span></span><br><span class=\"line\">                            System.out.println(sc.getRemoteAddress() + <span class=\"string\">&quot; 上线 &quot;</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (key.isReadable()) &#123;<span class=\"comment\">//通道发送read事件，即通道是可读的状态</span></span><br><span class=\"line\">                            <span class=\"comment\">// 处理读(专门写方法..)</span></span><br><span class=\"line\">                            readData(key);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">//当前的 key 删除，防止重复处理</span></span><br><span class=\"line\">                        iterator.remove();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;等待....&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//发生异常处理....</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取客户端消息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readData</span><span class=\"params\">(SelectionKey key)</span> </span>&#123;</span><br><span class=\"line\">        SocketChannel channel = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//得到 channel</span></span><br><span class=\"line\">            channel = (SocketChannel) key.channel();</span><br><span class=\"line\">            <span class=\"comment\">//创建 buffer</span></span><br><span class=\"line\">            ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> count = channel.read(buffer);</span><br><span class=\"line\">            <span class=\"comment\">//根据 count 的值做处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//把缓存区的数据转成字符串</span></span><br><span class=\"line\">                String msg = <span class=\"keyword\">new</span> String(buffer.array());</span><br><span class=\"line\">                <span class=\"comment\">//输出该消息</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;form客户端:&quot;</span> + msg);</span><br><span class=\"line\">                <span class=\"comment\">//向其它的客户端转发消息(去掉自己),专门写一个方法来处理</span></span><br><span class=\"line\">                sendInfoToOtherClients(msg, channel);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(channel.getRemoteAddress() + <span class=\"string\">&quot;离线了..&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//取消注册</span></span><br><span class=\"line\">                key.cancel();</span><br><span class=\"line\">                <span class=\"comment\">//关闭通道</span></span><br><span class=\"line\">                channel.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e2) &#123;</span><br><span class=\"line\">                e2.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//转发消息给其它客户(通道)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">sendInfoToOtherClients</span><span class=\"params\">(String msg, SocketChannel self)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器转发消息中...&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//遍历所有注册到 selector 上的 SocketChannel,并排除 self</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SelectionKey key : selector.keys()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//通过 key 取出对应的 SocketChannel</span></span><br><span class=\"line\">            Channel targetChannel = key.channel();</span><br><span class=\"line\">            <span class=\"comment\">//排除自己</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (targetChannel <span class=\"keyword\">instanceof</span> SocketChannel &amp;&amp; targetChannel != self) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//转型</span></span><br><span class=\"line\">                SocketChannel dest = (SocketChannel) targetChannel;</span><br><span class=\"line\">                <span class=\"comment\">//将 msg 存储到 buffer</span></span><br><span class=\"line\">                ByteBuffer buffer = ByteBuffer.wrap(msg.getBytes());</span><br><span class=\"line\">                <span class=\"comment\">//将 buffer 的数据写入通道</span></span><br><span class=\"line\">                dest.write(buffer);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建服务器对象</span></span><br><span class=\"line\">        GroupChatServer groupChatServer = <span class=\"keyword\">new</span> GroupChatServer();</span><br><span class=\"line\">        groupChatServer.listen();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.Group;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SelectionKey;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.Selector;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GroupChatClient</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义相关的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String HOST = <span class=\"string\">&quot;127.0.0.1&quot;</span>;<span class=\"comment\">//服务器的ip</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> PORT = <span class=\"number\">6667</span>;<span class=\"comment\">//服务器端口</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Selector selector;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SocketChannel socketChannel;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//构造器,完成初始化工作</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">GroupChatClient</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        selector = Selector.open();</span><br><span class=\"line\">        <span class=\"comment\">//连接服务器</span></span><br><span class=\"line\">        socketChannel = SocketChannel.open(<span class=\"keyword\">new</span> InetSocketAddress(HOST, PORT));</span><br><span class=\"line\">        <span class=\"comment\">//设置非阻塞</span></span><br><span class=\"line\">        socketChannel.configureBlocking(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//将 channel 注册到selector</span></span><br><span class=\"line\">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class=\"line\">        <span class=\"comment\">//得到 username</span></span><br><span class=\"line\">        username = socketChannel.getLocalAddress().toString().substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(username + <span class=\"string\">&quot; is ok...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向服务器发送消息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sendInfo</span><span class=\"params\">(String info)</span> </span>&#123;</span><br><span class=\"line\">        info = username + <span class=\"string\">&quot; 说：&quot;</span> + info;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            socketChannel.write(ByteBuffer.wrap(info.getBytes()));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取从服务器端回复的消息</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> readChannels = selector.select();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (readChannels &gt; <span class=\"number\">0</span>) &#123;<span class=\"comment\">//有可以用的通道</span></span><br><span class=\"line\">                Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (iterator.hasNext()) &#123;</span><br><span class=\"line\">                    SelectionKey key = iterator.next();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (key.isReadable()) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//得到相关的通道</span></span><br><span class=\"line\">                        SocketChannel sc = (SocketChannel) key.channel();</span><br><span class=\"line\">                        <span class=\"comment\">//得到一个 Buffer</span></span><br><span class=\"line\">                        ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                        <span class=\"comment\">//读取</span></span><br><span class=\"line\">                        sc.read(buffer);</span><br><span class=\"line\">                        <span class=\"comment\">//把读到的缓冲区的数据转成字符串</span></span><br><span class=\"line\">                        String msg = <span class=\"keyword\">new</span> String(buffer.array());</span><br><span class=\"line\">                        System.out.println(msg.trim());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                iterator.remove(); <span class=\"comment\">//删除当前的 selectionKey,防止重复操作</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//System.out.println(&quot;没有可以用的通道...&quot;);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//启动我们客户端</span></span><br><span class=\"line\">        GroupChatClient chatClient = <span class=\"keyword\">new</span> GroupChatClient();</span><br><span class=\"line\">        <span class=\"comment\">//启动一个线程,每个 3 秒，读取从服务器发送数据</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                chatClient.readInfo();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//发送数据给服务器端</span></span><br><span class=\"line\">        Scanner scanner = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (scanner.hasNextLine()) &#123;</span><br><span class=\"line\">            String s = scanner.nextLine();</span><br><span class=\"line\">            chatClient.sendInfo(s);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"从B站学习的Netty03","abbrlink":3500663986,"date":"2021-11-29T02:04:08.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n## NIO与零拷贝\n\n> 1、尚硅谷这里的零拷贝感觉讲的感觉有点问题，但是为了笔记的完整性，任然保留了这里的笔记。不过笔者考虑再写一篇零拷贝。\n>\n> 2、而且这里课件的图也看不太清\n>\n> 3、读者可以将我写的零拷贝和尚硅谷这里讲的零拷贝对照着看，取长补短\n\n### 零拷贝基本介绍\n\n1. 零拷贝是网络编程的关键，很多性能优化都离不开。\n2. 在 `Java` 程序中，常用的零拷贝有 `mmap`（内存映射）和 `sendFile`。那么，他们在 `OS` 里，到底是怎么样的一个的设计？我们分析 `mmap` 和 `sendFile` 这两个零拷贝\n3. 另外我们看下 `NIO` 中如何使用零拷贝\n\n### 传统 IO 数据读写\n\n`Java` 传统 `IO` 和网络编程的一段代码\n\n```java\nFile file = new File(\"test.txt\");\nRandomAccessFile raf = new RandomAccessFile(file, \"rw\");\n\nbyte[] arr = new byte[(int) file.length()];\nraf.read(arr);\n\nSocket socket = new ServerSocket(8080).accept();\nsocket.getOutputStream().write(arr);\n```\n\n### 传统 IO 模型\n\n![img](http://typa.qingyun.run/img/0024.png)\n\n**DMA**：`direct memory access` 直接内存拷贝（不使用 `CPU`）\n\n### mmap 优化\n\n1. `mmap` 通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户空间的拷贝次数。如下图\n2. `mmap` 示意图\n\n![img](http://typa.qingyun.run/img/0025.png)\n\n### sendFile 优化\n\n1. `Linux2.1` 版本提供了 `sendFile` 函数，其基本原理如下：数据根本不经过用户态，直接从内核缓冲区进入到 `SocketBuffer`，同时，由于和用户态完全无关，就减少了一次上下文切换\n2. 示意图和小结\n\n![img](http://typa.qingyun.run/img/0026.png?x-oss-process=style/qingyun)\n\n1. 提示：零拷贝从操作系统角度，是没有 `cpu` 拷贝\n2. `Linux在2.4` 版本中，做了一些修改，避免了从内核缓冲区拷贝到 `Socketbuffer` 的操作，直接拷贝到协议栈，从而再一次减少了数据拷贝。具体如下图和小结：\n\n![img](http://typa.qingyun.run/img/0027.png)\n\n1. 这里其实有一次 `cpu` 拷贝 `kernel buffer` -> `socket buffer` 但是，拷贝的信息很少，比如 `lenght`、`offset` 消耗低，可以忽略\n\n### 零拷贝的再次理解\n\n1. 我们说零拷贝，是从操作系统的角度来说的。因为内核缓冲区之间，没有数据是重复的（只有 `kernel buffer` 有一份数据）。\n2. 零拷贝不仅仅带来更少的数据复制，还能带来其他的性能优势，例如更少的上下文切换，更少的 `CPU` 缓存伪共享以及无 `CPU` 校验和计算。\n\n### mmap 和 sendFile 的区别\n\n1. `mmap` 适合小数据量读写，`sendFile` 适合大文件传输。\n2. `mmap` 需要 `4` 次上下文切换，`3` 次数据拷贝；`sendFile` 需要 `3` 次上下文切换，最少 `2` 次数据拷贝。\n3. `sendFile` 可以利用 `DMA` 方式，减少 `CPU` 拷贝，`mmap` 则不能（必须从内核拷贝到 `Socket`缓冲区）\n\n\n\n\n\n\n\n","source":"_posts/从B站学习的Netty03.md","raw":"---\ntitle: 从B站学习的Netty03\nabbrlink: 3500663986\ndate: 2021-11-29 10:04:08\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n## NIO与零拷贝\n\n> 1、尚硅谷这里的零拷贝感觉讲的感觉有点问题，但是为了笔记的完整性，任然保留了这里的笔记。不过笔者考虑再写一篇零拷贝。\n>\n> 2、而且这里课件的图也看不太清\n>\n> 3、读者可以将我写的零拷贝和尚硅谷这里讲的零拷贝对照着看，取长补短\n\n### 零拷贝基本介绍\n\n1. 零拷贝是网络编程的关键，很多性能优化都离不开。\n2. 在 `Java` 程序中，常用的零拷贝有 `mmap`（内存映射）和 `sendFile`。那么，他们在 `OS` 里，到底是怎么样的一个的设计？我们分析 `mmap` 和 `sendFile` 这两个零拷贝\n3. 另外我们看下 `NIO` 中如何使用零拷贝\n\n### 传统 IO 数据读写\n\n`Java` 传统 `IO` 和网络编程的一段代码\n\n```java\nFile file = new File(\"test.txt\");\nRandomAccessFile raf = new RandomAccessFile(file, \"rw\");\n\nbyte[] arr = new byte[(int) file.length()];\nraf.read(arr);\n\nSocket socket = new ServerSocket(8080).accept();\nsocket.getOutputStream().write(arr);\n```\n\n### 传统 IO 模型\n\n![img](http://typa.qingyun.run/img/0024.png)\n\n**DMA**：`direct memory access` 直接内存拷贝（不使用 `CPU`）\n\n### mmap 优化\n\n1. `mmap` 通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户空间的拷贝次数。如下图\n2. `mmap` 示意图\n\n![img](http://typa.qingyun.run/img/0025.png)\n\n### sendFile 优化\n\n1. `Linux2.1` 版本提供了 `sendFile` 函数，其基本原理如下：数据根本不经过用户态，直接从内核缓冲区进入到 `SocketBuffer`，同时，由于和用户态完全无关，就减少了一次上下文切换\n2. 示意图和小结\n\n![img](http://typa.qingyun.run/img/0026.png?x-oss-process=style/qingyun)\n\n1. 提示：零拷贝从操作系统角度，是没有 `cpu` 拷贝\n2. `Linux在2.4` 版本中，做了一些修改，避免了从内核缓冲区拷贝到 `Socketbuffer` 的操作，直接拷贝到协议栈，从而再一次减少了数据拷贝。具体如下图和小结：\n\n![img](http://typa.qingyun.run/img/0027.png)\n\n1. 这里其实有一次 `cpu` 拷贝 `kernel buffer` -> `socket buffer` 但是，拷贝的信息很少，比如 `lenght`、`offset` 消耗低，可以忽略\n\n### 零拷贝的再次理解\n\n1. 我们说零拷贝，是从操作系统的角度来说的。因为内核缓冲区之间，没有数据是重复的（只有 `kernel buffer` 有一份数据）。\n2. 零拷贝不仅仅带来更少的数据复制，还能带来其他的性能优势，例如更少的上下文切换，更少的 `CPU` 缓存伪共享以及无 `CPU` 校验和计算。\n\n### mmap 和 sendFile 的区别\n\n1. `mmap` 适合小数据量读写，`sendFile` 适合大文件传输。\n2. `mmap` 需要 `4` 次上下文切换，`3` 次数据拷贝；`sendFile` 需要 `3` 次上下文切换，最少 `2` 次数据拷贝。\n3. `sendFile` 可以利用 `DMA` 方式，减少 `CPU` 拷贝，`mmap` 则不能（必须从内核拷贝到 `Socket`缓冲区）\n\n\n\n\n\n\n\n","slug":"从B站学习的Netty03","published":1,"updated":"2021-11-29T02:05:04.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2ri001jo4vbc9njg1u3","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h2 id=\"NIO与零拷贝\">NIO与零拷贝</h2>\n<blockquote>\n<p>1、尚硅谷这里的零拷贝感觉讲的感觉有点问题，但是为了笔记的完整性，任然保留了这里的笔记。不过笔者考虑再写一篇零拷贝。</p>\n<p>2、而且这里课件的图也看不太清</p>\n<p>3、读者可以将我写的零拷贝和尚硅谷这里讲的零拷贝对照着看，取长补短</p>\n</blockquote>\n<h3 id=\"零拷贝基本介绍\">零拷贝基本介绍</h3>\n<ol>\n<li>零拷贝是网络编程的关键，很多性能优化都离不开。</li>\n<li>在 <code>Java</code> 程序中，常用的零拷贝有 <code>mmap</code>（内存映射）和 <code>sendFile</code>。那么，他们在 <code>OS</code> 里，到底是怎么样的一个的设计？我们分析 <code>mmap</code> 和 <code>sendFile</code> 这两个零拷贝</li>\n<li>另外我们看下 <code>NIO</code> 中如何使用零拷贝</li>\n</ol>\n<h3 id=\"传统-IO-数据读写\">传统 IO 数据读写</h3>\n<p><code>Java</code> 传统 <code>IO</code> 和网络编程的一段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">RandomAccessFile raf = <span class=\"keyword\">new</span> RandomAccessFile(file, <span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[(<span class=\"keyword\">int</span>) file.length()];</span><br><span class=\"line\">raf.read(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">Socket socket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8080</span>).accept();</span><br><span class=\"line\">socket.getOutputStream().write(arr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"传统-IO-模型\">传统 IO 模型</h3>\n<p><img src=\"http://typa.qingyun.run/img/0024.png\" alt=\"img\"></p>\n<p><strong>DMA</strong>：<code>direct memory access</code> 直接内存拷贝（不使用 <code>CPU</code>）</p>\n<h3 id=\"mmap-优化\">mmap 优化</h3>\n<ol>\n<li><code>mmap</code> 通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户空间的拷贝次数。如下图</li>\n<li><code>mmap</code> 示意图</li>\n</ol>\n<p><img src=\"http://typa.qingyun.run/img/0025.png\" alt=\"img\"></p>\n<h3 id=\"sendFile-优化\">sendFile 优化</h3>\n<ol>\n<li><code>Linux2.1</code> 版本提供了 <code>sendFile</code> 函数，其基本原理如下：数据根本不经过用户态，直接从内核缓冲区进入到 <code>SocketBuffer</code>，同时，由于和用户态完全无关，就减少了一次上下文切换</li>\n<li>示意图和小结</li>\n</ol>\n<p><img src=\"http://typa.qingyun.run/img/0026.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ol>\n<li>提示：零拷贝从操作系统角度，是没有 <code>cpu</code> 拷贝</li>\n<li><code>Linux在2.4</code> 版本中，做了一些修改，避免了从内核缓冲区拷贝到 <code>Socketbuffer</code> 的操作，直接拷贝到协议栈，从而再一次减少了数据拷贝。具体如下图和小结：</li>\n</ol>\n<p><img src=\"http://typa.qingyun.run/img/0027.png\" alt=\"img\"></p>\n<ol>\n<li>这里其实有一次 <code>cpu</code> 拷贝 <code>kernel buffer</code> -&gt; <code>socket buffer</code> 但是，拷贝的信息很少，比如 <code>lenght</code>、<code>offset</code> 消耗低，可以忽略</li>\n</ol>\n<h3 id=\"零拷贝的再次理解\">零拷贝的再次理解</h3>\n<ol>\n<li>我们说零拷贝，是从操作系统的角度来说的。因为内核缓冲区之间，没有数据是重复的（只有 <code>kernel buffer</code> 有一份数据）。</li>\n<li>零拷贝不仅仅带来更少的数据复制，还能带来其他的性能优势，例如更少的上下文切换，更少的 <code>CPU</code> 缓存伪共享以及无 <code>CPU</code> 校验和计算。</li>\n</ol>\n<h3 id=\"mmap-和-sendFile-的区别\">mmap 和 sendFile 的区别</h3>\n<ol>\n<li><code>mmap</code> 适合小数据量读写，<code>sendFile</code> 适合大文件传输。</li>\n<li><code>mmap</code> 需要 <code>4</code> 次上下文切换，<code>3</code> 次数据拷贝；<code>sendFile</code> 需要 <code>3</code> 次上下文切换，最少 <code>2</code> 次数据拷贝。</li>\n<li><code>sendFile</code> 可以利用 <code>DMA</code> 方式，减少 <code>CPU</code> 拷贝，<code>mmap</code> 则不能（必须从内核拷贝到 <code>Socket</code>缓冲区）</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h2 id=\"NIO与零拷贝\">NIO与零拷贝</h2>\n<blockquote>\n<p>1、尚硅谷这里的零拷贝感觉讲的感觉有点问题，但是为了笔记的完整性，任然保留了这里的笔记。不过笔者考虑再写一篇零拷贝。</p>\n<p>2、而且这里课件的图也看不太清</p>\n<p>3、读者可以将我写的零拷贝和尚硅谷这里讲的零拷贝对照着看，取长补短</p>\n</blockquote>\n<h3 id=\"零拷贝基本介绍\">零拷贝基本介绍</h3>\n<ol>\n<li>零拷贝是网络编程的关键，很多性能优化都离不开。</li>\n<li>在 <code>Java</code> 程序中，常用的零拷贝有 <code>mmap</code>（内存映射）和 <code>sendFile</code>。那么，他们在 <code>OS</code> 里，到底是怎么样的一个的设计？我们分析 <code>mmap</code> 和 <code>sendFile</code> 这两个零拷贝</li>\n<li>另外我们看下 <code>NIO</code> 中如何使用零拷贝</li>\n</ol>\n<h3 id=\"传统-IO-数据读写\">传统 IO 数据读写</h3>\n<p><code>Java</code> 传统 <code>IO</code> 和网络编程的一段代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File file = <span class=\"keyword\">new</span> File(<span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">RandomAccessFile raf = <span class=\"keyword\">new</span> RandomAccessFile(file, <span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">byte</span>[] arr = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[(<span class=\"keyword\">int</span>) file.length()];</span><br><span class=\"line\">raf.read(arr);</span><br><span class=\"line\"></span><br><span class=\"line\">Socket socket = <span class=\"keyword\">new</span> ServerSocket(<span class=\"number\">8080</span>).accept();</span><br><span class=\"line\">socket.getOutputStream().write(arr);</span><br></pre></td></tr></table></figure>\n<h3 id=\"传统-IO-模型\">传统 IO 模型</h3>\n<p><img src=\"http://typa.qingyun.run/img/0024.png\" alt=\"img\"></p>\n<p><strong>DMA</strong>：<code>direct memory access</code> 直接内存拷贝（不使用 <code>CPU</code>）</p>\n<h3 id=\"mmap-优化\">mmap 优化</h3>\n<ol>\n<li><code>mmap</code> 通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户空间的拷贝次数。如下图</li>\n<li><code>mmap</code> 示意图</li>\n</ol>\n<p><img src=\"http://typa.qingyun.run/img/0025.png\" alt=\"img\"></p>\n<h3 id=\"sendFile-优化\">sendFile 优化</h3>\n<ol>\n<li><code>Linux2.1</code> 版本提供了 <code>sendFile</code> 函数，其基本原理如下：数据根本不经过用户态，直接从内核缓冲区进入到 <code>SocketBuffer</code>，同时，由于和用户态完全无关，就减少了一次上下文切换</li>\n<li>示意图和小结</li>\n</ol>\n<p><img src=\"http://typa.qingyun.run/img/0026.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ol>\n<li>提示：零拷贝从操作系统角度，是没有 <code>cpu</code> 拷贝</li>\n<li><code>Linux在2.4</code> 版本中，做了一些修改，避免了从内核缓冲区拷贝到 <code>Socketbuffer</code> 的操作，直接拷贝到协议栈，从而再一次减少了数据拷贝。具体如下图和小结：</li>\n</ol>\n<p><img src=\"http://typa.qingyun.run/img/0027.png\" alt=\"img\"></p>\n<ol>\n<li>这里其实有一次 <code>cpu</code> 拷贝 <code>kernel buffer</code> -&gt; <code>socket buffer</code> 但是，拷贝的信息很少，比如 <code>lenght</code>、<code>offset</code> 消耗低，可以忽略</li>\n</ol>\n<h3 id=\"零拷贝的再次理解\">零拷贝的再次理解</h3>\n<ol>\n<li>我们说零拷贝，是从操作系统的角度来说的。因为内核缓冲区之间，没有数据是重复的（只有 <code>kernel buffer</code> 有一份数据）。</li>\n<li>零拷贝不仅仅带来更少的数据复制，还能带来其他的性能优势，例如更少的上下文切换，更少的 <code>CPU</code> 缓存伪共享以及无 <code>CPU</code> 校验和计算。</li>\n</ol>\n<h3 id=\"mmap-和-sendFile-的区别\">mmap 和 sendFile 的区别</h3>\n<ol>\n<li><code>mmap</code> 适合小数据量读写，<code>sendFile</code> 适合大文件传输。</li>\n<li><code>mmap</code> 需要 <code>4</code> 次上下文切换，<code>3</code> 次数据拷贝；<code>sendFile</code> 需要 <code>3</code> 次上下文切换，最少 <code>2</code> 次数据拷贝。</li>\n<li><code>sendFile</code> 可以利用 <code>DMA</code> 方式，减少 <code>CPU</code> 拷贝，<code>mmap</code> 则不能（必须从内核拷贝到 <code>Socket</code>缓冲区）</li>\n</ol>\n"},{"title":"从B站学习的Netty04","abbrlink":1321431313,"date":"2021-11-29T02:05:22.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n## NIO与零拷贝\n\n案例要求：\n\n1. 使用传统的 `IO` 方法传递一个大文件\n2. 使用 `NIO` 零拷贝方式传递（`transferTo`）一个大文件\n3. 看看两种传递方式耗时时间分别是多少\n\n```java\npackage edu.IO.NewIOServer;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/11/27 14:28\n */\npublic class NewIoServer {\n    public static void main(String[] args) throws IOException {\n        InetSocketAddress address =  new InetSocketAddress(7001);\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        ServerSocket serverSocket = serverSocketChannel.socket();\n        serverSocket.bind(address);\n\n        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(4096);\n\n        while (true){\n            SocketChannel socketChannel = serverSocketChannel.accept();\n            int readcount = 0;\n            while (-1 != readcount){\n                try{\n                    readcount = socketChannel.read(byteBuffer);\n                }catch (Exception e){\n//                    e.printStackTrace();\n                    break;\n                }\n                //倒带 position = 0 mark 作废\n                byteBuffer.rewind();\n            }\n        }\n    }\n\n}\n\n```\n\n```java\npackage edu.IO.NewIOServer;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.SocketChannel;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/11/27 14:32\n */\npublic class NewIoClient {\n    public static void main(String[] args) throws IOException {\n        SocketChannel socketChannel = SocketChannel.open();\n        socketChannel.connect(new InetSocketAddress(\"localhost\",7001));\n        String filename = \"F:\\\\Customer.txt\";\n        FileChannel fileChannel = new FileInputStream(filename).getChannel();\n        long startTime = System.currentTimeMillis();\n        long transferCount = fileChannel.transferTo(0, fileChannel.size(), socketChannel);\n        System.out.println(\"发送的总的字节数 = \" + transferCount + \" 耗时: \" + (System.currentTimeMillis() - startTime));\n        fileChannel.close();\n\n    }\n}\n\n```\n\n","source":"_posts/从B站学习的Netty04.md","raw":"---\ntitle: 从B站学习的Netty04\nabbrlink: 1321431313\ndate: 2021-11-29 10:05:22\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n## NIO与零拷贝\n\n案例要求：\n\n1. 使用传统的 `IO` 方法传递一个大文件\n2. 使用 `NIO` 零拷贝方式传递（`transferTo`）一个大文件\n3. 看看两种传递方式耗时时间分别是多少\n\n```java\npackage edu.IO.NewIOServer;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.net.ServerSocket;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/11/27 14:28\n */\npublic class NewIoServer {\n    public static void main(String[] args) throws IOException {\n        InetSocketAddress address =  new InetSocketAddress(7001);\n        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n        ServerSocket serverSocket = serverSocketChannel.socket();\n        serverSocket.bind(address);\n\n        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(4096);\n\n        while (true){\n            SocketChannel socketChannel = serverSocketChannel.accept();\n            int readcount = 0;\n            while (-1 != readcount){\n                try{\n                    readcount = socketChannel.read(byteBuffer);\n                }catch (Exception e){\n//                    e.printStackTrace();\n                    break;\n                }\n                //倒带 position = 0 mark 作废\n                byteBuffer.rewind();\n            }\n        }\n    }\n\n}\n\n```\n\n```java\npackage edu.IO.NewIOServer;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.SocketChannel;\n\n/**\n * @author qingyun\n * @version 1.0\n * @date 2021/11/27 14:32\n */\npublic class NewIoClient {\n    public static void main(String[] args) throws IOException {\n        SocketChannel socketChannel = SocketChannel.open();\n        socketChannel.connect(new InetSocketAddress(\"localhost\",7001));\n        String filename = \"F:\\\\Customer.txt\";\n        FileChannel fileChannel = new FileInputStream(filename).getChannel();\n        long startTime = System.currentTimeMillis();\n        long transferCount = fileChannel.transferTo(0, fileChannel.size(), socketChannel);\n        System.out.println(\"发送的总的字节数 = \" + transferCount + \" 耗时: \" + (System.currentTimeMillis() - startTime));\n        fileChannel.close();\n\n    }\n}\n\n```\n\n","slug":"从B站学习的Netty04","published":1,"updated":"2021-11-29T02:05:50.193Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rk001mo4vb6x0tdzty","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h2 id=\"NIO与零拷贝\">NIO与零拷贝</h2>\n<p>案例要求：</p>\n<ol>\n<li>使用传统的 <code>IO</code> 方法传递一个大文件</li>\n<li>使用 <code>NIO</code> 零拷贝方式传递（<code>transferTo</code>）一个大文件</li>\n<li>看看两种传递方式耗时时间分别是多少</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.NewIOServer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/11/27 14:28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewIoServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        InetSocketAddress address =  <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">7001</span>);</span><br><span class=\"line\">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\">        ServerSocket serverSocket = serverSocketChannel.socket();</span><br><span class=\"line\">        serverSocket.bind(address);</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(<span class=\"number\">4096</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> readcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (-<span class=\"number\">1</span> != readcount)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    readcount = socketChannel.read(byteBuffer);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\"><span class=\"comment\">//                    e.printStackTrace();</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//倒带 position = 0 mark 作废</span></span><br><span class=\"line\">                byteBuffer.rewind();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.NewIOServer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.FileChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/11/27 14:32</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewIoClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class=\"line\">        socketChannel.connect(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">&quot;localhost&quot;</span>,<span class=\"number\">7001</span>));</span><br><span class=\"line\">        String filename = <span class=\"string\">&quot;F:\\\\Customer.txt&quot;</span>;</span><br><span class=\"line\">        FileChannel fileChannel = <span class=\"keyword\">new</span> FileInputStream(filename).getChannel();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> transferCount = fileChannel.transferTo(<span class=\"number\">0</span>, fileChannel.size(), socketChannel);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发送的总的字节数 = &quot;</span> + transferCount + <span class=\"string\">&quot; 耗时: &quot;</span> + (System.currentTimeMillis() - startTime));</span><br><span class=\"line\">        fileChannel.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h2 id=\"NIO与零拷贝\">NIO与零拷贝</h2>\n<p>案例要求：</p>\n<ol>\n<li>使用传统的 <code>IO</code> 方法传递一个大文件</li>\n<li>使用 <code>NIO</code> 零拷贝方式传递（<code>transferTo</code>）一个大文件</li>\n<li>看看两种传递方式耗时时间分别是多少</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.NewIOServer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.ServerSocket;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.ServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/11/27 14:28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewIoServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        InetSocketAddress address =  <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"number\">7001</span>);</span><br><span class=\"line\">        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();</span><br><span class=\"line\">        ServerSocket serverSocket = serverSocketChannel.socket();</span><br><span class=\"line\">        serverSocket.bind(address);</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(<span class=\"number\">4096</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            SocketChannel socketChannel = serverSocketChannel.accept();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> readcount = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (-<span class=\"number\">1</span> != readcount)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                    readcount = socketChannel.read(byteBuffer);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\"><span class=\"comment\">//                    e.printStackTrace();</span></span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//倒带 position = 0 mark 作废</span></span><br><span class=\"line\">                byteBuffer.rewind();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.NewIOServer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetSocketAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.FileChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.channels.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/11/27 14:32</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NewIoClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        SocketChannel socketChannel = SocketChannel.open();</span><br><span class=\"line\">        socketChannel.connect(<span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">&quot;localhost&quot;</span>,<span class=\"number\">7001</span>));</span><br><span class=\"line\">        String filename = <span class=\"string\">&quot;F:\\\\Customer.txt&quot;</span>;</span><br><span class=\"line\">        FileChannel fileChannel = <span class=\"keyword\">new</span> FileInputStream(filename).getChannel();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> startTime = System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"keyword\">long</span> transferCount = fileChannel.transferTo(<span class=\"number\">0</span>, fileChannel.size(), socketChannel);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发送的总的字节数 = &quot;</span> + transferCount + <span class=\"string\">&quot; 耗时: &quot;</span> + (System.currentTimeMillis() - startTime));</span><br><span class=\"line\">        fileChannel.close();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"从B站学习的Netty06","abbrlink":2697793597,"date":"2021-11-29T02:07:39.000Z","copyright":false,"_content":"转载: https://imlql.cn/\n# Netty\n\n## 原生 NIO 存在的问题\n\n1. `NIO` 的类库和 `API` 繁杂，使用麻烦：需要熟练掌握 `Selector`、`ServerSocketChannel`、`SocketChannel`、`ByteBuffer`等。\n2. 需要具备其他的额外技能：要熟悉 `Java` 多线程编程，因为 `NIO` 编程涉及到 `Reactor` 模式，你必须对多线程和网络编程非常熟悉，才能编写出高质量的 `NIO` 程序。\n3. 开发工作量和难度都非常大：例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常流的处理等等。\n4. `JDK NIO` 的 `Bug`：例如臭名昭著的 `Epoll Bug`，它会导致 `Selector` 空轮询，最终导致 `CPU100%`。直到 `JDK1.7` 版本该问题仍旧存在，没有被根本解决。\n\n## Netty 官网说明\n\n官网：https://netty.io/\n\nNetty is an asynchronous event-driven network application framework  for rapid development of maintainable high performance protocol servers  & clients.\n\n![img](http://typa.qingyun.run/img/0001.png?x-oss-process=style/qingyun)\n\n## Netty 的优点\n\n`Netty` 对 `JDK` 自带的 `NIO` 的 `API` 进行了封装，解决了上述问题。\n\n1. 设计优雅：适用于各种传输类型的统一 `API` 阻塞和非阻塞 `Socket`；基于灵活且可扩展的事件模型，可以清晰地分离关注点；高度可定制的线程模型-单线程，一个或多个线程池。\n2. 使用方便：详细记录的 `Javadoc`，用户指南和示例；没有其他依赖项，`JDK5（Netty3.x）`或 `6（Netty4.x）`就足够了。\n3. 高性能、吞吐量更高：延迟更低；减少资源消耗；最小化不必要的内存复制。\n4. 安全：完整的 `SSL/TLS` 和 `StartTLS` 支持。\n5. 社区活跃、不断更新：社区活跃，版本迭代周期短，发现的 `Bug` 可以被及时修复，同时，更多的新功能会被加入。\n\n## Netty 版本说明\n\n1. `Netty` 版本分为 `Netty 3.x` 和 `Netty 4.x`、`Netty 5.x`\n2. 因为 `Netty 5` 出现重大 `bug`，已经被官网废弃了，目前推荐使用的是 `Netty 4.x`的稳定版本\n3. 目前在官网可下载的版本 `Netty 3.x`、`Netty 4.0.x` 和 `Netty 4.1.x`\n4. 在本套课程中，我们讲解 `Netty4.1.x` 版本\n5. `Netty` 下载地址：https://bintray.com/netty/downloads/netty/\n\n# Netty 高性能架构设计\n\n## 线程模型基本介绍\n\n1. 不同的线程模式，对程序的性能有很大影响，为了搞清 `Netty` 线程模式，我们来系统的讲解下各个线程模式，最后看看 `Netty` 线程模型有什么优越性。\n2. 目前存在的线程模型有：传统阻塞 `I/O` 服务模型 和`Reactor` 模式\n3. 根据 Reactor的数量和处理资源池线程的数量不同，有 3种典型的实现\n   - 单 `Reactor` 单线程；\n   - 单 `Reactor`多线程；\n   - 主从 `Reactor`多线程\n4. `Netty` 线程模式（`Netty` 主要基于主从 `Reactor` 多线程模型做了一定的改进，其中主从 `Reactor` 多线程模型有多个 `Reactor`）\n\n## 传统阻塞 I/O 服务模型\n\n### 工作原理图\n\n1. 黄色的框表示对象，蓝色的框表示线程\n2. 白色的框表示方法（`API`）\n\n### 模型特点\n\n1. 采用阻塞 `IO` 模式获取输入的数据\n2. 每个连接都需要独立的线程完成数据的输入，业务处理，数据返回\n\n### 问题分析\n\n1. 当并发数很大，就会创建大量的线程，占用很大系统资源\n2. 连接创建后，如果当前线程暂时没有数据可读，该线程会阻塞在 Handler对象中的`read` 操作，导致上面的处理线程资源浪费\n\n[![img](http://typa.qingyun.run/img/0002.png?x-oss-process=style/qingyun)](https://unpkg.zhimg.com/youthlql@1.0.0/netty/introduction/chapter_002/0002.png)\n\n## Reactor 模式\n\n### 针对传统阻塞 I/O 服务模型的 2 个缺点，解决方案：\n\n基于 `I/O` 复用模型：多个连接共用一个阻塞对象`ServiceHandler`，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。\n\n `Reactor` 在不同书中的叫法：\n\n1. 反应器模式 \n2. 分发者模式（Dispatcher）\n3. 通知者模式（notifier）\n4. 基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务。（解决了当并发数很大时，会创建大量线程，占用很大系统资源）\n5. 基于 `I/O` 复用模型：多个客户端进行连接，先把连接请求给`ServiceHandler`。多个连接共用一个阻塞对象`ServiceHandler`。假设，当C1连接没有数据要处理时，C1客户端只需要阻塞于`ServiceHandler`，C1之前的处理线程便可以处理其他有数据的连接，不会造成线程资源的浪费。当C1连接再次有数据时，`ServiceHandler`根据线程池的空闲状态，将请求分发给空闲的线程来处理C1连接的任务。（解决了线程资源浪费的那个问题）\n6. ![img](http://typa.qingyun.run/img/0003.png?x-oss-process=style/qingyun)\n\nI/O 复用结合线程池，就是 Reactor 模式基本设计思想，如图\n\n![img](http://typa.qingyun.run/img/0004.png?x-oss-process=style/qingyun)\n\n对上图说明：\n\n1. `Reactor` 模式，通过一个或多个输入同时传递给服务处理器（ServiceHandler）的模式（基于事件驱动）\n2. 服务器端程序处理传入的多个请求,并将它们同步分派到相应的处理线程，因此 `Reactor` 模式也叫 `Dispatcher` 模式\n3. `Reactor` 模式使用 `IO` 复用监听事件，收到事件后，分发给某个线程（进程），这点就是网络服务器高并发处理关键\n\n> 原先有多个Handler阻塞，现在只用一个ServiceHandler阻塞\n\n#### Reactor 模式中核心组成\n\n1. `Reactor（也就是那个ServiceHandler）`：`Reactor` 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理线程来对 `IO` 事件做出反应。它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人；\n2. `Handlers（处理线程EventHandler）`：处理线程执行 `I/O` 事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。`Reactor` 通过调度适当的处理线程来响应 `I/O` 事件，处理程序执行非阻塞操作。\n\n#### Reactor 模式分类\n\n根据 `Reactor` 的数量和处理资源池线程的数量不同，有 `3` 种典型的实现\n\n1. 单 `Reactor` 单线程\n2. 单 `Reactor` 多线程\n3. 主从 `Reactor` 多线程\n\n#### 单 Reactor 单线程\n\n原理图，并使用 `NIO` 群聊系统验证![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0005.png?x-oss-process=style/qingyun)\n\n#### 方案说明\n\n1. `Select` 是前面 `I/O` 复用模型介绍的标准网络编程 `API`，可以实现应用程序通过一个阻塞对象监听多路连接请求\n2. `Reactor` 对象通过 `Select` 监控客户端请求事件，收到事件后通过 `Dispatch` 进行分发\n3. 如果是建立连接请求事件，则由 `Acceptor` 通过 `Accept` 处理连接请求，然后创建一个 `Handler` 对象处理连接完成后的后续业务处理\n4. 如果不是建立连接事件，则 `Reactor` 会分发调用连接对应的 `Handler` 来响应\n5. `Handler` 会完成 `Read` → 业务处理 → `Send` 的完整业务流程\n\n结合实例：服务器端用一个线程通过多路复用搞定所有的 `IO` 操作（包括连接，读、写等），编码简单，清晰明了，但是如果客户端连接数量较多，将无法支撑，前面的 `NIO` 案例就属于这种模型。\n\n### 方案优缺点分析\n\n1. 优点：模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成\n2. 缺点：性能问题，只有一个线程，无法完全发挥多核 `CPU` 的性能。`Handler`在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈\n3. 缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障\n4. 使用场景：客户端的数量有限，业务处理非常快速，比如 `Redis` 在业务处理的时间复杂度 `O(1)` 的情况\n\n#### 单 Reactor 多线程\n\n方案说明\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0006.png?x-oss-process=style/qingyun)\n\n1. `Reactor` 对象通过 `Select` 监控客户端请求事件，收到事件后，通过 `Dispatch` 进行分发\n2. 如果是建立连接请求，则由 `Acceptor` 通过 `accept` 处理连接请求，然后创建一个 `Handler` 对象处理完成连接后的各种事件\n3. 如果不是连接请求，则由 `Reactor` 分发调用连接对应的 `handler` 来处理（也就是说连接已经建立，后续客户端再来请求，那基本就是数据请求了，直接调用之前为这个连接创建好的handler来处理）\n4. `handler` 只负责响应事件，不做具体的业务处理（这样不会使handler阻塞太久），通过 `read` 读取数据后，会分发给后面的 `worker` 线程池的某个线程处理业务。【业务处理是最费时的，所以将业务处理交给线程池去执行】\n5. `worker` 线程池会分配独立线程完成真正的业务，并将结果返回给 `handler`\n6. `handler` 收到响应后，通过 `send` 将结果返回给 `client`\n\n### 方案优缺点分析\n\n1. 优点：可以充分的利用多核 `cpu` 的处理能力\n2. 缺点：多线程数据共享和访问比较复杂。`Reactor` 承担所有的事件的监听和响应，它是单线程运行，在高并发场景容易出现性能瓶颈。也就是说`Reactor`主线程承担了过多的事\n\n主从 Reactor 多线程\n\n### 工作原理图\n\n针对单 `Reactor` 多线程模型中，`Reactor` 在单线程中运行，高并发场景下容易成为性能瓶颈，可以让 `Reactor` 在多线程中运行\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0007.png?x-oss-process=style/qingyun)\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0008.jpg?x-oss-process=style/qingyun)\n\n> SubReactor是可以有多个的，如果只有一个SubReactor的话那和`单 Reactor 多线程`就没什么区别了。\n\n1. `Reactor` 主线程 `MainReactor` 对象通过 `select` 监听连接事件，收到事件后，通过 `Acceptor` 处理连接事件\n2. 当 `Acceptor` 处理连接事件后，`MainReactor` 将连接分配给 `SubReactor`\n3. `subreactor` 将连接加入到连接队列进行监听，并创建 `handler` 进行各种事件处理\n4. 当有新事件发生时，`subreactor` 就会调用对应的 `handler` 处理\n5. `handler` 通过 `read` 读取数据，分发给后面的 `worker` 线程处理\n6. `worker` 线程池分配独立的 `worker` 线程进行业务处理，并返回结果\n7. `handler` 收到响应的结果后，再通过 `send` 将结果返回给 `client` \n8. `Reactor` 主线程可以对应多个 `Reactor` 子线程，即 `MainRecator` 可以关联多个 `SubReactor`\n\nScalable IO in Java 对 Multiple Reactors 的原理图解\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0009.jpg?x-oss-process=style/qingyun)\n\n### 方案优缺点说明\n\n1. 优点：父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理。\n2. 优点：父线程与子线程的数据交互简单，`Reactor` 主线程只需要把新连接传给子线程，子线程无需返回数据。\n3. 缺点：编程复杂度较高\n\n## Reactor 模式小结\n\n### 3 种模式用生活案例来理解\n\n1. 单 `Reactor` 单线程，前台接待员和服务员是同一个人，全程为顾客服\n2. 单 `Reactor` 多线程，`1` 个前台接待员，多个服务员，接待员只负责接待\n3. 主从 `Reactor` 多线程，多个前台接待员，多个服务生\n\n### Reactor 模式具有如下的优点\n\n1. 响应快，不必为单个同步时间所阻塞，虽然 `Reactor` 本身依然是同步的（比如你第一个SubReactor阻塞了，我可以调下一个 SubReactor为客户端服务）\n2. 可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销\n3. 扩展性好，可以方便的通过增加 `Reactor` 实例个数来充分利用 `CPU` 资源\n4. 复用性好，`Reactor` 模型本身与具体事件处理逻辑无关，具有很高的复用性\n\n","source":"_posts/从B站学习的Netty06.md","raw":"---\ntitle: 从B站学习的Netty06\nabbrlink: 2697793597\ndate: 2021-11-29 10:07:39\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n转载: https://imlql.cn/\n# Netty\n\n## 原生 NIO 存在的问题\n\n1. `NIO` 的类库和 `API` 繁杂，使用麻烦：需要熟练掌握 `Selector`、`ServerSocketChannel`、`SocketChannel`、`ByteBuffer`等。\n2. 需要具备其他的额外技能：要熟悉 `Java` 多线程编程，因为 `NIO` 编程涉及到 `Reactor` 模式，你必须对多线程和网络编程非常熟悉，才能编写出高质量的 `NIO` 程序。\n3. 开发工作量和难度都非常大：例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常流的处理等等。\n4. `JDK NIO` 的 `Bug`：例如臭名昭著的 `Epoll Bug`，它会导致 `Selector` 空轮询，最终导致 `CPU100%`。直到 `JDK1.7` 版本该问题仍旧存在，没有被根本解决。\n\n## Netty 官网说明\n\n官网：https://netty.io/\n\nNetty is an asynchronous event-driven network application framework  for rapid development of maintainable high performance protocol servers  & clients.\n\n![img](http://typa.qingyun.run/img/0001.png?x-oss-process=style/qingyun)\n\n## Netty 的优点\n\n`Netty` 对 `JDK` 自带的 `NIO` 的 `API` 进行了封装，解决了上述问题。\n\n1. 设计优雅：适用于各种传输类型的统一 `API` 阻塞和非阻塞 `Socket`；基于灵活且可扩展的事件模型，可以清晰地分离关注点；高度可定制的线程模型-单线程，一个或多个线程池。\n2. 使用方便：详细记录的 `Javadoc`，用户指南和示例；没有其他依赖项，`JDK5（Netty3.x）`或 `6（Netty4.x）`就足够了。\n3. 高性能、吞吐量更高：延迟更低；减少资源消耗；最小化不必要的内存复制。\n4. 安全：完整的 `SSL/TLS` 和 `StartTLS` 支持。\n5. 社区活跃、不断更新：社区活跃，版本迭代周期短，发现的 `Bug` 可以被及时修复，同时，更多的新功能会被加入。\n\n## Netty 版本说明\n\n1. `Netty` 版本分为 `Netty 3.x` 和 `Netty 4.x`、`Netty 5.x`\n2. 因为 `Netty 5` 出现重大 `bug`，已经被官网废弃了，目前推荐使用的是 `Netty 4.x`的稳定版本\n3. 目前在官网可下载的版本 `Netty 3.x`、`Netty 4.0.x` 和 `Netty 4.1.x`\n4. 在本套课程中，我们讲解 `Netty4.1.x` 版本\n5. `Netty` 下载地址：https://bintray.com/netty/downloads/netty/\n\n# Netty 高性能架构设计\n\n## 线程模型基本介绍\n\n1. 不同的线程模式，对程序的性能有很大影响，为了搞清 `Netty` 线程模式，我们来系统的讲解下各个线程模式，最后看看 `Netty` 线程模型有什么优越性。\n2. 目前存在的线程模型有：传统阻塞 `I/O` 服务模型 和`Reactor` 模式\n3. 根据 Reactor的数量和处理资源池线程的数量不同，有 3种典型的实现\n   - 单 `Reactor` 单线程；\n   - 单 `Reactor`多线程；\n   - 主从 `Reactor`多线程\n4. `Netty` 线程模式（`Netty` 主要基于主从 `Reactor` 多线程模型做了一定的改进，其中主从 `Reactor` 多线程模型有多个 `Reactor`）\n\n## 传统阻塞 I/O 服务模型\n\n### 工作原理图\n\n1. 黄色的框表示对象，蓝色的框表示线程\n2. 白色的框表示方法（`API`）\n\n### 模型特点\n\n1. 采用阻塞 `IO` 模式获取输入的数据\n2. 每个连接都需要独立的线程完成数据的输入，业务处理，数据返回\n\n### 问题分析\n\n1. 当并发数很大，就会创建大量的线程，占用很大系统资源\n2. 连接创建后，如果当前线程暂时没有数据可读，该线程会阻塞在 Handler对象中的`read` 操作，导致上面的处理线程资源浪费\n\n[![img](http://typa.qingyun.run/img/0002.png?x-oss-process=style/qingyun)](https://unpkg.zhimg.com/youthlql@1.0.0/netty/introduction/chapter_002/0002.png)\n\n## Reactor 模式\n\n### 针对传统阻塞 I/O 服务模型的 2 个缺点，解决方案：\n\n基于 `I/O` 复用模型：多个连接共用一个阻塞对象`ServiceHandler`，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。\n\n `Reactor` 在不同书中的叫法：\n\n1. 反应器模式 \n2. 分发者模式（Dispatcher）\n3. 通知者模式（notifier）\n4. 基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务。（解决了当并发数很大时，会创建大量线程，占用很大系统资源）\n5. 基于 `I/O` 复用模型：多个客户端进行连接，先把连接请求给`ServiceHandler`。多个连接共用一个阻塞对象`ServiceHandler`。假设，当C1连接没有数据要处理时，C1客户端只需要阻塞于`ServiceHandler`，C1之前的处理线程便可以处理其他有数据的连接，不会造成线程资源的浪费。当C1连接再次有数据时，`ServiceHandler`根据线程池的空闲状态，将请求分发给空闲的线程来处理C1连接的任务。（解决了线程资源浪费的那个问题）\n6. ![img](http://typa.qingyun.run/img/0003.png?x-oss-process=style/qingyun)\n\nI/O 复用结合线程池，就是 Reactor 模式基本设计思想，如图\n\n![img](http://typa.qingyun.run/img/0004.png?x-oss-process=style/qingyun)\n\n对上图说明：\n\n1. `Reactor` 模式，通过一个或多个输入同时传递给服务处理器（ServiceHandler）的模式（基于事件驱动）\n2. 服务器端程序处理传入的多个请求,并将它们同步分派到相应的处理线程，因此 `Reactor` 模式也叫 `Dispatcher` 模式\n3. `Reactor` 模式使用 `IO` 复用监听事件，收到事件后，分发给某个线程（进程），这点就是网络服务器高并发处理关键\n\n> 原先有多个Handler阻塞，现在只用一个ServiceHandler阻塞\n\n#### Reactor 模式中核心组成\n\n1. `Reactor（也就是那个ServiceHandler）`：`Reactor` 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理线程来对 `IO` 事件做出反应。它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人；\n2. `Handlers（处理线程EventHandler）`：处理线程执行 `I/O` 事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。`Reactor` 通过调度适当的处理线程来响应 `I/O` 事件，处理程序执行非阻塞操作。\n\n#### Reactor 模式分类\n\n根据 `Reactor` 的数量和处理资源池线程的数量不同，有 `3` 种典型的实现\n\n1. 单 `Reactor` 单线程\n2. 单 `Reactor` 多线程\n3. 主从 `Reactor` 多线程\n\n#### 单 Reactor 单线程\n\n原理图，并使用 `NIO` 群聊系统验证![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0005.png?x-oss-process=style/qingyun)\n\n#### 方案说明\n\n1. `Select` 是前面 `I/O` 复用模型介绍的标准网络编程 `API`，可以实现应用程序通过一个阻塞对象监听多路连接请求\n2. `Reactor` 对象通过 `Select` 监控客户端请求事件，收到事件后通过 `Dispatch` 进行分发\n3. 如果是建立连接请求事件，则由 `Acceptor` 通过 `Accept` 处理连接请求，然后创建一个 `Handler` 对象处理连接完成后的后续业务处理\n4. 如果不是建立连接事件，则 `Reactor` 会分发调用连接对应的 `Handler` 来响应\n5. `Handler` 会完成 `Read` → 业务处理 → `Send` 的完整业务流程\n\n结合实例：服务器端用一个线程通过多路复用搞定所有的 `IO` 操作（包括连接，读、写等），编码简单，清晰明了，但是如果客户端连接数量较多，将无法支撑，前面的 `NIO` 案例就属于这种模型。\n\n### 方案优缺点分析\n\n1. 优点：模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成\n2. 缺点：性能问题，只有一个线程，无法完全发挥多核 `CPU` 的性能。`Handler`在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈\n3. 缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障\n4. 使用场景：客户端的数量有限，业务处理非常快速，比如 `Redis` 在业务处理的时间复杂度 `O(1)` 的情况\n\n#### 单 Reactor 多线程\n\n方案说明\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0006.png?x-oss-process=style/qingyun)\n\n1. `Reactor` 对象通过 `Select` 监控客户端请求事件，收到事件后，通过 `Dispatch` 进行分发\n2. 如果是建立连接请求，则由 `Acceptor` 通过 `accept` 处理连接请求，然后创建一个 `Handler` 对象处理完成连接后的各种事件\n3. 如果不是连接请求，则由 `Reactor` 分发调用连接对应的 `handler` 来处理（也就是说连接已经建立，后续客户端再来请求，那基本就是数据请求了，直接调用之前为这个连接创建好的handler来处理）\n4. `handler` 只负责响应事件，不做具体的业务处理（这样不会使handler阻塞太久），通过 `read` 读取数据后，会分发给后面的 `worker` 线程池的某个线程处理业务。【业务处理是最费时的，所以将业务处理交给线程池去执行】\n5. `worker` 线程池会分配独立线程完成真正的业务，并将结果返回给 `handler`\n6. `handler` 收到响应后，通过 `send` 将结果返回给 `client`\n\n### 方案优缺点分析\n\n1. 优点：可以充分的利用多核 `cpu` 的处理能力\n2. 缺点：多线程数据共享和访问比较复杂。`Reactor` 承担所有的事件的监听和响应，它是单线程运行，在高并发场景容易出现性能瓶颈。也就是说`Reactor`主线程承担了过多的事\n\n主从 Reactor 多线程\n\n### 工作原理图\n\n针对单 `Reactor` 多线程模型中，`Reactor` 在单线程中运行，高并发场景下容易成为性能瓶颈，可以让 `Reactor` 在多线程中运行\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0007.png?x-oss-process=style/qingyun)\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0008.jpg?x-oss-process=style/qingyun)\n\n> SubReactor是可以有多个的，如果只有一个SubReactor的话那和`单 Reactor 多线程`就没什么区别了。\n\n1. `Reactor` 主线程 `MainReactor` 对象通过 `select` 监听连接事件，收到事件后，通过 `Acceptor` 处理连接事件\n2. 当 `Acceptor` 处理连接事件后，`MainReactor` 将连接分配给 `SubReactor`\n3. `subreactor` 将连接加入到连接队列进行监听，并创建 `handler` 进行各种事件处理\n4. 当有新事件发生时，`subreactor` 就会调用对应的 `handler` 处理\n5. `handler` 通过 `read` 读取数据，分发给后面的 `worker` 线程处理\n6. `worker` 线程池分配独立的 `worker` 线程进行业务处理，并返回结果\n7. `handler` 收到响应的结果后，再通过 `send` 将结果返回给 `client` \n8. `Reactor` 主线程可以对应多个 `Reactor` 子线程，即 `MainRecator` 可以关联多个 `SubReactor`\n\nScalable IO in Java 对 Multiple Reactors 的原理图解\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0009.jpg?x-oss-process=style/qingyun)\n\n### 方案优缺点说明\n\n1. 优点：父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理。\n2. 优点：父线程与子线程的数据交互简单，`Reactor` 主线程只需要把新连接传给子线程，子线程无需返回数据。\n3. 缺点：编程复杂度较高\n\n## Reactor 模式小结\n\n### 3 种模式用生活案例来理解\n\n1. 单 `Reactor` 单线程，前台接待员和服务员是同一个人，全程为顾客服\n2. 单 `Reactor` 多线程，`1` 个前台接待员，多个服务员，接待员只负责接待\n3. 主从 `Reactor` 多线程，多个前台接待员，多个服务生\n\n### Reactor 模式具有如下的优点\n\n1. 响应快，不必为单个同步时间所阻塞，虽然 `Reactor` 本身依然是同步的（比如你第一个SubReactor阻塞了，我可以调下一个 SubReactor为客户端服务）\n2. 可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销\n3. 扩展性好，可以方便的通过增加 `Reactor` 实例个数来充分利用 `CPU` 资源\n4. 复用性好，`Reactor` 模型本身与具体事件处理逻辑无关，具有很高的复用性\n\n","slug":"从B站学习的Netty06","published":1,"updated":"2021-11-29T02:08:11.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rl001qo4vb921o079u","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h1>Netty</h1>\n<h2 id=\"原生-NIO-存在的问题\">原生 NIO 存在的问题</h2>\n<ol>\n<li><code>NIO</code> 的类库和 <code>API</code> 繁杂，使用麻烦：需要熟练掌握 <code>Selector</code>、<code>ServerSocketChannel</code>、<code>SocketChannel</code>、<code>ByteBuffer</code>等。</li>\n<li>需要具备其他的额外技能：要熟悉 <code>Java</code> 多线程编程，因为 <code>NIO</code> 编程涉及到 <code>Reactor</code> 模式，你必须对多线程和网络编程非常熟悉，才能编写出高质量的 <code>NIO</code> 程序。</li>\n<li>开发工作量和难度都非常大：例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常流的处理等等。</li>\n<li><code>JDK NIO</code> 的 <code>Bug</code>：例如臭名昭著的 <code>Epoll Bug</code>，它会导致 <code>Selector</code> 空轮询，最终导致 <code>CPU100%</code>。直到 <code>JDK1.7</code> 版本该问题仍旧存在，没有被根本解决。</li>\n</ol>\n<h2 id=\"Netty-官网说明\">Netty 官网说明</h2>\n<p>官网：<a href=\"https://netty.io/\">https://netty.io/</a></p>\n<p>Netty is an asynchronous event-driven network application framework  for rapid development of maintainable high performance protocol servers  &amp; clients.</p>\n<p><img src=\"http://typa.qingyun.run/img/0001.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h2 id=\"Netty-的优点\">Netty 的优点</h2>\n<p><code>Netty</code> 对 <code>JDK</code> 自带的 <code>NIO</code> 的 <code>API</code> 进行了封装，解决了上述问题。</p>\n<ol>\n<li>设计优雅：适用于各种传输类型的统一 <code>API</code> 阻塞和非阻塞 <code>Socket</code>；基于灵活且可扩展的事件模型，可以清晰地分离关注点；高度可定制的线程模型-单线程，一个或多个线程池。</li>\n<li>使用方便：详细记录的 <code>Javadoc</code>，用户指南和示例；没有其他依赖项，<code>JDK5（Netty3.x）</code>或 <code>6（Netty4.x）</code>就足够了。</li>\n<li>高性能、吞吐量更高：延迟更低；减少资源消耗；最小化不必要的内存复制。</li>\n<li>安全：完整的 <code>SSL/TLS</code> 和 <code>StartTLS</code> 支持。</li>\n<li>社区活跃、不断更新：社区活跃，版本迭代周期短，发现的 <code>Bug</code> 可以被及时修复，同时，更多的新功能会被加入。</li>\n</ol>\n<h2 id=\"Netty-版本说明\">Netty 版本说明</h2>\n<ol>\n<li><code>Netty</code> 版本分为 <code>Netty 3.x</code> 和 <code>Netty 4.x</code>、<code>Netty 5.x</code></li>\n<li>因为 <code>Netty 5</code> 出现重大 <code>bug</code>，已经被官网废弃了，目前推荐使用的是 <code>Netty 4.x</code>的稳定版本</li>\n<li>目前在官网可下载的版本 <code>Netty 3.x</code>、<code>Netty 4.0.x</code> 和 <code>Netty 4.1.x</code></li>\n<li>在本套课程中，我们讲解 <code>Netty4.1.x</code> 版本</li>\n<li><code>Netty</code> 下载地址：<a href=\"https://bintray.com/netty/downloads/netty/\">https://bintray.com/netty/downloads/netty/</a></li>\n</ol>\n<h1>Netty 高性能架构设计</h1>\n<h2 id=\"线程模型基本介绍\">线程模型基本介绍</h2>\n<ol>\n<li>不同的线程模式，对程序的性能有很大影响，为了搞清 <code>Netty</code> 线程模式，我们来系统的讲解下各个线程模式，最后看看 <code>Netty</code> 线程模型有什么优越性。</li>\n<li>目前存在的线程模型有：传统阻塞 <code>I/O</code> 服务模型 和<code>Reactor</code> 模式</li>\n<li>根据 Reactor的数量和处理资源池线程的数量不同，有 3种典型的实现\n<ul>\n<li>单 <code>Reactor</code> 单线程；</li>\n<li>单 <code>Reactor</code>多线程；</li>\n<li>主从 <code>Reactor</code>多线程</li>\n</ul>\n</li>\n<li><code>Netty</code> 线程模式（<code>Netty</code> 主要基于主从 <code>Reactor</code> 多线程模型做了一定的改进，其中主从 <code>Reactor</code> 多线程模型有多个 <code>Reactor</code>）</li>\n</ol>\n<h2 id=\"传统阻塞-I-O-服务模型\">传统阻塞 I/O 服务模型</h2>\n<h3 id=\"工作原理图\">工作原理图</h3>\n<ol>\n<li>黄色的框表示对象，蓝色的框表示线程</li>\n<li>白色的框表示方法（<code>API</code>）</li>\n</ol>\n<h3 id=\"模型特点\">模型特点</h3>\n<ol>\n<li>采用阻塞 <code>IO</code> 模式获取输入的数据</li>\n<li>每个连接都需要独立的线程完成数据的输入，业务处理，数据返回</li>\n</ol>\n<h3 id=\"问题分析\">问题分析</h3>\n<ol>\n<li>当并发数很大，就会创建大量的线程，占用很大系统资源</li>\n<li>连接创建后，如果当前线程暂时没有数据可读，该线程会阻塞在 Handler对象中的<code>read</code> 操作，导致上面的处理线程资源浪费</li>\n</ol>\n<p><a href=\"https://unpkg.zhimg.com/youthlql@1.0.0/netty/introduction/chapter_002/0002.png\"><img src=\"http://typa.qingyun.run/img/0002.png?x-oss-process=style/qingyun\" alt=\"img\"></a></p>\n<h2 id=\"Reactor-模式\">Reactor 模式</h2>\n<h3 id=\"针对传统阻塞-I-O-服务模型的-2-个缺点，解决方案：\">针对传统阻塞 I/O 服务模型的 2 个缺点，解决方案：</h3>\n<p>基于 <code>I/O</code> 复用模型：多个连接共用一个阻塞对象<code>ServiceHandler</code>，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。</p>\n<p><code>Reactor</code> 在不同书中的叫法：</p>\n<ol>\n<li>反应器模式</li>\n<li>分发者模式（Dispatcher）</li>\n<li>通知者模式（notifier）</li>\n<li>基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务。（解决了当并发数很大时，会创建大量线程，占用很大系统资源）</li>\n<li>基于 <code>I/O</code> 复用模型：多个客户端进行连接，先把连接请求给<code>ServiceHandler</code>。多个连接共用一个阻塞对象<code>ServiceHandler</code>。假设，当C1连接没有数据要处理时，C1客户端只需要阻塞于<code>ServiceHandler</code>，C1之前的处理线程便可以处理其他有数据的连接，不会造成线程资源的浪费。当C1连接再次有数据时，<code>ServiceHandler</code>根据线程池的空闲状态，将请求分发给空闲的线程来处理C1连接的任务。（解决了线程资源浪费的那个问题）</li>\n<li><img src=\"http://typa.qingyun.run/img/0003.png?x-oss-process=style/qingyun\" alt=\"img\"></li>\n</ol>\n<p>I/O 复用结合线程池，就是 Reactor 模式基本设计思想，如图</p>\n<p><img src=\"http://typa.qingyun.run/img/0004.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>对上图说明：</p>\n<ol>\n<li><code>Reactor</code> 模式，通过一个或多个输入同时传递给服务处理器（ServiceHandler）的模式（基于事件驱动）</li>\n<li>服务器端程序处理传入的多个请求,并将它们同步分派到相应的处理线程，因此 <code>Reactor</code> 模式也叫 <code>Dispatcher</code> 模式</li>\n<li><code>Reactor</code> 模式使用 <code>IO</code> 复用监听事件，收到事件后，分发给某个线程（进程），这点就是网络服务器高并发处理关键</li>\n</ol>\n<blockquote>\n<p>原先有多个Handler阻塞，现在只用一个ServiceHandler阻塞</p>\n</blockquote>\n<h4 id=\"Reactor-模式中核心组成\">Reactor 模式中核心组成</h4>\n<ol>\n<li><code>Reactor（也就是那个ServiceHandler）</code>：<code>Reactor</code> 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理线程来对 <code>IO</code> 事件做出反应。它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人；</li>\n<li><code>Handlers（处理线程EventHandler）</code>：处理线程执行 <code>I/O</code> 事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。<code>Reactor</code> 通过调度适当的处理线程来响应 <code>I/O</code> 事件，处理程序执行非阻塞操作。</li>\n</ol>\n<h4 id=\"Reactor-模式分类\">Reactor 模式分类</h4>\n<p>根据 <code>Reactor</code> 的数量和处理资源池线程的数量不同，有 <code>3</code> 种典型的实现</p>\n<ol>\n<li>单 <code>Reactor</code> 单线程</li>\n<li>单 <code>Reactor</code> 多线程</li>\n<li>主从 <code>Reactor</code> 多线程</li>\n</ol>\n<h4 id=\"单-Reactor-单线程\">单 Reactor 单线程</h4>\n<p>原理图，并使用 <code>NIO</code> 群聊系统验证<img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0005.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h4 id=\"方案说明\">方案说明</h4>\n<ol>\n<li><code>Select</code> 是前面 <code>I/O</code> 复用模型介绍的标准网络编程 <code>API</code>，可以实现应用程序通过一个阻塞对象监听多路连接请求</li>\n<li><code>Reactor</code> 对象通过 <code>Select</code> 监控客户端请求事件，收到事件后通过 <code>Dispatch</code> 进行分发</li>\n<li>如果是建立连接请求事件，则由 <code>Acceptor</code> 通过 <code>Accept</code> 处理连接请求，然后创建一个 <code>Handler</code> 对象处理连接完成后的后续业务处理</li>\n<li>如果不是建立连接事件，则 <code>Reactor</code> 会分发调用连接对应的 <code>Handler</code> 来响应</li>\n<li><code>Handler</code> 会完成 <code>Read</code> → 业务处理 → <code>Send</code> 的完整业务流程</li>\n</ol>\n<p>结合实例：服务器端用一个线程通过多路复用搞定所有的 <code>IO</code> 操作（包括连接，读、写等），编码简单，清晰明了，但是如果客户端连接数量较多，将无法支撑，前面的 <code>NIO</code> 案例就属于这种模型。</p>\n<h3 id=\"方案优缺点分析\">方案优缺点分析</h3>\n<ol>\n<li>优点：模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成</li>\n<li>缺点：性能问题，只有一个线程，无法完全发挥多核 <code>CPU</code> 的性能。<code>Handler</code>在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈</li>\n<li>缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障</li>\n<li>使用场景：客户端的数量有限，业务处理非常快速，比如 <code>Redis</code> 在业务处理的时间复杂度 <code>O(1)</code> 的情况</li>\n</ol>\n<h4 id=\"单-Reactor-多线程\">单 Reactor 多线程</h4>\n<p>方案说明</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0006.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ol>\n<li><code>Reactor</code> 对象通过 <code>Select</code> 监控客户端请求事件，收到事件后，通过 <code>Dispatch</code> 进行分发</li>\n<li>如果是建立连接请求，则由 <code>Acceptor</code> 通过 <code>accept</code> 处理连接请求，然后创建一个 <code>Handler</code> 对象处理完成连接后的各种事件</li>\n<li>如果不是连接请求，则由 <code>Reactor</code> 分发调用连接对应的 <code>handler</code> 来处理（也就是说连接已经建立，后续客户端再来请求，那基本就是数据请求了，直接调用之前为这个连接创建好的handler来处理）</li>\n<li><code>handler</code> 只负责响应事件，不做具体的业务处理（这样不会使handler阻塞太久），通过 <code>read</code> 读取数据后，会分发给后面的 <code>worker</code> 线程池的某个线程处理业务。【业务处理是最费时的，所以将业务处理交给线程池去执行】</li>\n<li><code>worker</code> 线程池会分配独立线程完成真正的业务，并将结果返回给 <code>handler</code></li>\n<li><code>handler</code> 收到响应后，通过 <code>send</code> 将结果返回给 <code>client</code></li>\n</ol>\n<h3 id=\"方案优缺点分析-2\">方案优缺点分析</h3>\n<ol>\n<li>优点：可以充分的利用多核 <code>cpu</code> 的处理能力</li>\n<li>缺点：多线程数据共享和访问比较复杂。<code>Reactor</code> 承担所有的事件的监听和响应，它是单线程运行，在高并发场景容易出现性能瓶颈。也就是说<code>Reactor</code>主线程承担了过多的事</li>\n</ol>\n<p>主从 Reactor 多线程</p>\n<h3 id=\"工作原理图-2\">工作原理图</h3>\n<p>针对单 <code>Reactor</code> 多线程模型中，<code>Reactor</code> 在单线程中运行，高并发场景下容易成为性能瓶颈，可以让 <code>Reactor</code> 在多线程中运行</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0007.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0008.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<blockquote>\n<p>SubReactor是可以有多个的，如果只有一个SubReactor的话那和<code>单 Reactor 多线程</code>就没什么区别了。</p>\n</blockquote>\n<ol>\n<li><code>Reactor</code> 主线程 <code>MainReactor</code> 对象通过 <code>select</code> 监听连接事件，收到事件后，通过 <code>Acceptor</code> 处理连接事件</li>\n<li>当 <code>Acceptor</code> 处理连接事件后，<code>MainReactor</code> 将连接分配给 <code>SubReactor</code></li>\n<li><code>subreactor</code> 将连接加入到连接队列进行监听，并创建 <code>handler</code> 进行各种事件处理</li>\n<li>当有新事件发生时，<code>subreactor</code> 就会调用对应的 <code>handler</code> 处理</li>\n<li><code>handler</code> 通过 <code>read</code> 读取数据，分发给后面的 <code>worker</code> 线程处理</li>\n<li><code>worker</code> 线程池分配独立的 <code>worker</code> 线程进行业务处理，并返回结果</li>\n<li><code>handler</code> 收到响应的结果后，再通过 <code>send</code> 将结果返回给 <code>client</code></li>\n<li><code>Reactor</code> 主线程可以对应多个 <code>Reactor</code> 子线程，即 <code>MainRecator</code> 可以关联多个 <code>SubReactor</code></li>\n</ol>\n<p>Scalable IO in Java 对 Multiple Reactors 的原理图解</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0009.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h3 id=\"方案优缺点说明\">方案优缺点说明</h3>\n<ol>\n<li>优点：父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理。</li>\n<li>优点：父线程与子线程的数据交互简单，<code>Reactor</code> 主线程只需要把新连接传给子线程，子线程无需返回数据。</li>\n<li>缺点：编程复杂度较高</li>\n</ol>\n<h2 id=\"Reactor-模式小结\">Reactor 模式小结</h2>\n<h3 id=\"3-种模式用生活案例来理解\">3 种模式用生活案例来理解</h3>\n<ol>\n<li>单 <code>Reactor</code> 单线程，前台接待员和服务员是同一个人，全程为顾客服</li>\n<li>单 <code>Reactor</code> 多线程，<code>1</code> 个前台接待员，多个服务员，接待员只负责接待</li>\n<li>主从 <code>Reactor</code> 多线程，多个前台接待员，多个服务生</li>\n</ol>\n<h3 id=\"Reactor-模式具有如下的优点\">Reactor 模式具有如下的优点</h3>\n<ol>\n<li>响应快，不必为单个同步时间所阻塞，虽然 <code>Reactor</code> 本身依然是同步的（比如你第一个SubReactor阻塞了，我可以调下一个 SubReactor为客户端服务）</li>\n<li>可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销</li>\n<li>扩展性好，可以方便的通过增加 <code>Reactor</code> 实例个数来充分利用 <code>CPU</code> 资源</li>\n<li>复用性好，<code>Reactor</code> 模型本身与具体事件处理逻辑无关，具有很高的复用性</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h1>Netty</h1>\n<h2 id=\"原生-NIO-存在的问题\">原生 NIO 存在的问题</h2>\n<ol>\n<li><code>NIO</code> 的类库和 <code>API</code> 繁杂，使用麻烦：需要熟练掌握 <code>Selector</code>、<code>ServerSocketChannel</code>、<code>SocketChannel</code>、<code>ByteBuffer</code>等。</li>\n<li>需要具备其他的额外技能：要熟悉 <code>Java</code> 多线程编程，因为 <code>NIO</code> 编程涉及到 <code>Reactor</code> 模式，你必须对多线程和网络编程非常熟悉，才能编写出高质量的 <code>NIO</code> 程序。</li>\n<li>开发工作量和难度都非常大：例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常流的处理等等。</li>\n<li><code>JDK NIO</code> 的 <code>Bug</code>：例如臭名昭著的 <code>Epoll Bug</code>，它会导致 <code>Selector</code> 空轮询，最终导致 <code>CPU100%</code>。直到 <code>JDK1.7</code> 版本该问题仍旧存在，没有被根本解决。</li>\n</ol>\n<h2 id=\"Netty-官网说明\">Netty 官网说明</h2>\n<p>官网：<a href=\"https://netty.io/\">https://netty.io/</a></p>\n<p>Netty is an asynchronous event-driven network application framework  for rapid development of maintainable high performance protocol servers  &amp; clients.</p>\n<p><img src=\"http://typa.qingyun.run/img/0001.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h2 id=\"Netty-的优点\">Netty 的优点</h2>\n<p><code>Netty</code> 对 <code>JDK</code> 自带的 <code>NIO</code> 的 <code>API</code> 进行了封装，解决了上述问题。</p>\n<ol>\n<li>设计优雅：适用于各种传输类型的统一 <code>API</code> 阻塞和非阻塞 <code>Socket</code>；基于灵活且可扩展的事件模型，可以清晰地分离关注点；高度可定制的线程模型-单线程，一个或多个线程池。</li>\n<li>使用方便：详细记录的 <code>Javadoc</code>，用户指南和示例；没有其他依赖项，<code>JDK5（Netty3.x）</code>或 <code>6（Netty4.x）</code>就足够了。</li>\n<li>高性能、吞吐量更高：延迟更低；减少资源消耗；最小化不必要的内存复制。</li>\n<li>安全：完整的 <code>SSL/TLS</code> 和 <code>StartTLS</code> 支持。</li>\n<li>社区活跃、不断更新：社区活跃，版本迭代周期短，发现的 <code>Bug</code> 可以被及时修复，同时，更多的新功能会被加入。</li>\n</ol>\n<h2 id=\"Netty-版本说明\">Netty 版本说明</h2>\n<ol>\n<li><code>Netty</code> 版本分为 <code>Netty 3.x</code> 和 <code>Netty 4.x</code>、<code>Netty 5.x</code></li>\n<li>因为 <code>Netty 5</code> 出现重大 <code>bug</code>，已经被官网废弃了，目前推荐使用的是 <code>Netty 4.x</code>的稳定版本</li>\n<li>目前在官网可下载的版本 <code>Netty 3.x</code>、<code>Netty 4.0.x</code> 和 <code>Netty 4.1.x</code></li>\n<li>在本套课程中，我们讲解 <code>Netty4.1.x</code> 版本</li>\n<li><code>Netty</code> 下载地址：<a href=\"https://bintray.com/netty/downloads/netty/\">https://bintray.com/netty/downloads/netty/</a></li>\n</ol>\n<h1>Netty 高性能架构设计</h1>\n<h2 id=\"线程模型基本介绍\">线程模型基本介绍</h2>\n<ol>\n<li>不同的线程模式，对程序的性能有很大影响，为了搞清 <code>Netty</code> 线程模式，我们来系统的讲解下各个线程模式，最后看看 <code>Netty</code> 线程模型有什么优越性。</li>\n<li>目前存在的线程模型有：传统阻塞 <code>I/O</code> 服务模型 和<code>Reactor</code> 模式</li>\n<li>根据 Reactor的数量和处理资源池线程的数量不同，有 3种典型的实现\n<ul>\n<li>单 <code>Reactor</code> 单线程；</li>\n<li>单 <code>Reactor</code>多线程；</li>\n<li>主从 <code>Reactor</code>多线程</li>\n</ul>\n</li>\n<li><code>Netty</code> 线程模式（<code>Netty</code> 主要基于主从 <code>Reactor</code> 多线程模型做了一定的改进，其中主从 <code>Reactor</code> 多线程模型有多个 <code>Reactor</code>）</li>\n</ol>\n<h2 id=\"传统阻塞-I-O-服务模型\">传统阻塞 I/O 服务模型</h2>\n<h3 id=\"工作原理图\">工作原理图</h3>\n<ol>\n<li>黄色的框表示对象，蓝色的框表示线程</li>\n<li>白色的框表示方法（<code>API</code>）</li>\n</ol>\n<h3 id=\"模型特点\">模型特点</h3>\n<ol>\n<li>采用阻塞 <code>IO</code> 模式获取输入的数据</li>\n<li>每个连接都需要独立的线程完成数据的输入，业务处理，数据返回</li>\n</ol>\n<h3 id=\"问题分析\">问题分析</h3>\n<ol>\n<li>当并发数很大，就会创建大量的线程，占用很大系统资源</li>\n<li>连接创建后，如果当前线程暂时没有数据可读，该线程会阻塞在 Handler对象中的<code>read</code> 操作，导致上面的处理线程资源浪费</li>\n</ol>\n<p><a href=\"https://unpkg.zhimg.com/youthlql@1.0.0/netty/introduction/chapter_002/0002.png\"><img src=\"http://typa.qingyun.run/img/0002.png?x-oss-process=style/qingyun\" alt=\"img\"></a></p>\n<h2 id=\"Reactor-模式\">Reactor 模式</h2>\n<h3 id=\"针对传统阻塞-I-O-服务模型的-2-个缺点，解决方案：\">针对传统阻塞 I/O 服务模型的 2 个缺点，解决方案：</h3>\n<p>基于 <code>I/O</code> 复用模型：多个连接共用一个阻塞对象<code>ServiceHandler</code>，应用程序只需要在一个阻塞对象等待，无需阻塞等待所有连接。当某个连接有新的数据可以处理时，操作系统通知应用程序，线程从阻塞状态返回，开始进行业务处理。</p>\n<p><code>Reactor</code> 在不同书中的叫法：</p>\n<ol>\n<li>反应器模式</li>\n<li>分发者模式（Dispatcher）</li>\n<li>通知者模式（notifier）</li>\n<li>基于线程池复用线程资源：不必再为每个连接创建线程，将连接完成后的业务处理任务分配给线程进行处理，一个线程可以处理多个连接的业务。（解决了当并发数很大时，会创建大量线程，占用很大系统资源）</li>\n<li>基于 <code>I/O</code> 复用模型：多个客户端进行连接，先把连接请求给<code>ServiceHandler</code>。多个连接共用一个阻塞对象<code>ServiceHandler</code>。假设，当C1连接没有数据要处理时，C1客户端只需要阻塞于<code>ServiceHandler</code>，C1之前的处理线程便可以处理其他有数据的连接，不会造成线程资源的浪费。当C1连接再次有数据时，<code>ServiceHandler</code>根据线程池的空闲状态，将请求分发给空闲的线程来处理C1连接的任务。（解决了线程资源浪费的那个问题）</li>\n<li><img src=\"http://typa.qingyun.run/img/0003.png?x-oss-process=style/qingyun\" alt=\"img\"></li>\n</ol>\n<p>I/O 复用结合线程池，就是 Reactor 模式基本设计思想，如图</p>\n<p><img src=\"http://typa.qingyun.run/img/0004.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>对上图说明：</p>\n<ol>\n<li><code>Reactor</code> 模式，通过一个或多个输入同时传递给服务处理器（ServiceHandler）的模式（基于事件驱动）</li>\n<li>服务器端程序处理传入的多个请求,并将它们同步分派到相应的处理线程，因此 <code>Reactor</code> 模式也叫 <code>Dispatcher</code> 模式</li>\n<li><code>Reactor</code> 模式使用 <code>IO</code> 复用监听事件，收到事件后，分发给某个线程（进程），这点就是网络服务器高并发处理关键</li>\n</ol>\n<blockquote>\n<p>原先有多个Handler阻塞，现在只用一个ServiceHandler阻塞</p>\n</blockquote>\n<h4 id=\"Reactor-模式中核心组成\">Reactor 模式中核心组成</h4>\n<ol>\n<li><code>Reactor（也就是那个ServiceHandler）</code>：<code>Reactor</code> 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理线程来对 <code>IO</code> 事件做出反应。它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人；</li>\n<li><code>Handlers（处理线程EventHandler）</code>：处理线程执行 <code>I/O</code> 事件要完成的实际事件，类似于客户想要与之交谈的公司中的实际官员。<code>Reactor</code> 通过调度适当的处理线程来响应 <code>I/O</code> 事件，处理程序执行非阻塞操作。</li>\n</ol>\n<h4 id=\"Reactor-模式分类\">Reactor 模式分类</h4>\n<p>根据 <code>Reactor</code> 的数量和处理资源池线程的数量不同，有 <code>3</code> 种典型的实现</p>\n<ol>\n<li>单 <code>Reactor</code> 单线程</li>\n<li>单 <code>Reactor</code> 多线程</li>\n<li>主从 <code>Reactor</code> 多线程</li>\n</ol>\n<h4 id=\"单-Reactor-单线程\">单 Reactor 单线程</h4>\n<p>原理图，并使用 <code>NIO</code> 群聊系统验证<img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0005.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h4 id=\"方案说明\">方案说明</h4>\n<ol>\n<li><code>Select</code> 是前面 <code>I/O</code> 复用模型介绍的标准网络编程 <code>API</code>，可以实现应用程序通过一个阻塞对象监听多路连接请求</li>\n<li><code>Reactor</code> 对象通过 <code>Select</code> 监控客户端请求事件，收到事件后通过 <code>Dispatch</code> 进行分发</li>\n<li>如果是建立连接请求事件，则由 <code>Acceptor</code> 通过 <code>Accept</code> 处理连接请求，然后创建一个 <code>Handler</code> 对象处理连接完成后的后续业务处理</li>\n<li>如果不是建立连接事件，则 <code>Reactor</code> 会分发调用连接对应的 <code>Handler</code> 来响应</li>\n<li><code>Handler</code> 会完成 <code>Read</code> → 业务处理 → <code>Send</code> 的完整业务流程</li>\n</ol>\n<p>结合实例：服务器端用一个线程通过多路复用搞定所有的 <code>IO</code> 操作（包括连接，读、写等），编码简单，清晰明了，但是如果客户端连接数量较多，将无法支撑，前面的 <code>NIO</code> 案例就属于这种模型。</p>\n<h3 id=\"方案优缺点分析\">方案优缺点分析</h3>\n<ol>\n<li>优点：模型简单，没有多线程、进程通信、竞争的问题，全部都在一个线程中完成</li>\n<li>缺点：性能问题，只有一个线程，无法完全发挥多核 <code>CPU</code> 的性能。<code>Handler</code>在处理某个连接上的业务时，整个进程无法处理其他连接事件，很容易导致性能瓶颈</li>\n<li>缺点：可靠性问题，线程意外终止，或者进入死循环，会导致整个系统通信模块不可用，不能接收和处理外部消息，造成节点故障</li>\n<li>使用场景：客户端的数量有限，业务处理非常快速，比如 <code>Redis</code> 在业务处理的时间复杂度 <code>O(1)</code> 的情况</li>\n</ol>\n<h4 id=\"单-Reactor-多线程\">单 Reactor 多线程</h4>\n<p>方案说明</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0006.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ol>\n<li><code>Reactor</code> 对象通过 <code>Select</code> 监控客户端请求事件，收到事件后，通过 <code>Dispatch</code> 进行分发</li>\n<li>如果是建立连接请求，则由 <code>Acceptor</code> 通过 <code>accept</code> 处理连接请求，然后创建一个 <code>Handler</code> 对象处理完成连接后的各种事件</li>\n<li>如果不是连接请求，则由 <code>Reactor</code> 分发调用连接对应的 <code>handler</code> 来处理（也就是说连接已经建立，后续客户端再来请求，那基本就是数据请求了，直接调用之前为这个连接创建好的handler来处理）</li>\n<li><code>handler</code> 只负责响应事件，不做具体的业务处理（这样不会使handler阻塞太久），通过 <code>read</code> 读取数据后，会分发给后面的 <code>worker</code> 线程池的某个线程处理业务。【业务处理是最费时的，所以将业务处理交给线程池去执行】</li>\n<li><code>worker</code> 线程池会分配独立线程完成真正的业务，并将结果返回给 <code>handler</code></li>\n<li><code>handler</code> 收到响应后，通过 <code>send</code> 将结果返回给 <code>client</code></li>\n</ol>\n<h3 id=\"方案优缺点分析-2\">方案优缺点分析</h3>\n<ol>\n<li>优点：可以充分的利用多核 <code>cpu</code> 的处理能力</li>\n<li>缺点：多线程数据共享和访问比较复杂。<code>Reactor</code> 承担所有的事件的监听和响应，它是单线程运行，在高并发场景容易出现性能瓶颈。也就是说<code>Reactor</code>主线程承担了过多的事</li>\n</ol>\n<p>主从 Reactor 多线程</p>\n<h3 id=\"工作原理图-2\">工作原理图</h3>\n<p>针对单 <code>Reactor</code> 多线程模型中，<code>Reactor</code> 在单线程中运行，高并发场景下容易成为性能瓶颈，可以让 <code>Reactor</code> 在多线程中运行</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0007.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0008.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<blockquote>\n<p>SubReactor是可以有多个的，如果只有一个SubReactor的话那和<code>单 Reactor 多线程</code>就没什么区别了。</p>\n</blockquote>\n<ol>\n<li><code>Reactor</code> 主线程 <code>MainReactor</code> 对象通过 <code>select</code> 监听连接事件，收到事件后，通过 <code>Acceptor</code> 处理连接事件</li>\n<li>当 <code>Acceptor</code> 处理连接事件后，<code>MainReactor</code> 将连接分配给 <code>SubReactor</code></li>\n<li><code>subreactor</code> 将连接加入到连接队列进行监听，并创建 <code>handler</code> 进行各种事件处理</li>\n<li>当有新事件发生时，<code>subreactor</code> 就会调用对应的 <code>handler</code> 处理</li>\n<li><code>handler</code> 通过 <code>read</code> 读取数据，分发给后面的 <code>worker</code> 线程处理</li>\n<li><code>worker</code> 线程池分配独立的 <code>worker</code> 线程进行业务处理，并返回结果</li>\n<li><code>handler</code> 收到响应的结果后，再通过 <code>send</code> 将结果返回给 <code>client</code></li>\n<li><code>Reactor</code> 主线程可以对应多个 <code>Reactor</code> 子线程，即 <code>MainRecator</code> 可以关联多个 <code>SubReactor</code></li>\n</ol>\n<p>Scalable IO in Java 对 Multiple Reactors 的原理图解</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0009.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h3 id=\"方案优缺点说明\">方案优缺点说明</h3>\n<ol>\n<li>优点：父线程与子线程的数据交互简单职责明确，父线程只需要接收新连接，子线程完成后续的业务处理。</li>\n<li>优点：父线程与子线程的数据交互简单，<code>Reactor</code> 主线程只需要把新连接传给子线程，子线程无需返回数据。</li>\n<li>缺点：编程复杂度较高</li>\n</ol>\n<h2 id=\"Reactor-模式小结\">Reactor 模式小结</h2>\n<h3 id=\"3-种模式用生活案例来理解\">3 种模式用生活案例来理解</h3>\n<ol>\n<li>单 <code>Reactor</code> 单线程，前台接待员和服务员是同一个人，全程为顾客服</li>\n<li>单 <code>Reactor</code> 多线程，<code>1</code> 个前台接待员，多个服务员，接待员只负责接待</li>\n<li>主从 <code>Reactor</code> 多线程，多个前台接待员，多个服务生</li>\n</ol>\n<h3 id=\"Reactor-模式具有如下的优点\">Reactor 模式具有如下的优点</h3>\n<ol>\n<li>响应快，不必为单个同步时间所阻塞，虽然 <code>Reactor</code> 本身依然是同步的（比如你第一个SubReactor阻塞了，我可以调下一个 SubReactor为客户端服务）</li>\n<li>可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销</li>\n<li>扩展性好，可以方便的通过增加 <code>Reactor</code> 实例个数来充分利用 <code>CPU</code> 资源</li>\n<li>复用性好，<code>Reactor</code> 模型本身与具体事件处理逻辑无关，具有很高的复用性</li>\n</ol>\n"},{"title":"从B站学习的Netty05","abbrlink":969163143,"date":"2021-11-29T02:06:51.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n### NIO与零拷贝\n\n\n\n## BIO、NIO、AIO 对比表\n\n|          | BIO      | NIO                    | AIO        |\n| -------- | -------- | ---------------------- | ---------- |\n| IO模型   | 同步阻塞 | 同步非阻塞（多路复用） | 异步非阻塞 |\n| 编程难度 | 简单     | 复杂                   | 复杂       |\n| 可靠性   | 差       | 好                     | 好         |\n| 吞吐量   | 低       | 高                     | 高         |\n\n**举例说明** \n\n1. 同步阻塞：到理发店理发，就一直等理发师，直到轮到自己理发。\n2. 同步非阻塞：到理发店理发，发现前面有其它人理发，给理发师说下，先干其他事情，一会过来看是否轮到自己.\n3. 异步非阻塞：给理发师打电话，让理发师上门服务，自己干其它事情，理发师自己来家给你理发","source":"_posts/从B站学习的Netty05.md","raw":"---\ntitle: 从B站学习的Netty05\nabbrlink: 969163143\ndate: 2021-11-29 10:06:51\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n### NIO与零拷贝\n\n\n\n## BIO、NIO、AIO 对比表\n\n|          | BIO      | NIO                    | AIO        |\n| -------- | -------- | ---------------------- | ---------- |\n| IO模型   | 同步阻塞 | 同步非阻塞（多路复用） | 异步非阻塞 |\n| 编程难度 | 简单     | 复杂                   | 复杂       |\n| 可靠性   | 差       | 好                     | 好         |\n| 吞吐量   | 低       | 高                     | 高         |\n\n**举例说明** \n\n1. 同步阻塞：到理发店理发，就一直等理发师，直到轮到自己理发。\n2. 同步非阻塞：到理发店理发，发现前面有其它人理发，给理发师说下，先干其他事情，一会过来看是否轮到自己.\n3. 异步非阻塞：给理发师打电话，让理发师上门服务，自己干其它事情，理发师自己来家给你理发","slug":"从B站学习的Netty05","published":1,"updated":"2021-11-29T02:07:29.749Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rm001to4vbg49kaukq","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h3 id=\"NIO与零拷贝\">NIO与零拷贝</h3>\n<h2 id=\"BIO、NIO、AIO-对比表\">BIO、NIO、AIO 对比表</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>BIO</th>\n<th>NIO</th>\n<th>AIO</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IO模型</td>\n<td>同步阻塞</td>\n<td>同步非阻塞（多路复用）</td>\n<td>异步非阻塞</td>\n</tr>\n<tr>\n<td>编程难度</td>\n<td>简单</td>\n<td>复杂</td>\n<td>复杂</td>\n</tr>\n<tr>\n<td>可靠性</td>\n<td>差</td>\n<td>好</td>\n<td>好</td>\n</tr>\n<tr>\n<td>吞吐量</td>\n<td>低</td>\n<td>高</td>\n<td>高</td>\n</tr>\n</tbody>\n</table>\n<p><strong>举例说明</strong></p>\n<ol>\n<li>同步阻塞：到理发店理发，就一直等理发师，直到轮到自己理发。</li>\n<li>同步非阻塞：到理发店理发，发现前面有其它人理发，给理发师说下，先干其他事情，一会过来看是否轮到自己.</li>\n<li>异步非阻塞：给理发师打电话，让理发师上门服务，自己干其它事情，理发师自己来家给你理发</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com - 304024 sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h3 id=\"NIO与零拷贝\">NIO与零拷贝</h3>\n<h2 id=\"BIO、NIO、AIO-对比表\">BIO、NIO、AIO 对比表</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>BIO</th>\n<th>NIO</th>\n<th>AIO</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IO模型</td>\n<td>同步阻塞</td>\n<td>同步非阻塞（多路复用）</td>\n<td>异步非阻塞</td>\n</tr>\n<tr>\n<td>编程难度</td>\n<td>简单</td>\n<td>复杂</td>\n<td>复杂</td>\n</tr>\n<tr>\n<td>可靠性</td>\n<td>差</td>\n<td>好</td>\n<td>好</td>\n</tr>\n<tr>\n<td>吞吐量</td>\n<td>低</td>\n<td>高</td>\n<td>高</td>\n</tr>\n</tbody>\n</table>\n<p><strong>举例说明</strong></p>\n<ol>\n<li>同步阻塞：到理发店理发，就一直等理发师，直到轮到自己理发。</li>\n<li>同步非阻塞：到理发店理发，发现前面有其它人理发，给理发师说下，先干其他事情，一会过来看是否轮到自己.</li>\n<li>异步非阻塞：给理发师打电话，让理发师上门服务，自己干其它事情，理发师自己来家给你理发</li>\n</ol>\n"},{"title":"从B站学习的Netty07","abbrlink":3620348075,"date":"2021-11-29T02:08:21.000Z","copyright":false,"_content":"转载: https://imlql.cn/\n## Netty 模型\n\n> 讲解netty的时候采用的是先写代码体验一下，再细讲里面的原理。前面看不懂的可以先不用纠结，先往后面看，后面基本都会讲清楚\n\n\n\n### 工作原理示意图1 - 简单版\n\n<p><code>Netty</code> 主要基于主从 <code>Reactors</code> 多线程模型（如图）做了一定的改进，其中主从 <code>Reactor</code> 多线程模型有多个 <code>Reactor</code></p>\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0010.png?x-oss-process=style/qingyun)\n\n**对上图说明**\n\n1. `BossGroup` 线程维护 `Selector`，只关注 `Accecpt` \n2. 当接收到 `Accept` 事件，获取到对应的 `SocketChannel`，封装成 `NIOScoketChannel` 并注册到 `Worker` 线程（事件循环），并进行维护\n3. 当 `Worker` 线程监听到 `Selector` 中通道发生自己感兴趣的事件后，就进行处理（就由 `handler`），注意 `handler` 已经加入到通道\n\n### 工作原理示意图2 - 进阶版\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0011.png?x-oss-process=style/qingyun)\n\n`BossGroup`有点像主`Reactor` 可以有多个，`WorkerGroup`则像`SubReactor`一样可以有多个。\n\n## 工作原理示意图3 - 详细版\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0012.png?x-oss-process=style/qingyun)\n\n<ol>\n<li><code>Netty</code> 抽象出两组线程池 ，<code>BossGroup</code> 专门负责接收客户端的连接，<code>WorkerGroup</code> 专门负责网络的读写</li>\n<li><code>BossGroup</code> 和 <code>WorkerGroup</code> 类型都是 <code>NioEventLoopGroup</code> </li>\n<li><code>NioEventLoopGroup</code> 相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是 <code>NioEventLoop</code> </li>\n<li><code>NioEventLoop</code> 表示一个不断循环的执行处理任务的线程，每个 <code>NioEventLoop</code> 都有一个 <code>Selector</code>，用于监听绑定在其上的 <code>socket</code> 的网络通讯</li>\n<li><code>NioEventLoopGroup</code> 可以有多个线程，即可以含有多个 <code>NioEventLoop</code> </li>\n<li>每个 <code>BossGroup</code>下面的<code>NioEventLoop</code> 循环执行的步骤有 <code>3</code> 步<ul>\n<li>轮询 <code>accept</code> 事件</li>\n<li>处理 <code>accept</code> 事件，与 <code>client</code> 建立连接，生成 <code>NioScocketChannel</code>，并将其注册到某个 <code>workerGroup</code> <code>NIOEventLoop</code> 上的 <code>Selector</code></li>\n<li>继续处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>WorkerGroup</code> <code>NIOEventLoop</code> 循环执行的步骤<ul>\n<li>轮询 <code>read</code>，<code>write</code> 事件</li>\n<li>处理 <code>I/O</code> 事件，即 <code>read</code>，<code>write</code> 事件，在对应 <code>NioScocketChannel</code> 处理</li>\n<li>处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>Worker</code> <code>NIOEventLoop</code> 处理业务时，会使用 <code>pipeline</code>（管道），<code>pipeline</code> 中包含了 <code>channel（通道）</code>，即通过 <code>pipeline</code> 可以获取到对应通道，管道中维护了很多的处理器。（这个点目前只是简单的讲，后面重点说）</li>\n</ol>\n\n","source":"_posts/从B站学习的Netty07.md","raw":"---\ntitle: 从B站学习的Netty07\nabbrlink: 3620348075\ndate: 2021-11-29 10:08:21\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n转载: https://imlql.cn/\n## Netty 模型\n\n> 讲解netty的时候采用的是先写代码体验一下，再细讲里面的原理。前面看不懂的可以先不用纠结，先往后面看，后面基本都会讲清楚\n\n\n\n### 工作原理示意图1 - 简单版\n\n<p><code>Netty</code> 主要基于主从 <code>Reactors</code> 多线程模型（如图）做了一定的改进，其中主从 <code>Reactor</code> 多线程模型有多个 <code>Reactor</code></p>\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0010.png?x-oss-process=style/qingyun)\n\n**对上图说明**\n\n1. `BossGroup` 线程维护 `Selector`，只关注 `Accecpt` \n2. 当接收到 `Accept` 事件，获取到对应的 `SocketChannel`，封装成 `NIOScoketChannel` 并注册到 `Worker` 线程（事件循环），并进行维护\n3. 当 `Worker` 线程监听到 `Selector` 中通道发生自己感兴趣的事件后，就进行处理（就由 `handler`），注意 `handler` 已经加入到通道\n\n### 工作原理示意图2 - 进阶版\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0011.png?x-oss-process=style/qingyun)\n\n`BossGroup`有点像主`Reactor` 可以有多个，`WorkerGroup`则像`SubReactor`一样可以有多个。\n\n## 工作原理示意图3 - 详细版\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0012.png?x-oss-process=style/qingyun)\n\n<ol>\n<li><code>Netty</code> 抽象出两组线程池 ，<code>BossGroup</code> 专门负责接收客户端的连接，<code>WorkerGroup</code> 专门负责网络的读写</li>\n<li><code>BossGroup</code> 和 <code>WorkerGroup</code> 类型都是 <code>NioEventLoopGroup</code> </li>\n<li><code>NioEventLoopGroup</code> 相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是 <code>NioEventLoop</code> </li>\n<li><code>NioEventLoop</code> 表示一个不断循环的执行处理任务的线程，每个 <code>NioEventLoop</code> 都有一个 <code>Selector</code>，用于监听绑定在其上的 <code>socket</code> 的网络通讯</li>\n<li><code>NioEventLoopGroup</code> 可以有多个线程，即可以含有多个 <code>NioEventLoop</code> </li>\n<li>每个 <code>BossGroup</code>下面的<code>NioEventLoop</code> 循环执行的步骤有 <code>3</code> 步<ul>\n<li>轮询 <code>accept</code> 事件</li>\n<li>处理 <code>accept</code> 事件，与 <code>client</code> 建立连接，生成 <code>NioScocketChannel</code>，并将其注册到某个 <code>workerGroup</code> <code>NIOEventLoop</code> 上的 <code>Selector</code></li>\n<li>继续处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>WorkerGroup</code> <code>NIOEventLoop</code> 循环执行的步骤<ul>\n<li>轮询 <code>read</code>，<code>write</code> 事件</li>\n<li>处理 <code>I/O</code> 事件，即 <code>read</code>，<code>write</code> 事件，在对应 <code>NioScocketChannel</code> 处理</li>\n<li>处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>Worker</code> <code>NIOEventLoop</code> 处理业务时，会使用 <code>pipeline</code>（管道），<code>pipeline</code> 中包含了 <code>channel（通道）</code>，即通过 <code>pipeline</code> 可以获取到对应通道，管道中维护了很多的处理器。（这个点目前只是简单的讲，后面重点说）</li>\n</ol>\n\n","slug":"从B站学习的Netty07","published":1,"updated":"2021-11-29T02:09:00.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rn001wo4vb3pdchhhq","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h2 id=\"Netty-模型\">Netty 模型</h2>\n<blockquote>\n<p>讲解netty的时候采用的是先写代码体验一下，再细讲里面的原理。前面看不懂的可以先不用纠结，先往后面看，后面基本都会讲清楚</p>\n</blockquote>\n<h3 id=\"工作原理示意图1-简单版\">工作原理示意图1 - 简单版</h3>\n<p><code>Netty</code> 主要基于主从 <code>Reactors</code> 多线程模型（如图）做了一定的改进，其中主从 <code>Reactor</code> 多线程模型有多个 <code>Reactor</code></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0010.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><strong>对上图说明</strong></p>\n<ol>\n<li><code>BossGroup</code> 线程维护 <code>Selector</code>，只关注 <code>Accecpt</code></li>\n<li>当接收到 <code>Accept</code> 事件，获取到对应的 <code>SocketChannel</code>，封装成 <code>NIOScoketChannel</code> 并注册到 <code>Worker</code> 线程（事件循环），并进行维护</li>\n<li>当 <code>Worker</code> 线程监听到 <code>Selector</code> 中通道发生自己感兴趣的事件后，就进行处理（就由 <code>handler</code>），注意 <code>handler</code> 已经加入到通道</li>\n</ol>\n<h3 id=\"工作原理示意图2-进阶版\">工作原理示意图2 - 进阶版</h3>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0011.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><code>BossGroup</code>有点像主<code>Reactor</code> 可以有多个，<code>WorkerGroup</code>则像<code>SubReactor</code>一样可以有多个。</p>\n<h2 id=\"工作原理示意图3-详细版\">工作原理示意图3 - 详细版</h2>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0012.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ol>\n<li><code>Netty</code> 抽象出两组线程池 ，<code>BossGroup</code> 专门负责接收客户端的连接，<code>WorkerGroup</code> 专门负责网络的读写</li>\n<li><code>BossGroup</code> 和 <code>WorkerGroup</code> 类型都是 <code>NioEventLoopGroup</code> </li>\n<li><code>NioEventLoopGroup</code> 相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是 <code>NioEventLoop</code> </li>\n<li><code>NioEventLoop</code> 表示一个不断循环的执行处理任务的线程，每个 <code>NioEventLoop</code> 都有一个 <code>Selector</code>，用于监听绑定在其上的 <code>socket</code> 的网络通讯</li>\n<li><code>NioEventLoopGroup</code> 可以有多个线程，即可以含有多个 <code>NioEventLoop</code> </li>\n<li>每个 <code>BossGroup</code>下面的<code>NioEventLoop</code> 循环执行的步骤有 <code>3</code> 步<ul>\n<li>轮询 <code>accept</code> 事件</li>\n<li>处理 <code>accept</code> 事件，与 <code>client</code> 建立连接，生成 <code>NioScocketChannel</code>，并将其注册到某个 <code>workerGroup</code> <code>NIOEventLoop</code> 上的 <code>Selector</code></li>\n<li>继续处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>WorkerGroup</code> <code>NIOEventLoop</code> 循环执行的步骤<ul>\n<li>轮询 <code>read</code>，<code>write</code> 事件</li>\n<li>处理 <code>I/O</code> 事件，即 <code>read</code>，<code>write</code> 事件，在对应 <code>NioScocketChannel</code> 处理</li>\n<li>处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>Worker</code> <code>NIOEventLoop</code> 处理业务时，会使用 <code>pipeline</code>（管道），<code>pipeline</code> 中包含了 <code>channel（通道）</code>，即通过 <code>pipeline</code> 可以获取到对应通道，管道中维护了很多的处理器。（这个点目前只是简单的讲，后面重点说）</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h2 id=\"Netty-模型\">Netty 模型</h2>\n<blockquote>\n<p>讲解netty的时候采用的是先写代码体验一下，再细讲里面的原理。前面看不懂的可以先不用纠结，先往后面看，后面基本都会讲清楚</p>\n</blockquote>\n<h3 id=\"工作原理示意图1-简单版\">工作原理示意图1 - 简单版</h3>\n<p><code>Netty</code> 主要基于主从 <code>Reactors</code> 多线程模型（如图）做了一定的改进，其中主从 <code>Reactor</code> 多线程模型有多个 <code>Reactor</code></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0010.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><strong>对上图说明</strong></p>\n<ol>\n<li><code>BossGroup</code> 线程维护 <code>Selector</code>，只关注 <code>Accecpt</code></li>\n<li>当接收到 <code>Accept</code> 事件，获取到对应的 <code>SocketChannel</code>，封装成 <code>NIOScoketChannel</code> 并注册到 <code>Worker</code> 线程（事件循环），并进行维护</li>\n<li>当 <code>Worker</code> 线程监听到 <code>Selector</code> 中通道发生自己感兴趣的事件后，就进行处理（就由 <code>handler</code>），注意 <code>handler</code> 已经加入到通道</li>\n</ol>\n<h3 id=\"工作原理示意图2-进阶版\">工作原理示意图2 - 进阶版</h3>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0011.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><code>BossGroup</code>有点像主<code>Reactor</code> 可以有多个，<code>WorkerGroup</code>则像<code>SubReactor</code>一样可以有多个。</p>\n<h2 id=\"工作原理示意图3-详细版\">工作原理示意图3 - 详细版</h2>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0012.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ol>\n<li><code>Netty</code> 抽象出两组线程池 ，<code>BossGroup</code> 专门负责接收客户端的连接，<code>WorkerGroup</code> 专门负责网络的读写</li>\n<li><code>BossGroup</code> 和 <code>WorkerGroup</code> 类型都是 <code>NioEventLoopGroup</code> </li>\n<li><code>NioEventLoopGroup</code> 相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是 <code>NioEventLoop</code> </li>\n<li><code>NioEventLoop</code> 表示一个不断循环的执行处理任务的线程，每个 <code>NioEventLoop</code> 都有一个 <code>Selector</code>，用于监听绑定在其上的 <code>socket</code> 的网络通讯</li>\n<li><code>NioEventLoopGroup</code> 可以有多个线程，即可以含有多个 <code>NioEventLoop</code> </li>\n<li>每个 <code>BossGroup</code>下面的<code>NioEventLoop</code> 循环执行的步骤有 <code>3</code> 步<ul>\n<li>轮询 <code>accept</code> 事件</li>\n<li>处理 <code>accept</code> 事件，与 <code>client</code> 建立连接，生成 <code>NioScocketChannel</code>，并将其注册到某个 <code>workerGroup</code> <code>NIOEventLoop</code> 上的 <code>Selector</code></li>\n<li>继续处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>WorkerGroup</code> <code>NIOEventLoop</code> 循环执行的步骤<ul>\n<li>轮询 <code>read</code>，<code>write</code> 事件</li>\n<li>处理 <code>I/O</code> 事件，即 <code>read</code>，<code>write</code> 事件，在对应 <code>NioScocketChannel</code> 处理</li>\n<li>处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>Worker</code> <code>NIOEventLoop</code> 处理业务时，会使用 <code>pipeline</code>（管道），<code>pipeline</code> 中包含了 <code>channel（通道）</code>，即通过 <code>pipeline</code> 可以获取到对应通道，管道中维护了很多的处理器。（这个点目前只是简单的讲，后面重点说）</li>\n</ol>\n"},{"title":"从B站学习的Netty08","abbrlink":1198865722,"date":"2021-11-30T05:01:55.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n ## Netty 模型\n\n> 讲解netty的时候采用的是先写代码体验一下，再细讲里面的原理。前面看不懂的可以先不用纠结，先往后面看，后面基本都会讲清楚\n\n### 工作原理示意图1 - 简单版\n\n<p><code>Netty</code> 主要基于主从 <code>Reactors</code> 多线程模型（如图）做了一定的改进，其中主从 <code>Reactor</code> 多线程模型有多个 <code>Reactor</code></p>\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0010.png?x-oss-process=style/qingyun)\n\n**对上图说明**\n\n1. `BossGroup` 线程维护 `Selector`，只关注 `Accecpt` \n2. 当接收到 `Accept` 事件，获取到对应的 `SocketChannel`，封装成 `NIOScoketChannel` 并注册到 `Worker` 线程（事件循环），并进行维护\n3. 当 `Worker` 线程监听到 `Selector` 中通道发生自己感兴趣的事件后，就进行处理（就由 `handler`），注意 `handler` 已经加入到通道\n\n### 工作原理示意图2 - 进阶版\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0011.png?x-oss-process=style/qingyun)\n\n`BossGroup`有点像主`Reactor` 可以有多个，`WorkerGroup`则像`SubReactor`一样可以有多个。\n\n## 工作原理示意图3 - 详细版\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0012.png?x-oss-process=style/qingyun)\n\n<ol>\n<li><code>Netty</code> 抽象出两组线程池 ，<code>BossGroup</code> 专门负责接收客户端的连接，<code>WorkerGroup</code> 专门负责网络的读写</li>\n<li><code>BossGroup</code> 和 <code>WorkerGroup</code> 类型都是 <code>NioEventLoopGroup</code> </li>\n<li><code>NioEventLoopGroup</code> 相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是 <code>NioEventLoop</code> </li>\n<li><code>NioEventLoop</code> 表示一个不断循环的执行处理任务的线程，每个 <code>NioEventLoop</code> 都有一个 <code>Selector</code>，用于监听绑定在其上的 <code>socket</code> 的网络通讯</li>\n<li><code>NioEventLoopGroup</code> 可以有多个线程，即可以含有多个 <code>NioEventLoop</code> </li>\n<li>每个 <code>BossGroup</code>下面的<code>NioEventLoop</code> 循环执行的步骤有 <code>3</code> 步<ul>\n<li>轮询 <code>accept</code> 事件</li>\n<li>处理 <code>accept</code> 事件，与 <code>client</code> 建立连接，生成 <code>NioScocketChannel</code>，并将其注册到某个 <code>workerGroup</code> <code>NIOEventLoop</code> 上的 <code>Selector</code></li>\n<li>继续处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>WorkerGroup</code> <code>NIOEventLoop</code> 循环执行的步骤<ul>\n<li>轮询 <code>read</code>，<code>write</code> 事件</li>\n<li>处理 <code>I/O</code> 事件，即 <code>read</code>，<code>write</code> 事件，在对应 <code>NioScocketChannel</code> 处理</li>\n<li>处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>Worker</code> <code>NIOEventLoop</code> 处理业务时，会使用 <code>pipeline</code>（管道），<code>pipeline</code> 中包含了 <code>channel（通道）</code>，即通过 <code>pipeline</code> 可以获取到对应通道，管道中维护了很多的处理器。（这个点目前只是简单的讲，后面重点说）</li>\n</ol>\n\n","source":"_posts/从B站学习的Netty08.md","raw":"---\ntitle: 从B站学习的Netty08\nabbrlink: 1198865722\ndate: 2021-11-30 13:01:55\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n ## Netty 模型\n\n> 讲解netty的时候采用的是先写代码体验一下，再细讲里面的原理。前面看不懂的可以先不用纠结，先往后面看，后面基本都会讲清楚\n\n### 工作原理示意图1 - 简单版\n\n<p><code>Netty</code> 主要基于主从 <code>Reactors</code> 多线程模型（如图）做了一定的改进，其中主从 <code>Reactor</code> 多线程模型有多个 <code>Reactor</code></p>\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0010.png?x-oss-process=style/qingyun)\n\n**对上图说明**\n\n1. `BossGroup` 线程维护 `Selector`，只关注 `Accecpt` \n2. 当接收到 `Accept` 事件，获取到对应的 `SocketChannel`，封装成 `NIOScoketChannel` 并注册到 `Worker` 线程（事件循环），并进行维护\n3. 当 `Worker` 线程监听到 `Selector` 中通道发生自己感兴趣的事件后，就进行处理（就由 `handler`），注意 `handler` 已经加入到通道\n\n### 工作原理示意图2 - 进阶版\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0011.png?x-oss-process=style/qingyun)\n\n`BossGroup`有点像主`Reactor` 可以有多个，`WorkerGroup`则像`SubReactor`一样可以有多个。\n\n## 工作原理示意图3 - 详细版\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0012.png?x-oss-process=style/qingyun)\n\n<ol>\n<li><code>Netty</code> 抽象出两组线程池 ，<code>BossGroup</code> 专门负责接收客户端的连接，<code>WorkerGroup</code> 专门负责网络的读写</li>\n<li><code>BossGroup</code> 和 <code>WorkerGroup</code> 类型都是 <code>NioEventLoopGroup</code> </li>\n<li><code>NioEventLoopGroup</code> 相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是 <code>NioEventLoop</code> </li>\n<li><code>NioEventLoop</code> 表示一个不断循环的执行处理任务的线程，每个 <code>NioEventLoop</code> 都有一个 <code>Selector</code>，用于监听绑定在其上的 <code>socket</code> 的网络通讯</li>\n<li><code>NioEventLoopGroup</code> 可以有多个线程，即可以含有多个 <code>NioEventLoop</code> </li>\n<li>每个 <code>BossGroup</code>下面的<code>NioEventLoop</code> 循环执行的步骤有 <code>3</code> 步<ul>\n<li>轮询 <code>accept</code> 事件</li>\n<li>处理 <code>accept</code> 事件，与 <code>client</code> 建立连接，生成 <code>NioScocketChannel</code>，并将其注册到某个 <code>workerGroup</code> <code>NIOEventLoop</code> 上的 <code>Selector</code></li>\n<li>继续处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>WorkerGroup</code> <code>NIOEventLoop</code> 循环执行的步骤<ul>\n<li>轮询 <code>read</code>，<code>write</code> 事件</li>\n<li>处理 <code>I/O</code> 事件，即 <code>read</code>，<code>write</code> 事件，在对应 <code>NioScocketChannel</code> 处理</li>\n<li>处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>Worker</code> <code>NIOEventLoop</code> 处理业务时，会使用 <code>pipeline</code>（管道），<code>pipeline</code> 中包含了 <code>channel（通道）</code>，即通过 <code>pipeline</code> 可以获取到对应通道，管道中维护了很多的处理器。（这个点目前只是简单的讲，后面重点说）</li>\n</ol>\n\n","slug":"从B站学习的Netty08","published":1,"updated":"2021-11-30T05:02:20.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2ro001zo4vb9dgaddt9","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h2 id=\"Netty-模型\">Netty 模型</h2>\n<blockquote>\n<p>讲解netty的时候采用的是先写代码体验一下，再细讲里面的原理。前面看不懂的可以先不用纠结，先往后面看，后面基本都会讲清楚</p>\n</blockquote>\n<h3 id=\"工作原理示意图1-简单版\">工作原理示意图1 - 简单版</h3>\n<p><code>Netty</code> 主要基于主从 <code>Reactors</code> 多线程模型（如图）做了一定的改进，其中主从 <code>Reactor</code> 多线程模型有多个 <code>Reactor</code></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0010.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><strong>对上图说明</strong></p>\n<ol>\n<li><code>BossGroup</code> 线程维护 <code>Selector</code>，只关注 <code>Accecpt</code></li>\n<li>当接收到 <code>Accept</code> 事件，获取到对应的 <code>SocketChannel</code>，封装成 <code>NIOScoketChannel</code> 并注册到 <code>Worker</code> 线程（事件循环），并进行维护</li>\n<li>当 <code>Worker</code> 线程监听到 <code>Selector</code> 中通道发生自己感兴趣的事件后，就进行处理（就由 <code>handler</code>），注意 <code>handler</code> 已经加入到通道</li>\n</ol>\n<h3 id=\"工作原理示意图2-进阶版\">工作原理示意图2 - 进阶版</h3>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0011.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><code>BossGroup</code>有点像主<code>Reactor</code> 可以有多个，<code>WorkerGroup</code>则像<code>SubReactor</code>一样可以有多个。</p>\n<h2 id=\"工作原理示意图3-详细版\">工作原理示意图3 - 详细版</h2>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0012.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ol>\n<li><code>Netty</code> 抽象出两组线程池 ，<code>BossGroup</code> 专门负责接收客户端的连接，<code>WorkerGroup</code> 专门负责网络的读写</li>\n<li><code>BossGroup</code> 和 <code>WorkerGroup</code> 类型都是 <code>NioEventLoopGroup</code> </li>\n<li><code>NioEventLoopGroup</code> 相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是 <code>NioEventLoop</code> </li>\n<li><code>NioEventLoop</code> 表示一个不断循环的执行处理任务的线程，每个 <code>NioEventLoop</code> 都有一个 <code>Selector</code>，用于监听绑定在其上的 <code>socket</code> 的网络通讯</li>\n<li><code>NioEventLoopGroup</code> 可以有多个线程，即可以含有多个 <code>NioEventLoop</code> </li>\n<li>每个 <code>BossGroup</code>下面的<code>NioEventLoop</code> 循环执行的步骤有 <code>3</code> 步<ul>\n<li>轮询 <code>accept</code> 事件</li>\n<li>处理 <code>accept</code> 事件，与 <code>client</code> 建立连接，生成 <code>NioScocketChannel</code>，并将其注册到某个 <code>workerGroup</code> <code>NIOEventLoop</code> 上的 <code>Selector</code></li>\n<li>继续处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>WorkerGroup</code> <code>NIOEventLoop</code> 循环执行的步骤<ul>\n<li>轮询 <code>read</code>，<code>write</code> 事件</li>\n<li>处理 <code>I/O</code> 事件，即 <code>read</code>，<code>write</code> 事件，在对应 <code>NioScocketChannel</code> 处理</li>\n<li>处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>Worker</code> <code>NIOEventLoop</code> 处理业务时，会使用 <code>pipeline</code>（管道），<code>pipeline</code> 中包含了 <code>channel（通道）</code>，即通过 <code>pipeline</code> 可以获取到对应通道，管道中维护了很多的处理器。（这个点目前只是简单的讲，后面重点说）</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com - 304024 sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h2 id=\"Netty-模型\">Netty 模型</h2>\n<blockquote>\n<p>讲解netty的时候采用的是先写代码体验一下，再细讲里面的原理。前面看不懂的可以先不用纠结，先往后面看，后面基本都会讲清楚</p>\n</blockquote>\n<h3 id=\"工作原理示意图1-简单版\">工作原理示意图1 - 简单版</h3>\n<p><code>Netty</code> 主要基于主从 <code>Reactors</code> 多线程模型（如图）做了一定的改进，其中主从 <code>Reactor</code> 多线程模型有多个 <code>Reactor</code></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0010.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><strong>对上图说明</strong></p>\n<ol>\n<li><code>BossGroup</code> 线程维护 <code>Selector</code>，只关注 <code>Accecpt</code></li>\n<li>当接收到 <code>Accept</code> 事件，获取到对应的 <code>SocketChannel</code>，封装成 <code>NIOScoketChannel</code> 并注册到 <code>Worker</code> 线程（事件循环），并进行维护</li>\n<li>当 <code>Worker</code> 线程监听到 <code>Selector</code> 中通道发生自己感兴趣的事件后，就进行处理（就由 <code>handler</code>），注意 <code>handler</code> 已经加入到通道</li>\n</ol>\n<h3 id=\"工作原理示意图2-进阶版\">工作原理示意图2 - 进阶版</h3>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0011.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><code>BossGroup</code>有点像主<code>Reactor</code> 可以有多个，<code>WorkerGroup</code>则像<code>SubReactor</code>一样可以有多个。</p>\n<h2 id=\"工作原理示意图3-详细版\">工作原理示意图3 - 详细版</h2>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0012.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ol>\n<li><code>Netty</code> 抽象出两组线程池 ，<code>BossGroup</code> 专门负责接收客户端的连接，<code>WorkerGroup</code> 专门负责网络的读写</li>\n<li><code>BossGroup</code> 和 <code>WorkerGroup</code> 类型都是 <code>NioEventLoopGroup</code> </li>\n<li><code>NioEventLoopGroup</code> 相当于一个事件循环组，这个组中含有多个事件循环，每一个事件循环是 <code>NioEventLoop</code> </li>\n<li><code>NioEventLoop</code> 表示一个不断循环的执行处理任务的线程，每个 <code>NioEventLoop</code> 都有一个 <code>Selector</code>，用于监听绑定在其上的 <code>socket</code> 的网络通讯</li>\n<li><code>NioEventLoopGroup</code> 可以有多个线程，即可以含有多个 <code>NioEventLoop</code> </li>\n<li>每个 <code>BossGroup</code>下面的<code>NioEventLoop</code> 循环执行的步骤有 <code>3</code> 步<ul>\n<li>轮询 <code>accept</code> 事件</li>\n<li>处理 <code>accept</code> 事件，与 <code>client</code> 建立连接，生成 <code>NioScocketChannel</code>，并将其注册到某个 <code>workerGroup</code> <code>NIOEventLoop</code> 上的 <code>Selector</code></li>\n<li>继续处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>WorkerGroup</code> <code>NIOEventLoop</code> 循环执行的步骤<ul>\n<li>轮询 <code>read</code>，<code>write</code> 事件</li>\n<li>处理 <code>I/O</code> 事件，即 <code>read</code>，<code>write</code> 事件，在对应 <code>NioScocketChannel</code> 处理</li>\n<li>处理任务队列的任务，即 <code>runAllTasks</code></li>\n</ul>\n</li>\n<li>每个 <code>Worker</code> <code>NIOEventLoop</code> 处理业务时，会使用 <code>pipeline</code>（管道），<code>pipeline</code> 中包含了 <code>channel（通道）</code>，即通过 <code>pipeline</code> 可以获取到对应通道，管道中维护了很多的处理器。（这个点目前只是简单的讲，后面重点说）</li>\n</ol>\n"},{"title":"从B站学习的Netty09","abbrlink":812780972,"date":"2021-11-30T05:02:41.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n ### Netty 快速入门实例 - TCP 服务\n\n实例要求：使用 `IDEA` 创建 `Netty` 项目\n\n1. `Netty` 服务器在 `6668` 端口监听，客户端能发送消息给服务器”hello,服务器~”\n2. 服务器可以回复消息给客户端”hello,客户端~”\n3. 目的：对 `Netty` 线程模型有一个初步认识，便于理解 `Netty` 模型理论\n4. 1. 编写服务端 \n   2. 编写客户端 \n   3. 对 `netty` 程序进行分析，看看 `netty` 模型特点\n   4. 说明：创建 `Maven` 项目，并引入 `Netty` 包\n5. 代码如下\n\n```java\npackage com.atguigu.netty.simple;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class NettyServer {\n    public static void main(String[] args) throws Exception {\n\n\n        //创建BossGroup 和 WorkerGroup\n        //说明\n        //1. 创建两个线程组 bossGroup 和 workerGroup\n        //2. bossGroup 只是处理连接请求 , 真正的和客户端业务处理，会交给 workerGroup完成\n        //3. 两个都是无限循环\n        //4. bossGroup 和 workerGroup 含有的子线程(NioEventLoop)的个数\n        //   默认实际 cpu核数 * 2\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup(); //8\n\n\n\n        try {\n            //创建服务器端的启动对象，配置参数\n            ServerBootstrap bootstrap = new ServerBootstrap();\n\n            //使用链式编程来进行设置\n            bootstrap.group(bossGroup, workerGroup) //设置两个线程组\n                    .channel(NioServerSocketChannel.class) //使用NioSocketChannel 作为服务器的通道实现\n                    .option(ChannelOption.SO_BACKLOG, 128) // 设置线程队列等待连接个数\n                    .childOption(ChannelOption.SO_KEEPALIVE, true) //设置保持活动连接状态\n//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup\n                    .childHandler(new ChannelInitializer<SocketChannel>() {//创建一个通道初始化对象(匿名对象)\n                        //给pipeline 设置处理器\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            System.out.println(\"客户socketchannel hashcode=\" + ch.hashCode()); //可以使用一个集合管理 SocketChannel， 再推送消息时，可以将业务加入到各个channel 对应的 NIOEventLoop 的 taskQueue 或者 scheduleTaskQueue\n                            ch.pipeline().addLast(new NettyServerHandler());\n                        }\n                    }); // 给我们的workerGroup 的 EventLoop 对应的管道设置处理器\n\n            System.out.println(\".....服务器 is ready...\");\n\n            //绑定一个端口并且同步生成了一个 ChannelFuture 对象（也就是立马返回这样一个对象）\n            //启动服务器(并绑定端口)\n            ChannelFuture cf = bootstrap.bind(6668).sync();\n\n            //给cf 注册监听器，监控我们关心的事件\n\n            cf.addListener(new ChannelFutureListener() {\n                @Override\n                public void operationComplete(ChannelFuture future) throws Exception {\n                    if (cf.isSuccess()) {\n                        System.out.println(\"监听端口 6668 成功\");\n                    } else {\n                        System.out.println(\"监听端口 6668 失败\");\n                    }\n                }\n            });\n\n\n            //对关闭通道事件  进行监听\n            cf.channel().closeFuture().sync();\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n\n    }\n\n}\n```\n\n### NettyServerHandler\n\n```java\npackage com.atguigu.netty.simple;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.util.CharsetUtil;\n\nimport java.util.concurrent.TimeUnit;\n\n/*\n说明\n1. 我们自定义一个Handler 需要继承netty 规定好的某个HandlerAdapter(规范)\n2. 这时我们自定义一个Handler , 才能称为一个handler\n */\npublic class NettyServerHandler extends ChannelInboundHandlerAdapter {\n\n    //读取数据事件(这里我们可以读取客户端发送的消息)\n    /*\n    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址\n    2. Object msg: 就是客户端发送的数据 默认Object\n     */\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        System.out.println(\"服务器读取线程 \" + Thread.currentThread().getName() + \" channle =\" + ctx.channel());\n        System.out.println(\"server ctx =\" + ctx);\n        System.out.println(\"看看channel 和 pipeline的关系\");\n        Channel channel = ctx.channel();\n        ChannelPipeline pipeline = ctx.pipeline(); //本质是一个双向链表\n\n\n        //将 msg 转成一个 ByteBuf\n        //ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer.\n        ByteBuf buf = (ByteBuf) msg;\n        System.out.println(\"客户端发送消息是:\" + buf.toString(CharsetUtil.UTF_8));\n        System.out.println(\"客户端地址:\" + channel.remoteAddress());\n    }\n\n    //数据读取完毕\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n\n        //writeAndFlush 是 write + flush\n        //将数据写入到缓存，并刷新\n        //一般讲，我们对这个发送的数据进行编码\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵1\", CharsetUtil.UTF_8));\n    }\n\n    //发生异常后, 一般是需要关闭通道\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        ctx.close();\n    }\n}\n```\n\n#### NettyClient\n\n```java\npackage com.atguigu.netty.simple;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class NettyClient {\n    public static void main(String[] args) throws Exception {\n\n        //客户端需要一个事件循环组\n        EventLoopGroup group = new NioEventLoopGroup();\n\n\n        try {\n            //创建客户端启动对象\n            //注意客户端使用的不是 ServerBootstrap 而是 Bootstrap\n            Bootstrap bootstrap = new Bootstrap();\n\n            //设置相关参数\n            bootstrap.group(group) //设置线程组\n                    .channel(NioSocketChannel.class) // 设置客户端通道的实现类(反射)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new NettyClientHandler()); //加入自己的处理器\n                        }\n                    });\n\n            System.out.println(\"客户端 ok..\");\n\n            //启动客户端去连接服务器端\n            //关于 ChannelFuture 要分析，涉及到netty的异步模型\n            ChannelFuture channelFuture = bootstrap.connect(\"127.0.0.1\", 6668).sync();\n            //对关闭通道事件  进行监听\n            channelFuture.channel().closeFuture().sync();\n        }finally {\n\n            group.shutdownGracefully();\n\n        }\n    }\n}\n```\n\n\n\n#### NettyClient\n\n```java\npackage com.atguigu.netty.simple;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class NettyClient {\n    public static void main(String[] args) throws Exception {\n\n        //客户端需要一个事件循环组\n        EventLoopGroup group = new NioEventLoopGroup();\n\n\n        try {\n            //创建客户端启动对象\n            //注意客户端使用的不是 ServerBootstrap 而是 Bootstrap\n            Bootstrap bootstrap = new Bootstrap();\n\n            //设置相关参数\n            bootstrap.group(group) //设置线程组\n                    .channel(NioSocketChannel.class) // 设置客户端通道的实现类(反射)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new NettyClientHandler()); //加入自己的处理器\n                        }\n                    });\n\n            System.out.println(\"客户端 ok..\");\n\n            //启动客户端去连接服务器端\n            //关于 ChannelFuture 要分析，涉及到netty的异步模型\n            ChannelFuture channelFuture = bootstrap.connect(\"127.0.0.1\", 6668).sync();\n            //对关闭通道事件  进行监听\n            channelFuture.channel().closeFuture().sync();\n        }finally {\n\n            group.shutdownGracefully();\n\n        }\n    }\n}\n```\n\n\n\n#### NettyClientHandler\n\n```java\npackage com.atguigu.netty.simple;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.util.CharsetUtil;\n\npublic class NettyClientHandler extends ChannelInboundHandlerAdapter {\n\n    //当通道就绪就会触发该方法\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"client \" + ctx);\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, server: (>^ω^<)喵\", CharsetUtil.UTF_8));\n    }\n\n    //当通道有读取事件时，会触发\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n        System.out.println(\"服务器回复的消息:\" + buf.toString(CharsetUtil.UTF_8));\n        System.out.println(\"服务器的地址： \"+ ctx.channel().remoteAddress());\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n\n","source":"_posts/从B站学习的Netty09.md","raw":"---\ntitle: 从B站学习的Netty09\nabbrlink: 812780972\ndate: 2021-11-30 13:02:41\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n ### Netty 快速入门实例 - TCP 服务\n\n实例要求：使用 `IDEA` 创建 `Netty` 项目\n\n1. `Netty` 服务器在 `6668` 端口监听，客户端能发送消息给服务器”hello,服务器~”\n2. 服务器可以回复消息给客户端”hello,客户端~”\n3. 目的：对 `Netty` 线程模型有一个初步认识，便于理解 `Netty` 模型理论\n4. 1. 编写服务端 \n   2. 编写客户端 \n   3. 对 `netty` 程序进行分析，看看 `netty` 模型特点\n   4. 说明：创建 `Maven` 项目，并引入 `Netty` 包\n5. 代码如下\n\n```java\npackage com.atguigu.netty.simple;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class NettyServer {\n    public static void main(String[] args) throws Exception {\n\n\n        //创建BossGroup 和 WorkerGroup\n        //说明\n        //1. 创建两个线程组 bossGroup 和 workerGroup\n        //2. bossGroup 只是处理连接请求 , 真正的和客户端业务处理，会交给 workerGroup完成\n        //3. 两个都是无限循环\n        //4. bossGroup 和 workerGroup 含有的子线程(NioEventLoop)的个数\n        //   默认实际 cpu核数 * 2\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup(); //8\n\n\n\n        try {\n            //创建服务器端的启动对象，配置参数\n            ServerBootstrap bootstrap = new ServerBootstrap();\n\n            //使用链式编程来进行设置\n            bootstrap.group(bossGroup, workerGroup) //设置两个线程组\n                    .channel(NioServerSocketChannel.class) //使用NioSocketChannel 作为服务器的通道实现\n                    .option(ChannelOption.SO_BACKLOG, 128) // 设置线程队列等待连接个数\n                    .childOption(ChannelOption.SO_KEEPALIVE, true) //设置保持活动连接状态\n//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup\n                    .childHandler(new ChannelInitializer<SocketChannel>() {//创建一个通道初始化对象(匿名对象)\n                        //给pipeline 设置处理器\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            System.out.println(\"客户socketchannel hashcode=\" + ch.hashCode()); //可以使用一个集合管理 SocketChannel， 再推送消息时，可以将业务加入到各个channel 对应的 NIOEventLoop 的 taskQueue 或者 scheduleTaskQueue\n                            ch.pipeline().addLast(new NettyServerHandler());\n                        }\n                    }); // 给我们的workerGroup 的 EventLoop 对应的管道设置处理器\n\n            System.out.println(\".....服务器 is ready...\");\n\n            //绑定一个端口并且同步生成了一个 ChannelFuture 对象（也就是立马返回这样一个对象）\n            //启动服务器(并绑定端口)\n            ChannelFuture cf = bootstrap.bind(6668).sync();\n\n            //给cf 注册监听器，监控我们关心的事件\n\n            cf.addListener(new ChannelFutureListener() {\n                @Override\n                public void operationComplete(ChannelFuture future) throws Exception {\n                    if (cf.isSuccess()) {\n                        System.out.println(\"监听端口 6668 成功\");\n                    } else {\n                        System.out.println(\"监听端口 6668 失败\");\n                    }\n                }\n            });\n\n\n            //对关闭通道事件  进行监听\n            cf.channel().closeFuture().sync();\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n\n    }\n\n}\n```\n\n### NettyServerHandler\n\n```java\npackage com.atguigu.netty.simple;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.Channel;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.util.CharsetUtil;\n\nimport java.util.concurrent.TimeUnit;\n\n/*\n说明\n1. 我们自定义一个Handler 需要继承netty 规定好的某个HandlerAdapter(规范)\n2. 这时我们自定义一个Handler , 才能称为一个handler\n */\npublic class NettyServerHandler extends ChannelInboundHandlerAdapter {\n\n    //读取数据事件(这里我们可以读取客户端发送的消息)\n    /*\n    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址\n    2. Object msg: 就是客户端发送的数据 默认Object\n     */\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n        System.out.println(\"服务器读取线程 \" + Thread.currentThread().getName() + \" channle =\" + ctx.channel());\n        System.out.println(\"server ctx =\" + ctx);\n        System.out.println(\"看看channel 和 pipeline的关系\");\n        Channel channel = ctx.channel();\n        ChannelPipeline pipeline = ctx.pipeline(); //本质是一个双向链表\n\n\n        //将 msg 转成一个 ByteBuf\n        //ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer.\n        ByteBuf buf = (ByteBuf) msg;\n        System.out.println(\"客户端发送消息是:\" + buf.toString(CharsetUtil.UTF_8));\n        System.out.println(\"客户端地址:\" + channel.remoteAddress());\n    }\n\n    //数据读取完毕\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n\n        //writeAndFlush 是 write + flush\n        //将数据写入到缓存，并刷新\n        //一般讲，我们对这个发送的数据进行编码\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵1\", CharsetUtil.UTF_8));\n    }\n\n    //发生异常后, 一般是需要关闭通道\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        ctx.close();\n    }\n}\n```\n\n#### NettyClient\n\n```java\npackage com.atguigu.netty.simple;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class NettyClient {\n    public static void main(String[] args) throws Exception {\n\n        //客户端需要一个事件循环组\n        EventLoopGroup group = new NioEventLoopGroup();\n\n\n        try {\n            //创建客户端启动对象\n            //注意客户端使用的不是 ServerBootstrap 而是 Bootstrap\n            Bootstrap bootstrap = new Bootstrap();\n\n            //设置相关参数\n            bootstrap.group(group) //设置线程组\n                    .channel(NioSocketChannel.class) // 设置客户端通道的实现类(反射)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new NettyClientHandler()); //加入自己的处理器\n                        }\n                    });\n\n            System.out.println(\"客户端 ok..\");\n\n            //启动客户端去连接服务器端\n            //关于 ChannelFuture 要分析，涉及到netty的异步模型\n            ChannelFuture channelFuture = bootstrap.connect(\"127.0.0.1\", 6668).sync();\n            //对关闭通道事件  进行监听\n            channelFuture.channel().closeFuture().sync();\n        }finally {\n\n            group.shutdownGracefully();\n\n        }\n    }\n}\n```\n\n\n\n#### NettyClient\n\n```java\npackage com.atguigu.netty.simple;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class NettyClient {\n    public static void main(String[] args) throws Exception {\n\n        //客户端需要一个事件循环组\n        EventLoopGroup group = new NioEventLoopGroup();\n\n\n        try {\n            //创建客户端启动对象\n            //注意客户端使用的不是 ServerBootstrap 而是 Bootstrap\n            Bootstrap bootstrap = new Bootstrap();\n\n            //设置相关参数\n            bootstrap.group(group) //设置线程组\n                    .channel(NioSocketChannel.class) // 设置客户端通道的实现类(反射)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ch.pipeline().addLast(new NettyClientHandler()); //加入自己的处理器\n                        }\n                    });\n\n            System.out.println(\"客户端 ok..\");\n\n            //启动客户端去连接服务器端\n            //关于 ChannelFuture 要分析，涉及到netty的异步模型\n            ChannelFuture channelFuture = bootstrap.connect(\"127.0.0.1\", 6668).sync();\n            //对关闭通道事件  进行监听\n            channelFuture.channel().closeFuture().sync();\n        }finally {\n\n            group.shutdownGracefully();\n\n        }\n    }\n}\n```\n\n\n\n#### NettyClientHandler\n\n```java\npackage com.atguigu.netty.simple;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.util.CharsetUtil;\n\npublic class NettyClientHandler extends ChannelInboundHandlerAdapter {\n\n    //当通道就绪就会触发该方法\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"client \" + ctx);\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, server: (>^ω^<)喵\", CharsetUtil.UTF_8));\n    }\n\n    //当通道有读取事件时，会触发\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n        System.out.println(\"服务器回复的消息:\" + buf.toString(CharsetUtil.UTF_8));\n        System.out.println(\"服务器的地址： \"+ ctx.channel().remoteAddress());\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n\n","slug":"从B站学习的Netty09","published":1,"updated":"2021-11-30T05:03:24.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rr0022o4vb8amd61x8","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h3 id=\"Netty-快速入门实例-TCP-服务\">Netty 快速入门实例 - TCP 服务</h3>\n<p>实例要求：使用 <code>IDEA</code> 创建 <code>Netty</code> 项目</p>\n<ol>\n<li><code>Netty</code> 服务器在 <code>6668</code> 端口监听，客户端能发送消息给服务器”hello,服务器~”</li>\n<li>服务器可以回复消息给客户端”hello,客户端~”</li>\n<li>目的：对 <code>Netty</code> 线程模型有一个初步认识，便于理解 <code>Netty</code> 模型理论</li>\n<li>\n<ol>\n<li>编写服务端</li>\n<li>编写客户端</li>\n<li>对 <code>netty</code> 程序进行分析，看看 <code>netty</code> 模型特点</li>\n<li>说明：创建 <code>Maven</code> 项目，并引入 <code>Netty</code> 包</li>\n</ol>\n</li>\n<li>代码如下</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建BossGroup 和 WorkerGroup</span></span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. 创建两个线程组 bossGroup 和 workerGroup</span></span><br><span class=\"line\">        <span class=\"comment\">//2. bossGroup 只是处理连接请求 , 真正的和客户端业务处理，会交给 workerGroup完成</span></span><br><span class=\"line\">        <span class=\"comment\">//3. 两个都是无限循环</span></span><br><span class=\"line\">        <span class=\"comment\">//4. bossGroup 和 workerGroup 含有的子线程(NioEventLoop)的个数</span></span><br><span class=\"line\">        <span class=\"comment\">//   默认实际 cpu核数 * 2</span></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(); <span class=\"comment\">//8</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建服务器端的启动对象，配置参数</span></span><br><span class=\"line\">            ServerBootstrap bootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//使用链式编程来进行设置</span></span><br><span class=\"line\">            bootstrap.group(bossGroup, workerGroup) <span class=\"comment\">//设置两个线程组</span></span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class) <span class=\"comment\">//使用NioSocketChannel 作为服务器的通道实现</span></span><br><span class=\"line\">                    .option(ChannelOption.SO_BACKLOG, <span class=\"number\">128</span>) <span class=\"comment\">// 设置线程队列等待连接个数</span></span><br><span class=\"line\">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class=\"keyword\">true</span>) <span class=\"comment\">//设置保持活动连接状态</span></span><br><span class=\"line\"><span class=\"comment\">//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup</span></span><br><span class=\"line\">                    .childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<span class=\"comment\">//创建一个通道初始化对象(匿名对象)</span></span><br><span class=\"line\">                        <span class=\"comment\">//给pipeline 设置处理器</span></span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">&quot;客户socketchannel hashcode=&quot;</span> + ch.hashCode()); <span class=\"comment\">//可以使用一个集合管理 SocketChannel， 再推送消息时，可以将业务加入到各个channel 对应的 NIOEventLoop 的 taskQueue 或者 scheduleTaskQueue</span></span><br><span class=\"line\">                            ch.pipeline().addLast(<span class=\"keyword\">new</span> NettyServerHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;); <span class=\"comment\">// 给我们的workerGroup 的 EventLoop 对应的管道设置处理器</span></span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;.....服务器 is ready...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//绑定一个端口并且同步生成了一个 ChannelFuture 对象（也就是立马返回这样一个对象）</span></span><br><span class=\"line\">            <span class=\"comment\">//启动服务器(并绑定端口)</span></span><br><span class=\"line\">            ChannelFuture cf = bootstrap.bind(<span class=\"number\">6668</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//给cf 注册监听器，监控我们关心的事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">            cf.addListener(<span class=\"keyword\">new</span> ChannelFutureListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operationComplete</span><span class=\"params\">(ChannelFuture future)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cf.isSuccess()) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;监听端口 6668 成功&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;监听端口 6668 失败&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//对关闭通道事件  进行监听</span></span><br><span class=\"line\">            cf.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NettyServerHandler\">NettyServerHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">说明</span></span><br><span class=\"line\"><span class=\"comment\">1. 我们自定义一个Handler 需要继承netty 规定好的某个HandlerAdapter(规范)</span></span><br><span class=\"line\"><span class=\"comment\">2. 这时我们自定义一个Handler , 才能称为一个handler</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取数据事件(这里我们可以读取客户端发送的消息)</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址</span></span><br><span class=\"line\"><span class=\"comment\">    2. Object msg: 就是客户端发送的数据 默认Object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器读取线程 &quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot; channle =&quot;</span> + ctx.channel());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;server ctx =&quot;</span> + ctx);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;看看channel 和 pipeline的关系&quot;</span>);</span><br><span class=\"line\">        Channel channel = ctx.channel();</span><br><span class=\"line\">        ChannelPipeline pipeline = ctx.pipeline(); <span class=\"comment\">//本质是一个双向链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将 msg 转成一个 ByteBuf</span></span><br><span class=\"line\">        <span class=\"comment\">//ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer.</span></span><br><span class=\"line\">        ByteBuf buf = (ByteBuf) msg;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端发送消息是:&quot;</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端地址:&quot;</span> + channel.remoteAddress());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数据读取完毕</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelReadComplete</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//writeAndFlush 是 write + flush</span></span><br><span class=\"line\">        <span class=\"comment\">//将数据写入到缓存，并刷新</span></span><br><span class=\"line\">        <span class=\"comment\">//一般讲，我们对这个发送的数据进行编码</span></span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发生异常后, 一般是需要关闭通道</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"NettyClient\">NettyClient</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//客户端需要一个事件循环组</span></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建客户端启动对象</span></span><br><span class=\"line\">            <span class=\"comment\">//注意客户端使用的不是 ServerBootstrap 而是 Bootstrap</span></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置相关参数</span></span><br><span class=\"line\">            bootstrap.group(group) <span class=\"comment\">//设置线程组</span></span><br><span class=\"line\">                    .channel(NioSocketChannel.class) <span class=\"comment\">// 设置客户端通道的实现类(反射)</span></span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(<span class=\"keyword\">new</span> NettyClientHandler()); <span class=\"comment\">//加入自己的处理器</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;客户端 ok..&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动客户端去连接服务器端</span></span><br><span class=\"line\">            <span class=\"comment\">//关于 ChannelFuture 要分析，涉及到netty的异步模型</span></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6668</span>).sync();</span><br><span class=\"line\">            <span class=\"comment\">//对关闭通道事件  进行监听</span></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"NettyClient-2\">NettyClient</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//客户端需要一个事件循环组</span></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建客户端启动对象</span></span><br><span class=\"line\">            <span class=\"comment\">//注意客户端使用的不是 ServerBootstrap 而是 Bootstrap</span></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置相关参数</span></span><br><span class=\"line\">            bootstrap.group(group) <span class=\"comment\">//设置线程组</span></span><br><span class=\"line\">                    .channel(NioSocketChannel.class) <span class=\"comment\">// 设置客户端通道的实现类(反射)</span></span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(<span class=\"keyword\">new</span> NettyClientHandler()); <span class=\"comment\">//加入自己的处理器</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;客户端 ok..&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动客户端去连接服务器端</span></span><br><span class=\"line\">            <span class=\"comment\">//关于 ChannelFuture 要分析，涉及到netty的异步模型</span></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6668</span>).sync();</span><br><span class=\"line\">            <span class=\"comment\">//对关闭通道事件  进行监听</span></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"NettyClientHandler\">NettyClientHandler</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当通道就绪就会触发该方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;client &quot;</span> + ctx);</span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, server: (&gt;^ω^&lt;)喵&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当通道有读取事件时，会触发</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteBuf buf = (ByteBuf) msg;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器回复的消息:&quot;</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器的地址： &quot;</span>+ ctx.channel().remoteAddress());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com - 304024 sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h3 id=\"Netty-快速入门实例-TCP-服务\">Netty 快速入门实例 - TCP 服务</h3>\n<p>实例要求：使用 <code>IDEA</code> 创建 <code>Netty</code> 项目</p>\n<ol>\n<li><code>Netty</code> 服务器在 <code>6668</code> 端口监听，客户端能发送消息给服务器”hello,服务器~”</li>\n<li>服务器可以回复消息给客户端”hello,客户端~”</li>\n<li>目的：对 <code>Netty</code> 线程模型有一个初步认识，便于理解 <code>Netty</code> 模型理论</li>\n<li>\n<ol>\n<li>编写服务端</li>\n<li>编写客户端</li>\n<li>对 <code>netty</code> 程序进行分析，看看 <code>netty</code> 模型特点</li>\n<li>说明：创建 <code>Maven</code> 项目，并引入 <code>Netty</code> 包</li>\n</ol>\n</li>\n<li>代码如下</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建BossGroup 和 WorkerGroup</span></span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. 创建两个线程组 bossGroup 和 workerGroup</span></span><br><span class=\"line\">        <span class=\"comment\">//2. bossGroup 只是处理连接请求 , 真正的和客户端业务处理，会交给 workerGroup完成</span></span><br><span class=\"line\">        <span class=\"comment\">//3. 两个都是无限循环</span></span><br><span class=\"line\">        <span class=\"comment\">//4. bossGroup 和 workerGroup 含有的子线程(NioEventLoop)的个数</span></span><br><span class=\"line\">        <span class=\"comment\">//   默认实际 cpu核数 * 2</span></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(); <span class=\"comment\">//8</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建服务器端的启动对象，配置参数</span></span><br><span class=\"line\">            ServerBootstrap bootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//使用链式编程来进行设置</span></span><br><span class=\"line\">            bootstrap.group(bossGroup, workerGroup) <span class=\"comment\">//设置两个线程组</span></span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class) <span class=\"comment\">//使用NioSocketChannel 作为服务器的通道实现</span></span><br><span class=\"line\">                    .option(ChannelOption.SO_BACKLOG, <span class=\"number\">128</span>) <span class=\"comment\">// 设置线程队列等待连接个数</span></span><br><span class=\"line\">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class=\"keyword\">true</span>) <span class=\"comment\">//设置保持活动连接状态</span></span><br><span class=\"line\"><span class=\"comment\">//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup</span></span><br><span class=\"line\">                    .childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<span class=\"comment\">//创建一个通道初始化对象(匿名对象)</span></span><br><span class=\"line\">                        <span class=\"comment\">//给pipeline 设置处理器</span></span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            System.out.println(<span class=\"string\">&quot;客户socketchannel hashcode=&quot;</span> + ch.hashCode()); <span class=\"comment\">//可以使用一个集合管理 SocketChannel， 再推送消息时，可以将业务加入到各个channel 对应的 NIOEventLoop 的 taskQueue 或者 scheduleTaskQueue</span></span><br><span class=\"line\">                            ch.pipeline().addLast(<span class=\"keyword\">new</span> NettyServerHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;); <span class=\"comment\">// 给我们的workerGroup 的 EventLoop 对应的管道设置处理器</span></span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;.....服务器 is ready...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//绑定一个端口并且同步生成了一个 ChannelFuture 对象（也就是立马返回这样一个对象）</span></span><br><span class=\"line\">            <span class=\"comment\">//启动服务器(并绑定端口)</span></span><br><span class=\"line\">            ChannelFuture cf = bootstrap.bind(<span class=\"number\">6668</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//给cf 注册监听器，监控我们关心的事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">            cf.addListener(<span class=\"keyword\">new</span> ChannelFutureListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operationComplete</span><span class=\"params\">(ChannelFuture future)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cf.isSuccess()) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;监听端口 6668 成功&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;监听端口 6668 失败&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//对关闭通道事件  进行监听</span></span><br><span class=\"line\">            cf.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NettyServerHandler\">NettyServerHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.Channel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">说明</span></span><br><span class=\"line\"><span class=\"comment\">1. 我们自定义一个Handler 需要继承netty 规定好的某个HandlerAdapter(规范)</span></span><br><span class=\"line\"><span class=\"comment\">2. 这时我们自定义一个Handler , 才能称为一个handler</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取数据事件(这里我们可以读取客户端发送的消息)</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址</span></span><br><span class=\"line\"><span class=\"comment\">    2. Object msg: 就是客户端发送的数据 默认Object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器读取线程 &quot;</span> + Thread.currentThread().getName() + <span class=\"string\">&quot; channle =&quot;</span> + ctx.channel());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;server ctx =&quot;</span> + ctx);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;看看channel 和 pipeline的关系&quot;</span>);</span><br><span class=\"line\">        Channel channel = ctx.channel();</span><br><span class=\"line\">        ChannelPipeline pipeline = ctx.pipeline(); <span class=\"comment\">//本质是一个双向链表</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将 msg 转成一个 ByteBuf</span></span><br><span class=\"line\">        <span class=\"comment\">//ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer.</span></span><br><span class=\"line\">        ByteBuf buf = (ByteBuf) msg;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端发送消息是:&quot;</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端地址:&quot;</span> + channel.remoteAddress());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数据读取完毕</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelReadComplete</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//writeAndFlush 是 write + flush</span></span><br><span class=\"line\">        <span class=\"comment\">//将数据写入到缓存，并刷新</span></span><br><span class=\"line\">        <span class=\"comment\">//一般讲，我们对这个发送的数据进行编码</span></span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发生异常后, 一般是需要关闭通道</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"NettyClient\">NettyClient</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//客户端需要一个事件循环组</span></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建客户端启动对象</span></span><br><span class=\"line\">            <span class=\"comment\">//注意客户端使用的不是 ServerBootstrap 而是 Bootstrap</span></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置相关参数</span></span><br><span class=\"line\">            bootstrap.group(group) <span class=\"comment\">//设置线程组</span></span><br><span class=\"line\">                    .channel(NioSocketChannel.class) <span class=\"comment\">// 设置客户端通道的实现类(反射)</span></span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(<span class=\"keyword\">new</span> NettyClientHandler()); <span class=\"comment\">//加入自己的处理器</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;客户端 ok..&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动客户端去连接服务器端</span></span><br><span class=\"line\">            <span class=\"comment\">//关于 ChannelFuture 要分析，涉及到netty的异步模型</span></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6668</span>).sync();</span><br><span class=\"line\">            <span class=\"comment\">//对关闭通道事件  进行监听</span></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"NettyClient-2\">NettyClient</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//客户端需要一个事件循环组</span></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建客户端启动对象</span></span><br><span class=\"line\">            <span class=\"comment\">//注意客户端使用的不是 ServerBootstrap 而是 Bootstrap</span></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置相关参数</span></span><br><span class=\"line\">            bootstrap.group(group) <span class=\"comment\">//设置线程组</span></span><br><span class=\"line\">                    .channel(NioSocketChannel.class) <span class=\"comment\">// 设置客户端通道的实现类(反射)</span></span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ch.pipeline().addLast(<span class=\"keyword\">new</span> NettyClientHandler()); <span class=\"comment\">//加入自己的处理器</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;客户端 ok..&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动客户端去连接服务器端</span></span><br><span class=\"line\">            <span class=\"comment\">//关于 ChannelFuture 要分析，涉及到netty的异步模型</span></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6668</span>).sync();</span><br><span class=\"line\">            <span class=\"comment\">//对关闭通道事件  进行监听</span></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"NettyClientHandler\">NettyClientHandler</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当通道就绪就会触发该方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;client &quot;</span> + ctx);</span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, server: (&gt;^ω^&lt;)喵&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当通道有读取事件时，会触发</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteBuf buf = (ByteBuf) msg;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器回复的消息:&quot;</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器的地址： &quot;</span>+ ctx.channel().remoteAddress());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"从B站学习的Netty10","abbrlink":1354073161,"date":"2021-11-30T05:03:33.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n\n### 任务队列中的 Task 有 3 种典型使用场景\n\n1. 用户程序自定义的普通任务【举例说明】\n2. 用户自定义定时任务\n3. 非当前 `Reactor` 线程调用 `Channel` 的各种方法\n   例如在**推送系统**的业务线程里面，根据用户的标识，找到对应的 `Channel` 引用，然后调用 `Write` 类方法向该用户推送消息，就会进入到这种场景。最终的 `Write` 会提交到任务队列中后被异步消费\n\n前两种的代码举例：\n\n```java\npackage com.atguigu.netty.simple;\n\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.util.CharsetUtil;\n\nimport java.util.concurrent.TimeUnit;\n\n/**\n * 说明\n * 1. 我们自定义一个Handler 需要继续netty 规定好的某个HandlerAdapter(规范)\n * 2. 这时我们自定义一个Handler , 才能称为一个handler\n */\npublic class NettyServerHandler extends ChannelInboundHandlerAdapter {\n\n    //读取数据实际(这里我们可以读取客户端发送的消息)\n\n    /**\n     * 1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址\n     * 2. Object msg: 就是客户端发送的数据 默认Object\n     */\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\n        // 比如这里我们有一个非常耗时长的业务-> 异步执行 -> 提交该channel 对应的\n        // NIOEventLoop 的 taskQueue中,\n\n        // 解决方案1 用户程序自定义的普通任务\n\n        ctx.channel().eventLoop().execute(new Runnable() {\n            @Override\n            public void run() {\n\n                try {\n                    Thread.sleep(5 * 1000);\n                    ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵2\", CharsetUtil.UTF_8));\n                    System.out.println(\"channel code=\" + ctx.channel().hashCode());\n                } catch (Exception ex) {\n                    System.out.println(\"发生异常\" + ex.getMessage());\n                }\n            }\n        });\n\n        ctx.channel().eventLoop().execute(new Runnable() {\n            @Override\n            public void run() {\n\n                try {\n                    Thread.sleep(5 * 1000);\n                    ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵3\", CharsetUtil.UTF_8));\n                    System.out.println(\"channel code=\" + ctx.channel().hashCode());\n                } catch (Exception ex) {\n                    System.out.println(\"发生异常\" + ex.getMessage());\n                }\n            }\n        });\n\n        //解决方案2 : 用户自定义定时任务 -》 该任务是提交到 scheduleTaskQueue中\n\n        ctx.channel().eventLoop().schedule(new Runnable() {\n            @Override\n            public void run() {\n\n                try {\n                    Thread.sleep(5 * 1000);\n                    ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵4\", CharsetUtil.UTF_8));\n                    System.out.println(\"channel code=\" + ctx.channel().hashCode());\n                } catch (Exception ex) {\n                    System.out.println(\"发生异常\" + ex.getMessage());\n                }\n            }\n        }, 5, TimeUnit.SECONDS);\n\n        System.out.println(\"go on ...\");\n\n//        System.out.println(\"服务器读取线程 \" + Thread.currentThread().getName() + \" channle =\" + ctx.channel());\n//        System.out.println(\"server ctx =\" + ctx);\n//        System.out.println(\"看看channel 和 pipeline的关系\");\n//        Channel channel = ctx.channel();\n//        ChannelPipeline pipeline = ctx.pipeline(); //本质是一个双向链接, 出站入站\n//        \n//        //将 msg 转成一个 ByteBuf\n//        //ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer.\n//        ByteBuf buf = (ByteBuf) msg;\n//        System.out.println(\"客户端发送消息是:\" + buf.toString(CharsetUtil.UTF_8));\n//        System.out.println(\"客户端地址:\" + channel.remoteAddress());\n    }\n\n    //数据读取完毕\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n        //writeAndFlush 是 write + flush\n        //将数据写入到缓存，并刷新\n        //一般讲，我们对这个发送的数据进行编码\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵1\", CharsetUtil.UTF_8));\n    }\n\n    //处理异常, 一般是需要关闭通道\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        ctx.close();\n    }\n}\n```\n\n\n\n### 方案再说明\n\n1. `Netty` 抽象出两组线程池，`BossGroup` 专门负责接收客户端连接，`WorkerGroup` 专门负责网络读写操作。\n2. `NioEventLoop` 表示一个不断循环执行处理任务的线程，每个 `NioEventLoop` 都有一个 `Selector`，用于监听绑定在其上的 `socket`网络通道。\n3. `NioEventLoop` 内部采用串行化设计，从消息的 **读取->解码->处理->编码->发送**，始终由 `IO` 线程 `NioEventLoop` 负责\n\n- `NioEventLoopGroup` 下包含多个 `NioEventLoop`\n- 每个 `NioEventLoop` 中包含有一个 `Selector`，一个 `taskQueue`\n- 每个 `NioEventLoop` 的 `Selector` 上可以注册监听多个 `NioChannel`\n- 每个 `NioChannel` 只会绑定在唯一的 `NioEventLoop` 上\n- 每个 `NioChannel` 都绑定有一个自己的 `ChannelPipeline`","source":"_posts/从B站学习的Netty10.md","raw":"---\ntitle: 从B站学习的Netty10\nabbrlink: 1354073161\ndate: 2021-11-30 13:03:33\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n\n### 任务队列中的 Task 有 3 种典型使用场景\n\n1. 用户程序自定义的普通任务【举例说明】\n2. 用户自定义定时任务\n3. 非当前 `Reactor` 线程调用 `Channel` 的各种方法\n   例如在**推送系统**的业务线程里面，根据用户的标识，找到对应的 `Channel` 引用，然后调用 `Write` 类方法向该用户推送消息，就会进入到这种场景。最终的 `Write` 会提交到任务队列中后被异步消费\n\n前两种的代码举例：\n\n```java\npackage com.atguigu.netty.simple;\n\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.util.CharsetUtil;\n\nimport java.util.concurrent.TimeUnit;\n\n/**\n * 说明\n * 1. 我们自定义一个Handler 需要继续netty 规定好的某个HandlerAdapter(规范)\n * 2. 这时我们自定义一个Handler , 才能称为一个handler\n */\npublic class NettyServerHandler extends ChannelInboundHandlerAdapter {\n\n    //读取数据实际(这里我们可以读取客户端发送的消息)\n\n    /**\n     * 1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址\n     * 2. Object msg: 就是客户端发送的数据 默认Object\n     */\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\n        // 比如这里我们有一个非常耗时长的业务-> 异步执行 -> 提交该channel 对应的\n        // NIOEventLoop 的 taskQueue中,\n\n        // 解决方案1 用户程序自定义的普通任务\n\n        ctx.channel().eventLoop().execute(new Runnable() {\n            @Override\n            public void run() {\n\n                try {\n                    Thread.sleep(5 * 1000);\n                    ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵2\", CharsetUtil.UTF_8));\n                    System.out.println(\"channel code=\" + ctx.channel().hashCode());\n                } catch (Exception ex) {\n                    System.out.println(\"发生异常\" + ex.getMessage());\n                }\n            }\n        });\n\n        ctx.channel().eventLoop().execute(new Runnable() {\n            @Override\n            public void run() {\n\n                try {\n                    Thread.sleep(5 * 1000);\n                    ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵3\", CharsetUtil.UTF_8));\n                    System.out.println(\"channel code=\" + ctx.channel().hashCode());\n                } catch (Exception ex) {\n                    System.out.println(\"发生异常\" + ex.getMessage());\n                }\n            }\n        });\n\n        //解决方案2 : 用户自定义定时任务 -》 该任务是提交到 scheduleTaskQueue中\n\n        ctx.channel().eventLoop().schedule(new Runnable() {\n            @Override\n            public void run() {\n\n                try {\n                    Thread.sleep(5 * 1000);\n                    ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵4\", CharsetUtil.UTF_8));\n                    System.out.println(\"channel code=\" + ctx.channel().hashCode());\n                } catch (Exception ex) {\n                    System.out.println(\"发生异常\" + ex.getMessage());\n                }\n            }\n        }, 5, TimeUnit.SECONDS);\n\n        System.out.println(\"go on ...\");\n\n//        System.out.println(\"服务器读取线程 \" + Thread.currentThread().getName() + \" channle =\" + ctx.channel());\n//        System.out.println(\"server ctx =\" + ctx);\n//        System.out.println(\"看看channel 和 pipeline的关系\");\n//        Channel channel = ctx.channel();\n//        ChannelPipeline pipeline = ctx.pipeline(); //本质是一个双向链接, 出站入站\n//        \n//        //将 msg 转成一个 ByteBuf\n//        //ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer.\n//        ByteBuf buf = (ByteBuf) msg;\n//        System.out.println(\"客户端发送消息是:\" + buf.toString(CharsetUtil.UTF_8));\n//        System.out.println(\"客户端地址:\" + channel.remoteAddress());\n    }\n\n    //数据读取完毕\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n        //writeAndFlush 是 write + flush\n        //将数据写入到缓存，并刷新\n        //一般讲，我们对这个发送的数据进行编码\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵1\", CharsetUtil.UTF_8));\n    }\n\n    //处理异常, 一般是需要关闭通道\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        ctx.close();\n    }\n}\n```\n\n\n\n### 方案再说明\n\n1. `Netty` 抽象出两组线程池，`BossGroup` 专门负责接收客户端连接，`WorkerGroup` 专门负责网络读写操作。\n2. `NioEventLoop` 表示一个不断循环执行处理任务的线程，每个 `NioEventLoop` 都有一个 `Selector`，用于监听绑定在其上的 `socket`网络通道。\n3. `NioEventLoop` 内部采用串行化设计，从消息的 **读取->解码->处理->编码->发送**，始终由 `IO` 线程 `NioEventLoop` 负责\n\n- `NioEventLoopGroup` 下包含多个 `NioEventLoop`\n- 每个 `NioEventLoop` 中包含有一个 `Selector`，一个 `taskQueue`\n- 每个 `NioEventLoop` 的 `Selector` 上可以注册监听多个 `NioChannel`\n- 每个 `NioChannel` 只会绑定在唯一的 `NioEventLoop` 上\n- 每个 `NioChannel` 都绑定有一个自己的 `ChannelPipeline`","slug":"从B站学习的Netty10","published":1,"updated":"2021-11-30T05:04:00.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rs0025o4vb60pu8dln","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h3 id=\"任务队列中的-Task-有-3-种典型使用场景\">任务队列中的 Task 有 3 种典型使用场景</h3>\n<ol>\n<li>用户程序自定义的普通任务【举例说明】</li>\n<li>用户自定义定时任务</li>\n<li>非当前 <code>Reactor</code> 线程调用 <code>Channel</code> 的各种方法<br>\n例如在<strong>推送系统</strong>的业务线程里面，根据用户的标识，找到对应的 <code>Channel</code> 引用，然后调用 <code>Write</code> 类方法向该用户推送消息，就会进入到这种场景。最终的 <code>Write</code> 会提交到任务队列中后被异步消费</li>\n</ol>\n<p>前两种的代码举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 说明</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 我们自定义一个Handler 需要继续netty 规定好的某个HandlerAdapter(规范)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 这时我们自定义一个Handler , 才能称为一个handler</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取数据实际(这里我们可以读取客户端发送的消息)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址</span></span><br><span class=\"line\"><span class=\"comment\">     * 2. Object msg: 就是客户端发送的数据 默认Object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 比如这里我们有一个非常耗时长的业务-&gt; 异步执行 -&gt; 提交该channel 对应的</span></span><br><span class=\"line\">        <span class=\"comment\">// NIOEventLoop 的 taskQueue中,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 解决方案1 用户程序自定义的普通任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.channel().eventLoop().execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵2&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;channel code=&quot;</span> + ctx.channel().hashCode());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;发生异常&quot;</span> + ex.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.channel().eventLoop().execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵3&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;channel code=&quot;</span> + ctx.channel().hashCode());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;发生异常&quot;</span> + ex.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//解决方案2 : 用户自定义定时任务 -》 该任务是提交到 scheduleTaskQueue中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.channel().eventLoop().schedule(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵4&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;channel code=&quot;</span> + ctx.channel().hashCode());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;发生异常&quot;</span> + ex.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;go on ...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;服务器读取线程 &quot; + Thread.currentThread().getName() + &quot; channle =&quot; + ctx.channel());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;server ctx =&quot; + ctx);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;看看channel 和 pipeline的关系&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        Channel channel = ctx.channel();</span></span><br><span class=\"line\"><span class=\"comment\">//        ChannelPipeline pipeline = ctx.pipeline(); //本质是一个双向链接, 出站入站</span></span><br><span class=\"line\"><span class=\"comment\">//        </span></span><br><span class=\"line\"><span class=\"comment\">//        //将 msg 转成一个 ByteBuf</span></span><br><span class=\"line\"><span class=\"comment\">//        //ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer.</span></span><br><span class=\"line\"><span class=\"comment\">//        ByteBuf buf = (ByteBuf) msg;</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;客户端发送消息是:&quot; + buf.toString(CharsetUtil.UTF_8));</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;客户端地址:&quot; + channel.remoteAddress());</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数据读取完毕</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelReadComplete</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//writeAndFlush 是 write + flush</span></span><br><span class=\"line\">        <span class=\"comment\">//将数据写入到缓存，并刷新</span></span><br><span class=\"line\">        <span class=\"comment\">//一般讲，我们对这个发送的数据进行编码</span></span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//处理异常, 一般是需要关闭通道</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方案再说明\">方案再说明</h3>\n<ol>\n<li><code>Netty</code> 抽象出两组线程池，<code>BossGroup</code> 专门负责接收客户端连接，<code>WorkerGroup</code> 专门负责网络读写操作。</li>\n<li><code>NioEventLoop</code> 表示一个不断循环执行处理任务的线程，每个 <code>NioEventLoop</code> 都有一个 <code>Selector</code>，用于监听绑定在其上的 <code>socket</code>网络通道。</li>\n<li><code>NioEventLoop</code> 内部采用串行化设计，从消息的 <strong>读取-&gt;解码-&gt;处理-&gt;编码-&gt;发送</strong>，始终由 <code>IO</code> 线程 <code>NioEventLoop</code> 负责</li>\n</ol>\n<ul>\n<li><code>NioEventLoopGroup</code> 下包含多个 <code>NioEventLoop</code></li>\n<li>每个 <code>NioEventLoop</code> 中包含有一个 <code>Selector</code>，一个 <code>taskQueue</code></li>\n<li>每个 <code>NioEventLoop</code> 的 <code>Selector</code> 上可以注册监听多个 <code>NioChannel</code></li>\n<li>每个 <code>NioChannel</code> 只会绑定在唯一的 <code>NioEventLoop</code> 上</li>\n<li>每个 <code>NioChannel</code> 都绑定有一个自己的 <code>ChannelPipeline</code></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h3 id=\"任务队列中的-Task-有-3-种典型使用场景\">任务队列中的 Task 有 3 种典型使用场景</h3>\n<ol>\n<li>用户程序自定义的普通任务【举例说明】</li>\n<li>用户自定义定时任务</li>\n<li>非当前 <code>Reactor</code> 线程调用 <code>Channel</code> 的各种方法<br>\n例如在<strong>推送系统</strong>的业务线程里面，根据用户的标识，找到对应的 <code>Channel</code> 引用，然后调用 <code>Write</code> 类方法向该用户推送消息，就会进入到这种场景。最终的 <code>Write</code> 会提交到任务队列中后被异步消费</li>\n</ol>\n<p>前两种的代码举例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.simple;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 说明</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 我们自定义一个Handler 需要继续netty 规定好的某个HandlerAdapter(规范)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. 这时我们自定义一个Handler , 才能称为一个handler</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取数据实际(这里我们可以读取客户端发送的消息)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址</span></span><br><span class=\"line\"><span class=\"comment\">     * 2. Object msg: 就是客户端发送的数据 默认Object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 比如这里我们有一个非常耗时长的业务-&gt; 异步执行 -&gt; 提交该channel 对应的</span></span><br><span class=\"line\">        <span class=\"comment\">// NIOEventLoop 的 taskQueue中,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 解决方案1 用户程序自定义的普通任务</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.channel().eventLoop().execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵2&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;channel code=&quot;</span> + ctx.channel().hashCode());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;发生异常&quot;</span> + ex.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.channel().eventLoop().execute(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵3&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;channel code=&quot;</span> + ctx.channel().hashCode());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;发生异常&quot;</span> + ex.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//解决方案2 : 用户自定义定时任务 -》 该任务是提交到 scheduleTaskQueue中</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.channel().eventLoop().schedule(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">5</span> * <span class=\"number\">1000</span>);</span><br><span class=\"line\">                    ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵4&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;channel code=&quot;</span> + ctx.channel().hashCode());</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;发生异常&quot;</span> + ex.getMessage());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;go on ...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;服务器读取线程 &quot; + Thread.currentThread().getName() + &quot; channle =&quot; + ctx.channel());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;server ctx =&quot; + ctx);</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;看看channel 和 pipeline的关系&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">//        Channel channel = ctx.channel();</span></span><br><span class=\"line\"><span class=\"comment\">//        ChannelPipeline pipeline = ctx.pipeline(); //本质是一个双向链接, 出站入站</span></span><br><span class=\"line\"><span class=\"comment\">//        </span></span><br><span class=\"line\"><span class=\"comment\">//        //将 msg 转成一个 ByteBuf</span></span><br><span class=\"line\"><span class=\"comment\">//        //ByteBuf 是 Netty 提供的，不是 NIO 的 ByteBuffer.</span></span><br><span class=\"line\"><span class=\"comment\">//        ByteBuf buf = (ByteBuf) msg;</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;客户端发送消息是:&quot; + buf.toString(CharsetUtil.UTF_8));</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(&quot;客户端地址:&quot; + channel.remoteAddress());</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数据读取完毕</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelReadComplete</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//writeAndFlush 是 write + flush</span></span><br><span class=\"line\">        <span class=\"comment\">//将数据写入到缓存，并刷新</span></span><br><span class=\"line\">        <span class=\"comment\">//一般讲，我们对这个发送的数据进行编码</span></span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//处理异常, 一般是需要关闭通道</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方案再说明\">方案再说明</h3>\n<ol>\n<li><code>Netty</code> 抽象出两组线程池，<code>BossGroup</code> 专门负责接收客户端连接，<code>WorkerGroup</code> 专门负责网络读写操作。</li>\n<li><code>NioEventLoop</code> 表示一个不断循环执行处理任务的线程，每个 <code>NioEventLoop</code> 都有一个 <code>Selector</code>，用于监听绑定在其上的 <code>socket</code>网络通道。</li>\n<li><code>NioEventLoop</code> 内部采用串行化设计，从消息的 <strong>读取-&gt;解码-&gt;处理-&gt;编码-&gt;发送</strong>，始终由 <code>IO</code> 线程 <code>NioEventLoop</code> 负责</li>\n</ol>\n<ul>\n<li><code>NioEventLoopGroup</code> 下包含多个 <code>NioEventLoop</code></li>\n<li>每个 <code>NioEventLoop</code> 中包含有一个 <code>Selector</code>，一个 <code>taskQueue</code></li>\n<li>每个 <code>NioEventLoop</code> 的 <code>Selector</code> 上可以注册监听多个 <code>NioChannel</code></li>\n<li>每个 <code>NioChannel</code> 只会绑定在唯一的 <code>NioEventLoop</code> 上</li>\n<li>每个 <code>NioChannel</code> 都绑定有一个自己的 <code>ChannelPipeline</code></li>\n</ul>\n"},{"title":"从B站学习的Netty12","abbrlink":3199984997,"date":"2021-11-30T05:06:03.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n\n## 快速入门实例 - HTTP服务\n\n1. 实例要求：使用 `IDEA` 创建 `Netty` 项目\n2. `Netty` 服务器在 `6668` 端口监听，浏览器发出请求 `http://localhost:6668/` \n3. 服务器可以回复消息给客户端”Hello!我是服务器5”,并对特定请求资源进行过滤。\n4. 目的：`Netty` 可以做 `Http` 服务开发，并且理解 `Handler` 实例和客户端及其请求的关系。\n5. 看老师代码演示\n\n```java\npackage com.atguigu.netty.http;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class TestServer {\n    public static void main(String[] args) throws Exception {\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n\n            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(new TestServerInitializer());\n\n            ChannelFuture channelFuture = serverBootstrap.bind(6668).sync();\n            \n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n\n\n```\n\nTestServerInitializer\n\n```java\npackage com.atguigu.netty.http;\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.handler.codec.http.HttpServerCodec;\n\n\npublic class TestServerInitializer extends ChannelInitializer<SocketChannel> {\n\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n\n        //向管道加入处理器\n\n        //得到管道\n        ChannelPipeline pipeline = ch.pipeline();\n\n        //加入一个netty 提供的httpServerCodec codec =>[coder - decoder]\n        //HttpServerCodec 说明\n        //1. HttpServerCodec 是netty 提供的处理http的 编-解码器\n        pipeline.addLast(\"MyHttpServerCodec\",new HttpServerCodec());\n        //2. 增加一个自定义的handler\n        pipeline.addLast(\"MyTestHttpServerHandler\", new TestHttpServerHandler());\n\n        System.out.println(\"ok~~~~\");\n\n    }\n}\n\n\n```\n\n### TestHttpServerHandler\n\n```java\npackage com.atguigu.netty.http;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.handler.codec.http.*;\nimport io.netty.util.CharsetUtil;\n\nimport java.net.URI;\n\n/*\n说明\n1. SimpleChannelInboundHandler 是 ChannelInboundHandlerAdapter\n2. HttpObject 客户端和服务器端相互通讯的数据被封装成 HttpObject\n */\npublic class TestHttpServerHandler extends SimpleChannelInboundHandler<HttpObject> {\n\n\n    //channelRead0 读取客户端数据\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) throws Exception {\n\n\n        System.out.println(\"对应的channel=\" + ctx.channel() + \" pipeline=\" + ctx\n        .pipeline() + \" 通过pipeline获取channel\" + ctx.pipeline().channel());\n\n        System.out.println(\"当前ctx的handler=\" + ctx.handler());\n\n        //判断 msg 是不是 httprequest请求\n        if(msg instanceof HttpRequest) {\n\n            System.out.println(\"ctx 类型=\"+ctx.getClass());\n\n            System.out.println(\"pipeline hashcode\" + ctx.pipeline().hashCode() + \" TestHttpServerHandler hash=\" + this.hashCode());\n\n            System.out.println(\"msg 类型=\" + msg.getClass());\n            System.out.println(\"客户端地址\" + ctx.channel().remoteAddress());\n\n            //获取到\n            HttpRequest httpRequest = (HttpRequest) msg;\n            //获取uri, 过滤指定的资源\n            URI uri = new URI(httpRequest.uri());\n            if(\"/favicon.ico\".equals(uri.getPath())) {\n                System.out.println(\"请求了 favicon.ico, 不做响应\");\n                return;\n            }\n            //回复信息给浏览器 [http协议]\n\n            ByteBuf content = Unpooled.copiedBuffer(\"hello, 我是服务器\", CharsetUtil.UTF_8);\n\n            //构造一个http的相应，即 httpresponse\n            FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);\n\n            response.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/plain\");\n            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());\n\n            //将构建好 response返回\n            ctx.writeAndFlush(response);\n\n        }\n    }\n\n}\n\n```\n\n","source":"_posts/从B站学习的Netty12.md","raw":"---\ntitle: 从B站学习的Netty12\nabbrlink: 3199984997\ndate: 2021-11-30 13:06:03\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n\n## 快速入门实例 - HTTP服务\n\n1. 实例要求：使用 `IDEA` 创建 `Netty` 项目\n2. `Netty` 服务器在 `6668` 端口监听，浏览器发出请求 `http://localhost:6668/` \n3. 服务器可以回复消息给客户端”Hello!我是服务器5”,并对特定请求资源进行过滤。\n4. 目的：`Netty` 可以做 `Http` 服务开发，并且理解 `Handler` 实例和客户端及其请求的关系。\n5. 看老师代码演示\n\n```java\npackage com.atguigu.netty.http;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class TestServer {\n    public static void main(String[] args) throws Exception {\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n\n            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(new TestServerInitializer());\n\n            ChannelFuture channelFuture = serverBootstrap.bind(6668).sync();\n            \n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n\n\n```\n\nTestServerInitializer\n\n```java\npackage com.atguigu.netty.http;\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.handler.codec.http.HttpServerCodec;\n\n\npublic class TestServerInitializer extends ChannelInitializer<SocketChannel> {\n\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n\n        //向管道加入处理器\n\n        //得到管道\n        ChannelPipeline pipeline = ch.pipeline();\n\n        //加入一个netty 提供的httpServerCodec codec =>[coder - decoder]\n        //HttpServerCodec 说明\n        //1. HttpServerCodec 是netty 提供的处理http的 编-解码器\n        pipeline.addLast(\"MyHttpServerCodec\",new HttpServerCodec());\n        //2. 增加一个自定义的handler\n        pipeline.addLast(\"MyTestHttpServerHandler\", new TestHttpServerHandler());\n\n        System.out.println(\"ok~~~~\");\n\n    }\n}\n\n\n```\n\n### TestHttpServerHandler\n\n```java\npackage com.atguigu.netty.http;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.handler.codec.http.*;\nimport io.netty.util.CharsetUtil;\n\nimport java.net.URI;\n\n/*\n说明\n1. SimpleChannelInboundHandler 是 ChannelInboundHandlerAdapter\n2. HttpObject 客户端和服务器端相互通讯的数据被封装成 HttpObject\n */\npublic class TestHttpServerHandler extends SimpleChannelInboundHandler<HttpObject> {\n\n\n    //channelRead0 读取客户端数据\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) throws Exception {\n\n\n        System.out.println(\"对应的channel=\" + ctx.channel() + \" pipeline=\" + ctx\n        .pipeline() + \" 通过pipeline获取channel\" + ctx.pipeline().channel());\n\n        System.out.println(\"当前ctx的handler=\" + ctx.handler());\n\n        //判断 msg 是不是 httprequest请求\n        if(msg instanceof HttpRequest) {\n\n            System.out.println(\"ctx 类型=\"+ctx.getClass());\n\n            System.out.println(\"pipeline hashcode\" + ctx.pipeline().hashCode() + \" TestHttpServerHandler hash=\" + this.hashCode());\n\n            System.out.println(\"msg 类型=\" + msg.getClass());\n            System.out.println(\"客户端地址\" + ctx.channel().remoteAddress());\n\n            //获取到\n            HttpRequest httpRequest = (HttpRequest) msg;\n            //获取uri, 过滤指定的资源\n            URI uri = new URI(httpRequest.uri());\n            if(\"/favicon.ico\".equals(uri.getPath())) {\n                System.out.println(\"请求了 favicon.ico, 不做响应\");\n                return;\n            }\n            //回复信息给浏览器 [http协议]\n\n            ByteBuf content = Unpooled.copiedBuffer(\"hello, 我是服务器\", CharsetUtil.UTF_8);\n\n            //构造一个http的相应，即 httpresponse\n            FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);\n\n            response.headers().set(HttpHeaderNames.CONTENT_TYPE, \"text/plain\");\n            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());\n\n            //将构建好 response返回\n            ctx.writeAndFlush(response);\n\n        }\n    }\n\n}\n\n```\n\n","slug":"从B站学习的Netty12","published":1,"updated":"2021-11-30T05:06:35.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rt0028o4vbg2186en4","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h2 id=\"快速入门实例-HTTP服务\">快速入门实例 - HTTP服务</h2>\n<ol>\n<li>实例要求：使用 <code>IDEA</code> 创建 <code>Netty</code> 项目</li>\n<li><code>Netty</code> 服务器在 <code>6668</code> 端口监听，浏览器发出请求 <code>http://localhost:6668/</code></li>\n<li>服务器可以回复消息给客户端”Hello!我是服务器5”,并对特定请求资源进行过滤。</li>\n<li>目的：<code>Netty</code> 可以做 <code>Http</code> 服务开发，并且理解 <code>Handler</code> 实例和客户端及其请求的关系。</li>\n<li>看老师代码演示</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(<span class=\"keyword\">new</span> TestServerInitializer());</span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(<span class=\"number\">6668</span>).sync();</span><br><span class=\"line\">            </span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>TestServerInitializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServerInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向管道加入处理器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//得到管道</span></span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加入一个netty 提供的httpServerCodec codec =&gt;[coder - decoder]</span></span><br><span class=\"line\">        <span class=\"comment\">//HttpServerCodec 说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. HttpServerCodec 是netty 提供的处理http的 编-解码器</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"string\">&quot;MyHttpServerCodec&quot;</span>,<span class=\"keyword\">new</span> HttpServerCodec());</span><br><span class=\"line\">        <span class=\"comment\">//2. 增加一个自定义的handler</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"string\">&quot;MyTestHttpServerHandler&quot;</span>, <span class=\"keyword\">new</span> TestHttpServerHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ok~~~~&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"TestHttpServerHandler\">TestHttpServerHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">说明</span></span><br><span class=\"line\"><span class=\"comment\">1. SimpleChannelInboundHandler 是 ChannelInboundHandlerAdapter</span></span><br><span class=\"line\"><span class=\"comment\">2. HttpObject 客户端和服务器端相互通讯的数据被封装成 HttpObject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestHttpServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">HttpObject</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//channelRead0 读取客户端数据</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;对应的channel=&quot;</span> + ctx.channel() + <span class=\"string\">&quot; pipeline=&quot;</span> + ctx</span><br><span class=\"line\">        .pipeline() + <span class=\"string\">&quot; 通过pipeline获取channel&quot;</span> + ctx.pipeline().channel());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前ctx的handler=&quot;</span> + ctx.handler());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断 msg 是不是 httprequest请求</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(msg <span class=\"keyword\">instanceof</span> HttpRequest) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ctx 类型=&quot;</span>+ctx.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;pipeline hashcode&quot;</span> + ctx.pipeline().hashCode() + <span class=\"string\">&quot; TestHttpServerHandler hash=&quot;</span> + <span class=\"keyword\">this</span>.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;msg 类型=&quot;</span> + msg.getClass());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;客户端地址&quot;</span> + ctx.channel().remoteAddress());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取到</span></span><br><span class=\"line\">            HttpRequest httpRequest = (HttpRequest) msg;</span><br><span class=\"line\">            <span class=\"comment\">//获取uri, 过滤指定的资源</span></span><br><span class=\"line\">            URI uri = <span class=\"keyword\">new</span> URI(httpRequest.uri());</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">&quot;/favicon.ico&quot;</span>.equals(uri.getPath())) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;请求了 favicon.ico, 不做响应&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//回复信息给浏览器 [http协议]</span></span><br><span class=\"line\"></span><br><span class=\"line\">            ByteBuf content = Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 我是服务器&quot;</span>, CharsetUtil.UTF_8);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//构造一个http的相应，即 httpresponse</span></span><br><span class=\"line\">            FullHttpResponse response = <span class=\"keyword\">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);</span><br><span class=\"line\"></span><br><span class=\"line\">            response.headers().set(HttpHeaderNames.CONTENT_TYPE, <span class=\"string\">&quot;text/plain&quot;</span>);</span><br><span class=\"line\">            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//将构建好 response返回</span></span><br><span class=\"line\">            ctx.writeAndFlush(response);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h2 id=\"快速入门实例-HTTP服务\">快速入门实例 - HTTP服务</h2>\n<ol>\n<li>实例要求：使用 <code>IDEA</code> 创建 <code>Netty</code> 项目</li>\n<li><code>Netty</code> 服务器在 <code>6668</code> 端口监听，浏览器发出请求 <code>http://localhost:6668/</code></li>\n<li>服务器可以回复消息给客户端”Hello!我是服务器5”,并对特定请求资源进行过滤。</li>\n<li>目的：<code>Netty</code> 可以做 <code>Http</code> 服务开发，并且理解 <code>Handler</code> 实例和客户端及其请求的关系。</li>\n<li>看老师代码演示</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            serverBootstrap.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(<span class=\"keyword\">new</span> TestServerInitializer());</span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(<span class=\"number\">6668</span>).sync();</span><br><span class=\"line\">            </span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>TestServerInitializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestServerInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//向管道加入处理器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//得到管道</span></span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加入一个netty 提供的httpServerCodec codec =&gt;[coder - decoder]</span></span><br><span class=\"line\">        <span class=\"comment\">//HttpServerCodec 说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. HttpServerCodec 是netty 提供的处理http的 编-解码器</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"string\">&quot;MyHttpServerCodec&quot;</span>,<span class=\"keyword\">new</span> HttpServerCodec());</span><br><span class=\"line\">        <span class=\"comment\">//2. 增加一个自定义的handler</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"string\">&quot;MyTestHttpServerHandler&quot;</span>, <span class=\"keyword\">new</span> TestHttpServerHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ok~~~~&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"TestHttpServerHandler\">TestHttpServerHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.http;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URI;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">说明</span></span><br><span class=\"line\"><span class=\"comment\">1. SimpleChannelInboundHandler 是 ChannelInboundHandlerAdapter</span></span><br><span class=\"line\"><span class=\"comment\">2. HttpObject 客户端和服务器端相互通讯的数据被封装成 HttpObject</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestHttpServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">HttpObject</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//channelRead0 读取客户端数据</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, HttpObject msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;对应的channel=&quot;</span> + ctx.channel() + <span class=\"string\">&quot; pipeline=&quot;</span> + ctx</span><br><span class=\"line\">        .pipeline() + <span class=\"string\">&quot; 通过pipeline获取channel&quot;</span> + ctx.pipeline().channel());</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;当前ctx的handler=&quot;</span> + ctx.handler());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//判断 msg 是不是 httprequest请求</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(msg <span class=\"keyword\">instanceof</span> HttpRequest) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;ctx 类型=&quot;</span>+ctx.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;pipeline hashcode&quot;</span> + ctx.pipeline().hashCode() + <span class=\"string\">&quot; TestHttpServerHandler hash=&quot;</span> + <span class=\"keyword\">this</span>.hashCode());</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;msg 类型=&quot;</span> + msg.getClass());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;客户端地址&quot;</span> + ctx.channel().remoteAddress());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取到</span></span><br><span class=\"line\">            HttpRequest httpRequest = (HttpRequest) msg;</span><br><span class=\"line\">            <span class=\"comment\">//获取uri, 过滤指定的资源</span></span><br><span class=\"line\">            URI uri = <span class=\"keyword\">new</span> URI(httpRequest.uri());</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"string\">&quot;/favicon.ico&quot;</span>.equals(uri.getPath())) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;请求了 favicon.ico, 不做响应&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//回复信息给浏览器 [http协议]</span></span><br><span class=\"line\"></span><br><span class=\"line\">            ByteBuf content = Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 我是服务器&quot;</span>, CharsetUtil.UTF_8);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//构造一个http的相应，即 httpresponse</span></span><br><span class=\"line\">            FullHttpResponse response = <span class=\"keyword\">new</span> DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);</span><br><span class=\"line\"></span><br><span class=\"line\">            response.headers().set(HttpHeaderNames.CONTENT_TYPE, <span class=\"string\">&quot;text/plain&quot;</span>);</span><br><span class=\"line\">            response.headers().set(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//将构建好 response返回</span></span><br><span class=\"line\">            ctx.writeAndFlush(response);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"从B站学习的Netty11","abbrlink":666023135,"date":"2021-11-30T05:04:19.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n\n异步模型\n\n### 基本介绍\n\n1. 异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者。\n2. `Netty` 中的 `I/O` 操作是异步的，包括 `Bind、Write、Connect` 等操作会首先简单的返回一个 `ChannelFuture`。\n3. 调用者并不能立刻获得结果，而是通过 `Future-Listener` 机制，用户可以方便的主动获取或者通过通知机制获得 `IO` 操作结果。\n4. `Netty` 的异步模型是建立在 `future` 和 `callback` 的之上的。`callback` 就是回调。重点说 `Future`，它的核心思想是：假设一个方法 `fun`，计算过程可能非常耗时，等待 `fun` 返回显然不合适。那么可以在调用 `fun` 的时候，立马返回一个 `Future`，后续可以通过 `Future` 去监控方法 `fun` 的处理过程（即：`Future-Listener` 机制）\n\n### Future 说明\n\n1. 表示异步的执行结果,可以通过它提供的方法来检测执行是否完成，比如检索计算等等。\n2. `ChannelFuture` 是一个接口：`public interface ChannelFuture extends Future<Void>` 我们可以添加监听器，当监听的事件发生时，就会通知到监听器。\n\n### 工作原理示意图\n\n下面第一张图就是管道，中间会经过多个handler\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0013.png?x-oss-process=style/qingyun)\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0014.png?x-oss-process=style/qingyun)\n\n说明：\n\n1. 在使用 `Netty` 进行编程时，拦截操作和转换出入站数据只需要您提供 `callback` 或利用 `future` 即可。这使得链式操作简单、高效，并有利于编写可重用的、通用的代码。\n2. `Netty` 框架的目标就是让你的业务逻辑从网络基础应用编码中分离出来、解脱出来。\n\n### Future-Listener 机制\n\n1. 当 `Future` 对象刚刚创建时，处于非完成状态，调用者可以通过返回的 `ChannelFuture` 来获取操作执行的状态，注册监听函数来执行完成后的操作。\n\n2. 常见有如下操作\n\n   - 通过 `isDone` 方法来判断当前操作是否完成；\n   - 通过 `isSuccess` 方法来判断已完成的当前操作是否成功；\n   - 通过 `getCause` 方法来获取已完成的当前操作失败的原因；\n   - 通过 `isCancelled` 方法来判断已完成的当前操作是否被取消；\n   - 通过 `addListener` 方法来注册监听器，当操作已完成（`isDone`方法返回完成），将会通知指定的监听器；如果 `Future` 对象已完成，则通知指定的监听器\n\n   举例说明\n   演示：绑定端口是异步操作，当绑定操作处理完，将会调用相应的监听器处理逻辑\n\n```java\n//绑定一个端口并且同步,生成了一个ChannelFuture对象\n//启动服务器(并绑定端口)\nChannelFuture cf = bootstrap.bind(6668).sync();\n//给cf注册监听器，监控我们关心的事件\ncf.addListener(new ChannelFutureListener() {\n   @Override\n   public void operationComplete (ChannelFuture future) throws Exception {\n      if (cf.isSuccess()) {\n         System.out.println(\"监听端口6668成功\");\n      } else {\n         System.out.println(\"监听端口6668失败\");\n      }\n   }\n});\n```","source":"_posts/从B站学习的Netty11.md","raw":"---\ntitle: 从B站学习的Netty11\nabbrlink: 666023135\ndate: 2021-11-30 13:04:19\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n\n异步模型\n\n### 基本介绍\n\n1. 异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者。\n2. `Netty` 中的 `I/O` 操作是异步的，包括 `Bind、Write、Connect` 等操作会首先简单的返回一个 `ChannelFuture`。\n3. 调用者并不能立刻获得结果，而是通过 `Future-Listener` 机制，用户可以方便的主动获取或者通过通知机制获得 `IO` 操作结果。\n4. `Netty` 的异步模型是建立在 `future` 和 `callback` 的之上的。`callback` 就是回调。重点说 `Future`，它的核心思想是：假设一个方法 `fun`，计算过程可能非常耗时，等待 `fun` 返回显然不合适。那么可以在调用 `fun` 的时候，立马返回一个 `Future`，后续可以通过 `Future` 去监控方法 `fun` 的处理过程（即：`Future-Listener` 机制）\n\n### Future 说明\n\n1. 表示异步的执行结果,可以通过它提供的方法来检测执行是否完成，比如检索计算等等。\n2. `ChannelFuture` 是一个接口：`public interface ChannelFuture extends Future<Void>` 我们可以添加监听器，当监听的事件发生时，就会通知到监听器。\n\n### 工作原理示意图\n\n下面第一张图就是管道，中间会经过多个handler\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0013.png?x-oss-process=style/qingyun)\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0014.png?x-oss-process=style/qingyun)\n\n说明：\n\n1. 在使用 `Netty` 进行编程时，拦截操作和转换出入站数据只需要您提供 `callback` 或利用 `future` 即可。这使得链式操作简单、高效，并有利于编写可重用的、通用的代码。\n2. `Netty` 框架的目标就是让你的业务逻辑从网络基础应用编码中分离出来、解脱出来。\n\n### Future-Listener 机制\n\n1. 当 `Future` 对象刚刚创建时，处于非完成状态，调用者可以通过返回的 `ChannelFuture` 来获取操作执行的状态，注册监听函数来执行完成后的操作。\n\n2. 常见有如下操作\n\n   - 通过 `isDone` 方法来判断当前操作是否完成；\n   - 通过 `isSuccess` 方法来判断已完成的当前操作是否成功；\n   - 通过 `getCause` 方法来获取已完成的当前操作失败的原因；\n   - 通过 `isCancelled` 方法来判断已完成的当前操作是否被取消；\n   - 通过 `addListener` 方法来注册监听器，当操作已完成（`isDone`方法返回完成），将会通知指定的监听器；如果 `Future` 对象已完成，则通知指定的监听器\n\n   举例说明\n   演示：绑定端口是异步操作，当绑定操作处理完，将会调用相应的监听器处理逻辑\n\n```java\n//绑定一个端口并且同步,生成了一个ChannelFuture对象\n//启动服务器(并绑定端口)\nChannelFuture cf = bootstrap.bind(6668).sync();\n//给cf注册监听器，监控我们关心的事件\ncf.addListener(new ChannelFutureListener() {\n   @Override\n   public void operationComplete (ChannelFuture future) throws Exception {\n      if (cf.isSuccess()) {\n         System.out.println(\"监听端口6668成功\");\n      } else {\n         System.out.println(\"监听端口6668失败\");\n      }\n   }\n});\n```","slug":"从B站学习的Netty11","published":1,"updated":"2021-11-30T05:04:34.826Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2ru002bo4vband5c3k2","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<p>异步模型</p>\n<h3 id=\"基本介绍\">基本介绍</h3>\n<ol>\n<li>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者。</li>\n<li><code>Netty</code> 中的 <code>I/O</code> 操作是异步的，包括 <code>Bind、Write、Connect</code> 等操作会首先简单的返回一个 <code>ChannelFuture</code>。</li>\n<li>调用者并不能立刻获得结果，而是通过 <code>Future-Listener</code> 机制，用户可以方便的主动获取或者通过通知机制获得 <code>IO</code> 操作结果。</li>\n<li><code>Netty</code> 的异步模型是建立在 <code>future</code> 和 <code>callback</code> 的之上的。<code>callback</code> 就是回调。重点说 <code>Future</code>，它的核心思想是：假设一个方法 <code>fun</code>，计算过程可能非常耗时，等待 <code>fun</code> 返回显然不合适。那么可以在调用 <code>fun</code> 的时候，立马返回一个 <code>Future</code>，后续可以通过 <code>Future</code> 去监控方法 <code>fun</code> 的处理过程（即：<code>Future-Listener</code> 机制）</li>\n</ol>\n<h3 id=\"Future-说明\">Future 说明</h3>\n<ol>\n<li>表示异步的执行结果,可以通过它提供的方法来检测执行是否完成，比如检索计算等等。</li>\n<li><code>ChannelFuture</code> 是一个接口：<code>public interface ChannelFuture extends Future&lt;Void&gt;</code> 我们可以添加监听器，当监听的事件发生时，就会通知到监听器。</li>\n</ol>\n<h3 id=\"工作原理示意图\">工作原理示意图</h3>\n<p>下面第一张图就是管道，中间会经过多个handler</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0013.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0014.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>说明：</p>\n<ol>\n<li>在使用 <code>Netty</code> 进行编程时，拦截操作和转换出入站数据只需要您提供 <code>callback</code> 或利用 <code>future</code> 即可。这使得链式操作简单、高效，并有利于编写可重用的、通用的代码。</li>\n<li><code>Netty</code> 框架的目标就是让你的业务逻辑从网络基础应用编码中分离出来、解脱出来。</li>\n</ol>\n<h3 id=\"Future-Listener-机制\">Future-Listener 机制</h3>\n<ol>\n<li>\n<p>当 <code>Future</code> 对象刚刚创建时，处于非完成状态，调用者可以通过返回的 <code>ChannelFuture</code> 来获取操作执行的状态，注册监听函数来执行完成后的操作。</p>\n</li>\n<li>\n<p>常见有如下操作</p>\n<ul>\n<li>通过 <code>isDone</code> 方法来判断当前操作是否完成；</li>\n<li>通过 <code>isSuccess</code> 方法来判断已完成的当前操作是否成功；</li>\n<li>通过 <code>getCause</code> 方法来获取已完成的当前操作失败的原因；</li>\n<li>通过 <code>isCancelled</code> 方法来判断已完成的当前操作是否被取消；</li>\n<li>通过 <code>addListener</code> 方法来注册监听器，当操作已完成（<code>isDone</code>方法返回完成），将会通知指定的监听器；如果 <code>Future</code> 对象已完成，则通知指定的监听器</li>\n</ul>\n<p>举例说明<br>\n演示：绑定端口是异步操作，当绑定操作处理完，将会调用相应的监听器处理逻辑</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绑定一个端口并且同步,生成了一个ChannelFuture对象</span></span><br><span class=\"line\"><span class=\"comment\">//启动服务器(并绑定端口)</span></span><br><span class=\"line\">ChannelFuture cf = bootstrap.bind(<span class=\"number\">6668</span>).sync();</span><br><span class=\"line\"><span class=\"comment\">//给cf注册监听器，监控我们关心的事件</span></span><br><span class=\"line\">cf.addListener(<span class=\"keyword\">new</span> ChannelFutureListener() &#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operationComplete</span> <span class=\"params\">(ChannelFuture future)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cf.isSuccess()) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;监听端口6668成功&quot;</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;监听端口6668失败&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<p>异步模型</p>\n<h3 id=\"基本介绍\">基本介绍</h3>\n<ol>\n<li>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者。</li>\n<li><code>Netty</code> 中的 <code>I/O</code> 操作是异步的，包括 <code>Bind、Write、Connect</code> 等操作会首先简单的返回一个 <code>ChannelFuture</code>。</li>\n<li>调用者并不能立刻获得结果，而是通过 <code>Future-Listener</code> 机制，用户可以方便的主动获取或者通过通知机制获得 <code>IO</code> 操作结果。</li>\n<li><code>Netty</code> 的异步模型是建立在 <code>future</code> 和 <code>callback</code> 的之上的。<code>callback</code> 就是回调。重点说 <code>Future</code>，它的核心思想是：假设一个方法 <code>fun</code>，计算过程可能非常耗时，等待 <code>fun</code> 返回显然不合适。那么可以在调用 <code>fun</code> 的时候，立马返回一个 <code>Future</code>，后续可以通过 <code>Future</code> 去监控方法 <code>fun</code> 的处理过程（即：<code>Future-Listener</code> 机制）</li>\n</ol>\n<h3 id=\"Future-说明\">Future 说明</h3>\n<ol>\n<li>表示异步的执行结果,可以通过它提供的方法来检测执行是否完成，比如检索计算等等。</li>\n<li><code>ChannelFuture</code> 是一个接口：<code>public interface ChannelFuture extends Future&lt;Void&gt;</code> 我们可以添加监听器，当监听的事件发生时，就会通知到监听器。</li>\n</ol>\n<h3 id=\"工作原理示意图\">工作原理示意图</h3>\n<p>下面第一张图就是管道，中间会经过多个handler</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0013.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0014.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>说明：</p>\n<ol>\n<li>在使用 <code>Netty</code> 进行编程时，拦截操作和转换出入站数据只需要您提供 <code>callback</code> 或利用 <code>future</code> 即可。这使得链式操作简单、高效，并有利于编写可重用的、通用的代码。</li>\n<li><code>Netty</code> 框架的目标就是让你的业务逻辑从网络基础应用编码中分离出来、解脱出来。</li>\n</ol>\n<h3 id=\"Future-Listener-机制\">Future-Listener 机制</h3>\n<ol>\n<li>\n<p>当 <code>Future</code> 对象刚刚创建时，处于非完成状态，调用者可以通过返回的 <code>ChannelFuture</code> 来获取操作执行的状态，注册监听函数来执行完成后的操作。</p>\n</li>\n<li>\n<p>常见有如下操作</p>\n<ul>\n<li>通过 <code>isDone</code> 方法来判断当前操作是否完成；</li>\n<li>通过 <code>isSuccess</code> 方法来判断已完成的当前操作是否成功；</li>\n<li>通过 <code>getCause</code> 方法来获取已完成的当前操作失败的原因；</li>\n<li>通过 <code>isCancelled</code> 方法来判断已完成的当前操作是否被取消；</li>\n<li>通过 <code>addListener</code> 方法来注册监听器，当操作已完成（<code>isDone</code>方法返回完成），将会通知指定的监听器；如果 <code>Future</code> 对象已完成，则通知指定的监听器</li>\n</ul>\n<p>举例说明<br>\n演示：绑定端口是异步操作，当绑定操作处理完，将会调用相应的监听器处理逻辑</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绑定一个端口并且同步,生成了一个ChannelFuture对象</span></span><br><span class=\"line\"><span class=\"comment\">//启动服务器(并绑定端口)</span></span><br><span class=\"line\">ChannelFuture cf = bootstrap.bind(<span class=\"number\">6668</span>).sync();</span><br><span class=\"line\"><span class=\"comment\">//给cf注册监听器，监控我们关心的事件</span></span><br><span class=\"line\">cf.addListener(<span class=\"keyword\">new</span> ChannelFutureListener() &#123;</span><br><span class=\"line\">   <span class=\"meta\">@Override</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operationComplete</span> <span class=\"params\">(ChannelFuture future)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cf.isSuccess()) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;监听端口6668成功&quot;</span>);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;监听端口6668失败&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"从B站学习的Netty13","abbrlink":3384595955,"date":"2021-12-01T02:12:34.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n# Netty 核心模块组件\n\n\n\n## Bootstrap、ServerBootstrap\n\n1. `Bootstrap` 意思是引导，一个 `Netty` 应用通常由一个 `Bootstrap` 开始，主要作用是配置整个 `Netty` 程序，串联各个组件，`Netty` 中 `Bootstrap` 类是客户端程序的启动引导类，`ServerBootstrap` 是服务端启动引导类。\n\n2. 常见的方法有\n\n   - `public ServerBootstrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup)`，该方法用于服务器端，用来设置两个 `EventLoop`\n\n   - `public B group(EventLoopGroup group)`，该方法用于客户端，用来设置一个 `EventLoop`\n\n   - `public B channel(Class<? extends C> channelClass)`，该方法用来设置一个服务器端的通道实现\n\n   - `public <T> B option(ChannelOption<T> option, T value)`，用来给 `ServerChannel` 添加配置\n\n   - `public <T> ServerBootstrap childOption(ChannelOption<T> childOption, T value)`，用来给接收到的通道添加配置\n\n   - `public ServerBootstrap childHandler(ChannelHandler childHandler)`，该方法用来设置业务处理类（自定义的`handler`）\n\n   - `public ChannelFuture bind(int inetPort)`，该方法用于服务器端，用来设置占用的端口号\n\n   - `public ChannelFuture connect(String inetHost, int inetPort)`，该方法用于客户端，用来连接服务器端\n\n## Future、ChannelFuture\n\n`Netty` 中所有的 `IO` 操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过 `Future` 和 `ChannelFutures`，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件\n\n常见的方法有\n\n- `Channel channel()`，返回当前正在进行 `IO` 操作的通道\n- `ChannelFuture sync()`，等待异步操作执行完毕 （同步转异步）\n\n## Channel\n\n1. `Netty` 网络通信的组件，能够用于执行网络 `I/O` 操作。\n\n2. 通过 `Channel` 可获得当前网络连接的通道的状态\n\n3. 通过 `Channel` 可获得网络连接的配置参数（例如接收缓冲区大小）\n\n4. `Channel` 提供异步的网络 `I/O` 操作(如建立连接，读写，绑定端口)，异步调用意味着任何 `I/O` 调用都将立即返回，并且不保证在调用结束时所请求的 `I/O` 操作已完成\n\n5. 调用立即返回一个 `ChannelFuture` 实例，通过注册监听器到 `ChannelFuture` 上，可以 `I/O` 操作成功、失败或取消时回调通知调用方\n\n6. 支持关联 `I/O` 操作与对应的处理程序\n\n7. 不同协议、不同的阻塞类型的连接都有不同的 \n\n   ```\n   Channel\n   ```\n\n    类型与之对应，常用的 \n\n   ```\n   Channel\n   ```\n\n    类型：\n\n   - `NioSocketChannel`，异步的客户端 `TCP` `Socket` 连接。\n   - `NioServerSocketChannel`，异步的服务器端 `TCP` `Socket` 连接。\n   - `NioDatagramChannel`，异步的 `UDP` 连接。\n   - `NioSctpChannel`，异步的客户端 `Sctp` 连接。\n   - `NioSctpServerChannel`，异步的 `Sctp` 服务器端连接，这些通道涵盖了 `UDP` 和 `TCP` 网络 `IO` 以及文件 `IO`。\n\n## Selector\n\n1. `Netty` 基于 `Selector` 对象实现 `I/O` 多路复用，通过 `Selector` 一个线程可以监听多个连接的 `Channel` 事件。\n2. 当向一个 `Selector` 中注册 `Channel` 后，`Selector` 内部的机制就可以自动不断地查询（`Select`）这些注册的 `Channel` 是否有已就绪的 `I/O` 事件（例如可读，可写，网络连接完成等），这样程序就可以很简单地使用一个线程高效地管理多个 `Channel`\n\n## ChannelHandler 及其实现类\n\n1. `ChannelHandler` 是一个接口，处理 `I/O` 事件或拦截 `I/O` 操作，并将其转发到其 `ChannelPipeline`（业务处理链）中的下一个处理程序。\n2. `ChannelHandler` 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类\n3. `ChannelHandler` 及其实现类一览图（后）\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0015.png?x-oss-process=style/qingyun)\n\n我们经常需要自定义一个 `Handler` 类去继承 `ChannelInboundHandlerAdapter`，然后通过重写相应方法实现业务逻辑，我们接下来看看一般都需要重写哪些方法\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0016.png?x-oss-process=style/qingyun)\n\n## Pipeline 和 ChannelPipeline\n\n1. `ChannelPipeline` 是一个 `Handler` 的集合，它负责处理和拦截 `inbound` 或者 `outbound` 的事件和操作，相当于一个贯穿 `Netty` 的链。（也可以这样理解：`ChannelPipeline` 是保存 `ChannelHandler` 的 `List`，用于处理或拦截 `Channel` 的入站事件和出站操作）\n2. `ChannelPipeline` 实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及 `Channel` 中各个的 `ChannelHandler` 如何相互交互\n3. 在 `Netty` 中每个 `Channel` 都有且仅有一个 `ChannelPipeline` 与之对应，它们的组成关系如下\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0017.png?x-oss-process=style/qingyun)\n\n常用方法\n`ChannelPipeline addFirst(ChannelHandler... handlers)`，把一个业务处理类（`handler`）添加到链中的第一个位置`ChannelPipeline addLast(ChannelHandler... handlers)`，把一个业务处理类（`handler`）添加到链中的最后一个位置\n\n从head看一下debug\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0018.jpg?x-oss-process=style/qingyun)\n\n- `TestServerInitializer`和`HttpServerCodec`这些东西本身也是`handler`\n- 一般来说事件从客户端往服务器走我们称为出站，反之则是入站。\n\n## ChannelHandlerContext\n\n1. 保存 `Channel` 相关的所有上下文信息，同时关联一个 `ChannelHandler` 对象\n2. 即 `ChannelHandlerContext` 中包含一个具体的事件处理器 `ChannelHandler`，同时 `ChannelHandlerContext` 中也绑定了对应的 `pipeline` 和 `Channel` 的信息，方便对 `ChannelHandler` 进行调用。\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0019.jpg?x-oss-process=style/qingyun)\n\n1. 常用方法\n\n- `ChannelFuture close()`，关闭通道\n- `ChannelOutboundInvoker flush()`，刷新\n- `ChannelFuture writeAndFlush(Object msg)`，将数据写到 \n- `ChannelPipeline` 中当前 `ChannelHandler` 的下一个 `ChannelHandler` 开始处理（出站）\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0020.png?x-oss-process=style/qingyun)\n\n## ChannelOption\n\n1. `Netty` 在创建 `Channel` 实例后，一般都需要设置 `ChannelOption` 参数。\n2. `ChannelOption` 参数如下：\n3. ![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0021.png?x-oss-process=style/qingyun)\n\n## EventLoopGroup 和其实现类 NioEventLoopGroup\n\n1. `EventLoopGroup` 是一组 `EventLoop` 的抽象，`Netty` 为了更好的利用多核 `CPU` 资源，一般会有多个 `EventLoop` 同时工作，每个 `EventLoop` 维护着一个 `Selector` 实例。\n2. `EventLoopGroup` 提供 `next` 接口，可以从组里面按照一定规则获取其中一个 `EventLoop` 来处理任务。在 `Netty` 服务器端编程中，我们一般都需要提供两个 `EventLoopGroup`，例如：`BossEventLoopGroup` 和 `WorkerEventLoopGroup`。\n3. 通常一个服务端口即一个 `ServerSocketChannel` 对应一个 `Selector` 和一个 `EventLoop` 线程。`BossEventLoop` 负责接收客户端的连接并将 `SocketChannel` 交给 `WorkerEventLoopGroup` 来进行 `IO` 处理，如下图所示\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0022.png?x-oss-process=style/qingyun)\n\n常用方法\n`public NioEventLoopGroup()`，构造方法\n`public Future<?> shutdownGracefully()`，断开连接，关闭线程\n\n## Unpooled 类\n\n1. `Netty` 提供一个专门用来操作缓冲区（即 `Netty` 的数据容器）的工具类\n2. 常用方法如下所示\n\n[![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0023.png?x-oss-process=style/qingyun)](https://unpkg.zhimg.com/youthlql@1.0.0/netty/introduction/chapter_002/0023.png)\n\n举例说明 `Unpooled` 获取 `Netty` 的数据容器 `ByteBuf` 的基本使用\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0024.png?x-oss-process=style/qingyun)\n\n```java\npackage com.atguigu.netty.buf;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\n\npublic class NettyByteBuf01 {\n\n    public static void main(String[] args) {\n        \n        //创建一个ByteBuf\n        //说明\n        //1. 创建 对象，该对象包含一个数组arr , 是一个byte[10]\n        //2. 在netty 的buffer中，不需要使用flip 进行反转\n        //   底层维护了 readerindex 和 writerIndex\n        //3. 通过 readerindex 和  writerIndex 和  capacity， 将buffer分成三个区域\n        // 0---readerindex 已经读取的区域\n        // readerindex---writerIndex ， 可读的区域\n        // writerIndex -- capacity, 可写的区域\n        ByteBuf buffer = Unpooled.buffer(10);\n\n        for (int i = 0; i < 10; i++) {\n            buffer.writeByte(i);\n        }\n\n        System.out.println(\"capacity=\" + buffer.capacity());//10\n        //输出\n//        for(int i = 0; i<buffer.capacity(); i++) {\n        \t  //这个方法readerindex不会变\n//            System.out.println(buffer.getByte(i));\n//        }\n        for (int i = 0; i < buffer.capacity(); i++) {\n            //这个方法readerindex会变\n            System.out.println(buffer.readByte());\n        }\n        System.out.println(\"执行完毕\");\n    }\n}\n\n```\n\n```java\npackage com.atguigu.netty.buf;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\n\nimport java.nio.charset.Charset;\n\npublic class NettyByteBuf02 {\n    \n    public static void main(String[] args) {\n\n        //创建ByteBuf\n        ByteBuf byteBuf = Unpooled.copiedBuffer(\"hello,world!\", Charset.forName(\"utf-8\"));\n\n        //使用相关的方法\n        if (byteBuf.hasArray()) { // true\n\n            byte[] content = byteBuf.array();\n\n            //将 content 转成字符串\n            System.out.println(new String(content, Charset.forName(\"utf-8\")));\n\n            System.out.println(\"byteBuf=\" + byteBuf);\n\n            System.out.println(byteBuf.arrayOffset()); // 0\n            System.out.println(byteBuf.readerIndex()); // 0\n            System.out.println(byteBuf.writerIndex()); // 12\n            System.out.println(byteBuf.capacity()); // 36\n\n            //System.out.println(byteBuf.readByte()); //\n            System.out.println(byteBuf.getByte(0)); // 104\n\n            int len = byteBuf.readableBytes(); //可读的字节数  12\n            System.out.println(\"len=\" + len);\n\n            //使用for取出各个字节\n            for (int i = 0; i < len; i++) {\n                System.out.println((char) byteBuf.getByte(i));\n            }\n\n            //按照某个范围读取\n            System.out.println(byteBuf.getCharSequence(0, 4, Charset.forName(\"utf-8\")));\n            System.out.println(byteBuf.getCharSequence(4, 6, Charset.forName(\"utf-8\")));\n        }\n    }\n}\n\n```\n\n","source":"_posts/从B站学习的Netty13.md","raw":"---\ntitle: 从B站学习的Netty13\nabbrlink: 3384595955\ndate: 2021-12-01 10:12:34\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n# Netty 核心模块组件\n\n\n\n## Bootstrap、ServerBootstrap\n\n1. `Bootstrap` 意思是引导，一个 `Netty` 应用通常由一个 `Bootstrap` 开始，主要作用是配置整个 `Netty` 程序，串联各个组件，`Netty` 中 `Bootstrap` 类是客户端程序的启动引导类，`ServerBootstrap` 是服务端启动引导类。\n\n2. 常见的方法有\n\n   - `public ServerBootstrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup)`，该方法用于服务器端，用来设置两个 `EventLoop`\n\n   - `public B group(EventLoopGroup group)`，该方法用于客户端，用来设置一个 `EventLoop`\n\n   - `public B channel(Class<? extends C> channelClass)`，该方法用来设置一个服务器端的通道实现\n\n   - `public <T> B option(ChannelOption<T> option, T value)`，用来给 `ServerChannel` 添加配置\n\n   - `public <T> ServerBootstrap childOption(ChannelOption<T> childOption, T value)`，用来给接收到的通道添加配置\n\n   - `public ServerBootstrap childHandler(ChannelHandler childHandler)`，该方法用来设置业务处理类（自定义的`handler`）\n\n   - `public ChannelFuture bind(int inetPort)`，该方法用于服务器端，用来设置占用的端口号\n\n   - `public ChannelFuture connect(String inetHost, int inetPort)`，该方法用于客户端，用来连接服务器端\n\n## Future、ChannelFuture\n\n`Netty` 中所有的 `IO` 操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过 `Future` 和 `ChannelFutures`，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件\n\n常见的方法有\n\n- `Channel channel()`，返回当前正在进行 `IO` 操作的通道\n- `ChannelFuture sync()`，等待异步操作执行完毕 （同步转异步）\n\n## Channel\n\n1. `Netty` 网络通信的组件，能够用于执行网络 `I/O` 操作。\n\n2. 通过 `Channel` 可获得当前网络连接的通道的状态\n\n3. 通过 `Channel` 可获得网络连接的配置参数（例如接收缓冲区大小）\n\n4. `Channel` 提供异步的网络 `I/O` 操作(如建立连接，读写，绑定端口)，异步调用意味着任何 `I/O` 调用都将立即返回，并且不保证在调用结束时所请求的 `I/O` 操作已完成\n\n5. 调用立即返回一个 `ChannelFuture` 实例，通过注册监听器到 `ChannelFuture` 上，可以 `I/O` 操作成功、失败或取消时回调通知调用方\n\n6. 支持关联 `I/O` 操作与对应的处理程序\n\n7. 不同协议、不同的阻塞类型的连接都有不同的 \n\n   ```\n   Channel\n   ```\n\n    类型与之对应，常用的 \n\n   ```\n   Channel\n   ```\n\n    类型：\n\n   - `NioSocketChannel`，异步的客户端 `TCP` `Socket` 连接。\n   - `NioServerSocketChannel`，异步的服务器端 `TCP` `Socket` 连接。\n   - `NioDatagramChannel`，异步的 `UDP` 连接。\n   - `NioSctpChannel`，异步的客户端 `Sctp` 连接。\n   - `NioSctpServerChannel`，异步的 `Sctp` 服务器端连接，这些通道涵盖了 `UDP` 和 `TCP` 网络 `IO` 以及文件 `IO`。\n\n## Selector\n\n1. `Netty` 基于 `Selector` 对象实现 `I/O` 多路复用，通过 `Selector` 一个线程可以监听多个连接的 `Channel` 事件。\n2. 当向一个 `Selector` 中注册 `Channel` 后，`Selector` 内部的机制就可以自动不断地查询（`Select`）这些注册的 `Channel` 是否有已就绪的 `I/O` 事件（例如可读，可写，网络连接完成等），这样程序就可以很简单地使用一个线程高效地管理多个 `Channel`\n\n## ChannelHandler 及其实现类\n\n1. `ChannelHandler` 是一个接口，处理 `I/O` 事件或拦截 `I/O` 操作，并将其转发到其 `ChannelPipeline`（业务处理链）中的下一个处理程序。\n2. `ChannelHandler` 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类\n3. `ChannelHandler` 及其实现类一览图（后）\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0015.png?x-oss-process=style/qingyun)\n\n我们经常需要自定义一个 `Handler` 类去继承 `ChannelInboundHandlerAdapter`，然后通过重写相应方法实现业务逻辑，我们接下来看看一般都需要重写哪些方法\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0016.png?x-oss-process=style/qingyun)\n\n## Pipeline 和 ChannelPipeline\n\n1. `ChannelPipeline` 是一个 `Handler` 的集合，它负责处理和拦截 `inbound` 或者 `outbound` 的事件和操作，相当于一个贯穿 `Netty` 的链。（也可以这样理解：`ChannelPipeline` 是保存 `ChannelHandler` 的 `List`，用于处理或拦截 `Channel` 的入站事件和出站操作）\n2. `ChannelPipeline` 实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及 `Channel` 中各个的 `ChannelHandler` 如何相互交互\n3. 在 `Netty` 中每个 `Channel` 都有且仅有一个 `ChannelPipeline` 与之对应，它们的组成关系如下\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0017.png?x-oss-process=style/qingyun)\n\n常用方法\n`ChannelPipeline addFirst(ChannelHandler... handlers)`，把一个业务处理类（`handler`）添加到链中的第一个位置`ChannelPipeline addLast(ChannelHandler... handlers)`，把一个业务处理类（`handler`）添加到链中的最后一个位置\n\n从head看一下debug\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0018.jpg?x-oss-process=style/qingyun)\n\n- `TestServerInitializer`和`HttpServerCodec`这些东西本身也是`handler`\n- 一般来说事件从客户端往服务器走我们称为出站，反之则是入站。\n\n## ChannelHandlerContext\n\n1. 保存 `Channel` 相关的所有上下文信息，同时关联一个 `ChannelHandler` 对象\n2. 即 `ChannelHandlerContext` 中包含一个具体的事件处理器 `ChannelHandler`，同时 `ChannelHandlerContext` 中也绑定了对应的 `pipeline` 和 `Channel` 的信息，方便对 `ChannelHandler` 进行调用。\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0019.jpg?x-oss-process=style/qingyun)\n\n1. 常用方法\n\n- `ChannelFuture close()`，关闭通道\n- `ChannelOutboundInvoker flush()`，刷新\n- `ChannelFuture writeAndFlush(Object msg)`，将数据写到 \n- `ChannelPipeline` 中当前 `ChannelHandler` 的下一个 `ChannelHandler` 开始处理（出站）\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0020.png?x-oss-process=style/qingyun)\n\n## ChannelOption\n\n1. `Netty` 在创建 `Channel` 实例后，一般都需要设置 `ChannelOption` 参数。\n2. `ChannelOption` 参数如下：\n3. ![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0021.png?x-oss-process=style/qingyun)\n\n## EventLoopGroup 和其实现类 NioEventLoopGroup\n\n1. `EventLoopGroup` 是一组 `EventLoop` 的抽象，`Netty` 为了更好的利用多核 `CPU` 资源，一般会有多个 `EventLoop` 同时工作，每个 `EventLoop` 维护着一个 `Selector` 实例。\n2. `EventLoopGroup` 提供 `next` 接口，可以从组里面按照一定规则获取其中一个 `EventLoop` 来处理任务。在 `Netty` 服务器端编程中，我们一般都需要提供两个 `EventLoopGroup`，例如：`BossEventLoopGroup` 和 `WorkerEventLoopGroup`。\n3. 通常一个服务端口即一个 `ServerSocketChannel` 对应一个 `Selector` 和一个 `EventLoop` 线程。`BossEventLoop` 负责接收客户端的连接并将 `SocketChannel` 交给 `WorkerEventLoopGroup` 来进行 `IO` 处理，如下图所示\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0022.png?x-oss-process=style/qingyun)\n\n常用方法\n`public NioEventLoopGroup()`，构造方法\n`public Future<?> shutdownGracefully()`，断开连接，关闭线程\n\n## Unpooled 类\n\n1. `Netty` 提供一个专门用来操作缓冲区（即 `Netty` 的数据容器）的工具类\n2. 常用方法如下所示\n\n[![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0023.png?x-oss-process=style/qingyun)](https://unpkg.zhimg.com/youthlql@1.0.0/netty/introduction/chapter_002/0023.png)\n\n举例说明 `Unpooled` 获取 `Netty` 的数据容器 `ByteBuf` 的基本使用\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0024.png?x-oss-process=style/qingyun)\n\n```java\npackage com.atguigu.netty.buf;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\n\npublic class NettyByteBuf01 {\n\n    public static void main(String[] args) {\n        \n        //创建一个ByteBuf\n        //说明\n        //1. 创建 对象，该对象包含一个数组arr , 是一个byte[10]\n        //2. 在netty 的buffer中，不需要使用flip 进行反转\n        //   底层维护了 readerindex 和 writerIndex\n        //3. 通过 readerindex 和  writerIndex 和  capacity， 将buffer分成三个区域\n        // 0---readerindex 已经读取的区域\n        // readerindex---writerIndex ， 可读的区域\n        // writerIndex -- capacity, 可写的区域\n        ByteBuf buffer = Unpooled.buffer(10);\n\n        for (int i = 0; i < 10; i++) {\n            buffer.writeByte(i);\n        }\n\n        System.out.println(\"capacity=\" + buffer.capacity());//10\n        //输出\n//        for(int i = 0; i<buffer.capacity(); i++) {\n        \t  //这个方法readerindex不会变\n//            System.out.println(buffer.getByte(i));\n//        }\n        for (int i = 0; i < buffer.capacity(); i++) {\n            //这个方法readerindex会变\n            System.out.println(buffer.readByte());\n        }\n        System.out.println(\"执行完毕\");\n    }\n}\n\n```\n\n```java\npackage com.atguigu.netty.buf;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\n\nimport java.nio.charset.Charset;\n\npublic class NettyByteBuf02 {\n    \n    public static void main(String[] args) {\n\n        //创建ByteBuf\n        ByteBuf byteBuf = Unpooled.copiedBuffer(\"hello,world!\", Charset.forName(\"utf-8\"));\n\n        //使用相关的方法\n        if (byteBuf.hasArray()) { // true\n\n            byte[] content = byteBuf.array();\n\n            //将 content 转成字符串\n            System.out.println(new String(content, Charset.forName(\"utf-8\")));\n\n            System.out.println(\"byteBuf=\" + byteBuf);\n\n            System.out.println(byteBuf.arrayOffset()); // 0\n            System.out.println(byteBuf.readerIndex()); // 0\n            System.out.println(byteBuf.writerIndex()); // 12\n            System.out.println(byteBuf.capacity()); // 36\n\n            //System.out.println(byteBuf.readByte()); //\n            System.out.println(byteBuf.getByte(0)); // 104\n\n            int len = byteBuf.readableBytes(); //可读的字节数  12\n            System.out.println(\"len=\" + len);\n\n            //使用for取出各个字节\n            for (int i = 0; i < len; i++) {\n                System.out.println((char) byteBuf.getByte(i));\n            }\n\n            //按照某个范围读取\n            System.out.println(byteBuf.getCharSequence(0, 4, Charset.forName(\"utf-8\")));\n            System.out.println(byteBuf.getCharSequence(4, 6, Charset.forName(\"utf-8\")));\n        }\n    }\n}\n\n```\n\n","slug":"从B站学习的Netty13","published":1,"updated":"2021-12-01T02:13:07.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rv002eo4vbb66cfv3d","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h1>Netty 核心模块组件</h1>\n<h2 id=\"Bootstrap、ServerBootstrap\">Bootstrap、ServerBootstrap</h2>\n<ol>\n<li>\n<p><code>Bootstrap</code> 意思是引导，一个 <code>Netty</code> 应用通常由一个 <code>Bootstrap</code> 开始，主要作用是配置整个 <code>Netty</code> 程序，串联各个组件，<code>Netty</code> 中 <code>Bootstrap</code> 类是客户端程序的启动引导类，<code>ServerBootstrap</code> 是服务端启动引导类。</p>\n</li>\n<li>\n<p>常见的方法有</p>\n<ul>\n<li>\n<p><code>public ServerBootstrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup)</code>，该方法用于服务器端，用来设置两个 <code>EventLoop</code></p>\n</li>\n<li>\n<p><code>public B group(EventLoopGroup group)</code>，该方法用于客户端，用来设置一个 <code>EventLoop</code></p>\n</li>\n<li>\n<p><code>public B channel(Class&lt;? extends C&gt; channelClass)</code>，该方法用来设置一个服务器端的通道实现</p>\n</li>\n<li>\n<p><code>public &lt;T&gt; B option(ChannelOption&lt;T&gt; option, T value)</code>，用来给 <code>ServerChannel</code> 添加配置</p>\n</li>\n<li>\n<p><code>public &lt;T&gt; ServerBootstrap childOption(ChannelOption&lt;T&gt; childOption, T value)</code>，用来给接收到的通道添加配置</p>\n</li>\n<li>\n<p><code>public ServerBootstrap childHandler(ChannelHandler childHandler)</code>，该方法用来设置业务处理类（自定义的<code>handler</code>）</p>\n</li>\n<li>\n<p><code>public ChannelFuture bind(int inetPort)</code>，该方法用于服务器端，用来设置占用的端口号</p>\n</li>\n<li>\n<p><code>public ChannelFuture connect(String inetHost, int inetPort)</code>，该方法用于客户端，用来连接服务器端</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Future、ChannelFuture\">Future、ChannelFuture</h2>\n<p><code>Netty</code> 中所有的 <code>IO</code> 操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过 <code>Future</code> 和 <code>ChannelFutures</code>，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件</p>\n<p>常见的方法有</p>\n<ul>\n<li><code>Channel channel()</code>，返回当前正在进行 <code>IO</code> 操作的通道</li>\n<li><code>ChannelFuture sync()</code>，等待异步操作执行完毕 （同步转异步）</li>\n</ul>\n<h2 id=\"Channel\">Channel</h2>\n<ol>\n<li>\n<p><code>Netty</code> 网络通信的组件，能够用于执行网络 <code>I/O</code> 操作。</p>\n</li>\n<li>\n<p>通过 <code>Channel</code> 可获得当前网络连接的通道的状态</p>\n</li>\n<li>\n<p>通过 <code>Channel</code> 可获得网络连接的配置参数（例如接收缓冲区大小）</p>\n</li>\n<li>\n<p><code>Channel</code> 提供异步的网络 <code>I/O</code> 操作(如建立连接，读写，绑定端口)，异步调用意味着任何 <code>I/O</code> 调用都将立即返回，并且不保证在调用结束时所请求的 <code>I/O</code> 操作已完成</p>\n</li>\n<li>\n<p>调用立即返回一个 <code>ChannelFuture</code> 实例，通过注册监听器到 <code>ChannelFuture</code> 上，可以 <code>I/O</code> 操作成功、失败或取消时回调通知调用方</p>\n</li>\n<li>\n<p>支持关联 <code>I/O</code> 操作与对应的处理程序</p>\n</li>\n<li>\n<p>不同协议、不同的阻塞类型的连接都有不同的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Channel</span><br></pre></td></tr></table></figure>\n<p>类型与之对应，常用的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Channel</span><br></pre></td></tr></table></figure>\n<p>类型：</p>\n<ul>\n<li><code>NioSocketChannel</code>，异步的客户端 <code>TCP</code> <code>Socket</code> 连接。</li>\n<li><code>NioServerSocketChannel</code>，异步的服务器端 <code>TCP</code> <code>Socket</code> 连接。</li>\n<li><code>NioDatagramChannel</code>，异步的 <code>UDP</code> 连接。</li>\n<li><code>NioSctpChannel</code>，异步的客户端 <code>Sctp</code> 连接。</li>\n<li><code>NioSctpServerChannel</code>，异步的 <code>Sctp</code> 服务器端连接，这些通道涵盖了 <code>UDP</code> 和 <code>TCP</code> 网络 <code>IO</code> 以及文件 <code>IO</code>。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Selector\">Selector</h2>\n<ol>\n<li><code>Netty</code> 基于 <code>Selector</code> 对象实现 <code>I/O</code> 多路复用，通过 <code>Selector</code> 一个线程可以监听多个连接的 <code>Channel</code> 事件。</li>\n<li>当向一个 <code>Selector</code> 中注册 <code>Channel</code> 后，<code>Selector</code> 内部的机制就可以自动不断地查询（<code>Select</code>）这些注册的 <code>Channel</code> 是否有已就绪的 <code>I/O</code> 事件（例如可读，可写，网络连接完成等），这样程序就可以很简单地使用一个线程高效地管理多个 <code>Channel</code></li>\n</ol>\n<h2 id=\"ChannelHandler-及其实现类\">ChannelHandler 及其实现类</h2>\n<ol>\n<li><code>ChannelHandler</code> 是一个接口，处理 <code>I/O</code> 事件或拦截 <code>I/O</code> 操作，并将其转发到其 <code>ChannelPipeline</code>（业务处理链）中的下一个处理程序。</li>\n<li><code>ChannelHandler</code> 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类</li>\n<li><code>ChannelHandler</code> 及其实现类一览图（后）</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0015.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>我们经常需要自定义一个 <code>Handler</code> 类去继承 <code>ChannelInboundHandlerAdapter</code>，然后通过重写相应方法实现业务逻辑，我们接下来看看一般都需要重写哪些方法</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0016.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h2 id=\"Pipeline-和-ChannelPipeline\">Pipeline 和 ChannelPipeline</h2>\n<ol>\n<li><code>ChannelPipeline</code> 是一个 <code>Handler</code> 的集合，它负责处理和拦截 <code>inbound</code> 或者 <code>outbound</code> 的事件和操作，相当于一个贯穿 <code>Netty</code> 的链。（也可以这样理解：<code>ChannelPipeline</code> 是保存 <code>ChannelHandler</code> 的 <code>List</code>，用于处理或拦截 <code>Channel</code> 的入站事件和出站操作）</li>\n<li><code>ChannelPipeline</code> 实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及 <code>Channel</code> 中各个的 <code>ChannelHandler</code> 如何相互交互</li>\n<li>在 <code>Netty</code> 中每个 <code>Channel</code> 都有且仅有一个 <code>ChannelPipeline</code> 与之对应，它们的组成关系如下</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0017.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>常用方法<br>\n<code>ChannelPipeline addFirst(ChannelHandler... handlers)</code>，把一个业务处理类（<code>handler</code>）添加到链中的第一个位置<code>ChannelPipeline addLast(ChannelHandler... handlers)</code>，把一个业务处理类（<code>handler</code>）添加到链中的最后一个位置</p>\n<p>从head看一下debug</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0018.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ul>\n<li><code>TestServerInitializer</code>和<code>HttpServerCodec</code>这些东西本身也是<code>handler</code></li>\n<li>一般来说事件从客户端往服务器走我们称为出站，反之则是入站。</li>\n</ul>\n<h2 id=\"ChannelHandlerContext\">ChannelHandlerContext</h2>\n<ol>\n<li>保存 <code>Channel</code> 相关的所有上下文信息，同时关联一个 <code>ChannelHandler</code> 对象</li>\n<li>即 <code>ChannelHandlerContext</code> 中包含一个具体的事件处理器 <code>ChannelHandler</code>，同时 <code>ChannelHandlerContext</code> 中也绑定了对应的 <code>pipeline</code> 和 <code>Channel</code> 的信息，方便对 <code>ChannelHandler</code> 进行调用。</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0019.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ol>\n<li>常用方法</li>\n</ol>\n<ul>\n<li><code>ChannelFuture close()</code>，关闭通道</li>\n<li><code>ChannelOutboundInvoker flush()</code>，刷新</li>\n<li><code>ChannelFuture writeAndFlush(Object msg)</code>，将数据写到</li>\n<li><code>ChannelPipeline</code> 中当前 <code>ChannelHandler</code> 的下一个 <code>ChannelHandler</code> 开始处理（出站）</li>\n</ul>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0020.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h2 id=\"ChannelOption\">ChannelOption</h2>\n<ol>\n<li><code>Netty</code> 在创建 <code>Channel</code> 实例后，一般都需要设置 <code>ChannelOption</code> 参数。</li>\n<li><code>ChannelOption</code> 参数如下：</li>\n<li><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0021.png?x-oss-process=style/qingyun\" alt=\"img\"></li>\n</ol>\n<h2 id=\"EventLoopGroup-和其实现类-NioEventLoopGroup\">EventLoopGroup 和其实现类 NioEventLoopGroup</h2>\n<ol>\n<li><code>EventLoopGroup</code> 是一组 <code>EventLoop</code> 的抽象，<code>Netty</code> 为了更好的利用多核 <code>CPU</code> 资源，一般会有多个 <code>EventLoop</code> 同时工作，每个 <code>EventLoop</code> 维护着一个 <code>Selector</code> 实例。</li>\n<li><code>EventLoopGroup</code> 提供 <code>next</code> 接口，可以从组里面按照一定规则获取其中一个 <code>EventLoop</code> 来处理任务。在 <code>Netty</code> 服务器端编程中，我们一般都需要提供两个 <code>EventLoopGroup</code>，例如：<code>BossEventLoopGroup</code> 和 <code>WorkerEventLoopGroup</code>。</li>\n<li>通常一个服务端口即一个 <code>ServerSocketChannel</code> 对应一个 <code>Selector</code> 和一个 <code>EventLoop</code> 线程。<code>BossEventLoop</code> 负责接收客户端的连接并将 <code>SocketChannel</code> 交给 <code>WorkerEventLoopGroup</code> 来进行 <code>IO</code> 处理，如下图所示</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0022.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>常用方法<br>\n<code>public NioEventLoopGroup()</code>，构造方法<br>\n<code>public Future&lt;?&gt; shutdownGracefully()</code>，断开连接，关闭线程</p>\n<h2 id=\"Unpooled-类\">Unpooled 类</h2>\n<ol>\n<li><code>Netty</code> 提供一个专门用来操作缓冲区（即 <code>Netty</code> 的数据容器）的工具类</li>\n<li>常用方法如下所示</li>\n</ol>\n<p><a href=\"https://unpkg.zhimg.com/youthlql@1.0.0/netty/introduction/chapter_002/0023.png\"><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0023.png?x-oss-process=style/qingyun\" alt=\"img\"></a></p>\n<p>举例说明 <code>Unpooled</code> 获取 <code>Netty</code> 的数据容器 <code>ByteBuf</code> 的基本使用</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0024.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.buf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyByteBuf01</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//创建一个ByteBuf</span></span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. 创建 对象，该对象包含一个数组arr , 是一个byte[10]</span></span><br><span class=\"line\">        <span class=\"comment\">//2. 在netty 的buffer中，不需要使用flip 进行反转</span></span><br><span class=\"line\">        <span class=\"comment\">//   底层维护了 readerindex 和 writerIndex</span></span><br><span class=\"line\">        <span class=\"comment\">//3. 通过 readerindex 和  writerIndex 和  capacity， 将buffer分成三个区域</span></span><br><span class=\"line\">        <span class=\"comment\">// 0---readerindex 已经读取的区域</span></span><br><span class=\"line\">        <span class=\"comment\">// readerindex---writerIndex ， 可读的区域</span></span><br><span class=\"line\">        <span class=\"comment\">// writerIndex -- capacity, 可写的区域</span></span><br><span class=\"line\">        ByteBuf buffer = Unpooled.buffer(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            buffer.writeByte(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;capacity=&quot;</span> + buffer.capacity());<span class=\"comment\">//10</span></span><br><span class=\"line\">        <span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"comment\">//        for(int i = 0; i&lt;buffer.capacity(); i++) &#123;</span></span><br><span class=\"line\">        \t  <span class=\"comment\">//这个方法readerindex不会变</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(buffer.getByte(i));</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buffer.capacity(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这个方法readerindex会变</span></span><br><span class=\"line\">            System.out.println(buffer.readByte());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;执行完毕&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.buf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyByteBuf02</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建ByteBuf</span></span><br><span class=\"line\">        ByteBuf byteBuf = Unpooled.copiedBuffer(<span class=\"string\">&quot;hello,world!&quot;</span>, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用相关的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (byteBuf.hasArray()) &#123; <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] content = byteBuf.array();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//将 content 转成字符串</span></span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">new</span> String(content, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;byteBuf=&quot;</span> + byteBuf);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(byteBuf.arrayOffset()); <span class=\"comment\">// 0</span></span><br><span class=\"line\">            System.out.println(byteBuf.readerIndex()); <span class=\"comment\">// 0</span></span><br><span class=\"line\">            System.out.println(byteBuf.writerIndex()); <span class=\"comment\">// 12</span></span><br><span class=\"line\">            System.out.println(byteBuf.capacity()); <span class=\"comment\">// 36</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(byteBuf.readByte()); //</span></span><br><span class=\"line\">            System.out.println(byteBuf.getByte(<span class=\"number\">0</span>)); <span class=\"comment\">// 104</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = byteBuf.readableBytes(); <span class=\"comment\">//可读的字节数  12</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;len=&quot;</span> + len);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//使用for取出各个字节</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">                System.out.println((<span class=\"keyword\">char</span>) byteBuf.getByte(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//按照某个范围读取</span></span><br><span class=\"line\">            System.out.println(byteBuf.getCharSequence(<span class=\"number\">0</span>, <span class=\"number\">4</span>, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>)));</span><br><span class=\"line\">            System.out.println(byteBuf.getCharSequence(<span class=\"number\">4</span>, <span class=\"number\">6</span>, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h1>Netty 核心模块组件</h1>\n<h2 id=\"Bootstrap、ServerBootstrap\">Bootstrap、ServerBootstrap</h2>\n<ol>\n<li>\n<p><code>Bootstrap</code> 意思是引导，一个 <code>Netty</code> 应用通常由一个 <code>Bootstrap</code> 开始，主要作用是配置整个 <code>Netty</code> 程序，串联各个组件，<code>Netty</code> 中 <code>Bootstrap</code> 类是客户端程序的启动引导类，<code>ServerBootstrap</code> 是服务端启动引导类。</p>\n</li>\n<li>\n<p>常见的方法有</p>\n<ul>\n<li>\n<p><code>public ServerBootstrap group(EventLoopGroup parentGroup, EventLoopGroup childGroup)</code>，该方法用于服务器端，用来设置两个 <code>EventLoop</code></p>\n</li>\n<li>\n<p><code>public B group(EventLoopGroup group)</code>，该方法用于客户端，用来设置一个 <code>EventLoop</code></p>\n</li>\n<li>\n<p><code>public B channel(Class&lt;? extends C&gt; channelClass)</code>，该方法用来设置一个服务器端的通道实现</p>\n</li>\n<li>\n<p><code>public &lt;T&gt; B option(ChannelOption&lt;T&gt; option, T value)</code>，用来给 <code>ServerChannel</code> 添加配置</p>\n</li>\n<li>\n<p><code>public &lt;T&gt; ServerBootstrap childOption(ChannelOption&lt;T&gt; childOption, T value)</code>，用来给接收到的通道添加配置</p>\n</li>\n<li>\n<p><code>public ServerBootstrap childHandler(ChannelHandler childHandler)</code>，该方法用来设置业务处理类（自定义的<code>handler</code>）</p>\n</li>\n<li>\n<p><code>public ChannelFuture bind(int inetPort)</code>，该方法用于服务器端，用来设置占用的端口号</p>\n</li>\n<li>\n<p><code>public ChannelFuture connect(String inetHost, int inetPort)</code>，该方法用于客户端，用来连接服务器端</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Future、ChannelFuture\">Future、ChannelFuture</h2>\n<p><code>Netty</code> 中所有的 <code>IO</code> 操作都是异步的，不能立刻得知消息是否被正确处理。但是可以过一会等它执行完成或者直接注册一个监听，具体的实现就是通过 <code>Future</code> 和 <code>ChannelFutures</code>，他们可以注册一个监听，当操作执行成功或失败时监听会自动触发注册的监听事件</p>\n<p>常见的方法有</p>\n<ul>\n<li><code>Channel channel()</code>，返回当前正在进行 <code>IO</code> 操作的通道</li>\n<li><code>ChannelFuture sync()</code>，等待异步操作执行完毕 （同步转异步）</li>\n</ul>\n<h2 id=\"Channel\">Channel</h2>\n<ol>\n<li>\n<p><code>Netty</code> 网络通信的组件，能够用于执行网络 <code>I/O</code> 操作。</p>\n</li>\n<li>\n<p>通过 <code>Channel</code> 可获得当前网络连接的通道的状态</p>\n</li>\n<li>\n<p>通过 <code>Channel</code> 可获得网络连接的配置参数（例如接收缓冲区大小）</p>\n</li>\n<li>\n<p><code>Channel</code> 提供异步的网络 <code>I/O</code> 操作(如建立连接，读写，绑定端口)，异步调用意味着任何 <code>I/O</code> 调用都将立即返回，并且不保证在调用结束时所请求的 <code>I/O</code> 操作已完成</p>\n</li>\n<li>\n<p>调用立即返回一个 <code>ChannelFuture</code> 实例，通过注册监听器到 <code>ChannelFuture</code> 上，可以 <code>I/O</code> 操作成功、失败或取消时回调通知调用方</p>\n</li>\n<li>\n<p>支持关联 <code>I/O</code> 操作与对应的处理程序</p>\n</li>\n<li>\n<p>不同协议、不同的阻塞类型的连接都有不同的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Channel</span><br></pre></td></tr></table></figure>\n<p>类型与之对应，常用的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Channel</span><br></pre></td></tr></table></figure>\n<p>类型：</p>\n<ul>\n<li><code>NioSocketChannel</code>，异步的客户端 <code>TCP</code> <code>Socket</code> 连接。</li>\n<li><code>NioServerSocketChannel</code>，异步的服务器端 <code>TCP</code> <code>Socket</code> 连接。</li>\n<li><code>NioDatagramChannel</code>，异步的 <code>UDP</code> 连接。</li>\n<li><code>NioSctpChannel</code>，异步的客户端 <code>Sctp</code> 连接。</li>\n<li><code>NioSctpServerChannel</code>，异步的 <code>Sctp</code> 服务器端连接，这些通道涵盖了 <code>UDP</code> 和 <code>TCP</code> 网络 <code>IO</code> 以及文件 <code>IO</code>。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Selector\">Selector</h2>\n<ol>\n<li><code>Netty</code> 基于 <code>Selector</code> 对象实现 <code>I/O</code> 多路复用，通过 <code>Selector</code> 一个线程可以监听多个连接的 <code>Channel</code> 事件。</li>\n<li>当向一个 <code>Selector</code> 中注册 <code>Channel</code> 后，<code>Selector</code> 内部的机制就可以自动不断地查询（<code>Select</code>）这些注册的 <code>Channel</code> 是否有已就绪的 <code>I/O</code> 事件（例如可读，可写，网络连接完成等），这样程序就可以很简单地使用一个线程高效地管理多个 <code>Channel</code></li>\n</ol>\n<h2 id=\"ChannelHandler-及其实现类\">ChannelHandler 及其实现类</h2>\n<ol>\n<li><code>ChannelHandler</code> 是一个接口，处理 <code>I/O</code> 事件或拦截 <code>I/O</code> 操作，并将其转发到其 <code>ChannelPipeline</code>（业务处理链）中的下一个处理程序。</li>\n<li><code>ChannelHandler</code> 本身并没有提供很多方法，因为这个接口有许多的方法需要实现，方便使用期间，可以继承它的子类</li>\n<li><code>ChannelHandler</code> 及其实现类一览图（后）</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0015.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>我们经常需要自定义一个 <code>Handler</code> 类去继承 <code>ChannelInboundHandlerAdapter</code>，然后通过重写相应方法实现业务逻辑，我们接下来看看一般都需要重写哪些方法</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0016.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h2 id=\"Pipeline-和-ChannelPipeline\">Pipeline 和 ChannelPipeline</h2>\n<ol>\n<li><code>ChannelPipeline</code> 是一个 <code>Handler</code> 的集合，它负责处理和拦截 <code>inbound</code> 或者 <code>outbound</code> 的事件和操作，相当于一个贯穿 <code>Netty</code> 的链。（也可以这样理解：<code>ChannelPipeline</code> 是保存 <code>ChannelHandler</code> 的 <code>List</code>，用于处理或拦截 <code>Channel</code> 的入站事件和出站操作）</li>\n<li><code>ChannelPipeline</code> 实现了一种高级形式的拦截过滤器模式，使用户可以完全控制事件的处理方式，以及 <code>Channel</code> 中各个的 <code>ChannelHandler</code> 如何相互交互</li>\n<li>在 <code>Netty</code> 中每个 <code>Channel</code> 都有且仅有一个 <code>ChannelPipeline</code> 与之对应，它们的组成关系如下</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0017.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>常用方法<br>\n<code>ChannelPipeline addFirst(ChannelHandler... handlers)</code>，把一个业务处理类（<code>handler</code>）添加到链中的第一个位置<code>ChannelPipeline addLast(ChannelHandler... handlers)</code>，把一个业务处理类（<code>handler</code>）添加到链中的最后一个位置</p>\n<p>从head看一下debug</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0018.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ul>\n<li><code>TestServerInitializer</code>和<code>HttpServerCodec</code>这些东西本身也是<code>handler</code></li>\n<li>一般来说事件从客户端往服务器走我们称为出站，反之则是入站。</li>\n</ul>\n<h2 id=\"ChannelHandlerContext\">ChannelHandlerContext</h2>\n<ol>\n<li>保存 <code>Channel</code> 相关的所有上下文信息，同时关联一个 <code>ChannelHandler</code> 对象</li>\n<li>即 <code>ChannelHandlerContext</code> 中包含一个具体的事件处理器 <code>ChannelHandler</code>，同时 <code>ChannelHandlerContext</code> 中也绑定了对应的 <code>pipeline</code> 和 <code>Channel</code> 的信息，方便对 <code>ChannelHandler</code> 进行调用。</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0019.jpg?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ol>\n<li>常用方法</li>\n</ol>\n<ul>\n<li><code>ChannelFuture close()</code>，关闭通道</li>\n<li><code>ChannelOutboundInvoker flush()</code>，刷新</li>\n<li><code>ChannelFuture writeAndFlush(Object msg)</code>，将数据写到</li>\n<li><code>ChannelPipeline</code> 中当前 <code>ChannelHandler</code> 的下一个 <code>ChannelHandler</code> 开始处理（出站）</li>\n</ul>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0020.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h2 id=\"ChannelOption\">ChannelOption</h2>\n<ol>\n<li><code>Netty</code> 在创建 <code>Channel</code> 实例后，一般都需要设置 <code>ChannelOption</code> 参数。</li>\n<li><code>ChannelOption</code> 参数如下：</li>\n<li><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0021.png?x-oss-process=style/qingyun\" alt=\"img\"></li>\n</ol>\n<h2 id=\"EventLoopGroup-和其实现类-NioEventLoopGroup\">EventLoopGroup 和其实现类 NioEventLoopGroup</h2>\n<ol>\n<li><code>EventLoopGroup</code> 是一组 <code>EventLoop</code> 的抽象，<code>Netty</code> 为了更好的利用多核 <code>CPU</code> 资源，一般会有多个 <code>EventLoop</code> 同时工作，每个 <code>EventLoop</code> 维护着一个 <code>Selector</code> 实例。</li>\n<li><code>EventLoopGroup</code> 提供 <code>next</code> 接口，可以从组里面按照一定规则获取其中一个 <code>EventLoop</code> 来处理任务。在 <code>Netty</code> 服务器端编程中，我们一般都需要提供两个 <code>EventLoopGroup</code>，例如：<code>BossEventLoopGroup</code> 和 <code>WorkerEventLoopGroup</code>。</li>\n<li>通常一个服务端口即一个 <code>ServerSocketChannel</code> 对应一个 <code>Selector</code> 和一个 <code>EventLoop</code> 线程。<code>BossEventLoop</code> 负责接收客户端的连接并将 <code>SocketChannel</code> 交给 <code>WorkerEventLoopGroup</code> 来进行 <code>IO</code> 处理，如下图所示</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0022.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>常用方法<br>\n<code>public NioEventLoopGroup()</code>，构造方法<br>\n<code>public Future&lt;?&gt; shutdownGracefully()</code>，断开连接，关闭线程</p>\n<h2 id=\"Unpooled-类\">Unpooled 类</h2>\n<ol>\n<li><code>Netty</code> 提供一个专门用来操作缓冲区（即 <code>Netty</code> 的数据容器）的工具类</li>\n<li>常用方法如下所示</li>\n</ol>\n<p><a href=\"https://unpkg.zhimg.com/youthlql@1.0.0/netty/introduction/chapter_002/0023.png\"><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0023.png?x-oss-process=style/qingyun\" alt=\"img\"></a></p>\n<p>举例说明 <code>Unpooled</code> 获取 <code>Netty</code> 的数据容器 <code>ByteBuf</code> 的基本使用</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0024.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.buf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyByteBuf01</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//创建一个ByteBuf</span></span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. 创建 对象，该对象包含一个数组arr , 是一个byte[10]</span></span><br><span class=\"line\">        <span class=\"comment\">//2. 在netty 的buffer中，不需要使用flip 进行反转</span></span><br><span class=\"line\">        <span class=\"comment\">//   底层维护了 readerindex 和 writerIndex</span></span><br><span class=\"line\">        <span class=\"comment\">//3. 通过 readerindex 和  writerIndex 和  capacity， 将buffer分成三个区域</span></span><br><span class=\"line\">        <span class=\"comment\">// 0---readerindex 已经读取的区域</span></span><br><span class=\"line\">        <span class=\"comment\">// readerindex---writerIndex ， 可读的区域</span></span><br><span class=\"line\">        <span class=\"comment\">// writerIndex -- capacity, 可写的区域</span></span><br><span class=\"line\">        ByteBuf buffer = Unpooled.buffer(<span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            buffer.writeByte(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;capacity=&quot;</span> + buffer.capacity());<span class=\"comment\">//10</span></span><br><span class=\"line\">        <span class=\"comment\">//输出</span></span><br><span class=\"line\"><span class=\"comment\">//        for(int i = 0; i&lt;buffer.capacity(); i++) &#123;</span></span><br><span class=\"line\">        \t  <span class=\"comment\">//这个方法readerindex不会变</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(buffer.getByte(i));</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; buffer.capacity(); i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这个方法readerindex会变</span></span><br><span class=\"line\">            System.out.println(buffer.readByte());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;执行完毕&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.buf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyByteBuf02</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建ByteBuf</span></span><br><span class=\"line\">        ByteBuf byteBuf = Unpooled.copiedBuffer(<span class=\"string\">&quot;hello,world!&quot;</span>, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//使用相关的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (byteBuf.hasArray()) &#123; <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] content = byteBuf.array();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//将 content 转成字符串</span></span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">new</span> String(content, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;byteBuf=&quot;</span> + byteBuf);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(byteBuf.arrayOffset()); <span class=\"comment\">// 0</span></span><br><span class=\"line\">            System.out.println(byteBuf.readerIndex()); <span class=\"comment\">// 0</span></span><br><span class=\"line\">            System.out.println(byteBuf.writerIndex()); <span class=\"comment\">// 12</span></span><br><span class=\"line\">            System.out.println(byteBuf.capacity()); <span class=\"comment\">// 36</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(byteBuf.readByte()); //</span></span><br><span class=\"line\">            System.out.println(byteBuf.getByte(<span class=\"number\">0</span>)); <span class=\"comment\">// 104</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = byteBuf.readableBytes(); <span class=\"comment\">//可读的字节数  12</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;len=&quot;</span> + len);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//使用for取出各个字节</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">                System.out.println((<span class=\"keyword\">char</span>) byteBuf.getByte(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//按照某个范围读取</span></span><br><span class=\"line\">            System.out.println(byteBuf.getCharSequence(<span class=\"number\">0</span>, <span class=\"number\">4</span>, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>)));</span><br><span class=\"line\">            System.out.println(byteBuf.getCharSequence(<span class=\"number\">4</span>, <span class=\"number\">6</span>, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"从B站学习的Netty14","abbrlink":1473790032,"date":"2021-12-01T02:13:16.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n ### Netty 通过 WebSocket 编程实现服务器和客户端长连接\n\n实例要求：\n\n1. `Http` 协议是无状态的，浏览器和服务器间的请求响应一次，下一次会重新创建连接。\n2. 要求：实现基于 `WebSocket` 的长连接的全双工的交互\n3. 改变 `Http` 协议多次请求的约束，实现长连接了，服务器可以发送消息给浏览器\n4. 客户端浏览器和服务器端会相互感知，比如服务器关闭了，浏览器会感知，同样浏览器关闭了，服务器会感知\n5. 运行界面\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0026.png?x-oss-process=style/qingyun)\n\n```java\npackage com.atguigu.netty.websocket;\n\nimport com.atguigu.netty.heartbeat.MyServerHandler;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class MyServer {\n    public static void main(String[] args) throws Exception{\n\n\n        //创建两个线程组\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup(); //8个NioEventLoop\n        try {\n\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n\n            serverBootstrap.group(bossGroup, workerGroup);\n            serverBootstrap.channel(NioServerSocketChannel.class);\n            serverBootstrap.handler(new LoggingHandler(LogLevel.INFO));\n            serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline pipeline = ch.pipeline();\n\n                    //因为基于http协议，使用http的编码和解码器\n                    pipeline.addLast(new HttpServerCodec());\n                    //http是以块方式写，添加ChunkedWriteHandler处理器\n                    pipeline.addLast(new ChunkedWriteHandler());\n\n                    /*\n                    说明\n                    1. http数据在传输过程中是分段, HttpObjectAggregator ，就是可以将多个段聚合\n                    2. 这就就是为什么，当浏览器发送大量数据时，就会发出多次http请求\n                     */\n                    pipeline.addLast(new HttpObjectAggregator(8192));\n                    /*\n                    说明\n                    1. 对应websocket ，它的数据是以 帧(frame) 形式传递\n                    2. 可以看到WebSocketFrame 下面有六个子类\n                    3. 浏览器请求时 ws://localhost:7000/hello 表示请求的uri\n                    4. WebSocketServerProtocolHandler 核心功能是将 http协议升级为 ws协议 , 保持长连接\n                    5. 是通过一个 状态码 101\n                     */\n                    pipeline.addLast(new WebSocketServerProtocolHandler(\"/hello\"));\n\n                    //自定义的handler ，处理业务逻辑\n                    pipeline.addLast(new MyTextWebSocketFrameHandler());\n                }\n            });\n\n            //启动服务器\n            ChannelFuture channelFuture = serverBootstrap.bind(7000).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n```\n\n#### MyTextWebSocketFrameHandler\n\n```java\npackage com.atguigu.netty.websocket;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n\nimport java.time.LocalDateTime;\n\n//这里 TextWebSocketFrame 类型，表示一个文本帧(frame)\npublic class MyTextWebSocketFrameHandler extends SimpleChannelInboundHandler<TextWebSocketFrame>{\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, TextWebSocketFrame msg) throws Exception {\n\n        System.out.println(\"服务器收到消息 \" + msg.text());\n\n        //回复消息\n        ctx.channel().writeAndFlush(new TextWebSocketFrame(\"服务器时间\" + LocalDateTime.now() + \" \" + msg.text()));\n    }\n\n    //当web客户端连接后， 触发方法\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        //id 表示唯一的值，LongText 是唯一的 ShortText 不是唯一\n        System.out.println(\"handlerAdded 被调用\" + ctx.channel().id().asLongText());\n        System.out.println(\"handlerAdded 被调用\" + ctx.channel().id().asShortText());\n    }\n\n\n    @Override\n    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n\n        System.out.println(\"handlerRemoved 被调用\" + ctx.channel().id().asLongText());\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        System.out.println(\"异常发生 \" + cause.getMessage());\n        ctx.close(); //关闭连接\n    }\n}\n```\n\n#### hello.html\n\n```java\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<script>\n    var socket;\n    //判断当前浏览器是否支持websocket\n    if(window.WebSocket) {\n        //go on\n        socket = new WebSocket(\"ws://localhost:7000/hello2\");\n        //相当于channelReado, ev 收到服务器端回送的消息\n        socket.onmessage = function (ev) {\n            var rt = document.getElementById(\"responseText\");\n            rt.value = rt.value + \"\\n\" + ev.data;\n        }\n\n        //相当于连接开启(感知到连接开启)\n        socket.onopen = function (ev) {\n            var rt = document.getElementById(\"responseText\");\n            rt.value = \"连接开启了..\"\n        }\n\n        //相当于连接关闭(感知到连接关闭)\n        socket.onclose = function (ev) {\n\n            var rt = document.getElementById(\"responseText\");\n            rt.value = rt.value + \"\\n\" + \"连接关闭了..\"\n        }\n    } else {\n        alert(\"当前浏览器不支持websocket\")\n    }\n\n    //发送消息到服务器\n    function send(message) {\n        if(!window.socket) { //先判断socket是否创建好\n            return;\n        }\n        if(socket.readyState == WebSocket.OPEN) {\n            //通过socket 发送消息\n            socket.send(message)\n        } else {\n            alert(\"连接没有开启\");\n        }\n    }\n</script>\n    <form onsubmit=\"return false\">\n        <textarea name=\"message\" style=\"height: 300px; width: 300px\"></textarea>\n        <input type=\"button\" value=\"发生消息\" onclick=\"send(this.form.message.value)\">\n        <textarea id=\"responseText\" style=\"height: 300px; width: 300px\"></textarea>\n        <input type=\"button\" value=\"清空内容\" onclick=\"document.getElementById('responseText').value=''\">\n    </form>\n</body>\n</html>\n```\n\n可以看到并不是发一次数据，连接就关闭了，而是可以继续发送。\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0027.png?x-oss-process=style/qingyun)","source":"_posts/从B站学习的Netty14.md","raw":"---\ntitle: 从B站学习的Netty14\nabbrlink: 1473790032\ndate: 2021-12-01 10:13:16\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n ### Netty 通过 WebSocket 编程实现服务器和客户端长连接\n\n实例要求：\n\n1. `Http` 协议是无状态的，浏览器和服务器间的请求响应一次，下一次会重新创建连接。\n2. 要求：实现基于 `WebSocket` 的长连接的全双工的交互\n3. 改变 `Http` 协议多次请求的约束，实现长连接了，服务器可以发送消息给浏览器\n4. 客户端浏览器和服务器端会相互感知，比如服务器关闭了，浏览器会感知，同样浏览器关闭了，服务器会感知\n5. 运行界面\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0026.png?x-oss-process=style/qingyun)\n\n```java\npackage com.atguigu.netty.websocket;\n\nimport com.atguigu.netty.heartbeat.MyServerHandler;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.http.HttpObjectAggregator;\nimport io.netty.handler.codec.http.HttpServerCodec;\nimport io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\nimport io.netty.handler.logging.LogLevel;\nimport io.netty.handler.logging.LoggingHandler;\nimport io.netty.handler.stream.ChunkedWriteHandler;\nimport io.netty.handler.timeout.IdleStateHandler;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class MyServer {\n    public static void main(String[] args) throws Exception{\n\n\n        //创建两个线程组\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup(); //8个NioEventLoop\n        try {\n\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n\n            serverBootstrap.group(bossGroup, workerGroup);\n            serverBootstrap.channel(NioServerSocketChannel.class);\n            serverBootstrap.handler(new LoggingHandler(LogLevel.INFO));\n            serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {\n\n                @Override\n                protected void initChannel(SocketChannel ch) throws Exception {\n                    ChannelPipeline pipeline = ch.pipeline();\n\n                    //因为基于http协议，使用http的编码和解码器\n                    pipeline.addLast(new HttpServerCodec());\n                    //http是以块方式写，添加ChunkedWriteHandler处理器\n                    pipeline.addLast(new ChunkedWriteHandler());\n\n                    /*\n                    说明\n                    1. http数据在传输过程中是分段, HttpObjectAggregator ，就是可以将多个段聚合\n                    2. 这就就是为什么，当浏览器发送大量数据时，就会发出多次http请求\n                     */\n                    pipeline.addLast(new HttpObjectAggregator(8192));\n                    /*\n                    说明\n                    1. 对应websocket ，它的数据是以 帧(frame) 形式传递\n                    2. 可以看到WebSocketFrame 下面有六个子类\n                    3. 浏览器请求时 ws://localhost:7000/hello 表示请求的uri\n                    4. WebSocketServerProtocolHandler 核心功能是将 http协议升级为 ws协议 , 保持长连接\n                    5. 是通过一个 状态码 101\n                     */\n                    pipeline.addLast(new WebSocketServerProtocolHandler(\"/hello\"));\n\n                    //自定义的handler ，处理业务逻辑\n                    pipeline.addLast(new MyTextWebSocketFrameHandler());\n                }\n            });\n\n            //启动服务器\n            ChannelFuture channelFuture = serverBootstrap.bind(7000).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n```\n\n#### MyTextWebSocketFrameHandler\n\n```java\npackage com.atguigu.netty.websocket;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n\nimport java.time.LocalDateTime;\n\n//这里 TextWebSocketFrame 类型，表示一个文本帧(frame)\npublic class MyTextWebSocketFrameHandler extends SimpleChannelInboundHandler<TextWebSocketFrame>{\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, TextWebSocketFrame msg) throws Exception {\n\n        System.out.println(\"服务器收到消息 \" + msg.text());\n\n        //回复消息\n        ctx.channel().writeAndFlush(new TextWebSocketFrame(\"服务器时间\" + LocalDateTime.now() + \" \" + msg.text()));\n    }\n\n    //当web客户端连接后， 触发方法\n    @Override\n    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n        //id 表示唯一的值，LongText 是唯一的 ShortText 不是唯一\n        System.out.println(\"handlerAdded 被调用\" + ctx.channel().id().asLongText());\n        System.out.println(\"handlerAdded 被调用\" + ctx.channel().id().asShortText());\n    }\n\n\n    @Override\n    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n\n        System.out.println(\"handlerRemoved 被调用\" + ctx.channel().id().asLongText());\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        System.out.println(\"异常发生 \" + cause.getMessage());\n        ctx.close(); //关闭连接\n    }\n}\n```\n\n#### hello.html\n\n```java\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<script>\n    var socket;\n    //判断当前浏览器是否支持websocket\n    if(window.WebSocket) {\n        //go on\n        socket = new WebSocket(\"ws://localhost:7000/hello2\");\n        //相当于channelReado, ev 收到服务器端回送的消息\n        socket.onmessage = function (ev) {\n            var rt = document.getElementById(\"responseText\");\n            rt.value = rt.value + \"\\n\" + ev.data;\n        }\n\n        //相当于连接开启(感知到连接开启)\n        socket.onopen = function (ev) {\n            var rt = document.getElementById(\"responseText\");\n            rt.value = \"连接开启了..\"\n        }\n\n        //相当于连接关闭(感知到连接关闭)\n        socket.onclose = function (ev) {\n\n            var rt = document.getElementById(\"responseText\");\n            rt.value = rt.value + \"\\n\" + \"连接关闭了..\"\n        }\n    } else {\n        alert(\"当前浏览器不支持websocket\")\n    }\n\n    //发送消息到服务器\n    function send(message) {\n        if(!window.socket) { //先判断socket是否创建好\n            return;\n        }\n        if(socket.readyState == WebSocket.OPEN) {\n            //通过socket 发送消息\n            socket.send(message)\n        } else {\n            alert(\"连接没有开启\");\n        }\n    }\n</script>\n    <form onsubmit=\"return false\">\n        <textarea name=\"message\" style=\"height: 300px; width: 300px\"></textarea>\n        <input type=\"button\" value=\"发生消息\" onclick=\"send(this.form.message.value)\">\n        <textarea id=\"responseText\" style=\"height: 300px; width: 300px\"></textarea>\n        <input type=\"button\" value=\"清空内容\" onclick=\"document.getElementById('responseText').value=''\">\n    </form>\n</body>\n</html>\n```\n\n可以看到并不是发一次数据，连接就关闭了，而是可以继续发送。\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0027.png?x-oss-process=style/qingyun)","slug":"从B站学习的Netty14","published":1,"updated":"2021-12-01T02:13:54.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rw002go4vbaqn5fe7e","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h3 id=\"Netty-通过-WebSocket-编程实现服务器和客户端长连接\">Netty 通过 WebSocket 编程实现服务器和客户端长连接</h3>\n<p>实例要求：</p>\n<ol>\n<li><code>Http</code> 协议是无状态的，浏览器和服务器间的请求响应一次，下一次会重新创建连接。</li>\n<li>要求：实现基于 <code>WebSocket</code> 的长连接的全双工的交互</li>\n<li>改变 <code>Http</code> 协议多次请求的约束，实现长连接了，服务器可以发送消息给浏览器</li>\n<li>客户端浏览器和服务器端会相互感知，比如服务器关闭了，浏览器会感知，同样浏览器关闭了，服务器会感知</li>\n<li>运行界面</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0026.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.websocket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.netty.heartbeat.MyServerHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.HttpObjectAggregator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.logging.LogLevel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.stream.ChunkedWriteHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.timeout.IdleStateHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建两个线程组</span></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(); <span class=\"comment\">//8个NioEventLoop</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            serverBootstrap.group(bossGroup, workerGroup);</span><br><span class=\"line\">            serverBootstrap.channel(NioServerSocketChannel.class);</span><br><span class=\"line\">            serverBootstrap.handler(<span class=\"keyword\">new</span> LoggingHandler(LogLevel.INFO));</span><br><span class=\"line\">            serverBootstrap.childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//因为基于http协议，使用http的编码和解码器</span></span><br><span class=\"line\">                    pipeline.addLast(<span class=\"keyword\">new</span> HttpServerCodec());</span><br><span class=\"line\">                    <span class=\"comment\">//http是以块方式写，添加ChunkedWriteHandler处理器</span></span><br><span class=\"line\">                    pipeline.addLast(<span class=\"keyword\">new</span> ChunkedWriteHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                    说明</span></span><br><span class=\"line\"><span class=\"comment\">                    1. http数据在传输过程中是分段, HttpObjectAggregator ，就是可以将多个段聚合</span></span><br><span class=\"line\"><span class=\"comment\">                    2. 这就就是为什么，当浏览器发送大量数据时，就会发出多次http请求</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    pipeline.addLast(<span class=\"keyword\">new</span> HttpObjectAggregator(<span class=\"number\">8192</span>));</span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                    说明</span></span><br><span class=\"line\"><span class=\"comment\">                    1. 对应websocket ，它的数据是以 帧(frame) 形式传递</span></span><br><span class=\"line\"><span class=\"comment\">                    2. 可以看到WebSocketFrame 下面有六个子类</span></span><br><span class=\"line\"><span class=\"comment\">                    3. 浏览器请求时 ws://localhost:7000/hello 表示请求的uri</span></span><br><span class=\"line\"><span class=\"comment\">                    4. WebSocketServerProtocolHandler 核心功能是将 http协议升级为 ws协议 , 保持长连接</span></span><br><span class=\"line\"><span class=\"comment\">                    5. 是通过一个 状态码 101</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    pipeline.addLast(<span class=\"keyword\">new</span> WebSocketServerProtocolHandler(<span class=\"string\">&quot;/hello&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//自定义的handler ，处理业务逻辑</span></span><br><span class=\"line\">                    pipeline.addLast(<span class=\"keyword\">new</span> MyTextWebSocketFrameHandler());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动服务器</span></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(<span class=\"number\">7000</span>).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"MyTextWebSocketFrameHandler\">MyTextWebSocketFrameHandler</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.websocket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.websocketx.TextWebSocketFrame;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里 TextWebSocketFrame 类型，表示一个文本帧(frame)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTextWebSocketFrameHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">TextWebSocketFrame</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器收到消息 &quot;</span> + msg.text());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//回复消息</span></span><br><span class=\"line\">        ctx.channel().writeAndFlush(<span class=\"keyword\">new</span> TextWebSocketFrame(<span class=\"string\">&quot;服务器时间&quot;</span> + LocalDateTime.now() + <span class=\"string\">&quot; &quot;</span> + msg.text()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当web客户端连接后， 触发方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handlerAdded</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//id 表示唯一的值，LongText 是唯一的 ShortText 不是唯一</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;handlerAdded 被调用&quot;</span> + ctx.channel().id().asLongText());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;handlerAdded 被调用&quot;</span> + ctx.channel().id().asShortText());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handlerRemoved</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;handlerRemoved 被调用&quot;</span> + ctx.channel().id().asLongText());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;异常发生 &quot;</span> + cause.getMessage());</span><br><span class=\"line\">        ctx.close(); <span class=\"comment\">//关闭连接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"hello-html\">hello.html</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> socket;</span><br><span class=\"line\">    <span class=\"comment\">//判断当前浏览器是否支持websocket</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(window.WebSocket) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//go on</span></span><br><span class=\"line\">        socket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">&quot;ws://localhost:7000/hello2&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//相当于channelReado, ev 收到服务器端回送的消息</span></span><br><span class=\"line\">        socket.onmessage = function (ev) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> rt = document.getElementById(<span class=\"string\">&quot;responseText&quot;</span>);</span><br><span class=\"line\">            rt.value = rt.value + <span class=\"string\">&quot;\\n&quot;</span> + ev.data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//相当于连接开启(感知到连接开启)</span></span><br><span class=\"line\">        socket.onopen = function (ev) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> rt = document.getElementById(<span class=\"string\">&quot;responseText&quot;</span>);</span><br><span class=\"line\">            rt.value = <span class=\"string\">&quot;连接开启了..&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//相当于连接关闭(感知到连接关闭)</span></span><br><span class=\"line\">        socket.onclose = function (ev) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> rt = document.getElementById(<span class=\"string\">&quot;responseText&quot;</span>);</span><br><span class=\"line\">            rt.value = rt.value + <span class=\"string\">&quot;\\n&quot;</span> + <span class=\"string\">&quot;连接关闭了..&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&quot;当前浏览器不支持websocket&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发送消息到服务器</span></span><br><span class=\"line\">    <span class=\"function\">function <span class=\"title\">send</span><span class=\"params\">(message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!window.socket) &#123; <span class=\"comment\">//先判断socket是否创建好</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(socket.readyState == WebSocket.OPEN) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//通过socket 发送消息</span></span><br><span class=\"line\">            socket.send(message)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">&quot;连接没有开启&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">    &lt;form onsubmit=<span class=\"string\">&quot;return false&quot;</span>&gt;</span><br><span class=\"line\">        &lt;textarea name=<span class=\"string\">&quot;message&quot;</span> style=<span class=\"string\">&quot;height: 300px; width: 300px&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">&quot;button&quot;</span> value=<span class=\"string\">&quot;发生消息&quot;</span> onclick=<span class=\"string\">&quot;send(this.form.message.value)&quot;</span>&gt;</span><br><span class=\"line\">        &lt;textarea id=<span class=\"string\">&quot;responseText&quot;</span> style=<span class=\"string\">&quot;height: 300px; width: 300px&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">&quot;button&quot;</span> value=<span class=\"string\">&quot;清空内容&quot;</span> onclick=<span class=\"string\">&quot;document.getElementById(&#x27;responseText&#x27;).value=&#x27;&#x27;&quot;</span>&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看到并不是发一次数据，连接就关闭了，而是可以继续发送。</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0027.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h3 id=\"Netty-通过-WebSocket-编程实现服务器和客户端长连接\">Netty 通过 WebSocket 编程实现服务器和客户端长连接</h3>\n<p>实例要求：</p>\n<ol>\n<li><code>Http</code> 协议是无状态的，浏览器和服务器间的请求响应一次，下一次会重新创建连接。</li>\n<li>要求：实现基于 <code>WebSocket</code> 的长连接的全双工的交互</li>\n<li>改变 <code>Http</code> 协议多次请求的约束，实现长连接了，服务器可以发送消息给浏览器</li>\n<li>客户端浏览器和服务器端会相互感知，比如服务器关闭了，浏览器会感知，同样浏览器关闭了，服务器会感知</li>\n<li>运行界面</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0026.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.websocket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.netty.heartbeat.MyServerHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.HttpObjectAggregator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.HttpServerCodec;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.logging.LogLevel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.logging.LoggingHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.stream.ChunkedWriteHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.timeout.IdleStateHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建两个线程组</span></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(); <span class=\"comment\">//8个NioEventLoop</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            serverBootstrap.group(bossGroup, workerGroup);</span><br><span class=\"line\">            serverBootstrap.channel(NioServerSocketChannel.class);</span><br><span class=\"line\">            serverBootstrap.handler(<span class=\"keyword\">new</span> LoggingHandler(LogLevel.INFO));</span><br><span class=\"line\">            serverBootstrap.childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//因为基于http协议，使用http的编码和解码器</span></span><br><span class=\"line\">                    pipeline.addLast(<span class=\"keyword\">new</span> HttpServerCodec());</span><br><span class=\"line\">                    <span class=\"comment\">//http是以块方式写，添加ChunkedWriteHandler处理器</span></span><br><span class=\"line\">                    pipeline.addLast(<span class=\"keyword\">new</span> ChunkedWriteHandler());</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                    说明</span></span><br><span class=\"line\"><span class=\"comment\">                    1. http数据在传输过程中是分段, HttpObjectAggregator ，就是可以将多个段聚合</span></span><br><span class=\"line\"><span class=\"comment\">                    2. 这就就是为什么，当浏览器发送大量数据时，就会发出多次http请求</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    pipeline.addLast(<span class=\"keyword\">new</span> HttpObjectAggregator(<span class=\"number\">8192</span>));</span><br><span class=\"line\">                    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                    说明</span></span><br><span class=\"line\"><span class=\"comment\">                    1. 对应websocket ，它的数据是以 帧(frame) 形式传递</span></span><br><span class=\"line\"><span class=\"comment\">                    2. 可以看到WebSocketFrame 下面有六个子类</span></span><br><span class=\"line\"><span class=\"comment\">                    3. 浏览器请求时 ws://localhost:7000/hello 表示请求的uri</span></span><br><span class=\"line\"><span class=\"comment\">                    4. WebSocketServerProtocolHandler 核心功能是将 http协议升级为 ws协议 , 保持长连接</span></span><br><span class=\"line\"><span class=\"comment\">                    5. 是通过一个 状态码 101</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                    pipeline.addLast(<span class=\"keyword\">new</span> WebSocketServerProtocolHandler(<span class=\"string\">&quot;/hello&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">//自定义的handler ，处理业务逻辑</span></span><br><span class=\"line\">                    pipeline.addLast(<span class=\"keyword\">new</span> MyTextWebSocketFrameHandler());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动服务器</span></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(<span class=\"number\">7000</span>).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"MyTextWebSocketFrameHandler\">MyTextWebSocketFrameHandler</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.websocket;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.http.websocketx.TextWebSocketFrame;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.time.LocalDateTime;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里 TextWebSocketFrame 类型，表示一个文本帧(frame)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyTextWebSocketFrameHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">TextWebSocketFrame</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, TextWebSocketFrame msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器收到消息 &quot;</span> + msg.text());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//回复消息</span></span><br><span class=\"line\">        ctx.channel().writeAndFlush(<span class=\"keyword\">new</span> TextWebSocketFrame(<span class=\"string\">&quot;服务器时间&quot;</span> + LocalDateTime.now() + <span class=\"string\">&quot; &quot;</span> + msg.text()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当web客户端连接后， 触发方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handlerAdded</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//id 表示唯一的值，LongText 是唯一的 ShortText 不是唯一</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;handlerAdded 被调用&quot;</span> + ctx.channel().id().asLongText());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;handlerAdded 被调用&quot;</span> + ctx.channel().id().asShortText());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handlerRemoved</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;handlerRemoved 被调用&quot;</span> + ctx.channel().id().asLongText());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;异常发生 &quot;</span> + cause.getMessage());</span><br><span class=\"line\">        ctx.close(); <span class=\"comment\">//关闭连接</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"hello-html\">hello.html</h4>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=<span class=\"string\">&quot;en&quot;</span>&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> socket;</span><br><span class=\"line\">    <span class=\"comment\">//判断当前浏览器是否支持websocket</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(window.WebSocket) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//go on</span></span><br><span class=\"line\">        socket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">&quot;ws://localhost:7000/hello2&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//相当于channelReado, ev 收到服务器端回送的消息</span></span><br><span class=\"line\">        socket.onmessage = function (ev) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> rt = document.getElementById(<span class=\"string\">&quot;responseText&quot;</span>);</span><br><span class=\"line\">            rt.value = rt.value + <span class=\"string\">&quot;\\n&quot;</span> + ev.data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//相当于连接开启(感知到连接开启)</span></span><br><span class=\"line\">        socket.onopen = function (ev) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> rt = document.getElementById(<span class=\"string\">&quot;responseText&quot;</span>);</span><br><span class=\"line\">            rt.value = <span class=\"string\">&quot;连接开启了..&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//相当于连接关闭(感知到连接关闭)</span></span><br><span class=\"line\">        socket.onclose = function (ev) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">var</span> rt = document.getElementById(<span class=\"string\">&quot;responseText&quot;</span>);</span><br><span class=\"line\">            rt.value = rt.value + <span class=\"string\">&quot;\\n&quot;</span> + <span class=\"string\">&quot;连接关闭了..&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&quot;当前浏览器不支持websocket&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发送消息到服务器</span></span><br><span class=\"line\">    <span class=\"function\">function <span class=\"title\">send</span><span class=\"params\">(message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!window.socket) &#123; <span class=\"comment\">//先判断socket是否创建好</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(socket.readyState == WebSocket.OPEN) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//通过socket 发送消息</span></span><br><span class=\"line\">            socket.send(message)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            alert(<span class=\"string\">&quot;连接没有开启&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">    &lt;form onsubmit=<span class=\"string\">&quot;return false&quot;</span>&gt;</span><br><span class=\"line\">        &lt;textarea name=<span class=\"string\">&quot;message&quot;</span> style=<span class=\"string\">&quot;height: 300px; width: 300px&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">&quot;button&quot;</span> value=<span class=\"string\">&quot;发生消息&quot;</span> onclick=<span class=\"string\">&quot;send(this.form.message.value)&quot;</span>&gt;</span><br><span class=\"line\">        &lt;textarea id=<span class=\"string\">&quot;responseText&quot;</span> style=<span class=\"string\">&quot;height: 300px; width: 300px&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class=\"line\">        &lt;input type=<span class=\"string\">&quot;button&quot;</span> value=<span class=\"string\">&quot;清空内容&quot;</span> onclick=<span class=\"string\">&quot;document.getElementById(&#x27;responseText&#x27;).value=&#x27;&#x27;&quot;</span>&gt;</span><br><span class=\"line\">    &lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>可以看到并不是发一次数据，连接就关闭了，而是可以继续发送。</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0027.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n"},{"title":"从B站学习的Netty17","abbrlink":3469808106,"date":"2021-12-03T00:50:50.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\nLog4j 整合到 Netty\n\n在 `Maven` 中添加对 `Log4j` 的依赖在 `pom.xml`\n\n```xml\n<dependency>\n    <groupId>log4j</groupId>\n    <artifactId>log4j</artifactId>\n    <version>1.2.17</version>\n</dependency>\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-api</artifactId>\n    <version>1.7.25</version>\n</dependency>\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n    <version>1.7.25</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-simple</artifactId>\n    <version>1.7.25</version>\n    <scope>test</scope>\n</dependency>\n```\n\n配置 `Log4j`，在 `resources/log4j.properties`\n\n```properties\nlog4j.rootLogger=DEBUG,stdout\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%p]%C{1}-%m%n\n```\n\n演示整合\n\n![image-20211202160805460](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211202160805460.png?x-oss-process=style/qingyun)","source":"_posts/从B站学习的Netty17.md","raw":"---\ntitle: 从B站学习的Netty17\nabbrlink: 3469808106\ndate: 2021-12-03 08:50:50\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\nLog4j 整合到 Netty\n\n在 `Maven` 中添加对 `Log4j` 的依赖在 `pom.xml`\n\n```xml\n<dependency>\n    <groupId>log4j</groupId>\n    <artifactId>log4j</artifactId>\n    <version>1.2.17</version>\n</dependency>\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-api</artifactId>\n    <version>1.7.25</version>\n</dependency>\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-log4j12</artifactId>\n    <version>1.7.25</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-simple</artifactId>\n    <version>1.7.25</version>\n    <scope>test</scope>\n</dependency>\n```\n\n配置 `Log4j`，在 `resources/log4j.properties`\n\n```properties\nlog4j.rootLogger=DEBUG,stdout\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%p]%C{1}-%m%n\n```\n\n演示整合\n\n![image-20211202160805460](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211202160805460.png?x-oss-process=style/qingyun)","slug":"从B站学习的Netty17","published":1,"updated":"2021-12-03T00:51:06.673Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2rx002jo4vbg71m7iau","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a><br>\nLog4j 整合到 Netty</p>\n<p>在 <code>Maven</code> 中添加对 <code>Log4j</code> 的依赖在 <code>pom.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.25<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.25<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-simple<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.25<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置 <code>Log4j</code>，在 <code>resources/log4j.properties</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.rootLogger</span>=<span class=\"string\">DEBUG,stdout</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout</span>=<span class=\"string\">org.apache.log4j.ConsoleAppender</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.layout</span>=<span class=\"string\">org.apache.log4j.PatternLayout</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.layout.ConversionPattern</span>=<span class=\"string\">[%p]%C&#123;1&#125;-%m%n</span></span><br></pre></td></tr></table></figure>\n<p>演示整合</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211202160805460.png?x-oss-process=style/qingyun\" alt=\"image-20211202160805460\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a><br>\nLog4j 整合到 Netty</p>\n<p>在 <code>Maven</code> 中添加对 <code>Log4j</code> 的依赖在 <code>pom.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.25<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.25<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-simple<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.25<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>配置 <code>Log4j</code>，在 <code>resources/log4j.properties</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">log4j.rootLogger</span>=<span class=\"string\">DEBUG,stdout</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout</span>=<span class=\"string\">org.apache.log4j.ConsoleAppender</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.layout</span>=<span class=\"string\">org.apache.log4j.PatternLayout</span></span><br><span class=\"line\"><span class=\"meta\">log4j.appender.stdout.layout.ConversionPattern</span>=<span class=\"string\">[%p]%C&#123;1&#125;-%m%n</span></span><br></pre></td></tr></table></figure>\n<p>演示整合</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211202160805460.png?x-oss-process=style/qingyun\" alt=\"image-20211202160805460\"></p>\n"},{"title":"写作格式","description":"Butterfly使用","abbrlink":1988631252,"date":"2021-11-24T08:36:35.000Z","_content":"\n\ntitle:【必需】页面标题\ndate:【必需】页面创建日期\ntype: 【必需】标籤、分类和友情链接三个页面需要配置\nupdated:【可选】页面更新日期\ndescription:【可选】页面描述\nkeywords: 【可选】页面关键字\ncomments: 【可选】显示页面评论模块 (默认 true)\ntop_img: 【可选】页面顶部图片\nmathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)\nkatex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)\naside: 【可选】显示侧边栏 (默认 true)\naplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置\nhighlight_shrink: 【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)\n\n\nFront-matter 是 markdown 文件最上方以 --- 分隔的區域，用於指定個別檔案的變數。\n\n    Page Front-matter 用於頁面配置\n    Post Front-matter 用於文章頁配置\n","source":"_posts/写作格式.md","raw":"---\ntitle: 写作格式\ntags:\n  - Butterfly\n  - 学习\ncategories: Butterfly\ndescription: Butterfly使用\nabbrlink: 1988631252\ndate: 2021-11-24 16:36:35\n---\n\n\ntitle:【必需】页面标题\ndate:【必需】页面创建日期\ntype: 【必需】标籤、分类和友情链接三个页面需要配置\nupdated:【可选】页面更新日期\ndescription:【可选】页面描述\nkeywords: 【可选】页面关键字\ncomments: 【可选】显示页面评论模块 (默认 true)\ntop_img: 【可选】页面顶部图片\nmathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)\nkatex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)\naside: 【可选】显示侧边栏 (默认 true)\naplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置\nhighlight_shrink: 【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)\n\n\nFront-matter 是 markdown 文件最上方以 --- 分隔的區域，用於指定個別檔案的變數。\n\n    Page Front-matter 用於頁面配置\n    Post Front-matter 用於文章頁配置\n","slug":"写作格式","published":1,"updated":"2021-11-26T12:43:17.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2ry002lo4vbb9p828lh","content":"<p>title:【必需】页面标题<br>\ndate:【必需】页面创建日期<br>\ntype: 【必需】标籤、分类和友情链接三个页面需要配置<br>\nupdated:【可选】页面更新日期<br>\ndescription:【可选】页面描述<br>\nkeywords: 【可选】页面关键字<br>\ncomments: 【可选】显示页面评论模块 (默认 true)<br>\ntop_img: 【可选】页面顶部图片<br>\nmathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)<br>\nkatex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)<br>\naside: 【可选】显示侧边栏 (默认 true)<br>\naplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置<br>\nhighlight_shrink: 【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)</p>\n<p>Front-matter 是 markdown 文件最上方以 — 分隔的區域，用於指定個別檔案的變數。</p>\n<pre><code>Page Front-matter 用於頁面配置\nPost Front-matter 用於文章頁配置\n</code></pre>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>title:【必需】页面标题<br>\ndate:【必需】页面创建日期<br>\ntype: 【必需】标籤、分类和友情链接三个页面需要配置<br>\nupdated:【可选】页面更新日期<br>\ndescription:【可选】页面描述<br>\nkeywords: 【可选】页面关键字<br>\ncomments: 【可选】显示页面评论模块 (默认 true)<br>\ntop_img: 【可选】页面顶部图片<br>\nmathjax: 【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)<br>\nkatex: 【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)<br>\naside: 【可选】显示侧边栏 (默认 true)<br>\naplayer: 【可选】在需要的页面加载 aplayer 的 js 和 css, 请参考文章下面的音乐 配置<br>\nhighlight_shrink: 【可选】配置代码框是否展开 (true/false)(默认为设置中 highlight_shrink 的配置)</p>\n<p>Front-matter 是 markdown 文件最上方以 — 分隔的區域，用於指定個別檔案的變數。</p>\n<pre><code>Page Front-matter 用於頁面配置\nPost Front-matter 用於文章頁配置\n</code></pre>\n"},{"title":"在图片上生成点状二维码 （无法实现）","abbrlink":2305372831,"date":"2021-11-29T01:24:39.000Z","description":"JAVA应用 实现图片与二维码合并（未能实现）","_content":"在图片上生成点状二维码 （无法实现）\n\n```java\npackage edu.sdut.QRCode;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.EncodeHintType;\nimport com.google.zxing.MultiFormatWriter;\nimport com.google.zxing.common.BitMatrix;\n\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 目标实现在图片上生成点状二维码\n * @author qingyun\n * @version 1.0\n * @date 2021/9/29 7:23\n */\npublic class PictureAndQrCode {\n    private static final int BLACK = 0xFF000000;\n\n    private static final int WHITE = 0x00FFFFFF;\n\n    private PictureAndQrCode() {\n    }\n\n    public static BufferedImage toBufferedImage(BitMatrix matrix) {\n        int width = matrix.getWidth();\n        int height = matrix.getHeight();\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n        for (int x = 0; x < width; x++) {\n            for (int y = 0; y < height; y++) {\n                image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);\n            }\n        }\n\n        return image;\n    }\n\n    public static void writeToFile(BitMatrix matrix, String format, File file)\n            throws IOException {\n        BufferedImage image = toBufferedImage(matrix);\n        if (!ImageIO.write(image, format, file)) {\n            throw new IOException(\"Could not write an image of format \" + format + \" to \" + file);\n        }\n    }\n\n    public static void writeToStream(BitMatrix matrix, String format, OutputStream stream)\n            throws IOException {\n        BufferedImage image = toBufferedImage(matrix);\n        if (!ImageIO.write(image, format, stream)) {\n            throw new IOException(\"Could not write an image of format \" + format);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            String content = \"这是测试xing二维码生成\";\n            String path = \"D:\\\\GIF\\\\gif\";\n            MultiFormatWriter multiFormatWriter = new MultiFormatWriter();\n            Map hints = new HashMap();\n            //内容所使用编码\n            hints.put(EncodeHintType.CHARACTER_SET, \"gb2312\");\n            BitMatrix bitMatrix = multiFormatWriter.encode(content, BarcodeFormat.QR_CODE, 200, 200, hints);\n            //生成二维码\n            File outputFile = new File(path, \"14.PNG\");\n            PictureAndQrCode.writeToFile(bitMatrix, \"PNG\", outputFile);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n```\n\n这是一个普通的透明二维码\n\n\n\n```java\npackage edu.sdut.QRCode;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.EncodeHintType;\nimport com.google.zxing.MultiFormatWriter;\nimport com.google.zxing.common.BitMatrix;\nimport edu.sdut.Picture.Main.ImageWithArrayHandler;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 目标实现在图片上生成点状二维码\n * @author qingyun\n * @version 1.0\n * @date 2021/9/29 7:23\n */\npublic class PictureAndQrCode {\n    private static final int BLACK = 0xFF000000;\n\n    private static final int WHITE = 0x00FFFFFF;\n\n    private PictureAndQrCode() {\n    }\n\n    public static BufferedImage toBufferedImage(BitMatrix matrix) {\n        int width = matrix.getWidth();\n        int height = matrix.getHeight();\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n        for (int x = 0; x < width; x++) {\n            for (int y = 0; y < height; y++) {\n                image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);\n            }\n        }\n\n        return image;\n    }\n\n    public static void writeToFile(BitMatrix matrix, String format, File file)\n            throws IOException {\n        BufferedImage image = toBufferedImage(matrix);\n        if (!ImageIO.write(image, format, file)) {\n            throw new IOException(\"Could not write an image of format \" + format + \" to \" + file);\n        }\n    }\n\n\n    /**\n     * 更改输出方法\n     * 图片进行透明度处理且进行合并处理\n     * @param matrix\n     * @param format\n     * @param fileBufferedImage   需要更改的图片\n     * @param file  生成的图片位置\n     * @throws IOException\n     */\n    public static void writeToFile2(BitMatrix matrix, String format, BufferedImage fileBufferedImage,File file)\n            throws IOException {\n        //得到二维码对象\n        BufferedImage image = toBufferedImage(matrix);\n\n        //得到画笔\n        Graphics2D g = fileBufferedImage.createGraphics();\n        // 设置对线段的锯齿状边缘处理\n        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n\n\n        //透明化处理\n        ImageIcon imgIcon = new ImageIcon(image);\n        // 得到Image对象。\n        Image img = imgIcon.getImage();\n        // 透明度\n        float alpha = 0.85f;\n        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,\n                alpha));\n        g.drawImage(img, 0, 0,image.getWidth(),image.getHeight(), null);\n        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));\n        g.dispose();\n        //生成图片\n        if (!ImageIO.write(fileBufferedImage, format, file)) {\n            throw new IOException(\"Could not write an image of format \" + format + \" to \" + file);\n        }\n    }\n\n    public static void writeToStream(BitMatrix matrix, String format, OutputStream stream)\n            throws IOException {\n        BufferedImage image = toBufferedImage(matrix);\n        if (!ImageIO.write(image, format, stream)) {\n            throw new IOException(\"Could not write an image of format \" + format);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            String content = \"这是测试xing二维码生成\";\n            String path = \"D:\\\\GIF\\\\gif\";\n            MultiFormatWriter multiFormatWriter = new MultiFormatWriter();\n            Map hints = new HashMap();\n            //内容所使用编码\n            hints.put(EncodeHintType.CHARACTER_SET, \"gb2312\");\n            BitMatrix bitMatrix = multiFormatWriter.encode(content, BarcodeFormat.QR_CODE, 1226, 1918, hints);\n            //生成二维码\n            File outputFile = new File(path, \"14.PNG\");\n            //  ImageWithArrayHandler.readImage 自己的辅助类读取本地图片生成图片信息\n            PictureAndQrCode.writeToFile2(bitMatrix, \"PNG\", ImageWithArrayHandler.readImage(\"D:\\\\GIF\\\\gif\\\\12.jpg\"),outputFile);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n```\n\n代码更改完成后面 效果如下  但信息无法识别\n\n目前无法实现  故选择另外一种方法","source":"_posts/在图片上生成点状二维码-（无法实现）.md","raw":"---\ntitle: 在图片上生成点状二维码 （无法实现）\nabbrlink: 2305372831\ndate: 2021-11-29 09:24:39\ntags:\n  - JAVA\ncategories: JAVA\ndescription: JAVA应用 实现图片与二维码合并（未能实现）\n---\n在图片上生成点状二维码 （无法实现）\n\n```java\npackage edu.sdut.QRCode;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.EncodeHintType;\nimport com.google.zxing.MultiFormatWriter;\nimport com.google.zxing.common.BitMatrix;\n\nimport javax.imageio.ImageIO;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 目标实现在图片上生成点状二维码\n * @author qingyun\n * @version 1.0\n * @date 2021/9/29 7:23\n */\npublic class PictureAndQrCode {\n    private static final int BLACK = 0xFF000000;\n\n    private static final int WHITE = 0x00FFFFFF;\n\n    private PictureAndQrCode() {\n    }\n\n    public static BufferedImage toBufferedImage(BitMatrix matrix) {\n        int width = matrix.getWidth();\n        int height = matrix.getHeight();\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n        for (int x = 0; x < width; x++) {\n            for (int y = 0; y < height; y++) {\n                image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);\n            }\n        }\n\n        return image;\n    }\n\n    public static void writeToFile(BitMatrix matrix, String format, File file)\n            throws IOException {\n        BufferedImage image = toBufferedImage(matrix);\n        if (!ImageIO.write(image, format, file)) {\n            throw new IOException(\"Could not write an image of format \" + format + \" to \" + file);\n        }\n    }\n\n    public static void writeToStream(BitMatrix matrix, String format, OutputStream stream)\n            throws IOException {\n        BufferedImage image = toBufferedImage(matrix);\n        if (!ImageIO.write(image, format, stream)) {\n            throw new IOException(\"Could not write an image of format \" + format);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            String content = \"这是测试xing二维码生成\";\n            String path = \"D:\\\\GIF\\\\gif\";\n            MultiFormatWriter multiFormatWriter = new MultiFormatWriter();\n            Map hints = new HashMap();\n            //内容所使用编码\n            hints.put(EncodeHintType.CHARACTER_SET, \"gb2312\");\n            BitMatrix bitMatrix = multiFormatWriter.encode(content, BarcodeFormat.QR_CODE, 200, 200, hints);\n            //生成二维码\n            File outputFile = new File(path, \"14.PNG\");\n            PictureAndQrCode.writeToFile(bitMatrix, \"PNG\", outputFile);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n```\n\n这是一个普通的透明二维码\n\n\n\n```java\npackage edu.sdut.QRCode;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.EncodeHintType;\nimport com.google.zxing.MultiFormatWriter;\nimport com.google.zxing.common.BitMatrix;\nimport edu.sdut.Picture.Main.ImageWithArrayHandler;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 目标实现在图片上生成点状二维码\n * @author qingyun\n * @version 1.0\n * @date 2021/9/29 7:23\n */\npublic class PictureAndQrCode {\n    private static final int BLACK = 0xFF000000;\n\n    private static final int WHITE = 0x00FFFFFF;\n\n    private PictureAndQrCode() {\n    }\n\n    public static BufferedImage toBufferedImage(BitMatrix matrix) {\n        int width = matrix.getWidth();\n        int height = matrix.getHeight();\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n        for (int x = 0; x < width; x++) {\n            for (int y = 0; y < height; y++) {\n                image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);\n            }\n        }\n\n        return image;\n    }\n\n    public static void writeToFile(BitMatrix matrix, String format, File file)\n            throws IOException {\n        BufferedImage image = toBufferedImage(matrix);\n        if (!ImageIO.write(image, format, file)) {\n            throw new IOException(\"Could not write an image of format \" + format + \" to \" + file);\n        }\n    }\n\n\n    /**\n     * 更改输出方法\n     * 图片进行透明度处理且进行合并处理\n     * @param matrix\n     * @param format\n     * @param fileBufferedImage   需要更改的图片\n     * @param file  生成的图片位置\n     * @throws IOException\n     */\n    public static void writeToFile2(BitMatrix matrix, String format, BufferedImage fileBufferedImage,File file)\n            throws IOException {\n        //得到二维码对象\n        BufferedImage image = toBufferedImage(matrix);\n\n        //得到画笔\n        Graphics2D g = fileBufferedImage.createGraphics();\n        // 设置对线段的锯齿状边缘处理\n        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,\n                RenderingHints.VALUE_INTERPOLATION_BILINEAR);\n\n\n        //透明化处理\n        ImageIcon imgIcon = new ImageIcon(image);\n        // 得到Image对象。\n        Image img = imgIcon.getImage();\n        // 透明度\n        float alpha = 0.85f;\n        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,\n                alpha));\n        g.drawImage(img, 0, 0,image.getWidth(),image.getHeight(), null);\n        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));\n        g.dispose();\n        //生成图片\n        if (!ImageIO.write(fileBufferedImage, format, file)) {\n            throw new IOException(\"Could not write an image of format \" + format + \" to \" + file);\n        }\n    }\n\n    public static void writeToStream(BitMatrix matrix, String format, OutputStream stream)\n            throws IOException {\n        BufferedImage image = toBufferedImage(matrix);\n        if (!ImageIO.write(image, format, stream)) {\n            throw new IOException(\"Could not write an image of format \" + format);\n        }\n    }\n\n    public static void main(String[] args) {\n        try {\n            String content = \"这是测试xing二维码生成\";\n            String path = \"D:\\\\GIF\\\\gif\";\n            MultiFormatWriter multiFormatWriter = new MultiFormatWriter();\n            Map hints = new HashMap();\n            //内容所使用编码\n            hints.put(EncodeHintType.CHARACTER_SET, \"gb2312\");\n            BitMatrix bitMatrix = multiFormatWriter.encode(content, BarcodeFormat.QR_CODE, 1226, 1918, hints);\n            //生成二维码\n            File outputFile = new File(path, \"14.PNG\");\n            //  ImageWithArrayHandler.readImage 自己的辅助类读取本地图片生成图片信息\n            PictureAndQrCode.writeToFile2(bitMatrix, \"PNG\", ImageWithArrayHandler.readImage(\"D:\\\\GIF\\\\gif\\\\12.jpg\"),outputFile);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n\n```\n\n代码更改完成后面 效果如下  但信息无法识别\n\n目前无法实现  故选择另外一种方法","slug":"在图片上生成点状二维码-（无法实现）","published":1,"updated":"2021-11-29T01:27:38.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2s2002no4vbhqaney4m","content":"<p>在图片上生成点状二维码 （无法实现）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.QRCode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.BarcodeFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.EncodeHintType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.common.BitMatrix;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标实现在图片上生成点状二维码</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/29 7:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PictureAndQrCode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BLACK = <span class=\"number\">0xFF000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> WHITE = <span class=\"number\">0x00FFFFFF</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">PictureAndQrCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">toBufferedImage</span><span class=\"params\">(BitMatrix matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = matrix.getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = matrix.getHeight();</span><br><span class=\"line\">        BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; width; x++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; height; y++) &#123;</span><br><span class=\"line\">                image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFile</span><span class=\"params\">(BitMatrix matrix, String format, File file)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        BufferedImage image = toBufferedImage(matrix);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ImageIO.write(image, format, file)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">&quot;Could not write an image of format &quot;</span> + format + <span class=\"string\">&quot; to &quot;</span> + file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToStream</span><span class=\"params\">(BitMatrix matrix, String format, OutputStream stream)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        BufferedImage image = toBufferedImage(matrix);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ImageIO.write(image, format, stream)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">&quot;Could not write an image of format &quot;</span> + format);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String content = <span class=\"string\">&quot;这是测试xing二维码生成&quot;</span>;</span><br><span class=\"line\">            String path = <span class=\"string\">&quot;D:\\\\GIF\\\\gif&quot;</span>;</span><br><span class=\"line\">            MultiFormatWriter multiFormatWriter = <span class=\"keyword\">new</span> MultiFormatWriter();</span><br><span class=\"line\">            Map hints = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">            <span class=\"comment\">//内容所使用编码</span></span><br><span class=\"line\">            hints.put(EncodeHintType.CHARACTER_SET, <span class=\"string\">&quot;gb2312&quot;</span>);</span><br><span class=\"line\">            BitMatrix bitMatrix = multiFormatWriter.encode(content, BarcodeFormat.QR_CODE, <span class=\"number\">200</span>, <span class=\"number\">200</span>, hints);</span><br><span class=\"line\">            <span class=\"comment\">//生成二维码</span></span><br><span class=\"line\">            File outputFile = <span class=\"keyword\">new</span> File(path, <span class=\"string\">&quot;14.PNG&quot;</span>);</span><br><span class=\"line\">            PictureAndQrCode.writeToFile(bitMatrix, <span class=\"string\">&quot;PNG&quot;</span>, outputFile);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这是一个普通的透明二维码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.QRCode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.BarcodeFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.EncodeHintType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.common.BitMatrix;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.Picture.Main.ImageWithArrayHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标实现在图片上生成点状二维码</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/29 7:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PictureAndQrCode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BLACK = <span class=\"number\">0xFF000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> WHITE = <span class=\"number\">0x00FFFFFF</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">PictureAndQrCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">toBufferedImage</span><span class=\"params\">(BitMatrix matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = matrix.getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = matrix.getHeight();</span><br><span class=\"line\">        BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; width; x++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; height; y++) &#123;</span><br><span class=\"line\">                image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFile</span><span class=\"params\">(BitMatrix matrix, String format, File file)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        BufferedImage image = toBufferedImage(matrix);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ImageIO.write(image, format, file)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">&quot;Could not write an image of format &quot;</span> + format + <span class=\"string\">&quot; to &quot;</span> + file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更改输出方法</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片进行透明度处理且进行合并处理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> matrix</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> format</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileBufferedImage   需要更改的图片</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file  生成的图片位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFile2</span><span class=\"params\">(BitMatrix matrix, String format, BufferedImage fileBufferedImage,File file)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//得到二维码对象</span></span><br><span class=\"line\">        BufferedImage image = toBufferedImage(matrix);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//得到画笔</span></span><br><span class=\"line\">        Graphics2D g = fileBufferedImage.createGraphics();</span><br><span class=\"line\">        <span class=\"comment\">// 设置对线段的锯齿状边缘处理</span></span><br><span class=\"line\">        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,</span><br><span class=\"line\">                RenderingHints.VALUE_INTERPOLATION_BILINEAR);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//透明化处理</span></span><br><span class=\"line\">        ImageIcon imgIcon = <span class=\"keyword\">new</span> ImageIcon(image);</span><br><span class=\"line\">        <span class=\"comment\">// 得到Image对象。</span></span><br><span class=\"line\">        Image img = imgIcon.getImage();</span><br><span class=\"line\">        <span class=\"comment\">// 透明度</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> alpha = <span class=\"number\">0.85f</span>;</span><br><span class=\"line\">        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,</span><br><span class=\"line\">                alpha));</span><br><span class=\"line\">        g.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>,image.getWidth(),image.getHeight(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));</span><br><span class=\"line\">        g.dispose();</span><br><span class=\"line\">        <span class=\"comment\">//生成图片</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ImageIO.write(fileBufferedImage, format, file)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">&quot;Could not write an image of format &quot;</span> + format + <span class=\"string\">&quot; to &quot;</span> + file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToStream</span><span class=\"params\">(BitMatrix matrix, String format, OutputStream stream)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        BufferedImage image = toBufferedImage(matrix);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ImageIO.write(image, format, stream)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">&quot;Could not write an image of format &quot;</span> + format);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String content = <span class=\"string\">&quot;这是测试xing二维码生成&quot;</span>;</span><br><span class=\"line\">            String path = <span class=\"string\">&quot;D:\\\\GIF\\\\gif&quot;</span>;</span><br><span class=\"line\">            MultiFormatWriter multiFormatWriter = <span class=\"keyword\">new</span> MultiFormatWriter();</span><br><span class=\"line\">            Map hints = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">            <span class=\"comment\">//内容所使用编码</span></span><br><span class=\"line\">            hints.put(EncodeHintType.CHARACTER_SET, <span class=\"string\">&quot;gb2312&quot;</span>);</span><br><span class=\"line\">            BitMatrix bitMatrix = multiFormatWriter.encode(content, BarcodeFormat.QR_CODE, <span class=\"number\">1226</span>, <span class=\"number\">1918</span>, hints);</span><br><span class=\"line\">            <span class=\"comment\">//生成二维码</span></span><br><span class=\"line\">            File outputFile = <span class=\"keyword\">new</span> File(path, <span class=\"string\">&quot;14.PNG&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//  ImageWithArrayHandler.readImage 自己的辅助类读取本地图片生成图片信息</span></span><br><span class=\"line\">            PictureAndQrCode.writeToFile2(bitMatrix, <span class=\"string\">&quot;PNG&quot;</span>, ImageWithArrayHandler.readImage(<span class=\"string\">&quot;D:\\\\GIF\\\\gif\\\\12.jpg&quot;</span>),outputFile);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>代码更改完成后面 效果如下  但信息无法识别</p>\n<p>目前无法实现  故选择另外一种方法</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com - 304024 sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<p>在图片上生成点状二维码 （无法实现）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.QRCode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.BarcodeFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.EncodeHintType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.common.BitMatrix;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标实现在图片上生成点状二维码</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/29 7:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PictureAndQrCode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BLACK = <span class=\"number\">0xFF000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> WHITE = <span class=\"number\">0x00FFFFFF</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">PictureAndQrCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">toBufferedImage</span><span class=\"params\">(BitMatrix matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = matrix.getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = matrix.getHeight();</span><br><span class=\"line\">        BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; width; x++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; height; y++) &#123;</span><br><span class=\"line\">                image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFile</span><span class=\"params\">(BitMatrix matrix, String format, File file)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        BufferedImage image = toBufferedImage(matrix);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ImageIO.write(image, format, file)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">&quot;Could not write an image of format &quot;</span> + format + <span class=\"string\">&quot; to &quot;</span> + file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToStream</span><span class=\"params\">(BitMatrix matrix, String format, OutputStream stream)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        BufferedImage image = toBufferedImage(matrix);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ImageIO.write(image, format, stream)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">&quot;Could not write an image of format &quot;</span> + format);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String content = <span class=\"string\">&quot;这是测试xing二维码生成&quot;</span>;</span><br><span class=\"line\">            String path = <span class=\"string\">&quot;D:\\\\GIF\\\\gif&quot;</span>;</span><br><span class=\"line\">            MultiFormatWriter multiFormatWriter = <span class=\"keyword\">new</span> MultiFormatWriter();</span><br><span class=\"line\">            Map hints = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">            <span class=\"comment\">//内容所使用编码</span></span><br><span class=\"line\">            hints.put(EncodeHintType.CHARACTER_SET, <span class=\"string\">&quot;gb2312&quot;</span>);</span><br><span class=\"line\">            BitMatrix bitMatrix = multiFormatWriter.encode(content, BarcodeFormat.QR_CODE, <span class=\"number\">200</span>, <span class=\"number\">200</span>, hints);</span><br><span class=\"line\">            <span class=\"comment\">//生成二维码</span></span><br><span class=\"line\">            File outputFile = <span class=\"keyword\">new</span> File(path, <span class=\"string\">&quot;14.PNG&quot;</span>);</span><br><span class=\"line\">            PictureAndQrCode.writeToFile(bitMatrix, <span class=\"string\">&quot;PNG&quot;</span>, outputFile);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这是一个普通的透明二维码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.QRCode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.BarcodeFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.EncodeHintType;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.google.zxing.common.BitMatrix;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.Picture.Main.ImageWithArrayHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.imageio.ImageIO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.swing.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.awt.image.BufferedImage;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.OutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 目标实现在图片上生成点状二维码</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span> 2021/9/29 7:23</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PictureAndQrCode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BLACK = <span class=\"number\">0xFF000000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> WHITE = <span class=\"number\">0x00FFFFFF</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">PictureAndQrCode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> BufferedImage <span class=\"title\">toBufferedImage</span><span class=\"params\">(BitMatrix matrix)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = matrix.getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = matrix.getHeight();</span><br><span class=\"line\">        BufferedImage image = <span class=\"keyword\">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>; x &lt; width; x++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> y = <span class=\"number\">0</span>; y &lt; height; y++) &#123;</span><br><span class=\"line\">                image.setRGB(x, y, matrix.get(x, y) ? BLACK : WHITE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> image;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFile</span><span class=\"params\">(BitMatrix matrix, String format, File file)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        BufferedImage image = toBufferedImage(matrix);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ImageIO.write(image, format, file)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">&quot;Could not write an image of format &quot;</span> + format + <span class=\"string\">&quot; to &quot;</span> + file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 更改输出方法</span></span><br><span class=\"line\"><span class=\"comment\">     * 图片进行透明度处理且进行合并处理</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> matrix</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> format</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> fileBufferedImage   需要更改的图片</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> file  生成的图片位置</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToFile2</span><span class=\"params\">(BitMatrix matrix, String format, BufferedImage fileBufferedImage,File file)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//得到二维码对象</span></span><br><span class=\"line\">        BufferedImage image = toBufferedImage(matrix);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//得到画笔</span></span><br><span class=\"line\">        Graphics2D g = fileBufferedImage.createGraphics();</span><br><span class=\"line\">        <span class=\"comment\">// 设置对线段的锯齿状边缘处理</span></span><br><span class=\"line\">        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,</span><br><span class=\"line\">                RenderingHints.VALUE_INTERPOLATION_BILINEAR);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//透明化处理</span></span><br><span class=\"line\">        ImageIcon imgIcon = <span class=\"keyword\">new</span> ImageIcon(image);</span><br><span class=\"line\">        <span class=\"comment\">// 得到Image对象。</span></span><br><span class=\"line\">        Image img = imgIcon.getImage();</span><br><span class=\"line\">        <span class=\"comment\">// 透明度</span></span><br><span class=\"line\">        <span class=\"keyword\">float</span> alpha = <span class=\"number\">0.85f</span>;</span><br><span class=\"line\">        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_ATOP,</span><br><span class=\"line\">                alpha));</span><br><span class=\"line\">        g.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>,image.getWidth(),image.getHeight(), <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        g.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER));</span><br><span class=\"line\">        g.dispose();</span><br><span class=\"line\">        <span class=\"comment\">//生成图片</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ImageIO.write(fileBufferedImage, format, file)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">&quot;Could not write an image of format &quot;</span> + format + <span class=\"string\">&quot; to &quot;</span> + file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToStream</span><span class=\"params\">(BitMatrix matrix, String format, OutputStream stream)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        BufferedImage image = toBufferedImage(matrix);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ImageIO.write(image, format, stream)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IOException(<span class=\"string\">&quot;Could not write an image of format &quot;</span> + format);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            String content = <span class=\"string\">&quot;这是测试xing二维码生成&quot;</span>;</span><br><span class=\"line\">            String path = <span class=\"string\">&quot;D:\\\\GIF\\\\gif&quot;</span>;</span><br><span class=\"line\">            MultiFormatWriter multiFormatWriter = <span class=\"keyword\">new</span> MultiFormatWriter();</span><br><span class=\"line\">            Map hints = <span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">            <span class=\"comment\">//内容所使用编码</span></span><br><span class=\"line\">            hints.put(EncodeHintType.CHARACTER_SET, <span class=\"string\">&quot;gb2312&quot;</span>);</span><br><span class=\"line\">            BitMatrix bitMatrix = multiFormatWriter.encode(content, BarcodeFormat.QR_CODE, <span class=\"number\">1226</span>, <span class=\"number\">1918</span>, hints);</span><br><span class=\"line\">            <span class=\"comment\">//生成二维码</span></span><br><span class=\"line\">            File outputFile = <span class=\"keyword\">new</span> File(path, <span class=\"string\">&quot;14.PNG&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//  ImageWithArrayHandler.readImage 自己的辅助类读取本地图片生成图片信息</span></span><br><span class=\"line\">            PictureAndQrCode.writeToFile2(bitMatrix, <span class=\"string\">&quot;PNG&quot;</span>, ImageWithArrayHandler.readImage(<span class=\"string\">&quot;D:\\\\GIF\\\\gif\\\\12.jpg&quot;</span>),outputFile);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>代码更改完成后面 效果如下  但信息无法识别</p>\n<p>目前无法实现  故选择另外一种方法</p>\n"},{"title":"建立Bilibili排行榜数据库","abbrlink":2428385357,"date":"2021-11-29T01:26:56.000Z","description":"Github上易姐的BilibiliAPI 调用的应用 简单的爬取B站排行榜数据","_content":"建立Bilibili排行榜信息\n\n- 建立数据库\n\n  - ![image-20210930210133264](http://typa.qingyun.run/img/image-20210930210133264.png)\t\n\n  - 导出的语句\n\n    ```sql\n    SET NAMES utf8mb4;\n    SET FOREIGN_KEY_CHECKS = 0;\n    \n    -- ----------------------------\n    -- Table structure for bilibilirank\n    -- ----------------------------\n    DROP TABLE IF EXISTS `bilibilirank`;\n    CREATE TABLE `bilibilirank`  (\n      `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '主键',\n      `rid` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '分区类型',\n      `aid` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT 'aid',\n      `bvid` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT 'bid',\n      `typename` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '分区名字',\n      `title` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '视频标题',\n      `play` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '播放量',\n      `review` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '评论量',\n      `favoritea` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '收藏量',\n      `author` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '作者',\n      `description` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '简介',\n      `create` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '上传时间',\n      `pic` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '封面链接',\n      PRIMARY KEY (`id`) USING BTREE\n    ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_bin ROW_FORMAT = Dynamic;\n    \n    SET FOREIGN_KEY_CHECKS = 1;\n    ```\n\n    \n\n- 通过mybatis-plus逆向生成实体类\n\n  - 默认 均会使用代码构造器和mysql\n\n  - 生成效果如下\n\n  - ![image-20210930212043923](http://typa.qingyun.run/img/image-20210930212043923.png)\n\n    \n\n- 调整代码\n\n  - Controller层设置为Springboot的测试类  执行主要方法（下面是测试代码）\n\n  - ```java\n    package edu.sdut.bilibili.controller;\n    \n    \n    import edu.sdut.bilibili.service.impl.BilibilirankServiceImpl;\n    import org.junit.jupiter.api.Test;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.boot.test.context.SpringBootTest;\n    \n    /**\n     * <p>\n     *  bilibiliRank排行榜 主控制类\n     * </p>\n     *\n     * @author qingyun\n     * @since 2021-09-30\n     */\n    @SpringBootTest\n    public class BilibilirankController {\n    \n        @Autowired\n        BilibilirankServiceImpl bilibilirankService;\n    \n        @Test\n        public void testInset(){\n            bilibilirankService.Insert();\n        }\n    }\n    ```\n\n  - Service\n\n  - ```java\n    package edu.sdut.bilibili.service.impl;\n    \n    import edu.sdut.bilibili.entity.Bilibilirank;\n    import edu.sdut.bilibili.mapper.BilibilirankMapper;\n    import edu.sdut.bilibili.service.IBilibilirankService;\n    import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Service;\n    \n    import javax.sql.DataSource;\n    \n    /**\n     * <p>\n     *  服务实现类\n     * </p>\n     *\n     * @author qingyun\n     * @since 2021-09-30\n     */\n    @Service\n    public class BilibilirankServiceImpl extends ServiceImpl<BilibilirankMapper, Bilibilirank> implements IBilibilirankService {\n    \n        @Autowired\n        BilibilirankMapper bilibilirankMapper;\n    \n        public void Insert() {\n            Bilibilirank bilibilirank = new Bilibilirank();\n            bilibilirank.setAid(\"1\");\n            bilibilirankMapper.insert(bilibilirank);\n        }\n    }\n    \n    ```\n\n    修改主要逻辑代码\n\n    ```java\n    package edu.sdut.bilibili.controller;\n    \n    \n    import edu.sdut.bilibili.entity.Bilibilirank;\n    import edu.sdut.bilibili.service.impl.BilibilirankServiceImpl;\n    import org.junit.jupiter.api.Test;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.boot.test.context.SpringBootTest;\n    \n    import java.util.List;\n    \n    /**\n     * <p>\n     *  bilibiliRank排行榜 主控制类\n     * </p>\n     *\n     * @author qingyun\n     * @since 2021-09-30\n     */\n    @SpringBootTest\n    public class BilibilirankController {\n    \n        @Autowired\n        BilibilirankServiceImpl bilibilirankService;\n    \n        @Test\n        public void GetListBiliBiliRanks() {\n            //获取所有的排行榜信息\n            List<Bilibilirank> biliBiliRank = bilibilirankService.getBiliBiliRank();\n            System.out.println(biliBiliRank);\n        }\n    }\n    \n    ```\n\n    ```java\n    package edu.sdut.bilibili.service.impl;\n    \n    import cn.hutool.json.JSONArray;\n    import cn.hutool.json.JSONObject;\n    import cn.hutool.json.JSONUtil;\n    import com.github.kevinsawicki.http.HttpRequest;\n    import edu.sdut.bilibili.entity.Bilibilirank;\n    import edu.sdut.bilibili.mapper.BilibilirankMapper;\n    import edu.sdut.bilibili.service.IBilibilirankService;\n    import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n    import jdk.nashorn.internal.ir.IfNode;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Service;\n    \n    import javax.sql.DataSource;\n    import java.util.ArrayList;\n    import java.util.List;\n    \n    /**\n     * <p>\n     *  服务实现类\n     * </p>\n     *\n     * @author qingyun\n     * @since 2021-09-30\n     */\n    @Service\n    public class BilibilirankServiceImpl extends ServiceImpl<BilibilirankMapper, Bilibilirank> implements IBilibilirankService {\n        @Autowired\n        BilibilirankMapper bilibilirankMapper;\n    \n        @Override\n        public List<Bilibilirank> getBiliBiliRank() {\n            int low = 300; int row = 10;\n            List<Bilibilirank> BiliBiliRankS = new ArrayList<>();\n            for (int i = 1; i < low; i++) {\n    //            数据主体\n                String InfoBody = HttpRequest.get(\"http://api.bilibili.com/x/web-interface/ranking/region?rid=\" + i).body();\n                JSONObject BiliBiliInfoBody = JSONUtil.parseObj(InfoBody);\n                //有请求信息\n                if (BiliBiliInfoBody.getInt(\"code\")==0){\n                    //获取data\n                    JSONArray data = BiliBiliInfoBody.getJSONArray(\"data\");\n                    for (int j = 0; j < row; j++) {\n                        //建立 bilibilirank\n                        Bilibilirank bilibilirank = new Bilibilirank();\n                        JSONObject rows = data.getJSONObject(j);\n                        if (rows == null){\n                           continue;\n                        }\n                        bilibilirank.setRid(Integer.toString(j));\n                        bilibilirank.setAid(rows.getStr(\"aid\"));\n                        bilibilirank.setBvid(rows.getStr(\"bvid\"));\n                        bilibilirank.setTypename(rows.getStr(\"typename\"));\n                        bilibilirank.setTitle(rows.getStr(\"title\"));\n                        bilibilirank.setPlay(rows.getStr(\"play\"));\n                        bilibilirank.setReview(rows.getStr(\"review\"));\n                        bilibilirank.setFavoritea(rows.getStr(\"favorite\"));\n                        bilibilirank.setAuthor(rows.getStr(\"author\"));\n                        bilibilirank.setDescription(rows.getStr(\"description\"));\n                        bilibilirank.setCreate(rows.getStr(\"create\"));\n                        bilibilirank.setPic(rows.getStr(\"pic\"));\n                        BiliBiliRankS.add(bilibilirank);\n                    }\n                }\n    \n            }\n            return BiliBiliRankS;\n        }\n    }\n    \n    ```\n\n    效果如下\n\n  - ![image-20211001132050684](http://typa.qingyun.run/img/image-20211001132050684.png)\n\n    下面进行插入数据库操作，使用mybatis-plus的批量插入操作\n\n    注：直接提供的批量插入并不是真的批量插入。读者请自行查找真正的批量插入\n\n    ```java\n    package edu.sdut.bilibili.controller;\n    \n    import edu.sdut.bilibili.entity.Bilibilirank;\n    import edu.sdut.bilibili.service.impl.BilibilirankServiceImpl;\n    import org.junit.jupiter.api.Test;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.boot.test.context.SpringBootTest;\n    \n    import java.util.List;\n    \n    /**\n     * <p>\n     * bilibiliRank排行榜 主控制类\n     * </p>\n     * @author qingyun\n     * @since 2021-09-30\n     */\n    @SpringBootTest\n    public class BilibilirankController {\n    \n        @Autowired\n        BilibilirankServiceImpl bilibilirankService;\n    \n        @Test\n        public void GetListBiliBiliRanks() {\n            List<Bilibilirank> biliBiliRanks = bilibilirankService.getBiliBiliRank();\n            bilibilirankService.instertBiliBili(biliBiliRanks);\n            System.out.println(\"插入完成\");\n        }\n    }\n    \n    ```\n\n    ```java\n    package edu.sdut.bilibili.service.impl;\n    \n    import cn.hutool.json.JSONArray;\n    import cn.hutool.json.JSONObject;\n    import cn.hutool.json.JSONUtil;\n    import com.github.kevinsawicki.http.HttpRequest;\n    import edu.sdut.bilibili.entity.Bilibilirank;\n    import edu.sdut.bilibili.mapper.BilibilirankMapper;\n    import edu.sdut.bilibili.service.IBilibilirankService;\n    import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n    import jdk.nashorn.internal.ir.IfNode;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Service;\n    \n    import javax.sql.DataSource;\n    import java.util.ArrayList;\n    import java.util.List;\n    \n    /**\n     * <p>\n     *  服务实现类\n     * </p>\n     *\n     * @author qingyun\n     * @since 2021-09-30\n     */\n    @Service\n    public class BilibilirankServiceImpl extends ServiceImpl<BilibilirankMapper, Bilibilirank> implements IBilibilirankService {\n        @Autowired\n        BilibilirankMapper bilibilirankMapper;\n    \n        @Override\n        public List<Bilibilirank> getBiliBiliRank() {\n            int low = 300; int row = 10;\n            List<Bilibilirank> BiliBiliRankS = new ArrayList<>();\n            for (int i = 1; i < low; i++) {\n    //            数据主体\n                String InfoBody = HttpRequest.get(\"http://api.bilibili.com/x/web-interface/ranking/region?rid=\" + i).body();\n                JSONObject BiliBiliInfoBody = JSONUtil.parseObj(InfoBody);\n                //有请求信息\n                if (BiliBiliInfoBody.getInt(\"code\")==0){\n                    //获取data\n                    JSONArray data = BiliBiliInfoBody.getJSONArray(\"data\");\n                    for (int j = 0; j < row; j++) {\n                        //建立 bilibilirank\n                        Bilibilirank bilibilirank = new Bilibilirank();\n                        JSONObject rows = data.getJSONObject(j);\n                        if (rows == null){\n                           continue;\n                        }\n                        bilibilirank.setRid(Integer.toString(j));\n                        bilibilirank.setAid(rows.getStr(\"aid\"));\n                        bilibilirank.setBvid(rows.getStr(\"bvid\"));\n                        bilibilirank.setTypename(rows.getStr(\"typename\"));\n                        bilibilirank.setTitle(rows.getStr(\"title\"));\n                        bilibilirank.setPlay(rows.getStr(\"play\"));\n                        bilibilirank.setReview(rows.getStr(\"review\"));\n                        bilibilirank.setFavoritea(rows.getStr(\"favorites\"));\n                        bilibilirank.setAuthor(rows.getStr(\"author\"));\n                        bilibilirank.setDescription(rows.getStr(\"description\"));\n    //                bilibilirank.setCreate(rows.getStr(\"create\"));\n                        bilibilirank.setPic(rows.getStr(\"pic\"));\n                        BiliBiliRankS.add(bilibilirank);\n                    }\n                }\n    \n            }\n            return BiliBiliRankS;\n        }\n    \n    \n        /**\n         * 添加实体类信息置入数据库\n         */\n        public void instertBiliBili(List<Bilibilirank> biliBiliRanks){\n            for (Bilibilirank biliBiliRank : biliBiliRanks) {\n                try{\n                    bilibilirankMapper.insert(biliBiliRank);\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n    \n            }\n    //        bilibilirankMapper.insertBatchSomeColumn(biliBiliRanks);\n        }\n    }\n    \n    ```\n\n    \n\n![image-20211001152759709](http://typa.qingyun.run/img/image-20211001152759709.png)\n\n","source":"_posts/建立Bilibili排行榜数据库.md","raw":"---\ntitle: 建立Bilibili排行榜数据库\nabbrlink: 2428385357\ndate: 2021-11-29 09:26:56\ntags:\n  - JAVA\ncategories: JAVA\ndescription: Github上易姐的BilibiliAPI 调用的应用 简单的爬取B站排行榜数据\n---\n建立Bilibili排行榜信息\n\n- 建立数据库\n\n  - ![image-20210930210133264](http://typa.qingyun.run/img/image-20210930210133264.png)\t\n\n  - 导出的语句\n\n    ```sql\n    SET NAMES utf8mb4;\n    SET FOREIGN_KEY_CHECKS = 0;\n    \n    -- ----------------------------\n    -- Table structure for bilibilirank\n    -- ----------------------------\n    DROP TABLE IF EXISTS `bilibilirank`;\n    CREATE TABLE `bilibilirank`  (\n      `id` int(0) NOT NULL AUTO_INCREMENT COMMENT '主键',\n      `rid` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '分区类型',\n      `aid` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT 'aid',\n      `bvid` varchar(15) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT 'bid',\n      `typename` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '分区名字',\n      `title` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '视频标题',\n      `play` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '播放量',\n      `review` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '评论量',\n      `favoritea` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '收藏量',\n      `author` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '作者',\n      `description` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '简介',\n      `create` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '上传时间',\n      `pic` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NULL DEFAULT NULL COMMENT '封面链接',\n      PRIMARY KEY (`id`) USING BTREE\n    ) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_bin ROW_FORMAT = Dynamic;\n    \n    SET FOREIGN_KEY_CHECKS = 1;\n    ```\n\n    \n\n- 通过mybatis-plus逆向生成实体类\n\n  - 默认 均会使用代码构造器和mysql\n\n  - 生成效果如下\n\n  - ![image-20210930212043923](http://typa.qingyun.run/img/image-20210930212043923.png)\n\n    \n\n- 调整代码\n\n  - Controller层设置为Springboot的测试类  执行主要方法（下面是测试代码）\n\n  - ```java\n    package edu.sdut.bilibili.controller;\n    \n    \n    import edu.sdut.bilibili.service.impl.BilibilirankServiceImpl;\n    import org.junit.jupiter.api.Test;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.boot.test.context.SpringBootTest;\n    \n    /**\n     * <p>\n     *  bilibiliRank排行榜 主控制类\n     * </p>\n     *\n     * @author qingyun\n     * @since 2021-09-30\n     */\n    @SpringBootTest\n    public class BilibilirankController {\n    \n        @Autowired\n        BilibilirankServiceImpl bilibilirankService;\n    \n        @Test\n        public void testInset(){\n            bilibilirankService.Insert();\n        }\n    }\n    ```\n\n  - Service\n\n  - ```java\n    package edu.sdut.bilibili.service.impl;\n    \n    import edu.sdut.bilibili.entity.Bilibilirank;\n    import edu.sdut.bilibili.mapper.BilibilirankMapper;\n    import edu.sdut.bilibili.service.IBilibilirankService;\n    import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Service;\n    \n    import javax.sql.DataSource;\n    \n    /**\n     * <p>\n     *  服务实现类\n     * </p>\n     *\n     * @author qingyun\n     * @since 2021-09-30\n     */\n    @Service\n    public class BilibilirankServiceImpl extends ServiceImpl<BilibilirankMapper, Bilibilirank> implements IBilibilirankService {\n    \n        @Autowired\n        BilibilirankMapper bilibilirankMapper;\n    \n        public void Insert() {\n            Bilibilirank bilibilirank = new Bilibilirank();\n            bilibilirank.setAid(\"1\");\n            bilibilirankMapper.insert(bilibilirank);\n        }\n    }\n    \n    ```\n\n    修改主要逻辑代码\n\n    ```java\n    package edu.sdut.bilibili.controller;\n    \n    \n    import edu.sdut.bilibili.entity.Bilibilirank;\n    import edu.sdut.bilibili.service.impl.BilibilirankServiceImpl;\n    import org.junit.jupiter.api.Test;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.boot.test.context.SpringBootTest;\n    \n    import java.util.List;\n    \n    /**\n     * <p>\n     *  bilibiliRank排行榜 主控制类\n     * </p>\n     *\n     * @author qingyun\n     * @since 2021-09-30\n     */\n    @SpringBootTest\n    public class BilibilirankController {\n    \n        @Autowired\n        BilibilirankServiceImpl bilibilirankService;\n    \n        @Test\n        public void GetListBiliBiliRanks() {\n            //获取所有的排行榜信息\n            List<Bilibilirank> biliBiliRank = bilibilirankService.getBiliBiliRank();\n            System.out.println(biliBiliRank);\n        }\n    }\n    \n    ```\n\n    ```java\n    package edu.sdut.bilibili.service.impl;\n    \n    import cn.hutool.json.JSONArray;\n    import cn.hutool.json.JSONObject;\n    import cn.hutool.json.JSONUtil;\n    import com.github.kevinsawicki.http.HttpRequest;\n    import edu.sdut.bilibili.entity.Bilibilirank;\n    import edu.sdut.bilibili.mapper.BilibilirankMapper;\n    import edu.sdut.bilibili.service.IBilibilirankService;\n    import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n    import jdk.nashorn.internal.ir.IfNode;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Service;\n    \n    import javax.sql.DataSource;\n    import java.util.ArrayList;\n    import java.util.List;\n    \n    /**\n     * <p>\n     *  服务实现类\n     * </p>\n     *\n     * @author qingyun\n     * @since 2021-09-30\n     */\n    @Service\n    public class BilibilirankServiceImpl extends ServiceImpl<BilibilirankMapper, Bilibilirank> implements IBilibilirankService {\n        @Autowired\n        BilibilirankMapper bilibilirankMapper;\n    \n        @Override\n        public List<Bilibilirank> getBiliBiliRank() {\n            int low = 300; int row = 10;\n            List<Bilibilirank> BiliBiliRankS = new ArrayList<>();\n            for (int i = 1; i < low; i++) {\n    //            数据主体\n                String InfoBody = HttpRequest.get(\"http://api.bilibili.com/x/web-interface/ranking/region?rid=\" + i).body();\n                JSONObject BiliBiliInfoBody = JSONUtil.parseObj(InfoBody);\n                //有请求信息\n                if (BiliBiliInfoBody.getInt(\"code\")==0){\n                    //获取data\n                    JSONArray data = BiliBiliInfoBody.getJSONArray(\"data\");\n                    for (int j = 0; j < row; j++) {\n                        //建立 bilibilirank\n                        Bilibilirank bilibilirank = new Bilibilirank();\n                        JSONObject rows = data.getJSONObject(j);\n                        if (rows == null){\n                           continue;\n                        }\n                        bilibilirank.setRid(Integer.toString(j));\n                        bilibilirank.setAid(rows.getStr(\"aid\"));\n                        bilibilirank.setBvid(rows.getStr(\"bvid\"));\n                        bilibilirank.setTypename(rows.getStr(\"typename\"));\n                        bilibilirank.setTitle(rows.getStr(\"title\"));\n                        bilibilirank.setPlay(rows.getStr(\"play\"));\n                        bilibilirank.setReview(rows.getStr(\"review\"));\n                        bilibilirank.setFavoritea(rows.getStr(\"favorite\"));\n                        bilibilirank.setAuthor(rows.getStr(\"author\"));\n                        bilibilirank.setDescription(rows.getStr(\"description\"));\n                        bilibilirank.setCreate(rows.getStr(\"create\"));\n                        bilibilirank.setPic(rows.getStr(\"pic\"));\n                        BiliBiliRankS.add(bilibilirank);\n                    }\n                }\n    \n            }\n            return BiliBiliRankS;\n        }\n    }\n    \n    ```\n\n    效果如下\n\n  - ![image-20211001132050684](http://typa.qingyun.run/img/image-20211001132050684.png)\n\n    下面进行插入数据库操作，使用mybatis-plus的批量插入操作\n\n    注：直接提供的批量插入并不是真的批量插入。读者请自行查找真正的批量插入\n\n    ```java\n    package edu.sdut.bilibili.controller;\n    \n    import edu.sdut.bilibili.entity.Bilibilirank;\n    import edu.sdut.bilibili.service.impl.BilibilirankServiceImpl;\n    import org.junit.jupiter.api.Test;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.boot.test.context.SpringBootTest;\n    \n    import java.util.List;\n    \n    /**\n     * <p>\n     * bilibiliRank排行榜 主控制类\n     * </p>\n     * @author qingyun\n     * @since 2021-09-30\n     */\n    @SpringBootTest\n    public class BilibilirankController {\n    \n        @Autowired\n        BilibilirankServiceImpl bilibilirankService;\n    \n        @Test\n        public void GetListBiliBiliRanks() {\n            List<Bilibilirank> biliBiliRanks = bilibilirankService.getBiliBiliRank();\n            bilibilirankService.instertBiliBili(biliBiliRanks);\n            System.out.println(\"插入完成\");\n        }\n    }\n    \n    ```\n\n    ```java\n    package edu.sdut.bilibili.service.impl;\n    \n    import cn.hutool.json.JSONArray;\n    import cn.hutool.json.JSONObject;\n    import cn.hutool.json.JSONUtil;\n    import com.github.kevinsawicki.http.HttpRequest;\n    import edu.sdut.bilibili.entity.Bilibilirank;\n    import edu.sdut.bilibili.mapper.BilibilirankMapper;\n    import edu.sdut.bilibili.service.IBilibilirankService;\n    import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\n    import jdk.nashorn.internal.ir.IfNode;\n    import org.springframework.beans.factory.annotation.Autowired;\n    import org.springframework.stereotype.Service;\n    \n    import javax.sql.DataSource;\n    import java.util.ArrayList;\n    import java.util.List;\n    \n    /**\n     * <p>\n     *  服务实现类\n     * </p>\n     *\n     * @author qingyun\n     * @since 2021-09-30\n     */\n    @Service\n    public class BilibilirankServiceImpl extends ServiceImpl<BilibilirankMapper, Bilibilirank> implements IBilibilirankService {\n        @Autowired\n        BilibilirankMapper bilibilirankMapper;\n    \n        @Override\n        public List<Bilibilirank> getBiliBiliRank() {\n            int low = 300; int row = 10;\n            List<Bilibilirank> BiliBiliRankS = new ArrayList<>();\n            for (int i = 1; i < low; i++) {\n    //            数据主体\n                String InfoBody = HttpRequest.get(\"http://api.bilibili.com/x/web-interface/ranking/region?rid=\" + i).body();\n                JSONObject BiliBiliInfoBody = JSONUtil.parseObj(InfoBody);\n                //有请求信息\n                if (BiliBiliInfoBody.getInt(\"code\")==0){\n                    //获取data\n                    JSONArray data = BiliBiliInfoBody.getJSONArray(\"data\");\n                    for (int j = 0; j < row; j++) {\n                        //建立 bilibilirank\n                        Bilibilirank bilibilirank = new Bilibilirank();\n                        JSONObject rows = data.getJSONObject(j);\n                        if (rows == null){\n                           continue;\n                        }\n                        bilibilirank.setRid(Integer.toString(j));\n                        bilibilirank.setAid(rows.getStr(\"aid\"));\n                        bilibilirank.setBvid(rows.getStr(\"bvid\"));\n                        bilibilirank.setTypename(rows.getStr(\"typename\"));\n                        bilibilirank.setTitle(rows.getStr(\"title\"));\n                        bilibilirank.setPlay(rows.getStr(\"play\"));\n                        bilibilirank.setReview(rows.getStr(\"review\"));\n                        bilibilirank.setFavoritea(rows.getStr(\"favorites\"));\n                        bilibilirank.setAuthor(rows.getStr(\"author\"));\n                        bilibilirank.setDescription(rows.getStr(\"description\"));\n    //                bilibilirank.setCreate(rows.getStr(\"create\"));\n                        bilibilirank.setPic(rows.getStr(\"pic\"));\n                        BiliBiliRankS.add(bilibilirank);\n                    }\n                }\n    \n            }\n            return BiliBiliRankS;\n        }\n    \n    \n        /**\n         * 添加实体类信息置入数据库\n         */\n        public void instertBiliBili(List<Bilibilirank> biliBiliRanks){\n            for (Bilibilirank biliBiliRank : biliBiliRanks) {\n                try{\n                    bilibilirankMapper.insert(biliBiliRank);\n                }catch (Exception e){\n                    e.printStackTrace();\n                }\n    \n            }\n    //        bilibilirankMapper.insertBatchSomeColumn(biliBiliRanks);\n        }\n    }\n    \n    ```\n\n    \n\n![image-20211001152759709](http://typa.qingyun.run/img/image-20211001152759709.png)\n\n","slug":"建立Bilibili排行榜数据库","published":1,"updated":"2021-11-29T01:29:08.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2tk0078o4vb92wh2pdf","content":"<p>建立Bilibili排行榜信息</p>\n<ul>\n<li>\n<p>建立数据库</p>\n<ul>\n<li>\n<p><img src=\"http://typa.qingyun.run/img/image-20210930210133264.png\" alt=\"image-20210930210133264\"></p>\n</li>\n<li>\n<p>导出的语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> NAMES utf8mb4;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- Table structure for bilibilirank</span></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `bilibilirank`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `bilibilirank`  (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">0</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">&#x27;主键&#x27;</span>,</span><br><span class=\"line\">  `rid` <span class=\"type\">varchar</span>(<span class=\"number\">10</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;分区类型&#x27;</span>,</span><br><span class=\"line\">  `aid` <span class=\"type\">varchar</span>(<span class=\"number\">15</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;aid&#x27;</span>,</span><br><span class=\"line\">  `bvid` <span class=\"type\">varchar</span>(<span class=\"number\">15</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;bid&#x27;</span>,</span><br><span class=\"line\">  `typename` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;分区名字&#x27;</span>,</span><br><span class=\"line\">  `title` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;视频标题&#x27;</span>,</span><br><span class=\"line\">  `play` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;播放量&#x27;</span>,</span><br><span class=\"line\">  `review` <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;评论量&#x27;</span>,</span><br><span class=\"line\">  `favoritea` <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;收藏量&#x27;</span>,</span><br><span class=\"line\">  `author` <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;作者&#x27;</span>,</span><br><span class=\"line\">  `description` <span class=\"type\">varchar</span>(<span class=\"number\">200</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;简介&#x27;</span>,</span><br><span class=\"line\">  `<span class=\"keyword\">create</span>` <span class=\"type\">varchar</span>(<span class=\"number\">50</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;上传时间&#x27;</span>,</span><br><span class=\"line\">  `pic` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;封面链接&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`) <span class=\"keyword\">USING</span> BTREE</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> <span class=\"operator\">=</span> utf8mb4 <span class=\"keyword\">COLLATE</span> <span class=\"operator\">=</span> utf8mb4_bin ROW_FORMAT <span class=\"operator\">=</span> <span class=\"keyword\">Dynamic</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>通过mybatis-plus逆向生成实体类</p>\n<ul>\n<li>\n<p>默认 均会使用代码构造器和mysql</p>\n</li>\n<li>\n<p>生成效果如下</p>\n</li>\n<li>\n<p><img src=\"http://typa.qingyun.run/img/image-20210930212043923.png\" alt=\"image-20210930212043923\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>调整代码</p>\n<ul>\n<li>\n<p>Controller层设置为Springboot的测试类  执行主要方法（下面是测试代码）</p>\n</li>\n<li>\n<pre><code class=\"language-java\">package edu.sdut.bilibili.controller;\n\n\nimport edu.sdut.bilibili.service.impl.BilibilirankServiceImpl;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n/**\n * &lt;p&gt;\n *  bilibiliRank排行榜 主控制类\n * &lt;/p&gt;\n *\n * @author qingyun\n * @since 2021-09-30\n */\n@SpringBootTest\npublic class BilibilirankController &#123;\n\n    @Autowired\n    BilibilirankServiceImpl bilibilirankService;\n\n    @Test\n    public void testInset()&#123;\n        bilibilirankService.Insert();\n    &#125;\n&#125;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- Service</span><br><span class=\"line\"></span><br><span class=\"line\">- ```java</span><br><span class=\"line\">  package edu.sdut.bilibili.service.impl;</span><br><span class=\"line\">  </span><br><span class=\"line\">  import edu.sdut.bilibili.entity.Bilibilirank;</span><br><span class=\"line\">  import edu.sdut.bilibili.mapper.BilibilirankMapper;</span><br><span class=\"line\">  import edu.sdut.bilibili.service.IBilibilirankService;</span><br><span class=\"line\">  import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\">  import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">  import org.springframework.stereotype.Service;</span><br><span class=\"line\">  </span><br><span class=\"line\">  import javax.sql.DataSource;</span><br><span class=\"line\">  </span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &lt;p&gt;</span><br><span class=\"line\">   *  服务实现类</span><br><span class=\"line\">   * &lt;/p&gt;</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @author qingyun</span><br><span class=\"line\">   * @since 2021-09-30</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Service</span><br><span class=\"line\">  public class BilibilirankServiceImpl extends ServiceImpl&lt;BilibilirankMapper, Bilibilirank&gt; implements IBilibilirankService &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">      @Autowired</span><br><span class=\"line\">      BilibilirankMapper bilibilirankMapper;</span><br><span class=\"line\">  </span><br><span class=\"line\">      public void Insert() &#123;</span><br><span class=\"line\">          Bilibilirank bilibilirank = new Bilibilirank();</span><br><span class=\"line\">          bilibilirank.setAid(&quot;1&quot;);</span><br><span class=\"line\">          bilibilirankMapper.insert(bilibilirank);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n修改主要逻辑代码\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.bilibili.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.entity.Bilibilirank;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.service.impl.BilibilirankServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *  bilibiliRank排行榜 主控制类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2021-09-30</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BilibilirankController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    BilibilirankServiceImpl bilibilirankService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetListBiliBiliRanks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取所有的排行榜信息</span></span><br><span class=\"line\">        List&lt;Bilibilirank&gt; biliBiliRank = bilibilirankService.getBiliBiliRank();</span><br><span class=\"line\">        System.out.println(biliBiliRank);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.bilibili.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.kevinsawicki.http.HttpRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.entity.Bilibilirank;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.mapper.BilibilirankMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.service.IBilibilirankService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jdk.nashorn.internal.ir.IfNode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *  服务实现类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2021-09-30</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BilibilirankServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">ServiceImpl</span>&lt;<span class=\"title\">BilibilirankMapper</span>, <span class=\"title\">Bilibilirank</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">IBilibilirankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    BilibilirankMapper bilibilirankMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Bilibilirank&gt; <span class=\"title\">getBiliBiliRank</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">300</span>; <span class=\"keyword\">int</span> row = <span class=\"number\">10</span>;</span><br><span class=\"line\">        List&lt;Bilibilirank&gt; BiliBiliRankS = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; low; i++) &#123;</span><br><span class=\"line\"><span class=\"comment\">//            数据主体</span></span><br><span class=\"line\">            String InfoBody = HttpRequest.get(<span class=\"string\">&quot;http://api.bilibili.com/x/web-interface/ranking/region?rid=&quot;</span> + i).body();</span><br><span class=\"line\">            JSONObject BiliBiliInfoBody = JSONUtil.parseObj(InfoBody);</span><br><span class=\"line\">            <span class=\"comment\">//有请求信息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (BiliBiliInfoBody.getInt(<span class=\"string\">&quot;code&quot;</span>)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取data</span></span><br><span class=\"line\">                JSONArray data = BiliBiliInfoBody.getJSONArray(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; row; j++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//建立 bilibilirank</span></span><br><span class=\"line\">                    Bilibilirank bilibilirank = <span class=\"keyword\">new</span> Bilibilirank();</span><br><span class=\"line\">                    JSONObject rows = data.getJSONObject(j);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (rows == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                       <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    bilibilirank.setRid(Integer.toString(j));</span><br><span class=\"line\">                    bilibilirank.setAid(rows.getStr(<span class=\"string\">&quot;aid&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setBvid(rows.getStr(<span class=\"string\">&quot;bvid&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setTypename(rows.getStr(<span class=\"string\">&quot;typename&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setTitle(rows.getStr(<span class=\"string\">&quot;title&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setPlay(rows.getStr(<span class=\"string\">&quot;play&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setReview(rows.getStr(<span class=\"string\">&quot;review&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setFavoritea(rows.getStr(<span class=\"string\">&quot;favorite&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setAuthor(rows.getStr(<span class=\"string\">&quot;author&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setDescription(rows.getStr(<span class=\"string\">&quot;description&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setCreate(rows.getStr(<span class=\"string\">&quot;create&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setPic(rows.getStr(<span class=\"string\">&quot;pic&quot;</span>));</span><br><span class=\"line\">                    BiliBiliRankS.add(bilibilirank);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BiliBiliRankS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n效果如下\n\n</code></pre>\n</li>\n<li>\n<p><img src=\"http://typa.qingyun.run/img/image-20211001132050684.png\" alt=\"image-20211001132050684\"></p>\n<p>下面进行插入数据库操作，使用mybatis-plus的批量插入操作</p>\n<p>注：直接提供的批量插入并不是真的批量插入。读者请自行查找真正的批量插入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.bilibili.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.entity.Bilibilirank;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.service.impl.BilibilirankServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * bilibiliRank排行榜 主控制类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2021-09-30</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BilibilirankController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    BilibilirankServiceImpl bilibilirankService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetListBiliBiliRanks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Bilibilirank&gt; biliBiliRanks = bilibilirankService.getBiliBiliRank();</span><br><span class=\"line\">        bilibilirankService.instertBiliBili(biliBiliRanks);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;插入完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.bilibili.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.kevinsawicki.http.HttpRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.entity.Bilibilirank;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.mapper.BilibilirankMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.service.IBilibilirankService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jdk.nashorn.internal.ir.IfNode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *  服务实现类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2021-09-30</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BilibilirankServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">ServiceImpl</span>&lt;<span class=\"title\">BilibilirankMapper</span>, <span class=\"title\">Bilibilirank</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">IBilibilirankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    BilibilirankMapper bilibilirankMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Bilibilirank&gt; <span class=\"title\">getBiliBiliRank</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">300</span>; <span class=\"keyword\">int</span> row = <span class=\"number\">10</span>;</span><br><span class=\"line\">        List&lt;Bilibilirank&gt; BiliBiliRankS = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; low; i++) &#123;</span><br><span class=\"line\"><span class=\"comment\">//            数据主体</span></span><br><span class=\"line\">            String InfoBody = HttpRequest.get(<span class=\"string\">&quot;http://api.bilibili.com/x/web-interface/ranking/region?rid=&quot;</span> + i).body();</span><br><span class=\"line\">            JSONObject BiliBiliInfoBody = JSONUtil.parseObj(InfoBody);</span><br><span class=\"line\">            <span class=\"comment\">//有请求信息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (BiliBiliInfoBody.getInt(<span class=\"string\">&quot;code&quot;</span>)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取data</span></span><br><span class=\"line\">                JSONArray data = BiliBiliInfoBody.getJSONArray(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; row; j++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//建立 bilibilirank</span></span><br><span class=\"line\">                    Bilibilirank bilibilirank = <span class=\"keyword\">new</span> Bilibilirank();</span><br><span class=\"line\">                    JSONObject rows = data.getJSONObject(j);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (rows == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                       <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    bilibilirank.setRid(Integer.toString(j));</span><br><span class=\"line\">                    bilibilirank.setAid(rows.getStr(<span class=\"string\">&quot;aid&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setBvid(rows.getStr(<span class=\"string\">&quot;bvid&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setTypename(rows.getStr(<span class=\"string\">&quot;typename&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setTitle(rows.getStr(<span class=\"string\">&quot;title&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setPlay(rows.getStr(<span class=\"string\">&quot;play&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setReview(rows.getStr(<span class=\"string\">&quot;review&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setFavoritea(rows.getStr(<span class=\"string\">&quot;favorites&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setAuthor(rows.getStr(<span class=\"string\">&quot;author&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setDescription(rows.getStr(<span class=\"string\">&quot;description&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//                bilibilirank.setCreate(rows.getStr(&quot;create&quot;));</span></span><br><span class=\"line\">                    bilibilirank.setPic(rows.getStr(<span class=\"string\">&quot;pic&quot;</span>));</span><br><span class=\"line\">                    BiliBiliRankS.add(bilibilirank);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BiliBiliRankS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加实体类信息置入数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">instertBiliBili</span><span class=\"params\">(List&lt;Bilibilirank&gt; biliBiliRanks)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Bilibilirank biliBiliRank : biliBiliRanks) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                bilibilirankMapper.insert(biliBiliRank);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        bilibilirankMapper.insertBatchSomeColumn(biliBiliRanks);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://typa.qingyun.run/img/image-20211001152759709.png\" alt=\"image-20211001152759709\"></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com%20-%20330764%20sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<p>建立Bilibili排行榜信息</p>\n<ul>\n<li>\n<p>建立数据库</p>\n<ul>\n<li>\n<p><img src=\"http://typa.qingyun.run/img/image-20210930210133264.png\" alt=\"image-20210930210133264\"></p>\n</li>\n<li>\n<p>导出的语句</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SET</span> NAMES utf8mb4;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"comment\">-- Table structure for bilibilirank</span></span><br><span class=\"line\"><span class=\"comment\">-- ----------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> IF <span class=\"keyword\">EXISTS</span> `bilibilirank`;</span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> `bilibilirank`  (</span><br><span class=\"line\">  `id` <span class=\"type\">int</span>(<span class=\"number\">0</span>) <span class=\"keyword\">NOT</span> <span class=\"keyword\">NULL</span> AUTO_INCREMENT COMMENT <span class=\"string\">&#x27;主键&#x27;</span>,</span><br><span class=\"line\">  `rid` <span class=\"type\">varchar</span>(<span class=\"number\">10</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;分区类型&#x27;</span>,</span><br><span class=\"line\">  `aid` <span class=\"type\">varchar</span>(<span class=\"number\">15</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;aid&#x27;</span>,</span><br><span class=\"line\">  `bvid` <span class=\"type\">varchar</span>(<span class=\"number\">15</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;bid&#x27;</span>,</span><br><span class=\"line\">  `typename` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;分区名字&#x27;</span>,</span><br><span class=\"line\">  `title` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;视频标题&#x27;</span>,</span><br><span class=\"line\">  `play` <span class=\"type\">varchar</span>(<span class=\"number\">255</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;播放量&#x27;</span>,</span><br><span class=\"line\">  `review` <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;评论量&#x27;</span>,</span><br><span class=\"line\">  `favoritea` <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;收藏量&#x27;</span>,</span><br><span class=\"line\">  `author` <span class=\"type\">varchar</span>(<span class=\"number\">20</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;作者&#x27;</span>,</span><br><span class=\"line\">  `description` <span class=\"type\">varchar</span>(<span class=\"number\">200</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;简介&#x27;</span>,</span><br><span class=\"line\">  `<span class=\"keyword\">create</span>` <span class=\"type\">varchar</span>(<span class=\"number\">50</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;上传时间&#x27;</span>,</span><br><span class=\"line\">  `pic` <span class=\"type\">varchar</span>(<span class=\"number\">100</span>) <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_bin <span class=\"keyword\">NULL</span> <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">NULL</span> COMMENT <span class=\"string\">&#x27;封面链接&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">PRIMARY</span> KEY (`id`) <span class=\"keyword\">USING</span> BTREE</span><br><span class=\"line\">) ENGINE <span class=\"operator\">=</span> InnoDB <span class=\"type\">CHARACTER</span> <span class=\"keyword\">SET</span> <span class=\"operator\">=</span> utf8mb4 <span class=\"keyword\">COLLATE</span> <span class=\"operator\">=</span> utf8mb4_bin ROW_FORMAT <span class=\"operator\">=</span> <span class=\"keyword\">Dynamic</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">SET</span> FOREIGN_KEY_CHECKS <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>通过mybatis-plus逆向生成实体类</p>\n<ul>\n<li>\n<p>默认 均会使用代码构造器和mysql</p>\n</li>\n<li>\n<p>生成效果如下</p>\n</li>\n<li>\n<p><img src=\"http://typa.qingyun.run/img/image-20210930212043923.png\" alt=\"image-20210930212043923\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>调整代码</p>\n<ul>\n<li>\n<p>Controller层设置为Springboot的测试类  执行主要方法（下面是测试代码）</p>\n</li>\n<li>\n<pre><code class=\"language-java\">package edu.sdut.bilibili.controller;\n\n\nimport edu.sdut.bilibili.service.impl.BilibilirankServiceImpl;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n/**\n * &lt;p&gt;\n *  bilibiliRank排行榜 主控制类\n * &lt;/p&gt;\n *\n * @author qingyun\n * @since 2021-09-30\n */\n@SpringBootTest\npublic class BilibilirankController &#123;\n\n    @Autowired\n    BilibilirankServiceImpl bilibilirankService;\n\n    @Test\n    public void testInset()&#123;\n        bilibilirankService.Insert();\n    &#125;\n&#125;\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- Service</span><br><span class=\"line\"></span><br><span class=\"line\">- ```java</span><br><span class=\"line\">  package edu.sdut.bilibili.service.impl;</span><br><span class=\"line\">  </span><br><span class=\"line\">  import edu.sdut.bilibili.entity.Bilibilirank;</span><br><span class=\"line\">  import edu.sdut.bilibili.mapper.BilibilirankMapper;</span><br><span class=\"line\">  import edu.sdut.bilibili.service.IBilibilirankService;</span><br><span class=\"line\">  import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\">  import org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\">  import org.springframework.stereotype.Service;</span><br><span class=\"line\">  </span><br><span class=\"line\">  import javax.sql.DataSource;</span><br><span class=\"line\">  </span><br><span class=\"line\">  /**</span><br><span class=\"line\">   * &lt;p&gt;</span><br><span class=\"line\">   *  服务实现类</span><br><span class=\"line\">   * &lt;/p&gt;</span><br><span class=\"line\">   *</span><br><span class=\"line\">   * @author qingyun</span><br><span class=\"line\">   * @since 2021-09-30</span><br><span class=\"line\">   */</span><br><span class=\"line\">  @Service</span><br><span class=\"line\">  public class BilibilirankServiceImpl extends ServiceImpl&lt;BilibilirankMapper, Bilibilirank&gt; implements IBilibilirankService &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">      @Autowired</span><br><span class=\"line\">      BilibilirankMapper bilibilirankMapper;</span><br><span class=\"line\">  </span><br><span class=\"line\">      public void Insert() &#123;</span><br><span class=\"line\">          Bilibilirank bilibilirank = new Bilibilirank();</span><br><span class=\"line\">          bilibilirank.setAid(&quot;1&quot;);</span><br><span class=\"line\">          bilibilirankMapper.insert(bilibilirank);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n\n修改主要逻辑代码\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.bilibili.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.entity.Bilibilirank;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.service.impl.BilibilirankServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *  bilibiliRank排行榜 主控制类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2021-09-30</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BilibilirankController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    BilibilirankServiceImpl bilibilirankService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetListBiliBiliRanks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取所有的排行榜信息</span></span><br><span class=\"line\">        List&lt;Bilibilirank&gt; biliBiliRank = bilibilirankService.getBiliBiliRank();</span><br><span class=\"line\">        System.out.println(biliBiliRank);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.bilibili.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.kevinsawicki.http.HttpRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.entity.Bilibilirank;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.mapper.BilibilirankMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.service.IBilibilirankService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jdk.nashorn.internal.ir.IfNode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *  服务实现类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2021-09-30</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BilibilirankServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">ServiceImpl</span>&lt;<span class=\"title\">BilibilirankMapper</span>, <span class=\"title\">Bilibilirank</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">IBilibilirankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    BilibilirankMapper bilibilirankMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Bilibilirank&gt; <span class=\"title\">getBiliBiliRank</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">300</span>; <span class=\"keyword\">int</span> row = <span class=\"number\">10</span>;</span><br><span class=\"line\">        List&lt;Bilibilirank&gt; BiliBiliRankS = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; low; i++) &#123;</span><br><span class=\"line\"><span class=\"comment\">//            数据主体</span></span><br><span class=\"line\">            String InfoBody = HttpRequest.get(<span class=\"string\">&quot;http://api.bilibili.com/x/web-interface/ranking/region?rid=&quot;</span> + i).body();</span><br><span class=\"line\">            JSONObject BiliBiliInfoBody = JSONUtil.parseObj(InfoBody);</span><br><span class=\"line\">            <span class=\"comment\">//有请求信息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (BiliBiliInfoBody.getInt(<span class=\"string\">&quot;code&quot;</span>)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取data</span></span><br><span class=\"line\">                JSONArray data = BiliBiliInfoBody.getJSONArray(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; row; j++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//建立 bilibilirank</span></span><br><span class=\"line\">                    Bilibilirank bilibilirank = <span class=\"keyword\">new</span> Bilibilirank();</span><br><span class=\"line\">                    JSONObject rows = data.getJSONObject(j);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (rows == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                       <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    bilibilirank.setRid(Integer.toString(j));</span><br><span class=\"line\">                    bilibilirank.setAid(rows.getStr(<span class=\"string\">&quot;aid&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setBvid(rows.getStr(<span class=\"string\">&quot;bvid&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setTypename(rows.getStr(<span class=\"string\">&quot;typename&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setTitle(rows.getStr(<span class=\"string\">&quot;title&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setPlay(rows.getStr(<span class=\"string\">&quot;play&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setReview(rows.getStr(<span class=\"string\">&quot;review&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setFavoritea(rows.getStr(<span class=\"string\">&quot;favorite&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setAuthor(rows.getStr(<span class=\"string\">&quot;author&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setDescription(rows.getStr(<span class=\"string\">&quot;description&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setCreate(rows.getStr(<span class=\"string\">&quot;create&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setPic(rows.getStr(<span class=\"string\">&quot;pic&quot;</span>));</span><br><span class=\"line\">                    BiliBiliRankS.add(bilibilirank);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BiliBiliRankS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n效果如下\n\n</code></pre>\n</li>\n<li>\n<p><img src=\"http://typa.qingyun.run/img/image-20211001132050684.png\" alt=\"image-20211001132050684\"></p>\n<p>下面进行插入数据库操作，使用mybatis-plus的批量插入操作</p>\n<p>注：直接提供的批量插入并不是真的批量插入。读者请自行查找真正的批量插入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.bilibili.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.entity.Bilibilirank;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.service.impl.BilibilirankServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.jupiter.api.Test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * bilibiliRank排行榜 主控制类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2021-09-30</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BilibilirankController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    BilibilirankServiceImpl bilibilirankService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">GetListBiliBiliRanks</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        List&lt;Bilibilirank&gt; biliBiliRanks = bilibilirankService.getBiliBiliRank();</span><br><span class=\"line\">        bilibilirankService.instertBiliBili(biliBiliRanks);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;插入完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.sdut.bilibili.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> cn.hutool.json.JSONUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.kevinsawicki.http.HttpRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.entity.Bilibilirank;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.mapper.BilibilirankMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> edu.sdut.bilibili.service.IBilibilirankService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> jdk.nashorn.internal.ir.IfNode;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.sql.DataSource;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *  服务实现类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> qingyun</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2021-09-30</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BilibilirankServiceImpl</span> <span class=\"keyword\">extends</span> <span class=\"title\">ServiceImpl</span>&lt;<span class=\"title\">BilibilirankMapper</span>, <span class=\"title\">Bilibilirank</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">IBilibilirankService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    BilibilirankMapper bilibilirankMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Bilibilirank&gt; <span class=\"title\">getBiliBiliRank</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> low = <span class=\"number\">300</span>; <span class=\"keyword\">int</span> row = <span class=\"number\">10</span>;</span><br><span class=\"line\">        List&lt;Bilibilirank&gt; BiliBiliRankS = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; low; i++) &#123;</span><br><span class=\"line\"><span class=\"comment\">//            数据主体</span></span><br><span class=\"line\">            String InfoBody = HttpRequest.get(<span class=\"string\">&quot;http://api.bilibili.com/x/web-interface/ranking/region?rid=&quot;</span> + i).body();</span><br><span class=\"line\">            JSONObject BiliBiliInfoBody = JSONUtil.parseObj(InfoBody);</span><br><span class=\"line\">            <span class=\"comment\">//有请求信息</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (BiliBiliInfoBody.getInt(<span class=\"string\">&quot;code&quot;</span>)==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//获取data</span></span><br><span class=\"line\">                JSONArray data = BiliBiliInfoBody.getJSONArray(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; row; j++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//建立 bilibilirank</span></span><br><span class=\"line\">                    Bilibilirank bilibilirank = <span class=\"keyword\">new</span> Bilibilirank();</span><br><span class=\"line\">                    JSONObject rows = data.getJSONObject(j);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (rows == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                       <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    bilibilirank.setRid(Integer.toString(j));</span><br><span class=\"line\">                    bilibilirank.setAid(rows.getStr(<span class=\"string\">&quot;aid&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setBvid(rows.getStr(<span class=\"string\">&quot;bvid&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setTypename(rows.getStr(<span class=\"string\">&quot;typename&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setTitle(rows.getStr(<span class=\"string\">&quot;title&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setPlay(rows.getStr(<span class=\"string\">&quot;play&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setReview(rows.getStr(<span class=\"string\">&quot;review&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setFavoritea(rows.getStr(<span class=\"string\">&quot;favorites&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setAuthor(rows.getStr(<span class=\"string\">&quot;author&quot;</span>));</span><br><span class=\"line\">                    bilibilirank.setDescription(rows.getStr(<span class=\"string\">&quot;description&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//                bilibilirank.setCreate(rows.getStr(&quot;create&quot;));</span></span><br><span class=\"line\">                    bilibilirank.setPic(rows.getStr(<span class=\"string\">&quot;pic&quot;</span>));</span><br><span class=\"line\">                    BiliBiliRankS.add(bilibilirank);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> BiliBiliRankS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加实体类信息置入数据库</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">instertBiliBili</span><span class=\"params\">(List&lt;Bilibilirank&gt; biliBiliRanks)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Bilibilirank biliBiliRank : biliBiliRanks) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                bilibilirankMapper.insert(biliBiliRank);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"comment\">//        bilibilirankMapper.insertBatchSomeColumn(biliBiliRanks);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"http://typa.qingyun.run/img/image-20211001152759709.png\" alt=\"image-20211001152759709\"></p>\n"},{"title":"从B站学习的Netty15","abbrlink":551514310,"date":"2021-12-03T00:49:40.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n# Google Protobuf\n\n## 编码和解码的基本介绍\n\n1. 编写网络应用程序时，因为数据在网络中传输的都是二进制字节码数据，在发送数据时就需要编码，接收数据时就需要解码[示意图]\n2. `codec`（编解码器）的组成部分有两个：`decoder`（解码器）和 `encoder`（编码器）。`encoder` 负责把业务数据转换成字节码数据，`decoder` 负责把字节码数据转换成业务数据\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0001.png?x-oss-process=style/qingyun)\n\n## Netty 本身的编码解码的机制和问题分析\n\n1. `Netty` 自身提供了一些 `codec`(编解码器)\n\n2. `Netty `提供的编码器 \n\n   - `StringEncoder`：对字符串数据进行编码。\n   - `ObjectEncoder`：对Java对象进行编码。\n\n3. `Netty`\n\n   提供的解码器 \n\n   - `StringDecoder`,对字符串数据进行解码 \n   - `ObjectDecoder`，对 Java 对象进行解码\n\n4. `Netty `本身自带的 `ObjectDecoder `和 `ObjectEncoder `可以用来实现 `POJO`对象或各种业务对象的编码和解码，底层使用的仍是Java序列化技术,而Java序列化技术本身效率就不高，存在如下问题\n\n   - 无法跨语言\n   - 序列化后的体积太大，是二进制编码的5倍多。\n   - 序列化性能太低\n\n5. 引出新的解决方案[`Google` 的 `Protobuf`]\n\n## Protobuf\n\n1. `Protobuf` 基本介绍和使用示意图\n2. `Protobuf` 是 `Google` 发布的开源项目，全称 `Google Protocol Buffers`，是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 `RPC` [远程过程调用 `remote procedure call` ]数据交换格式。目前很多公司 从`http + json 转向tcp + protobuf`，效率会更高。\n3. 参考文档：https://developers.google.com/protocol-buffers/docs/proto 语言指南\n4. `Protobuf` 是以 `message` 的方式来管理数据的.\n5. 支持跨平台、跨语言，即[客户端和服务器端可以是不同的语言编写的]（支持目前绝大多数语言，例如 `C++`、`C#`、`Java`、`python` 等）\n6. 高性能，高可靠性\n7. 使用 `protobuf` 编译器能自动生成代码，`Protobuf` 是将类的定义使用 `.proto` 文件进行描述。说明，在 `idea` 中编写 `.proto` 文件时，会自动提示是否下载 `.ptoto` 编写插件.可以让语法高亮。\n8. 然后通过 `protoc.exe` 编译器根据 `.proto` 自动生成 `.java` 文件\n9. `protobuf` 使用示意图\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0002.png?x-oss-process=style/qingyun)\n\n## Protobuf 快速入门实例\n\n编写程序，使用 `Protobuf` 完成如下功能\n\n1. 客户端可以发送一个 `StudentPoJo` 对象到服务器(通过 `Protobuf` 编码)\n2. 服务端能接收 `StudentPoJo` 对象，并显示信息(通过 `Protobuf` 解码)\n\n```xml\n<dependency>\n       <groupId>com.google.protobuf</groupId>\n       <artifactId>protobuf-java</artifactId>\n       <version>3.6.1</version>\n   </dependency>\n```\n\nStudent.proto\n\n```protobuf\nsyntax = \"proto3\"; //版本\noption java_outer_classname = \"StudentPOJO\";//生成的外部类名，同时也是文件名\n//protobuf 使用message 管理数据\nmessage Student { //会在 StudentPOJO 外部类生成一个内部类 Student， 他是真正发送的POJO对象\n    int32 id = 1; // Student 类中有 一个属性 名字为 id 类型为int32(protobuf类型) 1表示属性序号，不是值\n    string name = 2;\n}\n```\n\n编译\nprotoc.exe –java_out=.Student.proto\n将生成的 StudentPOJO 放入到项目使用\n\n![image-20211202132304804](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211202132306738.png?x-oss-process=style/qingyun)\n\n```java\npackage com.atguigu.netty.codec;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufDecoder;\n\npublic class NettyServer {\n    public static void main(String[] args) throws Exception {\n\n\n        //创建BossGroup 和 WorkerGroup\n        //说明\n        //1. 创建两个线程组 bossGroup 和 workerGroup\n        //2. bossGroup 只是处理连接请求 , 真正的和客户端业务处理，会交给 workerGroup完成\n        //3. 两个都是无限循环\n        //4. bossGroup 和 workerGroup 含有的子线程(NioEventLoop)的个数\n        //   默认实际 cpu核数 * 2\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup(); //8\n\n\n\n        try {\n            //创建服务器端的启动对象，配置参数\n            ServerBootstrap bootstrap = new ServerBootstrap();\n\n            //使用链式编程来进行设置\n            bootstrap.group(bossGroup, workerGroup) //设置两个线程组\n                    .channel(NioServerSocketChannel.class) //使用NioSocketChannel 作为服务器的通道实现\n                    .option(ChannelOption.SO_BACKLOG, 128) // 设置线程队列得到连接个数\n                    .childOption(ChannelOption.SO_KEEPALIVE, true) //设置保持活动连接状态\n//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup\n                    .childHandler(new ChannelInitializer<SocketChannel>() {//创建一个通道初始化对象(匿名对象)\n                        //给pipeline 设置处理器\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n\n\n                            ChannelPipeline pipeline = ch.pipeline();\n                            //在pipeline加入ProtoBufDecoder\n                            //指定对哪种对象进行解码\n                            pipeline.addLast(\"decoder\", new ProtobufDecoder(StudentPOJO.Student.getDefaultInstance()));\n                            pipeline.addLast(new NettyServerHandler());\n                        }\n                    }); // 给我们的workerGroup 的 EventLoop 对应的管道设置处理器\n\n            System.out.println(\".....服务器 is ready...\");\n\n            //绑定一个端口并且同步, 生成了一个 ChannelFuture 对象\n            //启动服务器(并绑定端口)\n            ChannelFuture cf = bootstrap.bind(6668).sync();\n\n            //给cf 注册监听器，监控我们关心的事件\n\n            cf.addListener(new ChannelFutureListener() {\n                @Override\n                public void operationComplete(ChannelFuture future) throws Exception {\n                    if (cf.isSuccess()) {\n                        System.out.println(\"监听端口 6668 成功\");\n                    } else {\n                        System.out.println(\"监听端口 6668 失败\");\n                    }\n                }\n            });\n\n\n            //对关闭通道进行监听\n            cf.channel().closeFuture().sync();\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n\n    }\n\n}\n```\n\nNettyServerHandler\n\n```java\npackage com.atguigu.netty.codec;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.util.CharsetUtil;\n\n/*\n说明\n1. 我们自定义一个Handler 需要继续netty 规定好的某个HandlerAdapter(规范)\n2. 这时我们自定义一个Handler , 才能称为一个handler\n */\n//public class NettyServerHandler extends ChannelInboundHandlerAdapter {\npublic class NettyServerHandler extends SimpleChannelInboundHandler<StudentPOJO.Student> {\n\n\n    //读取数据实际(这里我们可以读取客户端发送的消息)\n    /*\n    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址\n    2. Object msg: 就是客户端发送的数据 默认Object\n     */\n    @Override\n    public void channelRead0(ChannelHandlerContext ctx, StudentPOJO.Student msg) throws Exception {\n\n        //读取从客户端发送的StudentPojo.Student\n\n\n        System.out.println(\"客户端发送的数据 id=\" + msg.getId() + \" 名字=\" + msg.getName());\n    }\n\n    //数据读取完毕\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n\n        //writeAndFlush 是 write + flush\n        //将数据写入到缓存，并刷新\n        //一般讲，我们对这个发送的数据进行编码\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵1\", CharsetUtil.UTF_8));\n    }\n\n    //处理异常, 一般是需要关闭通道\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        ctx.close();\n    }\n}\n```\n\nNettyClient\n\n```java\npackage com.atguigu.netty.codec;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufEncoder;\n\npublic class NettyClient {\n    public static void main(String[] args) throws Exception {\n\n        //客户端需要一个事件循环组\n        EventLoopGroup group = new NioEventLoopGroup();\n\n\n        try {\n            //创建客户端启动对象\n            //注意客户端使用的不是 ServerBootstrap 而是 Bootstrap\n            Bootstrap bootstrap = new Bootstrap();\n\n            //设置相关参数\n            bootstrap.group(group) //设置线程组\n                    .channel(NioSocketChannel.class) // 设置客户端通道的实现类(反射)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline pipeline = ch.pipeline();\n                            //在pipeline中加入 ProtoBufEncoder\n                            pipeline.addLast(\"encoder\", new ProtobufEncoder());\n                            pipeline.addLast(new NettyClientHandler()); //加入自己的处理器\n                        }\n                    });\n\n            System.out.println(\"客户端 ok..\");\n\n            //启动客户端去连接服务器端\n            //关于 ChannelFuture 要分析，涉及到netty的异步模型\n            ChannelFuture channelFuture = bootstrap.connect(\"127.0.0.1\", 6668).sync();\n            //给关闭通道进行监听\n            channelFuture.channel().closeFuture().sync();\n        }finally {\n\n            group.shutdownGracefully();\n\n        }\n    }\n}\n```\n\nNettyClientHandler\n\n```java\npackage com.atguigu.netty.codec;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.util.CharsetUtil;\n\npublic class NettyClientHandler extends ChannelInboundHandlerAdapter {\n\n    //当通道就绪就会触发该方法\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n\n        //发生一个Student 对象到服务器\n\n        StudentPOJO.Student student = StudentPOJO.Student.newBuilder().setId(4).setName(\"智多星 吴用\").build();\n        //Teacher , Member ,Message\n        ctx.writeAndFlush(student);\n    }\n\n    //当通道有读取事件时，会触发\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n        System.out.println(\"服务器回复的消息:\" + buf.toString(CharsetUtil.UTF_8));\n        System.out.println(\"服务器的地址： \"+ ctx.channel().remoteAddress());\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n\n## Protobuf 快速入门实例 2\n\n1. 编写程序，使用 `Protobuf` 完成如下功能\n2. 客户端可以随机发送 `StudentPoJo` / `WorkerPoJo` 对象到服务器(通过 `Protobuf` 编码)\n3. 服务端能接收 `StudentPoJo` / `WorkerPoJo` 对象(需要判断是哪种类型)，并显示信息(通过 `Protobuf` 解码)\n\n```protobuf\nsyntax = \"proto3\";\noption optimize_for = SPEED; // 加快解析\noption java_package=\"com.atguigu.netty.codec2\";   //指定生成到哪个包下\noption java_outer_classname=\"MyDataInfo\"; // 外部类名, 文件名\n\n\n/*\n1.protobuf 可以使用message 管理其他的message。最终决定使用哪一个message作为传输对象\n2.假设你某个项目需要传输20个对象，你不可能新建20个proto文件吧。此时你就可以\n在一个文件里定义20个message，最后再用一个总的message（比方说这里的MyMessage）\n来决定在实际传输时真正需要传输哪一个对象\n3.因为你实际传输的时候大部分情况传输的都是一个对象，所以下面用oneof进行了限制\n4.是否可以传多个对象呢？我个人认为是可以的，比如可以通过map(目前我也不太了解proto的语法)\n */\nmessage MyMessage {\n\n    //定义一个枚举类型,DataType如果是0则表示一个Student对象实例，DataType这个名称自定义\n    enum DataType {\n        StudentType = 0; //在proto3 要求enum的编号从0开始\n        WorkerType = 1;\n    }\n\n    //用data_type 来标识传的是哪一个枚举类型，这里才真正开始定义MyMessage的数据类型\n    DataType data_type = 1;  //所有后面的数字都只是编号而已\n\n    /*\n    1.oneof关键字 表示每次枚举类型进行传输时，限制最多只能传输一个对象。\n    dataBody名称也是自定义的\n    2.为什么这里的序号是2呢？因为上面DataType data_type = 1  占了第一个序号了\n    3.MyMessage里真正出现的类型只有两个\n      ①DataType类型\n      ②Student类型或者Worker类型（这两个在真正传输的时候只会有一个出现）\n    */\n    oneof dataBody {\n        Student student = 2;  //注意这后面的数字也都只是编号而已\n        Worker worker = 3;\n    }\n\n\n}\n\n\nmessage Student {\n    int32 id = 1;//Student类的属性\n    string name = 2; //\n}\nmessage Worker {\n    string name=1;\n    int32 age=2;\n}\n```\n\nNettyServer\n\n```java\npackage com.atguigu.netty.codec2;\n\nimport com.atguigu.netty.codec.StudentPOJO;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufDecoder;\n\npublic class NettyServer {\n    public static void main(String[] args) throws Exception {\n\n        \n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup(); //8\n\n\n\n        try {\n            //创建服务器端的启动对象，配置参数\n            ServerBootstrap bootstrap = new ServerBootstrap();\n\n            //使用链式编程来进行设置\n            bootstrap.group(bossGroup, workerGroup) //设置两个线程组\n                    .channel(NioServerSocketChannel.class) //使用NioSocketChannel 作为服务器的通道实现\n                    .option(ChannelOption.SO_BACKLOG, 128) // 设置线程队列得到连接个数\n                    .childOption(ChannelOption.SO_KEEPALIVE, true) //设置保持活动连接状态\n//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup\n                    .childHandler(new ChannelInitializer<SocketChannel>() {//创建一个通道初始化对象(匿名对象)\n                        //给pipeline 设置处理器\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n\n\n                            ChannelPipeline pipeline = ch.pipeline();\n                            //在pipeline加入ProtoBufDecoder\n                            //指定对哪种对象进行解码\n                            pipeline.addLast(\"decoder\", new ProtobufDecoder(MyDataInfo.MyMessage.getDefaultInstance()));\n                            pipeline.addLast(new NettyServerHandler());\n                        }\n                    }); // 给我们的workerGroup 的 EventLoop 对应的管道设置处理器\n\n            System.out.println(\".....服务器 is ready...\");\n\n            //绑定一个端口并且同步, 生成了一个 ChannelFuture 对象\n            //启动服务器(并绑定端口)\n            ChannelFuture cf = bootstrap.bind(6668).sync();\n\n            //给cf 注册监听器，监控我们关心的事件\n\n            cf.addListener(new ChannelFutureListener() {\n                @Override\n                public void operationComplete(ChannelFuture future) throws Exception {\n                    if (cf.isSuccess()) {\n                        System.out.println(\"监听端口 6668 成功\");\n                    } else {\n                        System.out.println(\"监听端口 6668 失败\");\n                    }\n                }\n            });\n\n\n            //对关闭通道进行监听\n            cf.channel().closeFuture().sync();\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n\n    }\n\n}\n```\n\n### NettyServerHandler\n\n```java\npackage com.atguigu.netty.codec2;\n\nimport com.atguigu.netty.codec.StudentPOJO;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.util.CharsetUtil;\n\n\n//public class NettyServerHandler extends ChannelInboundHandlerAdapter {\npublic class NettyServerHandler extends SimpleChannelInboundHandler<MyDataInfo.MyMessage> {\n\n\n    //读取数据实际(这里我们可以读取客户端发送的消息)\n    /*\n    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址\n    2. Object msg: 就是客户端发送的数据 默认Object\n     */\n    @Override\n    public void channelRead0(ChannelHandlerContext ctx, MyDataInfo.MyMessage msg) throws Exception {\n\n        //根据dataType 来显示不同的信息\n\n        MyDataInfo.MyMessage.DataType dataType = msg.getDataType();\n        if(dataType == MyDataInfo.MyMessage.DataType.StudentType) {\n\n            MyDataInfo.Student student = msg.getStudent();\n            System.out.println(\"学生id=\" + student.getId() + \" 学生名字=\" + student.getName());\n\n        } else if(dataType == MyDataInfo.MyMessage.DataType.WorkerType) {\n            MyDataInfo.Worker worker = msg.getWorker();\n            System.out.println(\"工人的名字=\" + worker.getName() + \" 年龄=\" + worker.getAge());\n        } else {\n            System.out.println(\"传输的类型不正确\");\n        }\n\n\n    }\n\n\n    //数据读取完毕\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n\n        //writeAndFlush 是 write + flush\n        //将数据写入到缓存，并刷新\n        //一般讲，我们对这个发送的数据进行编码\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵1\", CharsetUtil.UTF_8));\n    }\n\n    //处理异常, 一般是需要关闭通道\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        ctx.close();\n    }\n}\n```\n\nNettyClient\n\n```java\npackage com.atguigu.netty.codec2;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufEncoder;\n\npublic class NettyClient {\n    public static void main(String[] args) throws Exception {\n\n        //客户端需要一个事件循环组\n        EventLoopGroup group = new NioEventLoopGroup();\n\n\n        try {\n            //创建客户端启动对象\n            //注意客户端使用的不是 ServerBootstrap 而是 Bootstrap\n            Bootstrap bootstrap = new Bootstrap();\n\n            //设置相关参数\n            bootstrap.group(group) //设置线程组\n                    .channel(NioSocketChannel.class) // 设置客户端通道的实现类(反射)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline pipeline = ch.pipeline();\n                            //在pipeline中加入 ProtoBufEncoder\n                            pipeline.addLast(\"encoder\", new ProtobufEncoder());\n                            pipeline.addLast(new NettyClientHandler()); //加入自己的处理器\n                        }\n                    });\n\n            System.out.println(\"客户端 ok..\");\n\n            //启动客户端去连接服务器端\n            //关于 ChannelFuture 要分析，涉及到netty的异步模型\n            ChannelFuture channelFuture = bootstrap.connect(\"127.0.0.1\", 6668).sync();\n            //给关闭通道进行监听\n            channelFuture.channel().closeFuture().sync();\n        }finally {\n\n            group.shutdownGracefully();\n\n        }\n    }\n}\n```\n\nNettyClientHandler\n\n```java\npackage com.atguigu.netty.codec2;\n\nimport com.atguigu.netty.codec.StudentPOJO;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.util.CharsetUtil;\n\nimport java.util.Random;\n\npublic class NettyClientHandler extends ChannelInboundHandlerAdapter {\n\n    //当通道就绪就会触发该方法\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n\n        //随机的发送Student 或者 Workder 对象\n        int random = new Random().nextInt(3);\n        MyDataInfo.MyMessage myMessage = null;\n\n        if(0 == random) { //发送Student 对象\n\n            myMessage = MyDataInfo.MyMessage.newBuilder().setDataType(MyDataInfo.MyMessage.DataType.StudentType).setStudent(MyDataInfo.Student.newBuilder().setId(5).setName(\"玉麒麟 卢俊义\").build()).build();\n        } else { // 发送一个Worker 对象\n\n            myMessage = MyDataInfo.MyMessage.newBuilder().setDataType(MyDataInfo.MyMessage.DataType.WorkerType).setWorker(MyDataInfo.Worker.newBuilder().setAge(20).setName(\"老李\").build()).build();\n        }\n\n        ctx.writeAndFlush(myMessage);\n    }\n\n    //当通道有读取事件时，会触发\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n        System.out.println(\"服务器回复的消息:\" + buf.toString(CharsetUtil.UTF_8));\n        System.out.println(\"服务器的地址： \"+ ctx.channel().remoteAddress());\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```","source":"_posts/从B站学习的Netty15.md","raw":"---\ntitle: 从B站学习的Netty15\nabbrlink: 551514310\ndate: 2021-12-03 08:49:40\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n# Google Protobuf\n\n## 编码和解码的基本介绍\n\n1. 编写网络应用程序时，因为数据在网络中传输的都是二进制字节码数据，在发送数据时就需要编码，接收数据时就需要解码[示意图]\n2. `codec`（编解码器）的组成部分有两个：`decoder`（解码器）和 `encoder`（编码器）。`encoder` 负责把业务数据转换成字节码数据，`decoder` 负责把字节码数据转换成业务数据\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0001.png?x-oss-process=style/qingyun)\n\n## Netty 本身的编码解码的机制和问题分析\n\n1. `Netty` 自身提供了一些 `codec`(编解码器)\n\n2. `Netty `提供的编码器 \n\n   - `StringEncoder`：对字符串数据进行编码。\n   - `ObjectEncoder`：对Java对象进行编码。\n\n3. `Netty`\n\n   提供的解码器 \n\n   - `StringDecoder`,对字符串数据进行解码 \n   - `ObjectDecoder`，对 Java 对象进行解码\n\n4. `Netty `本身自带的 `ObjectDecoder `和 `ObjectEncoder `可以用来实现 `POJO`对象或各种业务对象的编码和解码，底层使用的仍是Java序列化技术,而Java序列化技术本身效率就不高，存在如下问题\n\n   - 无法跨语言\n   - 序列化后的体积太大，是二进制编码的5倍多。\n   - 序列化性能太低\n\n5. 引出新的解决方案[`Google` 的 `Protobuf`]\n\n## Protobuf\n\n1. `Protobuf` 基本介绍和使用示意图\n2. `Protobuf` 是 `Google` 发布的开源项目，全称 `Google Protocol Buffers`，是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 `RPC` [远程过程调用 `remote procedure call` ]数据交换格式。目前很多公司 从`http + json 转向tcp + protobuf`，效率会更高。\n3. 参考文档：https://developers.google.com/protocol-buffers/docs/proto 语言指南\n4. `Protobuf` 是以 `message` 的方式来管理数据的.\n5. 支持跨平台、跨语言，即[客户端和服务器端可以是不同的语言编写的]（支持目前绝大多数语言，例如 `C++`、`C#`、`Java`、`python` 等）\n6. 高性能，高可靠性\n7. 使用 `protobuf` 编译器能自动生成代码，`Protobuf` 是将类的定义使用 `.proto` 文件进行描述。说明，在 `idea` 中编写 `.proto` 文件时，会自动提示是否下载 `.ptoto` 编写插件.可以让语法高亮。\n8. 然后通过 `protoc.exe` 编译器根据 `.proto` 自动生成 `.java` 文件\n9. `protobuf` 使用示意图\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0002.png?x-oss-process=style/qingyun)\n\n## Protobuf 快速入门实例\n\n编写程序，使用 `Protobuf` 完成如下功能\n\n1. 客户端可以发送一个 `StudentPoJo` 对象到服务器(通过 `Protobuf` 编码)\n2. 服务端能接收 `StudentPoJo` 对象，并显示信息(通过 `Protobuf` 解码)\n\n```xml\n<dependency>\n       <groupId>com.google.protobuf</groupId>\n       <artifactId>protobuf-java</artifactId>\n       <version>3.6.1</version>\n   </dependency>\n```\n\nStudent.proto\n\n```protobuf\nsyntax = \"proto3\"; //版本\noption java_outer_classname = \"StudentPOJO\";//生成的外部类名，同时也是文件名\n//protobuf 使用message 管理数据\nmessage Student { //会在 StudentPOJO 外部类生成一个内部类 Student， 他是真正发送的POJO对象\n    int32 id = 1; // Student 类中有 一个属性 名字为 id 类型为int32(protobuf类型) 1表示属性序号，不是值\n    string name = 2;\n}\n```\n\n编译\nprotoc.exe –java_out=.Student.proto\n将生成的 StudentPOJO 放入到项目使用\n\n![image-20211202132304804](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211202132306738.png?x-oss-process=style/qingyun)\n\n```java\npackage com.atguigu.netty.codec;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufDecoder;\n\npublic class NettyServer {\n    public static void main(String[] args) throws Exception {\n\n\n        //创建BossGroup 和 WorkerGroup\n        //说明\n        //1. 创建两个线程组 bossGroup 和 workerGroup\n        //2. bossGroup 只是处理连接请求 , 真正的和客户端业务处理，会交给 workerGroup完成\n        //3. 两个都是无限循环\n        //4. bossGroup 和 workerGroup 含有的子线程(NioEventLoop)的个数\n        //   默认实际 cpu核数 * 2\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup(); //8\n\n\n\n        try {\n            //创建服务器端的启动对象，配置参数\n            ServerBootstrap bootstrap = new ServerBootstrap();\n\n            //使用链式编程来进行设置\n            bootstrap.group(bossGroup, workerGroup) //设置两个线程组\n                    .channel(NioServerSocketChannel.class) //使用NioSocketChannel 作为服务器的通道实现\n                    .option(ChannelOption.SO_BACKLOG, 128) // 设置线程队列得到连接个数\n                    .childOption(ChannelOption.SO_KEEPALIVE, true) //设置保持活动连接状态\n//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup\n                    .childHandler(new ChannelInitializer<SocketChannel>() {//创建一个通道初始化对象(匿名对象)\n                        //给pipeline 设置处理器\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n\n\n                            ChannelPipeline pipeline = ch.pipeline();\n                            //在pipeline加入ProtoBufDecoder\n                            //指定对哪种对象进行解码\n                            pipeline.addLast(\"decoder\", new ProtobufDecoder(StudentPOJO.Student.getDefaultInstance()));\n                            pipeline.addLast(new NettyServerHandler());\n                        }\n                    }); // 给我们的workerGroup 的 EventLoop 对应的管道设置处理器\n\n            System.out.println(\".....服务器 is ready...\");\n\n            //绑定一个端口并且同步, 生成了一个 ChannelFuture 对象\n            //启动服务器(并绑定端口)\n            ChannelFuture cf = bootstrap.bind(6668).sync();\n\n            //给cf 注册监听器，监控我们关心的事件\n\n            cf.addListener(new ChannelFutureListener() {\n                @Override\n                public void operationComplete(ChannelFuture future) throws Exception {\n                    if (cf.isSuccess()) {\n                        System.out.println(\"监听端口 6668 成功\");\n                    } else {\n                        System.out.println(\"监听端口 6668 失败\");\n                    }\n                }\n            });\n\n\n            //对关闭通道进行监听\n            cf.channel().closeFuture().sync();\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n\n    }\n\n}\n```\n\nNettyServerHandler\n\n```java\npackage com.atguigu.netty.codec;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.*;\nimport io.netty.util.CharsetUtil;\n\n/*\n说明\n1. 我们自定义一个Handler 需要继续netty 规定好的某个HandlerAdapter(规范)\n2. 这时我们自定义一个Handler , 才能称为一个handler\n */\n//public class NettyServerHandler extends ChannelInboundHandlerAdapter {\npublic class NettyServerHandler extends SimpleChannelInboundHandler<StudentPOJO.Student> {\n\n\n    //读取数据实际(这里我们可以读取客户端发送的消息)\n    /*\n    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址\n    2. Object msg: 就是客户端发送的数据 默认Object\n     */\n    @Override\n    public void channelRead0(ChannelHandlerContext ctx, StudentPOJO.Student msg) throws Exception {\n\n        //读取从客户端发送的StudentPojo.Student\n\n\n        System.out.println(\"客户端发送的数据 id=\" + msg.getId() + \" 名字=\" + msg.getName());\n    }\n\n    //数据读取完毕\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n\n        //writeAndFlush 是 write + flush\n        //将数据写入到缓存，并刷新\n        //一般讲，我们对这个发送的数据进行编码\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵1\", CharsetUtil.UTF_8));\n    }\n\n    //处理异常, 一般是需要关闭通道\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        ctx.close();\n    }\n}\n```\n\nNettyClient\n\n```java\npackage com.atguigu.netty.codec;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufEncoder;\n\npublic class NettyClient {\n    public static void main(String[] args) throws Exception {\n\n        //客户端需要一个事件循环组\n        EventLoopGroup group = new NioEventLoopGroup();\n\n\n        try {\n            //创建客户端启动对象\n            //注意客户端使用的不是 ServerBootstrap 而是 Bootstrap\n            Bootstrap bootstrap = new Bootstrap();\n\n            //设置相关参数\n            bootstrap.group(group) //设置线程组\n                    .channel(NioSocketChannel.class) // 设置客户端通道的实现类(反射)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline pipeline = ch.pipeline();\n                            //在pipeline中加入 ProtoBufEncoder\n                            pipeline.addLast(\"encoder\", new ProtobufEncoder());\n                            pipeline.addLast(new NettyClientHandler()); //加入自己的处理器\n                        }\n                    });\n\n            System.out.println(\"客户端 ok..\");\n\n            //启动客户端去连接服务器端\n            //关于 ChannelFuture 要分析，涉及到netty的异步模型\n            ChannelFuture channelFuture = bootstrap.connect(\"127.0.0.1\", 6668).sync();\n            //给关闭通道进行监听\n            channelFuture.channel().closeFuture().sync();\n        }finally {\n\n            group.shutdownGracefully();\n\n        }\n    }\n}\n```\n\nNettyClientHandler\n\n```java\npackage com.atguigu.netty.codec;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.util.CharsetUtil;\n\npublic class NettyClientHandler extends ChannelInboundHandlerAdapter {\n\n    //当通道就绪就会触发该方法\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n\n        //发生一个Student 对象到服务器\n\n        StudentPOJO.Student student = StudentPOJO.Student.newBuilder().setId(4).setName(\"智多星 吴用\").build();\n        //Teacher , Member ,Message\n        ctx.writeAndFlush(student);\n    }\n\n    //当通道有读取事件时，会触发\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n        System.out.println(\"服务器回复的消息:\" + buf.toString(CharsetUtil.UTF_8));\n        System.out.println(\"服务器的地址： \"+ ctx.channel().remoteAddress());\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n\n## Protobuf 快速入门实例 2\n\n1. 编写程序，使用 `Protobuf` 完成如下功能\n2. 客户端可以随机发送 `StudentPoJo` / `WorkerPoJo` 对象到服务器(通过 `Protobuf` 编码)\n3. 服务端能接收 `StudentPoJo` / `WorkerPoJo` 对象(需要判断是哪种类型)，并显示信息(通过 `Protobuf` 解码)\n\n```protobuf\nsyntax = \"proto3\";\noption optimize_for = SPEED; // 加快解析\noption java_package=\"com.atguigu.netty.codec2\";   //指定生成到哪个包下\noption java_outer_classname=\"MyDataInfo\"; // 外部类名, 文件名\n\n\n/*\n1.protobuf 可以使用message 管理其他的message。最终决定使用哪一个message作为传输对象\n2.假设你某个项目需要传输20个对象，你不可能新建20个proto文件吧。此时你就可以\n在一个文件里定义20个message，最后再用一个总的message（比方说这里的MyMessage）\n来决定在实际传输时真正需要传输哪一个对象\n3.因为你实际传输的时候大部分情况传输的都是一个对象，所以下面用oneof进行了限制\n4.是否可以传多个对象呢？我个人认为是可以的，比如可以通过map(目前我也不太了解proto的语法)\n */\nmessage MyMessage {\n\n    //定义一个枚举类型,DataType如果是0则表示一个Student对象实例，DataType这个名称自定义\n    enum DataType {\n        StudentType = 0; //在proto3 要求enum的编号从0开始\n        WorkerType = 1;\n    }\n\n    //用data_type 来标识传的是哪一个枚举类型，这里才真正开始定义MyMessage的数据类型\n    DataType data_type = 1;  //所有后面的数字都只是编号而已\n\n    /*\n    1.oneof关键字 表示每次枚举类型进行传输时，限制最多只能传输一个对象。\n    dataBody名称也是自定义的\n    2.为什么这里的序号是2呢？因为上面DataType data_type = 1  占了第一个序号了\n    3.MyMessage里真正出现的类型只有两个\n      ①DataType类型\n      ②Student类型或者Worker类型（这两个在真正传输的时候只会有一个出现）\n    */\n    oneof dataBody {\n        Student student = 2;  //注意这后面的数字也都只是编号而已\n        Worker worker = 3;\n    }\n\n\n}\n\n\nmessage Student {\n    int32 id = 1;//Student类的属性\n    string name = 2; //\n}\nmessage Worker {\n    string name=1;\n    int32 age=2;\n}\n```\n\nNettyServer\n\n```java\npackage com.atguigu.netty.codec2;\n\nimport com.atguigu.netty.codec.StudentPOJO;\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.*;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufDecoder;\n\npublic class NettyServer {\n    public static void main(String[] args) throws Exception {\n\n        \n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup(); //8\n\n\n\n        try {\n            //创建服务器端的启动对象，配置参数\n            ServerBootstrap bootstrap = new ServerBootstrap();\n\n            //使用链式编程来进行设置\n            bootstrap.group(bossGroup, workerGroup) //设置两个线程组\n                    .channel(NioServerSocketChannel.class) //使用NioSocketChannel 作为服务器的通道实现\n                    .option(ChannelOption.SO_BACKLOG, 128) // 设置线程队列得到连接个数\n                    .childOption(ChannelOption.SO_KEEPALIVE, true) //设置保持活动连接状态\n//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup\n                    .childHandler(new ChannelInitializer<SocketChannel>() {//创建一个通道初始化对象(匿名对象)\n                        //给pipeline 设置处理器\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n\n\n                            ChannelPipeline pipeline = ch.pipeline();\n                            //在pipeline加入ProtoBufDecoder\n                            //指定对哪种对象进行解码\n                            pipeline.addLast(\"decoder\", new ProtobufDecoder(MyDataInfo.MyMessage.getDefaultInstance()));\n                            pipeline.addLast(new NettyServerHandler());\n                        }\n                    }); // 给我们的workerGroup 的 EventLoop 对应的管道设置处理器\n\n            System.out.println(\".....服务器 is ready...\");\n\n            //绑定一个端口并且同步, 生成了一个 ChannelFuture 对象\n            //启动服务器(并绑定端口)\n            ChannelFuture cf = bootstrap.bind(6668).sync();\n\n            //给cf 注册监听器，监控我们关心的事件\n\n            cf.addListener(new ChannelFutureListener() {\n                @Override\n                public void operationComplete(ChannelFuture future) throws Exception {\n                    if (cf.isSuccess()) {\n                        System.out.println(\"监听端口 6668 成功\");\n                    } else {\n                        System.out.println(\"监听端口 6668 失败\");\n                    }\n                }\n            });\n\n\n            //对关闭通道进行监听\n            cf.channel().closeFuture().sync();\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n\n    }\n\n}\n```\n\n### NettyServerHandler\n\n```java\npackage com.atguigu.netty.codec2;\n\nimport com.atguigu.netty.codec.StudentPOJO;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.util.CharsetUtil;\n\n\n//public class NettyServerHandler extends ChannelInboundHandlerAdapter {\npublic class NettyServerHandler extends SimpleChannelInboundHandler<MyDataInfo.MyMessage> {\n\n\n    //读取数据实际(这里我们可以读取客户端发送的消息)\n    /*\n    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址\n    2. Object msg: 就是客户端发送的数据 默认Object\n     */\n    @Override\n    public void channelRead0(ChannelHandlerContext ctx, MyDataInfo.MyMessage msg) throws Exception {\n\n        //根据dataType 来显示不同的信息\n\n        MyDataInfo.MyMessage.DataType dataType = msg.getDataType();\n        if(dataType == MyDataInfo.MyMessage.DataType.StudentType) {\n\n            MyDataInfo.Student student = msg.getStudent();\n            System.out.println(\"学生id=\" + student.getId() + \" 学生名字=\" + student.getName());\n\n        } else if(dataType == MyDataInfo.MyMessage.DataType.WorkerType) {\n            MyDataInfo.Worker worker = msg.getWorker();\n            System.out.println(\"工人的名字=\" + worker.getName() + \" 年龄=\" + worker.getAge());\n        } else {\n            System.out.println(\"传输的类型不正确\");\n        }\n\n\n    }\n\n\n    //数据读取完毕\n    @Override\n    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n\n        //writeAndFlush 是 write + flush\n        //将数据写入到缓存，并刷新\n        //一般讲，我们对这个发送的数据进行编码\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"hello, 客户端~(>^ω^<)喵1\", CharsetUtil.UTF_8));\n    }\n\n    //处理异常, 一般是需要关闭通道\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        ctx.close();\n    }\n}\n```\n\nNettyClient\n\n```java\npackage com.atguigu.netty.codec2;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.SocketChannel;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport io.netty.handler.codec.protobuf.ProtobufEncoder;\n\npublic class NettyClient {\n    public static void main(String[] args) throws Exception {\n\n        //客户端需要一个事件循环组\n        EventLoopGroup group = new NioEventLoopGroup();\n\n\n        try {\n            //创建客户端启动对象\n            //注意客户端使用的不是 ServerBootstrap 而是 Bootstrap\n            Bootstrap bootstrap = new Bootstrap();\n\n            //设置相关参数\n            bootstrap.group(group) //设置线程组\n                    .channel(NioSocketChannel.class) // 设置客户端通道的实现类(反射)\n                    .handler(new ChannelInitializer<SocketChannel>() {\n                        @Override\n                        protected void initChannel(SocketChannel ch) throws Exception {\n                            ChannelPipeline pipeline = ch.pipeline();\n                            //在pipeline中加入 ProtoBufEncoder\n                            pipeline.addLast(\"encoder\", new ProtobufEncoder());\n                            pipeline.addLast(new NettyClientHandler()); //加入自己的处理器\n                        }\n                    });\n\n            System.out.println(\"客户端 ok..\");\n\n            //启动客户端去连接服务器端\n            //关于 ChannelFuture 要分析，涉及到netty的异步模型\n            ChannelFuture channelFuture = bootstrap.connect(\"127.0.0.1\", 6668).sync();\n            //给关闭通道进行监听\n            channelFuture.channel().closeFuture().sync();\n        }finally {\n\n            group.shutdownGracefully();\n\n        }\n    }\n}\n```\n\nNettyClientHandler\n\n```java\npackage com.atguigu.netty.codec2;\n\nimport com.atguigu.netty.codec.StudentPOJO;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.ChannelInboundHandlerAdapter;\nimport io.netty.util.CharsetUtil;\n\nimport java.util.Random;\n\npublic class NettyClientHandler extends ChannelInboundHandlerAdapter {\n\n    //当通道就绪就会触发该方法\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n\n        //随机的发送Student 或者 Workder 对象\n        int random = new Random().nextInt(3);\n        MyDataInfo.MyMessage myMessage = null;\n\n        if(0 == random) { //发送Student 对象\n\n            myMessage = MyDataInfo.MyMessage.newBuilder().setDataType(MyDataInfo.MyMessage.DataType.StudentType).setStudent(MyDataInfo.Student.newBuilder().setId(5).setName(\"玉麒麟 卢俊义\").build()).build();\n        } else { // 发送一个Worker 对象\n\n            myMessage = MyDataInfo.MyMessage.newBuilder().setDataType(MyDataInfo.MyMessage.DataType.WorkerType).setWorker(MyDataInfo.Worker.newBuilder().setAge(20).setName(\"老李\").build()).build();\n        }\n\n        ctx.writeAndFlush(myMessage);\n    }\n\n    //当通道有读取事件时，会触发\n    @Override\n    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n\n        ByteBuf buf = (ByteBuf) msg;\n        System.out.println(\"服务器回复的消息:\" + buf.toString(CharsetUtil.UTF_8));\n        System.out.println(\"服务器的地址： \"+ ctx.channel().remoteAddress());\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```","slug":"从B站学习的Netty15","published":1,"updated":"2021-12-03T00:50:14.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2tl0079o4vbd2408h2e","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h1>Google Protobuf</h1>\n<h2 id=\"编码和解码的基本介绍\">编码和解码的基本介绍</h2>\n<ol>\n<li>编写网络应用程序时，因为数据在网络中传输的都是二进制字节码数据，在发送数据时就需要编码，接收数据时就需要解码[示意图]</li>\n<li><code>codec</code>（编解码器）的组成部分有两个：<code>decoder</code>（解码器）和 <code>encoder</code>（编码器）。<code>encoder</code> 负责把业务数据转换成字节码数据，<code>decoder</code> 负责把字节码数据转换成业务数据</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0001.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h2 id=\"Netty-本身的编码解码的机制和问题分析\">Netty 本身的编码解码的机制和问题分析</h2>\n<ol>\n<li>\n<p><code>Netty</code> 自身提供了一些 <code>codec</code>(编解码器)</p>\n</li>\n<li>\n<p><code>Netty </code>提供的编码器</p>\n<ul>\n<li><code>StringEncoder</code>：对字符串数据进行编码。</li>\n<li><code>ObjectEncoder</code>：对Java对象进行编码。</li>\n</ul>\n</li>\n<li>\n<p><code>Netty</code></p>\n<p>提供的解码器</p>\n<ul>\n<li><code>StringDecoder</code>,对字符串数据进行解码</li>\n<li><code>ObjectDecoder</code>，对 Java 对象进行解码</li>\n</ul>\n</li>\n<li>\n<p><code>Netty </code>本身自带的 <code>ObjectDecoder </code>和 <code>ObjectEncoder </code>可以用来实现 <code>POJO</code>对象或各种业务对象的编码和解码，底层使用的仍是Java序列化技术,而Java序列化技术本身效率就不高，存在如下问题</p>\n<ul>\n<li>无法跨语言</li>\n<li>序列化后的体积太大，是二进制编码的5倍多。</li>\n<li>序列化性能太低</li>\n</ul>\n</li>\n<li>\n<p>引出新的解决方案[<code>Google</code> 的 <code>Protobuf</code>]</p>\n</li>\n</ol>\n<h2 id=\"Protobuf\">Protobuf</h2>\n<ol>\n<li><code>Protobuf</code> 基本介绍和使用示意图</li>\n<li><code>Protobuf</code> 是 <code>Google</code> 发布的开源项目，全称 <code>Google Protocol Buffers</code>，是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 <code>RPC</code> [远程过程调用 <code>remote procedure call</code> ]数据交换格式。目前很多公司 从<code>http + json 转向tcp + protobuf</code>，效率会更高。</li>\n<li>参考文档：<a href=\"https://developers.google.com/protocol-buffers/docs/proto\">https://developers.google.com/protocol-buffers/docs/proto</a> 语言指南</li>\n<li><code>Protobuf</code> 是以 <code>message</code> 的方式来管理数据的.</li>\n<li>支持跨平台、跨语言，即[客户端和服务器端可以是不同的语言编写的]（支持目前绝大多数语言，例如 <code>C++</code>、<code>C#</code>、<code>Java</code>、<code>python</code> 等）</li>\n<li>高性能，高可靠性</li>\n<li>使用 <code>protobuf</code> 编译器能自动生成代码，<code>Protobuf</code> 是将类的定义使用 <code>.proto</code> 文件进行描述。说明，在 <code>idea</code> 中编写 <code>.proto</code> 文件时，会自动提示是否下载 <code>.ptoto</code> 编写插件.可以让语法高亮。</li>\n<li>然后通过 <code>protoc.exe</code> 编译器根据 <code>.proto</code> 自动生成 <code>.java</code> 文件</li>\n<li><code>protobuf</code> 使用示意图</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0002.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h2 id=\"Protobuf-快速入门实例\">Protobuf 快速入门实例</h2>\n<p>编写程序，使用 <code>Protobuf</code> 完成如下功能</p>\n<ol>\n<li>客户端可以发送一个 <code>StudentPoJo</code> 对象到服务器(通过 <code>Protobuf</code> 编码)</li>\n<li>服务端能接收 <code>StudentPoJo</code> 对象，并显示信息(通过 <code>Protobuf</code> 解码)</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.protobuf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>protobuf-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Student.proto</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>; <span class=\"comment\">//版本</span></span><br><span class=\"line\"><span class=\"keyword\">option</span> java_outer_classname = <span class=\"string\">&quot;StudentPOJO&quot;</span>;<span class=\"comment\">//生成的外部类名，同时也是文件名</span></span><br><span class=\"line\"><span class=\"comment\">//protobuf 使用message 管理数据</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">Student</span> </span>&#123; <span class=\"comment\">//会在 StudentPOJO 外部类生成一个内部类 Student， 他是真正发送的POJO对象</span></span><br><span class=\"line\">    <span class=\"built_in\">int32</span> id = <span class=\"number\">1</span>; <span class=\"comment\">// Student 类中有 一个属性 名字为 id 类型为int32(protobuf类型) 1表示属性序号，不是值</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> name = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译<br>\nprotoc.exe –java_out=.Student.proto<br>\n将生成的 StudentPOJO 放入到项目使用</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211202132306738.png?x-oss-process=style/qingyun\" alt=\"image-20211202132304804\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.protobuf.ProtobufDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建BossGroup 和 WorkerGroup</span></span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. 创建两个线程组 bossGroup 和 workerGroup</span></span><br><span class=\"line\">        <span class=\"comment\">//2. bossGroup 只是处理连接请求 , 真正的和客户端业务处理，会交给 workerGroup完成</span></span><br><span class=\"line\">        <span class=\"comment\">//3. 两个都是无限循环</span></span><br><span class=\"line\">        <span class=\"comment\">//4. bossGroup 和 workerGroup 含有的子线程(NioEventLoop)的个数</span></span><br><span class=\"line\">        <span class=\"comment\">//   默认实际 cpu核数 * 2</span></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(); <span class=\"comment\">//8</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建服务器端的启动对象，配置参数</span></span><br><span class=\"line\">            ServerBootstrap bootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//使用链式编程来进行设置</span></span><br><span class=\"line\">            bootstrap.group(bossGroup, workerGroup) <span class=\"comment\">//设置两个线程组</span></span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class) <span class=\"comment\">//使用NioSocketChannel 作为服务器的通道实现</span></span><br><span class=\"line\">                    .option(ChannelOption.SO_BACKLOG, <span class=\"number\">128</span>) <span class=\"comment\">// 设置线程队列得到连接个数</span></span><br><span class=\"line\">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class=\"keyword\">true</span>) <span class=\"comment\">//设置保持活动连接状态</span></span><br><span class=\"line\"><span class=\"comment\">//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup</span></span><br><span class=\"line\">                    .childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<span class=\"comment\">//创建一个通道初始化对象(匿名对象)</span></span><br><span class=\"line\">                        <span class=\"comment\">//给pipeline 设置处理器</span></span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">                            <span class=\"comment\">//在pipeline加入ProtoBufDecoder</span></span><br><span class=\"line\">                            <span class=\"comment\">//指定对哪种对象进行解码</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"string\">&quot;decoder&quot;</span>, <span class=\"keyword\">new</span> ProtobufDecoder(StudentPOJO.Student.getDefaultInstance()));</span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> NettyServerHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;); <span class=\"comment\">// 给我们的workerGroup 的 EventLoop 对应的管道设置处理器</span></span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;.....服务器 is ready...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//绑定一个端口并且同步, 生成了一个 ChannelFuture 对象</span></span><br><span class=\"line\">            <span class=\"comment\">//启动服务器(并绑定端口)</span></span><br><span class=\"line\">            ChannelFuture cf = bootstrap.bind(<span class=\"number\">6668</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//给cf 注册监听器，监控我们关心的事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">            cf.addListener(<span class=\"keyword\">new</span> ChannelFutureListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operationComplete</span><span class=\"params\">(ChannelFuture future)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cf.isSuccess()) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;监听端口 6668 成功&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;监听端口 6668 失败&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//对关闭通道进行监听</span></span><br><span class=\"line\">            cf.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NettyServerHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">说明</span></span><br><span class=\"line\"><span class=\"comment\">1. 我们自定义一个Handler 需要继续netty 规定好的某个HandlerAdapter(规范)</span></span><br><span class=\"line\"><span class=\"comment\">2. 这时我们自定义一个Handler , 才能称为一个handler</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//public class NettyServerHandler extends ChannelInboundHandlerAdapter &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">StudentPOJO</span>.<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取数据实际(这里我们可以读取客户端发送的消息)</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址</span></span><br><span class=\"line\"><span class=\"comment\">    2. Object msg: 就是客户端发送的数据 默认Object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, StudentPOJO.Student msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//读取从客户端发送的StudentPojo.Student</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端发送的数据 id=&quot;</span> + msg.getId() + <span class=\"string\">&quot; 名字=&quot;</span> + msg.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数据读取完毕</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelReadComplete</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//writeAndFlush 是 write + flush</span></span><br><span class=\"line\">        <span class=\"comment\">//将数据写入到缓存，并刷新</span></span><br><span class=\"line\">        <span class=\"comment\">//一般讲，我们对这个发送的数据进行编码</span></span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//处理异常, 一般是需要关闭通道</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NettyClient</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.protobuf.ProtobufEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//客户端需要一个事件循环组</span></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建客户端启动对象</span></span><br><span class=\"line\">            <span class=\"comment\">//注意客户端使用的不是 ServerBootstrap 而是 Bootstrap</span></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置相关参数</span></span><br><span class=\"line\">            bootstrap.group(group) <span class=\"comment\">//设置线程组</span></span><br><span class=\"line\">                    .channel(NioSocketChannel.class) <span class=\"comment\">// 设置客户端通道的实现类(反射)</span></span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">                            <span class=\"comment\">//在pipeline中加入 ProtoBufEncoder</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"string\">&quot;encoder&quot;</span>, <span class=\"keyword\">new</span> ProtobufEncoder());</span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> NettyClientHandler()); <span class=\"comment\">//加入自己的处理器</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;客户端 ok..&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动客户端去连接服务器端</span></span><br><span class=\"line\">            <span class=\"comment\">//关于 ChannelFuture 要分析，涉及到netty的异步模型</span></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6668</span>).sync();</span><br><span class=\"line\">            <span class=\"comment\">//给关闭通道进行监听</span></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NettyClientHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当通道就绪就会触发该方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//发生一个Student 对象到服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        StudentPOJO.Student student = StudentPOJO.Student.newBuilder().setId(<span class=\"number\">4</span>).setName(<span class=\"string\">&quot;智多星 吴用&quot;</span>).build();</span><br><span class=\"line\">        <span class=\"comment\">//Teacher , Member ,Message</span></span><br><span class=\"line\">        ctx.writeAndFlush(student);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当通道有读取事件时，会触发</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteBuf buf = (ByteBuf) msg;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器回复的消息:&quot;</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器的地址： &quot;</span>+ ctx.channel().remoteAddress());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Protobuf-快速入门实例-2\">Protobuf 快速入门实例 2</h2>\n<ol>\n<li>编写程序，使用 <code>Protobuf</code> 完成如下功能</li>\n<li>客户端可以随机发送 <code>StudentPoJo</code> / <code>WorkerPoJo</code> 对象到服务器(通过 <code>Protobuf</code> 编码)</li>\n<li>服务端能接收 <code>StudentPoJo</code> / <code>WorkerPoJo</code> 对象(需要判断是哪种类型)，并显示信息(通过 <code>Protobuf</code> 解码)</li>\n</ol>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">option</span> optimize_for = SPEED; <span class=\"comment\">// 加快解析</span></span><br><span class=\"line\"><span class=\"keyword\">option</span> java_package=<span class=\"string\">&quot;com.atguigu.netty.codec2&quot;</span>;   <span class=\"comment\">//指定生成到哪个包下</span></span><br><span class=\"line\"><span class=\"keyword\">option</span> java_outer_classname=<span class=\"string\">&quot;MyDataInfo&quot;</span>; <span class=\"comment\">// 外部类名, 文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1.protobuf 可以使用message 管理其他的message。最终决定使用哪一个message作为传输对象</span></span><br><span class=\"line\"><span class=\"comment\">2.假设你某个项目需要传输20个对象，你不可能新建20个proto文件吧。此时你就可以</span></span><br><span class=\"line\"><span class=\"comment\">在一个文件里定义20个message，最后再用一个总的message（比方说这里的MyMessage）</span></span><br><span class=\"line\"><span class=\"comment\">来决定在实际传输时真正需要传输哪一个对象</span></span><br><span class=\"line\"><span class=\"comment\">3.因为你实际传输的时候大部分情况传输的都是一个对象，所以下面用oneof进行了限制</span></span><br><span class=\"line\"><span class=\"comment\">4.是否可以传多个对象呢？我个人认为是可以的，比如可以通过map(目前我也不太了解proto的语法)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">MyMessage</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义一个枚举类型,DataType如果是0则表示一个Student对象实例，DataType这个名称自定义</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">DataType</span> </span>&#123;</span><br><span class=\"line\">        StudentType = <span class=\"number\">0</span>; <span class=\"comment\">//在proto3 要求enum的编号从0开始</span></span><br><span class=\"line\">        WorkerType = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用data_type 来标识传的是哪一个枚举类型，这里才真正开始定义MyMessage的数据类型</span></span><br><span class=\"line\">    DataType data_type = <span class=\"number\">1</span>;  <span class=\"comment\">//所有后面的数字都只是编号而已</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1.oneof关键字 表示每次枚举类型进行传输时，限制最多只能传输一个对象。</span></span><br><span class=\"line\"><span class=\"comment\">    dataBody名称也是自定义的</span></span><br><span class=\"line\"><span class=\"comment\">    2.为什么这里的序号是2呢？因为上面DataType data_type = 1  占了第一个序号了</span></span><br><span class=\"line\"><span class=\"comment\">    3.MyMessage里真正出现的类型只有两个</span></span><br><span class=\"line\"><span class=\"comment\">      ①DataType类型</span></span><br><span class=\"line\"><span class=\"comment\">      ②Student类型或者Worker类型（这两个在真正传输的时候只会有一个出现）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">oneof</span> dataBody &#123;</span><br><span class=\"line\">        Student student = <span class=\"number\">2</span>;  <span class=\"comment\">//注意这后面的数字也都只是编号而已</span></span><br><span class=\"line\">        Worker worker = <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int32</span> id = <span class=\"number\">1</span>;<span class=\"comment\">//Student类的属性</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> name = <span class=\"number\">2</span>; <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">Worker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">int32</span> age=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NettyServer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.netty.codec.StudentPOJO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.protobuf.ProtobufDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(); <span class=\"comment\">//8</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建服务器端的启动对象，配置参数</span></span><br><span class=\"line\">            ServerBootstrap bootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//使用链式编程来进行设置</span></span><br><span class=\"line\">            bootstrap.group(bossGroup, workerGroup) <span class=\"comment\">//设置两个线程组</span></span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class) <span class=\"comment\">//使用NioSocketChannel 作为服务器的通道实现</span></span><br><span class=\"line\">                    .option(ChannelOption.SO_BACKLOG, <span class=\"number\">128</span>) <span class=\"comment\">// 设置线程队列得到连接个数</span></span><br><span class=\"line\">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class=\"keyword\">true</span>) <span class=\"comment\">//设置保持活动连接状态</span></span><br><span class=\"line\"><span class=\"comment\">//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup</span></span><br><span class=\"line\">                    .childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<span class=\"comment\">//创建一个通道初始化对象(匿名对象)</span></span><br><span class=\"line\">                        <span class=\"comment\">//给pipeline 设置处理器</span></span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">                            <span class=\"comment\">//在pipeline加入ProtoBufDecoder</span></span><br><span class=\"line\">                            <span class=\"comment\">//指定对哪种对象进行解码</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"string\">&quot;decoder&quot;</span>, <span class=\"keyword\">new</span> ProtobufDecoder(MyDataInfo.MyMessage.getDefaultInstance()));</span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> NettyServerHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;); <span class=\"comment\">// 给我们的workerGroup 的 EventLoop 对应的管道设置处理器</span></span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;.....服务器 is ready...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//绑定一个端口并且同步, 生成了一个 ChannelFuture 对象</span></span><br><span class=\"line\">            <span class=\"comment\">//启动服务器(并绑定端口)</span></span><br><span class=\"line\">            ChannelFuture cf = bootstrap.bind(<span class=\"number\">6668</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//给cf 注册监听器，监控我们关心的事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">            cf.addListener(<span class=\"keyword\">new</span> ChannelFutureListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operationComplete</span><span class=\"params\">(ChannelFuture future)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cf.isSuccess()) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;监听端口 6668 成功&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;监听端口 6668 失败&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//对关闭通道进行监听</span></span><br><span class=\"line\">            cf.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NettyServerHandler\">NettyServerHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.netty.codec.StudentPOJO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//public class NettyServerHandler extends ChannelInboundHandlerAdapter &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">MyDataInfo</span>.<span class=\"title\">MyMessage</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取数据实际(这里我们可以读取客户端发送的消息)</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址</span></span><br><span class=\"line\"><span class=\"comment\">    2. Object msg: 就是客户端发送的数据 默认Object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, MyDataInfo.MyMessage msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据dataType 来显示不同的信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">        MyDataInfo.MyMessage.DataType dataType = msg.getDataType();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dataType == MyDataInfo.MyMessage.DataType.StudentType) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            MyDataInfo.Student student = msg.getStudent();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;学生id=&quot;</span> + student.getId() + <span class=\"string\">&quot; 学生名字=&quot;</span> + student.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dataType == MyDataInfo.MyMessage.DataType.WorkerType) &#123;</span><br><span class=\"line\">            MyDataInfo.Worker worker = msg.getWorker();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;工人的名字=&quot;</span> + worker.getName() + <span class=\"string\">&quot; 年龄=&quot;</span> + worker.getAge());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;传输的类型不正确&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数据读取完毕</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelReadComplete</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//writeAndFlush 是 write + flush</span></span><br><span class=\"line\">        <span class=\"comment\">//将数据写入到缓存，并刷新</span></span><br><span class=\"line\">        <span class=\"comment\">//一般讲，我们对这个发送的数据进行编码</span></span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//处理异常, 一般是需要关闭通道</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NettyClient</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.protobuf.ProtobufEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//客户端需要一个事件循环组</span></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建客户端启动对象</span></span><br><span class=\"line\">            <span class=\"comment\">//注意客户端使用的不是 ServerBootstrap 而是 Bootstrap</span></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置相关参数</span></span><br><span class=\"line\">            bootstrap.group(group) <span class=\"comment\">//设置线程组</span></span><br><span class=\"line\">                    .channel(NioSocketChannel.class) <span class=\"comment\">// 设置客户端通道的实现类(反射)</span></span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">                            <span class=\"comment\">//在pipeline中加入 ProtoBufEncoder</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"string\">&quot;encoder&quot;</span>, <span class=\"keyword\">new</span> ProtobufEncoder());</span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> NettyClientHandler()); <span class=\"comment\">//加入自己的处理器</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;客户端 ok..&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动客户端去连接服务器端</span></span><br><span class=\"line\">            <span class=\"comment\">//关于 ChannelFuture 要分析，涉及到netty的异步模型</span></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6668</span>).sync();</span><br><span class=\"line\">            <span class=\"comment\">//给关闭通道进行监听</span></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NettyClientHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.netty.codec.StudentPOJO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当通道就绪就会触发该方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//随机的发送Student 或者 Workder 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> random = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">3</span>);</span><br><span class=\"line\">        MyDataInfo.MyMessage myMessage = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">0</span> == random) &#123; <span class=\"comment\">//发送Student 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">            myMessage = MyDataInfo.MyMessage.newBuilder().setDataType(MyDataInfo.MyMessage.DataType.StudentType).setStudent(MyDataInfo.Student.newBuilder().setId(<span class=\"number\">5</span>).setName(<span class=\"string\">&quot;玉麒麟 卢俊义&quot;</span>).build()).build();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 发送一个Worker 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">            myMessage = MyDataInfo.MyMessage.newBuilder().setDataType(MyDataInfo.MyMessage.DataType.WorkerType).setWorker(MyDataInfo.Worker.newBuilder().setAge(<span class=\"number\">20</span>).setName(<span class=\"string\">&quot;老李&quot;</span>).build()).build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.writeAndFlush(myMessage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当通道有读取事件时，会触发</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteBuf buf = (ByteBuf) msg;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器回复的消息:&quot;</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器的地址： &quot;</span>+ ctx.channel().remoteAddress());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h1>Google Protobuf</h1>\n<h2 id=\"编码和解码的基本介绍\">编码和解码的基本介绍</h2>\n<ol>\n<li>编写网络应用程序时，因为数据在网络中传输的都是二进制字节码数据，在发送数据时就需要编码，接收数据时就需要解码[示意图]</li>\n<li><code>codec</code>（编解码器）的组成部分有两个：<code>decoder</code>（解码器）和 <code>encoder</code>（编码器）。<code>encoder</code> 负责把业务数据转换成字节码数据，<code>decoder</code> 负责把字节码数据转换成业务数据</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0001.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h2 id=\"Netty-本身的编码解码的机制和问题分析\">Netty 本身的编码解码的机制和问题分析</h2>\n<ol>\n<li>\n<p><code>Netty</code> 自身提供了一些 <code>codec</code>(编解码器)</p>\n</li>\n<li>\n<p><code>Netty </code>提供的编码器</p>\n<ul>\n<li><code>StringEncoder</code>：对字符串数据进行编码。</li>\n<li><code>ObjectEncoder</code>：对Java对象进行编码。</li>\n</ul>\n</li>\n<li>\n<p><code>Netty</code></p>\n<p>提供的解码器</p>\n<ul>\n<li><code>StringDecoder</code>,对字符串数据进行解码</li>\n<li><code>ObjectDecoder</code>，对 Java 对象进行解码</li>\n</ul>\n</li>\n<li>\n<p><code>Netty </code>本身自带的 <code>ObjectDecoder </code>和 <code>ObjectEncoder </code>可以用来实现 <code>POJO</code>对象或各种业务对象的编码和解码，底层使用的仍是Java序列化技术,而Java序列化技术本身效率就不高，存在如下问题</p>\n<ul>\n<li>无法跨语言</li>\n<li>序列化后的体积太大，是二进制编码的5倍多。</li>\n<li>序列化性能太低</li>\n</ul>\n</li>\n<li>\n<p>引出新的解决方案[<code>Google</code> 的 <code>Protobuf</code>]</p>\n</li>\n</ol>\n<h2 id=\"Protobuf\">Protobuf</h2>\n<ol>\n<li><code>Protobuf</code> 基本介绍和使用示意图</li>\n<li><code>Protobuf</code> 是 <code>Google</code> 发布的开源项目，全称 <code>Google Protocol Buffers</code>，是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 <code>RPC</code> [远程过程调用 <code>remote procedure call</code> ]数据交换格式。目前很多公司 从<code>http + json 转向tcp + protobuf</code>，效率会更高。</li>\n<li>参考文档：<a href=\"https://developers.google.com/protocol-buffers/docs/proto\">https://developers.google.com/protocol-buffers/docs/proto</a> 语言指南</li>\n<li><code>Protobuf</code> 是以 <code>message</code> 的方式来管理数据的.</li>\n<li>支持跨平台、跨语言，即[客户端和服务器端可以是不同的语言编写的]（支持目前绝大多数语言，例如 <code>C++</code>、<code>C#</code>、<code>Java</code>、<code>python</code> 等）</li>\n<li>高性能，高可靠性</li>\n<li>使用 <code>protobuf</code> 编译器能自动生成代码，<code>Protobuf</code> 是将类的定义使用 <code>.proto</code> 文件进行描述。说明，在 <code>idea</code> 中编写 <code>.proto</code> 文件时，会自动提示是否下载 <code>.ptoto</code> 编写插件.可以让语法高亮。</li>\n<li>然后通过 <code>protoc.exe</code> 编译器根据 <code>.proto</code> 自动生成 <code>.java</code> 文件</li>\n<li><code>protobuf</code> 使用示意图</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0002.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h2 id=\"Protobuf-快速入门实例\">Protobuf 快速入门实例</h2>\n<p>编写程序，使用 <code>Protobuf</code> 完成如下功能</p>\n<ol>\n<li>客户端可以发送一个 <code>StudentPoJo</code> 对象到服务器(通过 <code>Protobuf</code> 编码)</li>\n<li>服务端能接收 <code>StudentPoJo</code> 对象，并显示信息(通过 <code>Protobuf</code> 解码)</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.google.protobuf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>protobuf-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.6.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Student.proto</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>; <span class=\"comment\">//版本</span></span><br><span class=\"line\"><span class=\"keyword\">option</span> java_outer_classname = <span class=\"string\">&quot;StudentPOJO&quot;</span>;<span class=\"comment\">//生成的外部类名，同时也是文件名</span></span><br><span class=\"line\"><span class=\"comment\">//protobuf 使用message 管理数据</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">Student</span> </span>&#123; <span class=\"comment\">//会在 StudentPOJO 外部类生成一个内部类 Student， 他是真正发送的POJO对象</span></span><br><span class=\"line\">    <span class=\"built_in\">int32</span> id = <span class=\"number\">1</span>; <span class=\"comment\">// Student 类中有 一个属性 名字为 id 类型为int32(protobuf类型) 1表示属性序号，不是值</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> name = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译<br>\nprotoc.exe –java_out=.Student.proto<br>\n将生成的 StudentPOJO 放入到项目使用</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211202132306738.png?x-oss-process=style/qingyun\" alt=\"image-20211202132304804\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.protobuf.ProtobufDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建BossGroup 和 WorkerGroup</span></span><br><span class=\"line\">        <span class=\"comment\">//说明</span></span><br><span class=\"line\">        <span class=\"comment\">//1. 创建两个线程组 bossGroup 和 workerGroup</span></span><br><span class=\"line\">        <span class=\"comment\">//2. bossGroup 只是处理连接请求 , 真正的和客户端业务处理，会交给 workerGroup完成</span></span><br><span class=\"line\">        <span class=\"comment\">//3. 两个都是无限循环</span></span><br><span class=\"line\">        <span class=\"comment\">//4. bossGroup 和 workerGroup 含有的子线程(NioEventLoop)的个数</span></span><br><span class=\"line\">        <span class=\"comment\">//   默认实际 cpu核数 * 2</span></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(); <span class=\"comment\">//8</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建服务器端的启动对象，配置参数</span></span><br><span class=\"line\">            ServerBootstrap bootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//使用链式编程来进行设置</span></span><br><span class=\"line\">            bootstrap.group(bossGroup, workerGroup) <span class=\"comment\">//设置两个线程组</span></span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class) <span class=\"comment\">//使用NioSocketChannel 作为服务器的通道实现</span></span><br><span class=\"line\">                    .option(ChannelOption.SO_BACKLOG, <span class=\"number\">128</span>) <span class=\"comment\">// 设置线程队列得到连接个数</span></span><br><span class=\"line\">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class=\"keyword\">true</span>) <span class=\"comment\">//设置保持活动连接状态</span></span><br><span class=\"line\"><span class=\"comment\">//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup</span></span><br><span class=\"line\">                    .childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<span class=\"comment\">//创建一个通道初始化对象(匿名对象)</span></span><br><span class=\"line\">                        <span class=\"comment\">//给pipeline 设置处理器</span></span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">                            <span class=\"comment\">//在pipeline加入ProtoBufDecoder</span></span><br><span class=\"line\">                            <span class=\"comment\">//指定对哪种对象进行解码</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"string\">&quot;decoder&quot;</span>, <span class=\"keyword\">new</span> ProtobufDecoder(StudentPOJO.Student.getDefaultInstance()));</span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> NettyServerHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;); <span class=\"comment\">// 给我们的workerGroup 的 EventLoop 对应的管道设置处理器</span></span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;.....服务器 is ready...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//绑定一个端口并且同步, 生成了一个 ChannelFuture 对象</span></span><br><span class=\"line\">            <span class=\"comment\">//启动服务器(并绑定端口)</span></span><br><span class=\"line\">            ChannelFuture cf = bootstrap.bind(<span class=\"number\">6668</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//给cf 注册监听器，监控我们关心的事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">            cf.addListener(<span class=\"keyword\">new</span> ChannelFutureListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operationComplete</span><span class=\"params\">(ChannelFuture future)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cf.isSuccess()) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;监听端口 6668 成功&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;监听端口 6668 失败&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//对关闭通道进行监听</span></span><br><span class=\"line\">            cf.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NettyServerHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">说明</span></span><br><span class=\"line\"><span class=\"comment\">1. 我们自定义一个Handler 需要继续netty 规定好的某个HandlerAdapter(规范)</span></span><br><span class=\"line\"><span class=\"comment\">2. 这时我们自定义一个Handler , 才能称为一个handler</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">//public class NettyServerHandler extends ChannelInboundHandlerAdapter &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">StudentPOJO</span>.<span class=\"title\">Student</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取数据实际(这里我们可以读取客户端发送的消息)</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址</span></span><br><span class=\"line\"><span class=\"comment\">    2. Object msg: 就是客户端发送的数据 默认Object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, StudentPOJO.Student msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//读取从客户端发送的StudentPojo.Student</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端发送的数据 id=&quot;</span> + msg.getId() + <span class=\"string\">&quot; 名字=&quot;</span> + msg.getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数据读取完毕</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelReadComplete</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//writeAndFlush 是 write + flush</span></span><br><span class=\"line\">        <span class=\"comment\">//将数据写入到缓存，并刷新</span></span><br><span class=\"line\">        <span class=\"comment\">//一般讲，我们对这个发送的数据进行编码</span></span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//处理异常, 一般是需要关闭通道</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NettyClient</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.protobuf.ProtobufEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//客户端需要一个事件循环组</span></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建客户端启动对象</span></span><br><span class=\"line\">            <span class=\"comment\">//注意客户端使用的不是 ServerBootstrap 而是 Bootstrap</span></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置相关参数</span></span><br><span class=\"line\">            bootstrap.group(group) <span class=\"comment\">//设置线程组</span></span><br><span class=\"line\">                    .channel(NioSocketChannel.class) <span class=\"comment\">// 设置客户端通道的实现类(反射)</span></span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">                            <span class=\"comment\">//在pipeline中加入 ProtoBufEncoder</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"string\">&quot;encoder&quot;</span>, <span class=\"keyword\">new</span> ProtobufEncoder());</span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> NettyClientHandler()); <span class=\"comment\">//加入自己的处理器</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;客户端 ok..&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动客户端去连接服务器端</span></span><br><span class=\"line\">            <span class=\"comment\">//关于 ChannelFuture 要分析，涉及到netty的异步模型</span></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6668</span>).sync();</span><br><span class=\"line\">            <span class=\"comment\">//给关闭通道进行监听</span></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NettyClientHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当通道就绪就会触发该方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//发生一个Student 对象到服务器</span></span><br><span class=\"line\"></span><br><span class=\"line\">        StudentPOJO.Student student = StudentPOJO.Student.newBuilder().setId(<span class=\"number\">4</span>).setName(<span class=\"string\">&quot;智多星 吴用&quot;</span>).build();</span><br><span class=\"line\">        <span class=\"comment\">//Teacher , Member ,Message</span></span><br><span class=\"line\">        ctx.writeAndFlush(student);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当通道有读取事件时，会触发</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteBuf buf = (ByteBuf) msg;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器回复的消息:&quot;</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器的地址： &quot;</span>+ ctx.channel().remoteAddress());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Protobuf-快速入门实例-2\">Protobuf 快速入门实例 2</h2>\n<ol>\n<li>编写程序，使用 <code>Protobuf</code> 完成如下功能</li>\n<li>客户端可以随机发送 <code>StudentPoJo</code> / <code>WorkerPoJo</code> 对象到服务器(通过 <code>Protobuf</code> 编码)</li>\n<li>服务端能接收 <code>StudentPoJo</code> / <code>WorkerPoJo</code> 对象(需要判断是哪种类型)，并显示信息(通过 <code>Protobuf</code> 解码)</li>\n</ol>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">option</span> optimize_for = SPEED; <span class=\"comment\">// 加快解析</span></span><br><span class=\"line\"><span class=\"keyword\">option</span> java_package=<span class=\"string\">&quot;com.atguigu.netty.codec2&quot;</span>;   <span class=\"comment\">//指定生成到哪个包下</span></span><br><span class=\"line\"><span class=\"keyword\">option</span> java_outer_classname=<span class=\"string\">&quot;MyDataInfo&quot;</span>; <span class=\"comment\">// 外部类名, 文件名</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1.protobuf 可以使用message 管理其他的message。最终决定使用哪一个message作为传输对象</span></span><br><span class=\"line\"><span class=\"comment\">2.假设你某个项目需要传输20个对象，你不可能新建20个proto文件吧。此时你就可以</span></span><br><span class=\"line\"><span class=\"comment\">在一个文件里定义20个message，最后再用一个总的message（比方说这里的MyMessage）</span></span><br><span class=\"line\"><span class=\"comment\">来决定在实际传输时真正需要传输哪一个对象</span></span><br><span class=\"line\"><span class=\"comment\">3.因为你实际传输的时候大部分情况传输的都是一个对象，所以下面用oneof进行了限制</span></span><br><span class=\"line\"><span class=\"comment\">4.是否可以传多个对象呢？我个人认为是可以的，比如可以通过map(目前我也不太了解proto的语法)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">MyMessage</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//定义一个枚举类型,DataType如果是0则表示一个Student对象实例，DataType这个名称自定义</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">DataType</span> </span>&#123;</span><br><span class=\"line\">        StudentType = <span class=\"number\">0</span>; <span class=\"comment\">//在proto3 要求enum的编号从0开始</span></span><br><span class=\"line\">        WorkerType = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//用data_type 来标识传的是哪一个枚举类型，这里才真正开始定义MyMessage的数据类型</span></span><br><span class=\"line\">    DataType data_type = <span class=\"number\">1</span>;  <span class=\"comment\">//所有后面的数字都只是编号而已</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1.oneof关键字 表示每次枚举类型进行传输时，限制最多只能传输一个对象。</span></span><br><span class=\"line\"><span class=\"comment\">    dataBody名称也是自定义的</span></span><br><span class=\"line\"><span class=\"comment\">    2.为什么这里的序号是2呢？因为上面DataType data_type = 1  占了第一个序号了</span></span><br><span class=\"line\"><span class=\"comment\">    3.MyMessage里真正出现的类型只有两个</span></span><br><span class=\"line\"><span class=\"comment\">      ①DataType类型</span></span><br><span class=\"line\"><span class=\"comment\">      ②Student类型或者Worker类型（这两个在真正传输的时候只会有一个出现）</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">oneof</span> dataBody &#123;</span><br><span class=\"line\">        Student student = <span class=\"number\">2</span>;  <span class=\"comment\">//注意这后面的数字也都只是编号而已</span></span><br><span class=\"line\">        Worker worker = <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">Student</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">int32</span> id = <span class=\"number\">1</span>;<span class=\"comment\">//Student类的属性</span></span><br><span class=\"line\">    <span class=\"built_in\">string</span> name = <span class=\"number\">2</span>; <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">message</span> <span class=\"title\">Worker</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">int32</span> age=<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NettyServer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.netty.codec.StudentPOJO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.protobuf.ProtobufDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(); <span class=\"comment\">//8</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建服务器端的启动对象，配置参数</span></span><br><span class=\"line\">            ServerBootstrap bootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//使用链式编程来进行设置</span></span><br><span class=\"line\">            bootstrap.group(bossGroup, workerGroup) <span class=\"comment\">//设置两个线程组</span></span><br><span class=\"line\">                    .channel(NioServerSocketChannel.class) <span class=\"comment\">//使用NioSocketChannel 作为服务器的通道实现</span></span><br><span class=\"line\">                    .option(ChannelOption.SO_BACKLOG, <span class=\"number\">128</span>) <span class=\"comment\">// 设置线程队列得到连接个数</span></span><br><span class=\"line\">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class=\"keyword\">true</span>) <span class=\"comment\">//设置保持活动连接状态</span></span><br><span class=\"line\"><span class=\"comment\">//                    .handler(null) // 该 handler对应 bossGroup , childHandler 对应 workerGroup</span></span><br><span class=\"line\">                    .childHandler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;<span class=\"comment\">//创建一个通道初始化对象(匿名对象)</span></span><br><span class=\"line\">                        <span class=\"comment\">//给pipeline 设置处理器</span></span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">                            <span class=\"comment\">//在pipeline加入ProtoBufDecoder</span></span><br><span class=\"line\">                            <span class=\"comment\">//指定对哪种对象进行解码</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"string\">&quot;decoder&quot;</span>, <span class=\"keyword\">new</span> ProtobufDecoder(MyDataInfo.MyMessage.getDefaultInstance()));</span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> NettyServerHandler());</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;); <span class=\"comment\">// 给我们的workerGroup 的 EventLoop 对应的管道设置处理器</span></span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;.....服务器 is ready...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//绑定一个端口并且同步, 生成了一个 ChannelFuture 对象</span></span><br><span class=\"line\">            <span class=\"comment\">//启动服务器(并绑定端口)</span></span><br><span class=\"line\">            ChannelFuture cf = bootstrap.bind(<span class=\"number\">6668</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//给cf 注册监听器，监控我们关心的事件</span></span><br><span class=\"line\"></span><br><span class=\"line\">            cf.addListener(<span class=\"keyword\">new</span> ChannelFutureListener() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">operationComplete</span><span class=\"params\">(ChannelFuture future)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (cf.isSuccess()) &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;监听端口 6668 成功&quot;</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        System.out.println(<span class=\"string\">&quot;监听端口 6668 失败&quot;</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//对关闭通道进行监听</span></span><br><span class=\"line\">            cf.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"NettyServerHandler\">NettyServerHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.netty.codec.StudentPOJO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//public class NettyServerHandler extends ChannelInboundHandlerAdapter &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">MyDataInfo</span>.<span class=\"title\">MyMessage</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//读取数据实际(这里我们可以读取客户端发送的消息)</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1. ChannelHandlerContext ctx:上下文对象, 含有 管道pipeline , 通道channel, 地址</span></span><br><span class=\"line\"><span class=\"comment\">    2. Object msg: 就是客户端发送的数据 默认Object</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, MyDataInfo.MyMessage msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//根据dataType 来显示不同的信息</span></span><br><span class=\"line\"></span><br><span class=\"line\">        MyDataInfo.MyMessage.DataType dataType = msg.getDataType();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dataType == MyDataInfo.MyMessage.DataType.StudentType) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            MyDataInfo.Student student = msg.getStudent();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;学生id=&quot;</span> + student.getId() + <span class=\"string\">&quot; 学生名字=&quot;</span> + student.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dataType == MyDataInfo.MyMessage.DataType.WorkerType) &#123;</span><br><span class=\"line\">            MyDataInfo.Worker worker = msg.getWorker();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;工人的名字=&quot;</span> + worker.getName() + <span class=\"string\">&quot; 年龄=&quot;</span> + worker.getAge());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;传输的类型不正确&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//数据读取完毕</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelReadComplete</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//writeAndFlush 是 write + flush</span></span><br><span class=\"line\">        <span class=\"comment\">//将数据写入到缓存，并刷新</span></span><br><span class=\"line\">        <span class=\"comment\">//一般讲，我们对这个发送的数据进行编码</span></span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;hello, 客户端~(&gt;^ω^&lt;)喵1&quot;</span>, CharsetUtil.UTF_8));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//处理异常, 一般是需要关闭通道</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NettyClient</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.protobuf.ProtobufEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//客户端需要一个事件循环组</span></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//创建客户端启动对象</span></span><br><span class=\"line\">            <span class=\"comment\">//注意客户端使用的不是 ServerBootstrap 而是 Bootstrap</span></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//设置相关参数</span></span><br><span class=\"line\">            bootstrap.group(group) <span class=\"comment\">//设置线程组</span></span><br><span class=\"line\">                    .channel(NioSocketChannel.class) <span class=\"comment\">// 设置客户端通道的实现类(反射)</span></span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class=\"line\">                        <span class=\"meta\">@Override</span></span><br><span class=\"line\">                        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">                            <span class=\"comment\">//在pipeline中加入 ProtoBufEncoder</span></span><br><span class=\"line\">                            pipeline.addLast(<span class=\"string\">&quot;encoder&quot;</span>, <span class=\"keyword\">new</span> ProtobufEncoder());</span><br><span class=\"line\">                            pipeline.addLast(<span class=\"keyword\">new</span> NettyClientHandler()); <span class=\"comment\">//加入自己的处理器</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;客户端 ok..&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//启动客户端去连接服务器端</span></span><br><span class=\"line\">            <span class=\"comment\">//关于 ChannelFuture 要分析，涉及到netty的异步模型</span></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6668</span>).sync();</span><br><span class=\"line\">            <span class=\"comment\">//给关闭通道进行监听</span></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>NettyClientHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.codec2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.atguigu.netty.codec.StudentPOJO;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NettyClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当通道就绪就会触发该方法</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//随机的发送Student 或者 Workder 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> random = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">3</span>);</span><br><span class=\"line\">        MyDataInfo.MyMessage myMessage = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">0</span> == random) &#123; <span class=\"comment\">//发送Student 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">            myMessage = MyDataInfo.MyMessage.newBuilder().setDataType(MyDataInfo.MyMessage.DataType.StudentType).setStudent(MyDataInfo.Student.newBuilder().setId(<span class=\"number\">5</span>).setName(<span class=\"string\">&quot;玉麒麟 卢俊义&quot;</span>).build()).build();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 发送一个Worker 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">            myMessage = MyDataInfo.MyMessage.newBuilder().setDataType(MyDataInfo.MyMessage.DataType.WorkerType).setWorker(MyDataInfo.Worker.newBuilder().setAge(<span class=\"number\">20</span>).setName(<span class=\"string\">&quot;老李&quot;</span>).build()).build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.writeAndFlush(myMessage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当通道有读取事件时，会触发</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ByteBuf buf = (ByteBuf) msg;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器回复的消息:&quot;</span> + buf.toString(CharsetUtil.UTF_8));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器的地址： &quot;</span>+ ctx.channel().remoteAddress());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"从B站学习的Netty16","abbrlink":3117818236,"date":"2021-12-03T00:50:22.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\nNetty 编解码器和 Handler 调用机制\n\n## 基本说明\n\n1. `Netty` 的组件设计：`Netty` 的主要组件有 `Channel`、`EventLoop`、`ChannelFuture`、`ChannelHandler`、`ChannelPipe` 等\n2. `ChannelHandler` 充当了处理入站和出站数据的应用程序逻辑的容器。例如，实现 `ChannelInboundHandler` 接口（或 `ChannelInboundHandlerAdapter`），你就可以接收入站事件和数据，这些数据会被业务逻辑处理。当要给客户端发送响应时，也可以从 `ChannelInboundHandler` 冲刷数据。业务逻辑通常写在一个或者多个 `ChannelInboundHandler` 中。`ChannelOutboundHandler` 原理一样，只不过它是用来处理出站数据的\n3. `ChannelPipeline` 提供了 `ChannelHandler` 链的容器。以客户端应用程序为例，如果事件的运动方向是从客户端到服务端的，那么我们称这些事件为出站的，即客户端发送给服务端的数据会通过 `pipeline` 中的一系列 `ChannelOutboundHandler`，并被这些 `Handler` 处理，反之则称为入站的\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0004.png?x-oss-process=style/qingyun)\n\n> 出站，入站如果搞不清楚，看下面的**Netty的handler链的调用机制**，通过一个例子和图讲清楚\n\n编码解码器\n\n1. 当 `Netty` 发送或者接受一个消息的时候，就将会发生一次数据转换。入站消息会被解码：从字节转换为另一种格式（比如 `java` 对象）；如果是出站消息，它会被编码成字节。\n2. `Netty` 提供一系列实用的编解码器，他们都实现了 `ChannelInboundHadnler` 或者 `ChannelOutboundHandler` 接口。在这些类中，`channelRead` 方法已经被重写了。以入站为例，对于每个从入站 `Channel` 读取的消息，这个方法会被调用。随后，它将调用由解码器所提供的 `decode()` 方法进行解码，并将已经解码的字节转发给 `ChannelPipeline` 中的下一个 `ChannelInboundHandler`。\n\n解码器 - ByteToMessageDecoder\n\n1. 关系继承图\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0005.png?x-oss-process=style/qingyun)\n\n1. 由于不可能知道远程节点是否会一次性发送一个完整的信息，`tcp` 有可能出现粘包拆包的问题，这个类会对入站数据进行缓冲，直到它准备好被处理.【后面有说TCP的粘包和拆包问题】\n2. 一个关于 `ByteToMessageDecoder` 实例分析\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0006.png?x-oss-process=style/qingyun)\n\nNetty的handler链的调用机制\n\n使用自定义的编码器和解码器来说明 `Netty` 的 `handler` 调用机制\n客户端发送 `long` -> 服务器\n服务端发送 `long` -> 客户端\n\n> 读者可以看下这个图，带着这个图去看下面的例子。\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0007.png?x-oss-process=style/qingyun)\n\n### MyServer\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MyServer {\n    public static void main(String[] args) throws Exception{\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new MyServerInitializer()); //自定义一个初始化类\n\n\n            ChannelFuture channelFuture = serverBootstrap.bind(7000).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n\n    }\n}\n```\n\n### MyServerInitializer\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\npublic class MyServerHandler extends SimpleChannelInboundHandler<Long> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Long msg) throws Exception {\n\n        System.out.println(\"从客户端\" + ctx.channel().remoteAddress() + \" 读取到long \" + msg);\n\n        //给客户端发送一个long\n        ctx.writeAndFlush(98765L);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n\nMyByteToLongDecoder\n\n```java\npackage edu.IO.inboundhandlerandoutboundhandler;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ByteToMessageDecoder;\n\nimport java.util.List;\n\npublic class MyByteToLongDecoder extends ByteToMessageDecoder {\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) throws Exception {\n        System.out.println(\"MyByteToLongDecoder 被调用\");\n        if (byteBuf.readableBytes() >= 8){\n            list.add(byteBuf.readLong());\n        }\n    }\n}\n```\n\n### MyLongToByteEncoder\n\n```java\npackage edu.IO.inboundhandlerandoutboundhandler;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.MessageToByteEncoder;\n\npublic class MyLongToByteEncoder extends MessageToByteEncoder<Long> {\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, Long aLong, ByteBuf byteBuf) throws Exception {\n        System.out.println(\"MyLongToByteEncoder encode 被调用\");\n        System.out.println(\"msg=\" + aLong);\n        byteBuf.writeLong(aLong);\n    }\n}\n```\n\n### MyServerHandler\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\npublic class MyServerHandler extends SimpleChannelInboundHandler<Long> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Long msg) throws Exception {\n\n        System.out.println(\"从客户端\" + ctx.channel().remoteAddress() + \" 读取到long \" + msg);\n\n        //给客户端发送一个long\n        ctx.writeAndFlush(98765L);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n\n### MyClient\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class MyClient {\n    public static void main(String[] args)  throws  Exception{\n\n        EventLoopGroup group = new NioEventLoopGroup();\n\n        try {\n\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group).channel(NioSocketChannel.class)\n                    .handler(new MyClientInitializer()); //自定义一个初始化类\n\n            ChannelFuture channelFuture = bootstrap.connect(\"localhost\", 7000).sync();\n\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n### MyClientInitializer\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\n\npublic class MyClientInitializer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n\n        ChannelPipeline pipeline = ch.pipeline();\n\n        //加入一个出站的handler 对数据进行一个编码\n        pipeline.addLast(new MyLongToByteEncoder());\n\n        //这时一个入站的解码器(入站handler )\n        pipeline.addLast(new MyByteToLongDecoder());\n        //加入一个自定义的handler ， 处理业务\n        pipeline.addLast(new MyClientHandler());\n\n\n    }\n}\n```\n\nMyClientHandler\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.util.CharsetUtil;\n\nimport java.nio.charset.Charset;\n\npublic class MyClientHandler  extends SimpleChannelInboundHandler<Long> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Long msg) throws Exception {\n\n        System.out.println(\"服务器的ip=\" + ctx.channel().remoteAddress());\n        System.out.println(\"收到服务器消息=\" + msg);\n\n    }\n\n    //重写channelActive 发送数据\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"MyClientHandler 发送数据\");\n        //ctx.writeAndFlush(Unpooled.copiedBuffer(\"\"))\n        ctx.writeAndFlush(123456L); //发送的是一个long\n    }\n}\n```\n\n### 出站入站\n\n关于出站入站，很多人可能有点迷糊\n1）客户端有出站入站，服务端也有出站入站\n2）以客户端为例，如果有服务端传送的数据到达客户端，那么对于客户端来说就是入站；\n 如果客户端传送数据到服务端，那么对于客户端来说就是出站；\n 同理，对于服务端来说，也是一样的，有数据来就是入站，有数据输出就是出站\n3）为什么服务端和客户端的Serverhandler都是继承`SimpleChannelInboundHandler`，而没有`ChannelOutboundHandler`出站类？\n 实际上当我们在handler中调用ctx.writeAndFlush()方法后，就会将数据交给ChannelOutboundHandler进行出站处理，只是我们没有去定义出站类而已，若有需求可以自己去实现ChannelOutboundHandler出站类\n4）总结就是客户端和服务端都有出站和入站的操作\n **服务端发数据给客户端：**服务端—>出站—>Socket通道—>入站—>客户端\n\n **客户端发数据给服务端：**客户端—>出站—>Socket通道—>入站—>服务端\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0007.png?x-oss-process=style/qingyun)\n\n## ByteToMessageDecoder的小细节\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.util.CharsetUtil;\n\nimport java.nio.charset.Charset;\n\npublic class MyClientHandler  extends SimpleChannelInboundHandler<Long> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Long msg) throws Exception {\n\n        System.out.println(\"服务器的ip=\" + ctx.channel().remoteAddress());\n        System.out.println(\"收到服务器消息=\" + msg);\n\n    }\n\n    //重写channelActive 发送数据\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"MyClientHandler 发送数据\");\n\n        //分析\n        //1. \"abcdabcdabcdabcd\" 是 16个字节\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"abcdabcdabcdabcd\",CharsetUtil.UTF_8));\n\n    }\n}\n```\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ByteToMessageDecoder;\n\nimport java.util.List;\n\npublic class MyByteToLongDecoder extends ByteToMessageDecoder {\n    /**\n     *\n     * decode 会根据接收的数据，被调用多次, 直到确定没有新的元素被添加到list\n     * , 或者是ByteBuf 没有更多的可读字节为止\n     * 如果list out 不为空，就会将list的内容传递给下一个 channelinboundhandler处理,\n     * 该处理器的方法也会被调用多次\n     *\n     * @param ctx 上下文对象\n     * @param in 入站的 ByteBuf\n     * @param out List 集合，将解码后的数据传给下一个handler\n     * @throws Exception\n     */\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n\n        System.out.println(\"MyByteToLongDecoder 被调用\");\n        //因为 long 8个字节, 需要判断有8个字节，才能读取一个long\n        if(in.readableBytes() >= 8) {\n            out.add(in.readLong());\n        }\n    }\n}\n```\n\n由于发送的字符串是16字节，根据上面注释说的内容，decode会被调用两次\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0010.png?x-oss-process=style/qingyun)\n\n同时又引出了一个小问题\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0011.png?x-oss-process=style/qingyun)当我们`MyClientHandler`传一个Long时，会调用我们的`MyLongToByteEncoder`的编码器。那么控制台就会打印这样一句话：**MyLongToByteEncoder encode 被调用**。但是这里并没有调用编码器，这是为什么呢？\n\n1. `MyClientHandler`这个处理器的后一个处理器是`MyLongToByteEncoder`\n2. `MyLongToByteEncoder`的父类是`MessageToByteEncoder`，在`MessageToByteEncoder`中有下面的一个方法\n\n```java\n@Override\n    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n        ByteBuf buf = null;\n        try {\n            //这里会判断当前msg 是不是应该处理的类型，如果是就处理，不是就跳过encode\n            if (acceptOutboundMessage(msg)) {\n                @SuppressWarnings(\"unchecked\")\n                I cast = (I) msg;\n                buf = allocateBuffer(ctx, cast, preferDirect);\n                try {\n                    encode(ctx, cast, buf);\n                } finally {\n                    ReferenceCountUtil.release(cast);\n                }\n\n                if (buf.isReadable()) {\n                    ctx.write(buf, promise);\n                } else {\n                    buf.release();\n                    ctx.write(Unpooled.EMPTY_BUFFER, promise);\n                }\n                buf = null;\n            } else {\n                ctx.write(msg, promise);\n            }\n        } catch (EncoderException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw new EncoderException(e);\n        } finally {\n            if (buf != null) {\n                buf.release();\n            }\n        }\n    }\n```\n\n当我们以这样的形式发送数据\n\n```java\nctx.writeAndFlush(Unpooled.copiedBuffer(\"abcdabcdabcdabcd\",CharsetUtil.UTF_8));\n```\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0012.png?x-oss-process=style/qingyun)\n\n这两个类型并不匹配，也就不会走编码器。因此我们编写 Encoder 是要注意传入的数据类型和处理的数据类型一致\n\n**结论：**\n\n- 不论解码器 `handler` 还是编码器 `handler` 即接收的消息类型必须与待处理的消息类型一致，否则该 `handler` 不会被执行\n- 在解码器进行数据解码时，需要判断缓存区（`ByteBuf`）的数据是否足够，否则接收到的结果会期望结果可能不一致。\n\n## 解码器 - ReplayingDecoder\n\n1. `public abstract class ReplayingDecoder<S> extends ByteToMessageDecoder`\n2. `ReplayingDecoder` 扩展了 `ByteToMessageDecoder` 类，使用这个类，我们不必调用 `readableBytes()` 方法，也就不用判断还有没有足够的数据来读取。参数 `S` 指定了用户状态管理的类型，其中 `Void` 代表不需要状态管理\n3. 应用实例：使用 `ReplayingDecoder` 编写解码器，对前面的案例进行简化[案例演示]\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ReplayingDecoder;\n\nimport java.util.List;\n\npublic class MyByteToLongDecoder2 extends ReplayingDecoder<Void> {\n    \n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        System.out.println(\"MyByteToLongDecoder2 被调用\");\n        //在 ReplayingDecoder 不需要判断数据是否足够读取，内部会进行处理判断\n        out.add(in.readLong());\n    }\n}\n```\n\n1. ```\n   ReplayingDecoder\n   ```\n\n    使用方便，但它也有一些局限性：\n\n   - 并不是所有的 `ByteBuf` 操作都被支持，如果调用了一个不被支持的方法，将会抛出一个 `UnsupportedOperationException`。\n   - `ReplayingDecoder` 在某些情况下可能稍慢于 `ByteToMessageDecoder`，例如网络缓慢并且消息格式复杂时，消息会被拆成了多个碎片，速度变慢\n\n其它编解码器\n\n1. `LineBasedFrameDecoder`：这个类在 `Netty` 内部也有使用，它使用行尾控制字符（\\n或者\\r\\n）作为分隔符来解析数据。\n2. `DelimiterBasedFrameDecoder`：使用自定义的特殊字符作为消息的分隔符。\n3. `HttpObjectDecoder`：一个 `HTTP` 数据的解码器\n4. `LengthFieldBasedFrameDecoder`：通过指定长度来标识整包消息，这样就可以自动的处理黏包和半包消息。\n","source":"_posts/从B站学习的Netty16.md","raw":"---\ntitle: 从B站学习的Netty16\nabbrlink: 3117818236\ndate: 2021-12-03 08:50:22\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\nNetty 编解码器和 Handler 调用机制\n\n## 基本说明\n\n1. `Netty` 的组件设计：`Netty` 的主要组件有 `Channel`、`EventLoop`、`ChannelFuture`、`ChannelHandler`、`ChannelPipe` 等\n2. `ChannelHandler` 充当了处理入站和出站数据的应用程序逻辑的容器。例如，实现 `ChannelInboundHandler` 接口（或 `ChannelInboundHandlerAdapter`），你就可以接收入站事件和数据，这些数据会被业务逻辑处理。当要给客户端发送响应时，也可以从 `ChannelInboundHandler` 冲刷数据。业务逻辑通常写在一个或者多个 `ChannelInboundHandler` 中。`ChannelOutboundHandler` 原理一样，只不过它是用来处理出站数据的\n3. `ChannelPipeline` 提供了 `ChannelHandler` 链的容器。以客户端应用程序为例，如果事件的运动方向是从客户端到服务端的，那么我们称这些事件为出站的，即客户端发送给服务端的数据会通过 `pipeline` 中的一系列 `ChannelOutboundHandler`，并被这些 `Handler` 处理，反之则称为入站的\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0004.png?x-oss-process=style/qingyun)\n\n> 出站，入站如果搞不清楚，看下面的**Netty的handler链的调用机制**，通过一个例子和图讲清楚\n\n编码解码器\n\n1. 当 `Netty` 发送或者接受一个消息的时候，就将会发生一次数据转换。入站消息会被解码：从字节转换为另一种格式（比如 `java` 对象）；如果是出站消息，它会被编码成字节。\n2. `Netty` 提供一系列实用的编解码器，他们都实现了 `ChannelInboundHadnler` 或者 `ChannelOutboundHandler` 接口。在这些类中，`channelRead` 方法已经被重写了。以入站为例，对于每个从入站 `Channel` 读取的消息，这个方法会被调用。随后，它将调用由解码器所提供的 `decode()` 方法进行解码，并将已经解码的字节转发给 `ChannelPipeline` 中的下一个 `ChannelInboundHandler`。\n\n解码器 - ByteToMessageDecoder\n\n1. 关系继承图\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0005.png?x-oss-process=style/qingyun)\n\n1. 由于不可能知道远程节点是否会一次性发送一个完整的信息，`tcp` 有可能出现粘包拆包的问题，这个类会对入站数据进行缓冲，直到它准备好被处理.【后面有说TCP的粘包和拆包问题】\n2. 一个关于 `ByteToMessageDecoder` 实例分析\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0006.png?x-oss-process=style/qingyun)\n\nNetty的handler链的调用机制\n\n使用自定义的编码器和解码器来说明 `Netty` 的 `handler` 调用机制\n客户端发送 `long` -> 服务器\n服务端发送 `long` -> 客户端\n\n> 读者可以看下这个图，带着这个图去看下面的例子。\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0007.png?x-oss-process=style/qingyun)\n\n### MyServer\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MyServer {\n    public static void main(String[] args) throws Exception{\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new MyServerInitializer()); //自定义一个初始化类\n\n\n            ChannelFuture channelFuture = serverBootstrap.bind(7000).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n\n    }\n}\n```\n\n### MyServerInitializer\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\npublic class MyServerHandler extends SimpleChannelInboundHandler<Long> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Long msg) throws Exception {\n\n        System.out.println(\"从客户端\" + ctx.channel().remoteAddress() + \" 读取到long \" + msg);\n\n        //给客户端发送一个long\n        ctx.writeAndFlush(98765L);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n\nMyByteToLongDecoder\n\n```java\npackage edu.IO.inboundhandlerandoutboundhandler;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ByteToMessageDecoder;\n\nimport java.util.List;\n\npublic class MyByteToLongDecoder extends ByteToMessageDecoder {\n    @Override\n    protected void decode(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List<Object> list) throws Exception {\n        System.out.println(\"MyByteToLongDecoder 被调用\");\n        if (byteBuf.readableBytes() >= 8){\n            list.add(byteBuf.readLong());\n        }\n    }\n}\n```\n\n### MyLongToByteEncoder\n\n```java\npackage edu.IO.inboundhandlerandoutboundhandler;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.MessageToByteEncoder;\n\npublic class MyLongToByteEncoder extends MessageToByteEncoder<Long> {\n    @Override\n    protected void encode(ChannelHandlerContext channelHandlerContext, Long aLong, ByteBuf byteBuf) throws Exception {\n        System.out.println(\"MyLongToByteEncoder encode 被调用\");\n        System.out.println(\"msg=\" + aLong);\n        byteBuf.writeLong(aLong);\n    }\n}\n```\n\n### MyServerHandler\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\npublic class MyServerHandler extends SimpleChannelInboundHandler<Long> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Long msg) throws Exception {\n\n        System.out.println(\"从客户端\" + ctx.channel().remoteAddress() + \" 读取到long \" + msg);\n\n        //给客户端发送一个long\n        ctx.writeAndFlush(98765L);\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n\n### MyClient\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class MyClient {\n    public static void main(String[] args)  throws  Exception{\n\n        EventLoopGroup group = new NioEventLoopGroup();\n\n        try {\n\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group).channel(NioSocketChannel.class)\n                    .handler(new MyClientInitializer()); //自定义一个初始化类\n\n            ChannelFuture channelFuture = bootstrap.connect(\"localhost\", 7000).sync();\n\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n### MyClientInitializer\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\n\npublic class MyClientInitializer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n\n        ChannelPipeline pipeline = ch.pipeline();\n\n        //加入一个出站的handler 对数据进行一个编码\n        pipeline.addLast(new MyLongToByteEncoder());\n\n        //这时一个入站的解码器(入站handler )\n        pipeline.addLast(new MyByteToLongDecoder());\n        //加入一个自定义的handler ， 处理业务\n        pipeline.addLast(new MyClientHandler());\n\n\n    }\n}\n```\n\nMyClientHandler\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.util.CharsetUtil;\n\nimport java.nio.charset.Charset;\n\npublic class MyClientHandler  extends SimpleChannelInboundHandler<Long> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Long msg) throws Exception {\n\n        System.out.println(\"服务器的ip=\" + ctx.channel().remoteAddress());\n        System.out.println(\"收到服务器消息=\" + msg);\n\n    }\n\n    //重写channelActive 发送数据\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"MyClientHandler 发送数据\");\n        //ctx.writeAndFlush(Unpooled.copiedBuffer(\"\"))\n        ctx.writeAndFlush(123456L); //发送的是一个long\n    }\n}\n```\n\n### 出站入站\n\n关于出站入站，很多人可能有点迷糊\n1）客户端有出站入站，服务端也有出站入站\n2）以客户端为例，如果有服务端传送的数据到达客户端，那么对于客户端来说就是入站；\n 如果客户端传送数据到服务端，那么对于客户端来说就是出站；\n 同理，对于服务端来说，也是一样的，有数据来就是入站，有数据输出就是出站\n3）为什么服务端和客户端的Serverhandler都是继承`SimpleChannelInboundHandler`，而没有`ChannelOutboundHandler`出站类？\n 实际上当我们在handler中调用ctx.writeAndFlush()方法后，就会将数据交给ChannelOutboundHandler进行出站处理，只是我们没有去定义出站类而已，若有需求可以自己去实现ChannelOutboundHandler出站类\n4）总结就是客户端和服务端都有出站和入站的操作\n **服务端发数据给客户端：**服务端—>出站—>Socket通道—>入站—>客户端\n\n **客户端发数据给服务端：**客户端—>出站—>Socket通道—>入站—>服务端\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0007.png?x-oss-process=style/qingyun)\n\n## ByteToMessageDecoder的小细节\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\nimport io.netty.util.CharsetUtil;\n\nimport java.nio.charset.Charset;\n\npublic class MyClientHandler  extends SimpleChannelInboundHandler<Long> {\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, Long msg) throws Exception {\n\n        System.out.println(\"服务器的ip=\" + ctx.channel().remoteAddress());\n        System.out.println(\"收到服务器消息=\" + msg);\n\n    }\n\n    //重写channelActive 发送数据\n\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        System.out.println(\"MyClientHandler 发送数据\");\n\n        //分析\n        //1. \"abcdabcdabcdabcd\" 是 16个字节\n        ctx.writeAndFlush(Unpooled.copiedBuffer(\"abcdabcdabcdabcd\",CharsetUtil.UTF_8));\n\n    }\n}\n```\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ByteToMessageDecoder;\n\nimport java.util.List;\n\npublic class MyByteToLongDecoder extends ByteToMessageDecoder {\n    /**\n     *\n     * decode 会根据接收的数据，被调用多次, 直到确定没有新的元素被添加到list\n     * , 或者是ByteBuf 没有更多的可读字节为止\n     * 如果list out 不为空，就会将list的内容传递给下一个 channelinboundhandler处理,\n     * 该处理器的方法也会被调用多次\n     *\n     * @param ctx 上下文对象\n     * @param in 入站的 ByteBuf\n     * @param out List 集合，将解码后的数据传给下一个handler\n     * @throws Exception\n     */\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n\n        System.out.println(\"MyByteToLongDecoder 被调用\");\n        //因为 long 8个字节, 需要判断有8个字节，才能读取一个long\n        if(in.readableBytes() >= 8) {\n            out.add(in.readLong());\n        }\n    }\n}\n```\n\n由于发送的字符串是16字节，根据上面注释说的内容，decode会被调用两次\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0010.png?x-oss-process=style/qingyun)\n\n同时又引出了一个小问题\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0011.png?x-oss-process=style/qingyun)当我们`MyClientHandler`传一个Long时，会调用我们的`MyLongToByteEncoder`的编码器。那么控制台就会打印这样一句话：**MyLongToByteEncoder encode 被调用**。但是这里并没有调用编码器，这是为什么呢？\n\n1. `MyClientHandler`这个处理器的后一个处理器是`MyLongToByteEncoder`\n2. `MyLongToByteEncoder`的父类是`MessageToByteEncoder`，在`MessageToByteEncoder`中有下面的一个方法\n\n```java\n@Override\n    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n        ByteBuf buf = null;\n        try {\n            //这里会判断当前msg 是不是应该处理的类型，如果是就处理，不是就跳过encode\n            if (acceptOutboundMessage(msg)) {\n                @SuppressWarnings(\"unchecked\")\n                I cast = (I) msg;\n                buf = allocateBuffer(ctx, cast, preferDirect);\n                try {\n                    encode(ctx, cast, buf);\n                } finally {\n                    ReferenceCountUtil.release(cast);\n                }\n\n                if (buf.isReadable()) {\n                    ctx.write(buf, promise);\n                } else {\n                    buf.release();\n                    ctx.write(Unpooled.EMPTY_BUFFER, promise);\n                }\n                buf = null;\n            } else {\n                ctx.write(msg, promise);\n            }\n        } catch (EncoderException e) {\n            throw e;\n        } catch (Throwable e) {\n            throw new EncoderException(e);\n        } finally {\n            if (buf != null) {\n                buf.release();\n            }\n        }\n    }\n```\n\n当我们以这样的形式发送数据\n\n```java\nctx.writeAndFlush(Unpooled.copiedBuffer(\"abcdabcdabcdabcd\",CharsetUtil.UTF_8));\n```\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0012.png?x-oss-process=style/qingyun)\n\n这两个类型并不匹配，也就不会走编码器。因此我们编写 Encoder 是要注意传入的数据类型和处理的数据类型一致\n\n**结论：**\n\n- 不论解码器 `handler` 还是编码器 `handler` 即接收的消息类型必须与待处理的消息类型一致，否则该 `handler` 不会被执行\n- 在解码器进行数据解码时，需要判断缓存区（`ByteBuf`）的数据是否足够，否则接收到的结果会期望结果可能不一致。\n\n## 解码器 - ReplayingDecoder\n\n1. `public abstract class ReplayingDecoder<S> extends ByteToMessageDecoder`\n2. `ReplayingDecoder` 扩展了 `ByteToMessageDecoder` 类，使用这个类，我们不必调用 `readableBytes()` 方法，也就不用判断还有没有足够的数据来读取。参数 `S` 指定了用户状态管理的类型，其中 `Void` 代表不需要状态管理\n3. 应用实例：使用 `ReplayingDecoder` 编写解码器，对前面的案例进行简化[案例演示]\n\n```java\npackage com.atguigu.netty.inboundhandlerandoutboundhandler;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ReplayingDecoder;\n\nimport java.util.List;\n\npublic class MyByteToLongDecoder2 extends ReplayingDecoder<Void> {\n    \n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        System.out.println(\"MyByteToLongDecoder2 被调用\");\n        //在 ReplayingDecoder 不需要判断数据是否足够读取，内部会进行处理判断\n        out.add(in.readLong());\n    }\n}\n```\n\n1. ```\n   ReplayingDecoder\n   ```\n\n    使用方便，但它也有一些局限性：\n\n   - 并不是所有的 `ByteBuf` 操作都被支持，如果调用了一个不被支持的方法，将会抛出一个 `UnsupportedOperationException`。\n   - `ReplayingDecoder` 在某些情况下可能稍慢于 `ByteToMessageDecoder`，例如网络缓慢并且消息格式复杂时，消息会被拆成了多个碎片，速度变慢\n\n其它编解码器\n\n1. `LineBasedFrameDecoder`：这个类在 `Netty` 内部也有使用，它使用行尾控制字符（\\n或者\\r\\n）作为分隔符来解析数据。\n2. `DelimiterBasedFrameDecoder`：使用自定义的特殊字符作为消息的分隔符。\n3. `HttpObjectDecoder`：一个 `HTTP` 数据的解码器\n4. `LengthFieldBasedFrameDecoder`：通过指定长度来标识整包消息，这样就可以自动的处理黏包和半包消息。\n","slug":"从B站学习的Netty16","published":1,"updated":"2021-12-03T00:50:42.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2tm007bo4vb25t82k9h","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a><br>\nNetty 编解码器和 Handler 调用机制</p>\n<h2 id=\"基本说明\">基本说明</h2>\n<ol>\n<li><code>Netty</code> 的组件设计：<code>Netty</code> 的主要组件有 <code>Channel</code>、<code>EventLoop</code>、<code>ChannelFuture</code>、<code>ChannelHandler</code>、<code>ChannelPipe</code> 等</li>\n<li><code>ChannelHandler</code> 充当了处理入站和出站数据的应用程序逻辑的容器。例如，实现 <code>ChannelInboundHandler</code> 接口（或 <code>ChannelInboundHandlerAdapter</code>），你就可以接收入站事件和数据，这些数据会被业务逻辑处理。当要给客户端发送响应时，也可以从 <code>ChannelInboundHandler</code> 冲刷数据。业务逻辑通常写在一个或者多个 <code>ChannelInboundHandler</code> 中。<code>ChannelOutboundHandler</code> 原理一样，只不过它是用来处理出站数据的</li>\n<li><code>ChannelPipeline</code> 提供了 <code>ChannelHandler</code> 链的容器。以客户端应用程序为例，如果事件的运动方向是从客户端到服务端的，那么我们称这些事件为出站的，即客户端发送给服务端的数据会通过 <code>pipeline</code> 中的一系列 <code>ChannelOutboundHandler</code>，并被这些 <code>Handler</code> 处理，反之则称为入站的</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0004.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<blockquote>\n<p>出站，入站如果搞不清楚，看下面的<strong>Netty的handler链的调用机制</strong>，通过一个例子和图讲清楚</p>\n</blockquote>\n<p>编码解码器</p>\n<ol>\n<li>当 <code>Netty</code> 发送或者接受一个消息的时候，就将会发生一次数据转换。入站消息会被解码：从字节转换为另一种格式（比如 <code>java</code> 对象）；如果是出站消息，它会被编码成字节。</li>\n<li><code>Netty</code> 提供一系列实用的编解码器，他们都实现了 <code>ChannelInboundHadnler</code> 或者 <code>ChannelOutboundHandler</code> 接口。在这些类中，<code>channelRead</code> 方法已经被重写了。以入站为例，对于每个从入站 <code>Channel</code> 读取的消息，这个方法会被调用。随后，它将调用由解码器所提供的 <code>decode()</code> 方法进行解码，并将已经解码的字节转发给 <code>ChannelPipeline</code> 中的下一个 <code>ChannelInboundHandler</code>。</li>\n</ol>\n<p>解码器 - ByteToMessageDecoder</p>\n<ol>\n<li>关系继承图</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0005.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ol>\n<li>由于不可能知道远程节点是否会一次性发送一个完整的信息，<code>tcp</code> 有可能出现粘包拆包的问题，这个类会对入站数据进行缓冲，直到它准备好被处理.【后面有说TCP的粘包和拆包问题】</li>\n<li>一个关于 <code>ByteToMessageDecoder</code> 实例分析</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0006.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>Netty的handler链的调用机制</p>\n<p>使用自定义的编码器和解码器来说明 <code>Netty</code> 的 <code>handler</code> 调用机制<br>\n客户端发送 <code>long</code> -&gt; 服务器<br>\n服务端发送 <code>long</code> -&gt; 客户端</p>\n<blockquote>\n<p>读者可以看下这个图，带着这个图去看下面的例子。</p>\n</blockquote>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0007.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h3 id=\"MyServer\">MyServer</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(<span class=\"keyword\">new</span> MyServerInitializer()); <span class=\"comment\">//自定义一个初始化类</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(<span class=\"number\">7000</span>).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyServerInitializer\">MyServerInitializer</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, Long msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从客户端&quot;</span> + ctx.channel().remoteAddress() + <span class=\"string\">&quot; 读取到long &quot;</span> + msg);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//给客户端发送一个long</span></span><br><span class=\"line\">        ctx.writeAndFlush(<span class=\"number\">98765L</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyByteToLongDecoder</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.ByteToMessageDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyByteToLongDecoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">ByteToMessageDecoder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List&lt;Object&gt; list)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyByteToLongDecoder 被调用&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (byteBuf.readableBytes() &gt;= <span class=\"number\">8</span>)&#123;</span><br><span class=\"line\">            list.add(byteBuf.readLong());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyLongToByteEncoder\">MyLongToByteEncoder</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.MessageToByteEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLongToByteEncoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">MessageToByteEncoder</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(ChannelHandlerContext channelHandlerContext, Long aLong, ByteBuf byteBuf)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyLongToByteEncoder encode 被调用&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;msg=&quot;</span> + aLong);</span><br><span class=\"line\">        byteBuf.writeLong(aLong);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyServerHandler\">MyServerHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, Long msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从客户端&quot;</span> + ctx.channel().remoteAddress() + <span class=\"string\">&quot; 读取到long &quot;</span> + msg);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//给客户端发送一个long</span></span><br><span class=\"line\">        ctx.writeAndFlush(<span class=\"number\">98765L</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyClient\">MyClient</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  <span class=\"keyword\">throws</span>  Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\">            bootstrap.group(group).channel(NioSocketChannel.class)</span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> MyClientInitializer()); <span class=\"comment\">//自定义一个初始化类</span></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">7000</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyClientInitializer\">MyClientInitializer</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加入一个出站的handler 对数据进行一个编码</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyLongToByteEncoder());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这时一个入站的解码器(入站handler )</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyByteToLongDecoder());</span><br><span class=\"line\">        <span class=\"comment\">//加入一个自定义的handler ， 处理业务</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyClientHandler());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyClientHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientHandler</span>  <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, Long msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器的ip=&quot;</span> + ctx.channel().remoteAddress());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;收到服务器消息=&quot;</span> + msg);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重写channelActive 发送数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyClientHandler 发送数据&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;&quot;))</span></span><br><span class=\"line\">        ctx.writeAndFlush(<span class=\"number\">123456L</span>); <span class=\"comment\">//发送的是一个long</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"出站入站\">出站入站</h3>\n<p>关于出站入站，很多人可能有点迷糊<br>\n1）客户端有出站入站，服务端也有出站入站<br>\n2）以客户端为例，如果有服务端传送的数据到达客户端，那么对于客户端来说就是入站；<br>\n如果客户端传送数据到服务端，那么对于客户端来说就是出站；<br>\n同理，对于服务端来说，也是一样的，有数据来就是入站，有数据输出就是出站<br>\n3）为什么服务端和客户端的Serverhandler都是继承<code>SimpleChannelInboundHandler</code>，而没有<code>ChannelOutboundHandler</code>出站类？<br>\n实际上当我们在handler中调用ctx.writeAndFlush()方法后，就会将数据交给ChannelOutboundHandler进行出站处理，只是我们没有去定义出站类而已，若有需求可以自己去实现ChannelOutboundHandler出站类<br>\n4）总结就是客户端和服务端都有出站和入站的操作<br>\n**服务端发数据给客户端：**服务端—&gt;出站—&gt;Socket通道—&gt;入站—&gt;客户端</p>\n<p>**客户端发数据给服务端：**客户端—&gt;出站—&gt;Socket通道—&gt;入站—&gt;服务端</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0007.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h2 id=\"ByteToMessageDecoder的小细节\">ByteToMessageDecoder的小细节</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientHandler</span>  <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, Long msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器的ip=&quot;</span> + ctx.channel().remoteAddress());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;收到服务器消息=&quot;</span> + msg);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重写channelActive 发送数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyClientHandler 发送数据&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//分析</span></span><br><span class=\"line\">        <span class=\"comment\">//1. &quot;abcdabcdabcdabcd&quot; 是 16个字节</span></span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;abcdabcdabcdabcd&quot;</span>,CharsetUtil.UTF_8));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.ByteToMessageDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyByteToLongDecoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">ByteToMessageDecoder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * decode 会根据接收的数据，被调用多次, 直到确定没有新的元素被添加到list</span></span><br><span class=\"line\"><span class=\"comment\">     * , 或者是ByteBuf 没有更多的可读字节为止</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果list out 不为空，就会将list的内容传递给下一个 channelinboundhandler处理,</span></span><br><span class=\"line\"><span class=\"comment\">     * 该处理器的方法也会被调用多次</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ctx 上下文对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> in 入站的 ByteBuf</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> out List 集合，将解码后的数据传给下一个handler</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyByteToLongDecoder 被调用&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//因为 long 8个字节, 需要判断有8个字节，才能读取一个long</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(in.readableBytes() &gt;= <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">            out.add(in.readLong());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于发送的字符串是16字节，根据上面注释说的内容，decode会被调用两次</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0010.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>同时又引出了一个小问题</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0011.png?x-oss-process=style/qingyun\" alt=\"img\">当我们<code>MyClientHandler</code>传一个Long时，会调用我们的<code>MyLongToByteEncoder</code>的编码器。那么控制台就会打印这样一句话：<strong>MyLongToByteEncoder encode 被调用</strong>。但是这里并没有调用编码器，这是为什么呢？</p>\n<ol>\n<li><code>MyClientHandler</code>这个处理器的后一个处理器是<code>MyLongToByteEncoder</code></li>\n<li><code>MyLongToByteEncoder</code>的父类是<code>MessageToByteEncoder</code>，在<code>MessageToByteEncoder</code>中有下面的一个方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ByteBuf buf = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里会判断当前msg 是不是应该处理的类型，如果是就处理，不是就跳过encode</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (acceptOutboundMessage(msg)) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                I cast = (I) msg;</span><br><span class=\"line\">                buf = allocateBuffer(ctx, cast, preferDirect);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    encode(ctx, cast, buf);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    ReferenceCountUtil.release(cast);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (buf.isReadable()) &#123;</span><br><span class=\"line\">                    ctx.write(buf, promise);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    buf.release();</span><br><span class=\"line\">                    ctx.write(Unpooled.EMPTY_BUFFER, promise);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                buf = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ctx.write(msg, promise);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (EncoderException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EncoderException(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (buf != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                buf.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>当我们以这样的形式发送数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;abcdabcdabcdabcd&quot;</span>,CharsetUtil.UTF_8));</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0012.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>这两个类型并不匹配，也就不会走编码器。因此我们编写 Encoder 是要注意传入的数据类型和处理的数据类型一致</p>\n<p><strong>结论：</strong></p>\n<ul>\n<li>不论解码器 <code>handler</code> 还是编码器 <code>handler</code> 即接收的消息类型必须与待处理的消息类型一致，否则该 <code>handler</code> 不会被执行</li>\n<li>在解码器进行数据解码时，需要判断缓存区（<code>ByteBuf</code>）的数据是否足够，否则接收到的结果会期望结果可能不一致。</li>\n</ul>\n<h2 id=\"解码器-ReplayingDecoder\">解码器 - ReplayingDecoder</h2>\n<ol>\n<li><code>public abstract class ReplayingDecoder&lt;S&gt; extends ByteToMessageDecoder</code></li>\n<li><code>ReplayingDecoder</code> 扩展了 <code>ByteToMessageDecoder</code> 类，使用这个类，我们不必调用 <code>readableBytes()</code> 方法，也就不用判断还有没有足够的数据来读取。参数 <code>S</code> 指定了用户状态管理的类型，其中 <code>Void</code> 代表不需要状态管理</li>\n<li>应用实例：使用 <code>ReplayingDecoder</code> 编写解码器，对前面的案例进行简化[案例演示]</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.ReplayingDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyByteToLongDecoder2</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReplayingDecoder</span>&lt;<span class=\"title\">Void</span>&gt; </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyByteToLongDecoder2 被调用&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//在 ReplayingDecoder 不需要判断数据是否足够读取，内部会进行处理判断</span></span><br><span class=\"line\">        out.add(in.readLong());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<pre><code>ReplayingDecoder\n</code></pre>\n<p>使用方便，但它也有一些局限性：</p>\n<ul>\n<li>并不是所有的 <code>ByteBuf</code> 操作都被支持，如果调用了一个不被支持的方法，将会抛出一个 <code>UnsupportedOperationException</code>。</li>\n<li><code>ReplayingDecoder</code> 在某些情况下可能稍慢于 <code>ByteToMessageDecoder</code>，例如网络缓慢并且消息格式复杂时，消息会被拆成了多个碎片，速度变慢</li>\n</ul>\n</li>\n</ol>\n<p>其它编解码器</p>\n<ol>\n<li><code>LineBasedFrameDecoder</code>：这个类在 <code>Netty</code> 内部也有使用，它使用行尾控制字符（\\n或者\\r\\n）作为分隔符来解析数据。</li>\n<li><code>DelimiterBasedFrameDecoder</code>：使用自定义的特殊字符作为消息的分隔符。</li>\n<li><code>HttpObjectDecoder</code>：一个 <code>HTTP</code> 数据的解码器</li>\n<li><code>LengthFieldBasedFrameDecoder</code>：通过指定长度来标识整包消息，这样就可以自动的处理黏包和半包消息。</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a><br>\nNetty 编解码器和 Handler 调用机制</p>\n<h2 id=\"基本说明\">基本说明</h2>\n<ol>\n<li><code>Netty</code> 的组件设计：<code>Netty</code> 的主要组件有 <code>Channel</code>、<code>EventLoop</code>、<code>ChannelFuture</code>、<code>ChannelHandler</code>、<code>ChannelPipe</code> 等</li>\n<li><code>ChannelHandler</code> 充当了处理入站和出站数据的应用程序逻辑的容器。例如，实现 <code>ChannelInboundHandler</code> 接口（或 <code>ChannelInboundHandlerAdapter</code>），你就可以接收入站事件和数据，这些数据会被业务逻辑处理。当要给客户端发送响应时，也可以从 <code>ChannelInboundHandler</code> 冲刷数据。业务逻辑通常写在一个或者多个 <code>ChannelInboundHandler</code> 中。<code>ChannelOutboundHandler</code> 原理一样，只不过它是用来处理出站数据的</li>\n<li><code>ChannelPipeline</code> 提供了 <code>ChannelHandler</code> 链的容器。以客户端应用程序为例，如果事件的运动方向是从客户端到服务端的，那么我们称这些事件为出站的，即客户端发送给服务端的数据会通过 <code>pipeline</code> 中的一系列 <code>ChannelOutboundHandler</code>，并被这些 <code>Handler</code> 处理，反之则称为入站的</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0004.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<blockquote>\n<p>出站，入站如果搞不清楚，看下面的<strong>Netty的handler链的调用机制</strong>，通过一个例子和图讲清楚</p>\n</blockquote>\n<p>编码解码器</p>\n<ol>\n<li>当 <code>Netty</code> 发送或者接受一个消息的时候，就将会发生一次数据转换。入站消息会被解码：从字节转换为另一种格式（比如 <code>java</code> 对象）；如果是出站消息，它会被编码成字节。</li>\n<li><code>Netty</code> 提供一系列实用的编解码器，他们都实现了 <code>ChannelInboundHadnler</code> 或者 <code>ChannelOutboundHandler</code> 接口。在这些类中，<code>channelRead</code> 方法已经被重写了。以入站为例，对于每个从入站 <code>Channel</code> 读取的消息，这个方法会被调用。随后，它将调用由解码器所提供的 <code>decode()</code> 方法进行解码，并将已经解码的字节转发给 <code>ChannelPipeline</code> 中的下一个 <code>ChannelInboundHandler</code>。</li>\n</ol>\n<p>解码器 - ByteToMessageDecoder</p>\n<ol>\n<li>关系继承图</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0005.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<ol>\n<li>由于不可能知道远程节点是否会一次性发送一个完整的信息，<code>tcp</code> 有可能出现粘包拆包的问题，这个类会对入站数据进行缓冲，直到它准备好被处理.【后面有说TCP的粘包和拆包问题】</li>\n<li>一个关于 <code>ByteToMessageDecoder</code> 实例分析</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0006.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>Netty的handler链的调用机制</p>\n<p>使用自定义的编码器和解码器来说明 <code>Netty</code> 的 <code>handler</code> 调用机制<br>\n客户端发送 <code>long</code> -&gt; 服务器<br>\n服务端发送 <code>long</code> -&gt; 客户端</p>\n<blockquote>\n<p>读者可以看下这个图，带着这个图去看下面的例子。</p>\n</blockquote>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0007.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h3 id=\"MyServer\">MyServer</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(<span class=\"keyword\">new</span> MyServerInitializer()); <span class=\"comment\">//自定义一个初始化类</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(<span class=\"number\">7000</span>).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyServerInitializer\">MyServerInitializer</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, Long msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从客户端&quot;</span> + ctx.channel().remoteAddress() + <span class=\"string\">&quot; 读取到long &quot;</span> + msg);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//给客户端发送一个long</span></span><br><span class=\"line\">        ctx.writeAndFlush(<span class=\"number\">98765L</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyByteToLongDecoder</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.ByteToMessageDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyByteToLongDecoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">ByteToMessageDecoder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext channelHandlerContext, ByteBuf byteBuf, List&lt;Object&gt; list)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyByteToLongDecoder 被调用&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (byteBuf.readableBytes() &gt;= <span class=\"number\">8</span>)&#123;</span><br><span class=\"line\">            list.add(byteBuf.readLong());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyLongToByteEncoder\">MyLongToByteEncoder</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> edu.IO.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.MessageToByteEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLongToByteEncoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">MessageToByteEncoder</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(ChannelHandlerContext channelHandlerContext, Long aLong, ByteBuf byteBuf)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyLongToByteEncoder encode 被调用&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;msg=&quot;</span> + aLong);</span><br><span class=\"line\">        byteBuf.writeLong(aLong);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyServerHandler\">MyServerHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, Long msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;从客户端&quot;</span> + ctx.channel().remoteAddress() + <span class=\"string\">&quot; 读取到long &quot;</span> + msg);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//给客户端发送一个long</span></span><br><span class=\"line\">        ctx.writeAndFlush(<span class=\"number\">98765L</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyClient\">MyClient</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  <span class=\"keyword\">throws</span>  Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\">            bootstrap.group(group).channel(NioSocketChannel.class)</span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> MyClientInitializer()); <span class=\"comment\">//自定义一个初始化类</span></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">7000</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyClientInitializer\">MyClientInitializer</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加入一个出站的handler 对数据进行一个编码</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyLongToByteEncoder());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这时一个入站的解码器(入站handler )</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyByteToLongDecoder());</span><br><span class=\"line\">        <span class=\"comment\">//加入一个自定义的handler ， 处理业务</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyClientHandler());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyClientHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientHandler</span>  <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, Long msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器的ip=&quot;</span> + ctx.channel().remoteAddress());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;收到服务器消息=&quot;</span> + msg);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重写channelActive 发送数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyClientHandler 发送数据&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//ctx.writeAndFlush(Unpooled.copiedBuffer(&quot;&quot;))</span></span><br><span class=\"line\">        ctx.writeAndFlush(<span class=\"number\">123456L</span>); <span class=\"comment\">//发送的是一个long</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"出站入站\">出站入站</h3>\n<p>关于出站入站，很多人可能有点迷糊<br>\n1）客户端有出站入站，服务端也有出站入站<br>\n2）以客户端为例，如果有服务端传送的数据到达客户端，那么对于客户端来说就是入站；<br>\n如果客户端传送数据到服务端，那么对于客户端来说就是出站；<br>\n同理，对于服务端来说，也是一样的，有数据来就是入站，有数据输出就是出站<br>\n3）为什么服务端和客户端的Serverhandler都是继承<code>SimpleChannelInboundHandler</code>，而没有<code>ChannelOutboundHandler</code>出站类？<br>\n实际上当我们在handler中调用ctx.writeAndFlush()方法后，就会将数据交给ChannelOutboundHandler进行出站处理，只是我们没有去定义出站类而已，若有需求可以自己去实现ChannelOutboundHandler出站类<br>\n4）总结就是客户端和服务端都有出站和入站的操作<br>\n**服务端发数据给客户端：**服务端—&gt;出站—&gt;Socket通道—&gt;入站—&gt;客户端</p>\n<p>**客户端发数据给服务端：**客户端—&gt;出站—&gt;Socket通道—&gt;入站—&gt;服务端</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0007.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h2 id=\"ByteToMessageDecoder的小细节\">ByteToMessageDecoder的小细节</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.util.CharsetUtil;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientHandler</span>  <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, Long msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器的ip=&quot;</span> + ctx.channel().remoteAddress());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;收到服务器消息=&quot;</span> + msg);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//重写channelActive 发送数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyClientHandler 发送数据&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//分析</span></span><br><span class=\"line\">        <span class=\"comment\">//1. &quot;abcdabcdabcdabcd&quot; 是 16个字节</span></span><br><span class=\"line\">        ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;abcdabcdabcdabcd&quot;</span>,CharsetUtil.UTF_8));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.ByteToMessageDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyByteToLongDecoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">ByteToMessageDecoder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * decode 会根据接收的数据，被调用多次, 直到确定没有新的元素被添加到list</span></span><br><span class=\"line\"><span class=\"comment\">     * , 或者是ByteBuf 没有更多的可读字节为止</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果list out 不为空，就会将list的内容传递给下一个 channelinboundhandler处理,</span></span><br><span class=\"line\"><span class=\"comment\">     * 该处理器的方法也会被调用多次</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ctx 上下文对象</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> in 入站的 ByteBuf</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> out List 集合，将解码后的数据传给下一个handler</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyByteToLongDecoder 被调用&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//因为 long 8个字节, 需要判断有8个字节，才能读取一个long</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(in.readableBytes() &gt;= <span class=\"number\">8</span>) &#123;</span><br><span class=\"line\">            out.add(in.readLong());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于发送的字符串是16字节，根据上面注释说的内容，decode会被调用两次</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0010.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>同时又引出了一个小问题</p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0011.png?x-oss-process=style/qingyun\" alt=\"img\">当我们<code>MyClientHandler</code>传一个Long时，会调用我们的<code>MyLongToByteEncoder</code>的编码器。那么控制台就会打印这样一句话：<strong>MyLongToByteEncoder encode 被调用</strong>。但是这里并没有调用编码器，这是为什么呢？</p>\n<ol>\n<li><code>MyClientHandler</code>这个处理器的后一个处理器是<code>MyLongToByteEncoder</code></li>\n<li><code>MyLongToByteEncoder</code>的父类是<code>MessageToByteEncoder</code>，在<code>MessageToByteEncoder</code>中有下面的一个方法</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ByteBuf buf = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//这里会判断当前msg 是不是应该处理的类型，如果是就处理，不是就跳过encode</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (acceptOutboundMessage(msg)) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                I cast = (I) msg;</span><br><span class=\"line\">                buf = allocateBuffer(ctx, cast, preferDirect);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    encode(ctx, cast, buf);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    ReferenceCountUtil.release(cast);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (buf.isReadable()) &#123;</span><br><span class=\"line\">                    ctx.write(buf, promise);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    buf.release();</span><br><span class=\"line\">                    ctx.write(Unpooled.EMPTY_BUFFER, promise);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                buf = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                ctx.write(msg, promise);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (EncoderException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> EncoderException(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (buf != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                buf.release();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>当我们以这样的形式发送数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctx.writeAndFlush(Unpooled.copiedBuffer(<span class=\"string\">&quot;abcdabcdabcdabcd&quot;</span>,CharsetUtil.UTF_8));</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0012.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>这两个类型并不匹配，也就不会走编码器。因此我们编写 Encoder 是要注意传入的数据类型和处理的数据类型一致</p>\n<p><strong>结论：</strong></p>\n<ul>\n<li>不论解码器 <code>handler</code> 还是编码器 <code>handler</code> 即接收的消息类型必须与待处理的消息类型一致，否则该 <code>handler</code> 不会被执行</li>\n<li>在解码器进行数据解码时，需要判断缓存区（<code>ByteBuf</code>）的数据是否足够，否则接收到的结果会期望结果可能不一致。</li>\n</ul>\n<h2 id=\"解码器-ReplayingDecoder\">解码器 - ReplayingDecoder</h2>\n<ol>\n<li><code>public abstract class ReplayingDecoder&lt;S&gt; extends ByteToMessageDecoder</code></li>\n<li><code>ReplayingDecoder</code> 扩展了 <code>ByteToMessageDecoder</code> 类，使用这个类，我们不必调用 <code>readableBytes()</code> 方法，也就不用判断还有没有足够的数据来读取。参数 <code>S</code> 指定了用户状态管理的类型，其中 <code>Void</code> 代表不需要状态管理</li>\n<li>应用实例：使用 <code>ReplayingDecoder</code> 编写解码器，对前面的案例进行简化[案例演示]</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.inboundhandlerandoutboundhandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.ReplayingDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyByteToLongDecoder2</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReplayingDecoder</span>&lt;<span class=\"title\">Void</span>&gt; </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyByteToLongDecoder2 被调用&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//在 ReplayingDecoder 不需要判断数据是否足够读取，内部会进行处理判断</span></span><br><span class=\"line\">        out.add(in.readLong());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>\n<pre><code>ReplayingDecoder\n</code></pre>\n<p>使用方便，但它也有一些局限性：</p>\n<ul>\n<li>并不是所有的 <code>ByteBuf</code> 操作都被支持，如果调用了一个不被支持的方法，将会抛出一个 <code>UnsupportedOperationException</code>。</li>\n<li><code>ReplayingDecoder</code> 在某些情况下可能稍慢于 <code>ByteToMessageDecoder</code>，例如网络缓慢并且消息格式复杂时，消息会被拆成了多个碎片，速度变慢</li>\n</ul>\n</li>\n</ol>\n<p>其它编解码器</p>\n<ol>\n<li><code>LineBasedFrameDecoder</code>：这个类在 <code>Netty</code> 内部也有使用，它使用行尾控制字符（\\n或者\\r\\n）作为分隔符来解析数据。</li>\n<li><code>DelimiterBasedFrameDecoder</code>：使用自定义的特殊字符作为消息的分隔符。</li>\n<li><code>HttpObjectDecoder</code>：一个 <code>HTTP</code> 数据的解码器</li>\n<li><code>LengthFieldBasedFrameDecoder</code>：通过指定长度来标识整包消息，这样就可以自动的处理黏包和半包消息。</li>\n</ol>\n"},{"title":"从B站学习的Netty18","abbrlink":1584270459,"date":"2021-12-03T00:51:16.000Z","copyright":false,"_content":" 转载: https://imlql.cn/\n # TCP 粘包和拆包及解决方案\n\nTCP 粘包和拆包基本介绍\n\n1. `TCP` 是面向连接的，面向流的，提供高可靠性服务。收发两端（客户端和服务器端）都要有一一成对的 `socket`，因此，发送端为了将多个发给接收端的包，更有效的发给对方，使用了优化方法（`Nagle` 算法），将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。这样做虽然提高了效率，但是接收端就难于分辨出完整的数据包了，因为面向流的通信是无消息保护边界的\n2. 由于 `TCP` 无消息保护边界,需要在接收端处理消息边界问题，也就是我们所说的粘包、拆包问题,看一张图\n3. `TCP` 粘包、拆包图解\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0015.png?x-oss-process=style/qingyun)\n\n假设客户端分别发送了两个数据包 `D1` 和 `D2` 给服务端，由于服务端一次读取到字节数是不确定的，故可能存在以下四种情况：\n\n1. 服务端分两次读取到了两个独立的数据包，分别是 `D1` 和 `D2`，没有粘包和拆包\n2. 服务端一次接受到了两个数据包，`D1` 和 `D2` 粘合在一起，称之为 `TCP` 粘包\n3. 服务端分两次读取到了数据包，第一次读取到了完整的 `D1` 包和 `D2` 包的部分内容，第二次读取到了 `D2` 包的剩余内容，这称之为 `TCP` 拆包\n4. 服务端分两次读取到了数据包，第一次读取到了 `D1` 包的部分内容 `D1_1`，第二次读取到了 `D1` 包的剩余部分内容 `D1_2` 和完整的 `D2` 包。\n\nTCP 粘包和拆包现象实例\n\n在编写 `Netty` 程序时，如果没有做处理，就会发生粘包和拆包的问题\n\n看一个具体的实例：\n\n```java\npackage com.atguigu.netty.tcp;\n\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MyServer {\n    public static void main(String[] args) throws Exception{\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new MyServerInitializer()); //自定义一个初始化类\n\n\n            ChannelFuture channelFuture = serverBootstrap.bind(7000).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n\n    }\n}\n```\n\nMyServerInitializer\n\n```java\npackage com.atguigu.netty.tcp;\n\n\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\n\npublic class MyServerInitializer extends ChannelInitializer<SocketChannel> {\n\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline pipeline = ch.pipeline();\n\n        pipeline.addLast(new MyServerHandler());\n    }\n}\n```\n\n### MyServerHandler\n\n```java\npackage com.atguigu.netty.tcp;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\nimport java.nio.charset.Charset;\nimport java.util.UUID;\n\npublic class MyServerHandler extends SimpleChannelInboundHandler<ByteBuf>{\n    private int count;\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        //cause.printStackTrace();\n        ctx.close();\n    }\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception {\n\n        byte[] buffer = new byte[msg.readableBytes()];\n        msg.readBytes(buffer);\n\n        //将buffer转成字符串\n        String message = new String(buffer, Charset.forName(\"utf-8\"));\n\n        System.out.println(\"服务器接收到数据 \" + message);\n        System.out.println(\"服务器接收到消息量=\" + (++this.count));\n\n        //服务器回送数据给客户端, 回送一个随机id ,\n        ByteBuf responseByteBuf = Unpooled.copiedBuffer(UUID.randomUUID().toString() + \" \", Charset.forName(\"utf-8\"));\n        ctx.writeAndFlush(responseByteBuf);\n\n    }\n}\n```\n\nMyClient\n\n```java\npackage com.atguigu.netty.tcp;\n\n\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class MyClient {\n    public static void main(String[] args)  throws  Exception{\n\n        EventLoopGroup group = new NioEventLoopGroup();\n\n        try {\n\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group).channel(NioSocketChannel.class)\n                    .handler(new MyClientInitializer()); //自定义一个初始化类\n\n            ChannelFuture channelFuture = bootstrap.connect(\"localhost\", 7000).sync();\n\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n### MyClientInitializer\n\n```java\npackage com.atguigu.netty.tcp;\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\n\npublic class MyClientInitializer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n\n        ChannelPipeline pipeline = ch.pipeline();\n        pipeline.addLast(new MyClientHandler());\n    }\n}\n```\n\n### MyClientHandler\n\n```java\npackage com.atguigu.netty.tcp;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\nimport java.nio.charset.Charset;\n\npublic class MyClientHandler extends SimpleChannelInboundHandler<ByteBuf> {\n\n    private int count;\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        //使用客户端发送10条数据 hello,server 编号\n        for(int i= 0; i< 10; ++i) {\n            ByteBuf buffer = Unpooled.copiedBuffer(\"hello,server \" + i, Charset.forName(\"utf-8\"));\n            ctx.writeAndFlush(buffer);\n        }\n    }\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception {\n        byte[] buffer = new byte[msg.readableBytes()];\n        msg.readBytes(buffer);\n\n        String message = new String(buffer, Charset.forName(\"utf-8\"));\n        System.out.println(\"客户端接收到消息=\" + message);\n        System.out.println(\"客户端接收消息数量=\" + (++this.count));\n\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n\n### 效果\n\n**第一次运行：**\n\n**Client**\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0016.png?x-oss-process=style/qingyun)\n\n**Server**\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0017.png?x-oss-process=style/qingyun)\n\n**第二次运行：**\n\n**Client**\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0018.png?x-oss-process=style/qingyun)\n\n**Server**\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0019.png?x-oss-process=style/qingyun)\n\n可以看到第一次运行时，服务器一次性将10个数据都接收了，第二次运行时分六次接收的，这就很形象的看出了TCP的粘包现象。\n\n## TCP 粘包和拆包解决方案\n\n1. 常用方案：使用自定义协议+编解码器来解决\n2. 关键就是要解决服务器端每次读取数据长度的问题，这个问题解决，就不会出现服务器多读或少读数据的问题，从而避免的 `TCP` 粘包、拆包。\n\n**看一个具体的实例**\n\n1. 要求客户端发送 `5` 个 `Message` 对象，客户端每次发送一个 `Message` 对象\n2. 服务器端每次接收一个 `Message`，分 `5` 次进行解码，每读取到一个 `Message`，会回复一个 `Message` 对象给客户端。\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0020.png?x-oss-process=style/qingyun)\n\n### MessageProtocol\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\n\n//协议包\npublic class MessageProtocol {\n    private int len; //关键\n    private byte[] content;\n\n    public int getLen() {\n        return len;\n    }\n\n    public void setLen(int len) {\n        this.len = len;\n    }\n\n    public byte[] getContent() {\n        return content;\n    }\n\n    public void setContent(byte[] content) {\n        this.content = content;\n    }\n}\n```\n\n### MyServer\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MyServer {\n    public static void main(String[] args) throws Exception{\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new MyServerInitializer()); //自定义一个初始化类\n\n\n            ChannelFuture channelFuture = serverBootstrap.bind(7000).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n\n    }\n}\n```\n\nMyServerInitializer\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\n\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\n\npublic class MyServerInitializer extends ChannelInitializer<SocketChannel> {\n\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline pipeline = ch.pipeline();\n\n        pipeline.addLast(new MyMessageDecoder());//解码器\n        pipeline.addLast(new MyMessageEncoder());//编码器\n        pipeline.addLast(new MyServerHandler());\n    }\n}\n```\n\nMyServerHandler\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\nimport java.nio.charset.Charset;\nimport java.util.UUID;\n\n\n//处理业务的handler\npublic class MyServerHandler extends SimpleChannelInboundHandler<MessageProtocol>{\n    private int count;\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        //cause.printStackTrace();\n        ctx.close();\n    }\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, MessageProtocol msg) throws Exception {\n\n        //接收到数据，并处理\n        int len = msg.getLen();\n        byte[] content = msg.getContent();\n\n        System.out.println(\"服务器接收到信息如下\");\n        System.out.println(\"长度=\" + len);\n        System.out.println(\"内容=\" + new String(content, Charset.forName(\"utf-8\")));\n\n        System.out.println(\"服务器接收到消息包数量=\" + (++this.count));\n\n        //回复消息\n        System.out.println(\"服务端开始回复消息------\");\n        String responseContent = UUID.randomUUID().toString();\n        int responseLen = responseContent.getBytes(\"utf-8\").length;\n        byte[]  responseContent2 = responseContent.getBytes(\"utf-8\");\n        //构建一个协议包\n        MessageProtocol messageProtocol = new MessageProtocol();\n        messageProtocol.setLen(responseLen);\n        messageProtocol.setContent(responseContent2);\n\n        ctx.writeAndFlush(messageProtocol);\n\n\n    }\n}\n```\n\nMyClient\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\n\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class MyClient {\n    public static void main(String[] args)  throws  Exception{\n\n        EventLoopGroup group = new NioEventLoopGroup();\n\n        try {\n\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group).channel(NioSocketChannel.class)\n                    .handler(new MyClientInitializer()); //自定义一个初始化类\n\n            ChannelFuture channelFuture = bootstrap.connect(\"localhost\", 7000).sync();\n\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n### MyClientInitializer\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\n\npublic class MyClientInitializer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n\n        ChannelPipeline pipeline = ch.pipeline();\n        pipeline.addLast(new MyMessageEncoder()); //加入编码器\n        pipeline.addLast(new MyMessageDecoder()); //加入解码器\n        pipeline.addLast(new MyClientHandler());\n    }\n}\n```\n\n### MyClientHandler\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\nimport java.nio.charset.Charset;\n\npublic class MyClientHandler extends SimpleChannelInboundHandler<MessageProtocol> {\n\n    private int count;\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        //使用客户端发送10条数据 \"今天天气冷，吃火锅\" 编号\n\n        for(int i = 0; i< 5; i++) {\n            String mes = \"今天天气冷，吃火锅\";\n            byte[] content = mes.getBytes(Charset.forName(\"utf-8\"));\n            int length = mes.getBytes(Charset.forName(\"utf-8\")).length;\n\n            //创建协议包对象\n            MessageProtocol messageProtocol = new MessageProtocol();\n            messageProtocol.setLen(length);\n            messageProtocol.setContent(content);\n            ctx.writeAndFlush(messageProtocol);\n\n        }\n\n    }\n\n//    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, MessageProtocol msg) throws Exception {\n\n        int len = msg.getLen();\n        byte[] content = msg.getContent();\n\n        System.out.println(\"客户端接收到消息如下\");\n        System.out.println(\"长度=\" + len);\n        System.out.println(\"内容=\" + new String(content, Charset.forName(\"utf-8\")));\n\n        System.out.println(\"客户端接收消息数量=\" + (++this.count));\n\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        System.out.println(\"异常消息=\" + cause.getMessage());\n        ctx.close();\n    }\n}\n```\n\n### MyMessageDecoder\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ReplayingDecoder;\n\nimport java.util.List;\n\npublic class MyMessageDecoder extends ReplayingDecoder<Void> {\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        System.out.println();\n        System.out.println();\n        System.out.println(\"MyMessageDecoder decode 被调用\");\n        //需要将得到二进制字节码-> MessageProtocol 数据包(对象)\n        int length = in.readInt();\n\n        byte[] content = new byte[length];\n        in.readBytes(content);\n\n        //封装成 MessageProtocol 对象，放入 out， 传递下一个handler业务处理\n        MessageProtocol messageProtocol = new MessageProtocol();\n        messageProtocol.setLen(length);\n        messageProtocol.setContent(content);\n\n        //放入out传给下一个hanlder进行处理\n        out.add(messageProtocol);\n\n    }\n}\n```\n\nMyMessageEncoder\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.MessageToByteEncoder;\n\npublic class MyMessageEncoder extends MessageToByteEncoder<MessageProtocol> {\n    @Override\n    protected void encode(ChannelHandlerContext ctx, MessageProtocol msg, ByteBuf out) throws Exception {\n        System.out.println(\"MyMessageEncoder encode 方法被调用\");\n        out.writeInt(msg.getLen());\n        out.writeBytes(msg.getContent());\n    }\n}\n```\n\n### 效果\n\n**Client输出**\n\n![image-20211202203610868](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211202203610868.png?x-oss-process=style/qingyun)\n\n无论运行几次，Server都是分5次接收的，这样就解决了TCP粘包问题。","source":"_posts/从B站学习的Netty18.md","raw":"---\ntitle: 从B站学习的Netty18\nabbrlink: 1584270459\ndate: 2021-12-03 08:51:16\ntags:\n  - 转载\n  - netty\n  - 风祈的时光录\ncategories: \n  - 转载 \n  - netty\ncopyright: false\n---\n 转载: https://imlql.cn/\n # TCP 粘包和拆包及解决方案\n\nTCP 粘包和拆包基本介绍\n\n1. `TCP` 是面向连接的，面向流的，提供高可靠性服务。收发两端（客户端和服务器端）都要有一一成对的 `socket`，因此，发送端为了将多个发给接收端的包，更有效的发给对方，使用了优化方法（`Nagle` 算法），将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。这样做虽然提高了效率，但是接收端就难于分辨出完整的数据包了，因为面向流的通信是无消息保护边界的\n2. 由于 `TCP` 无消息保护边界,需要在接收端处理消息边界问题，也就是我们所说的粘包、拆包问题,看一张图\n3. `TCP` 粘包、拆包图解\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0015.png?x-oss-process=style/qingyun)\n\n假设客户端分别发送了两个数据包 `D1` 和 `D2` 给服务端，由于服务端一次读取到字节数是不确定的，故可能存在以下四种情况：\n\n1. 服务端分两次读取到了两个独立的数据包，分别是 `D1` 和 `D2`，没有粘包和拆包\n2. 服务端一次接受到了两个数据包，`D1` 和 `D2` 粘合在一起，称之为 `TCP` 粘包\n3. 服务端分两次读取到了数据包，第一次读取到了完整的 `D1` 包和 `D2` 包的部分内容，第二次读取到了 `D2` 包的剩余内容，这称之为 `TCP` 拆包\n4. 服务端分两次读取到了数据包，第一次读取到了 `D1` 包的部分内容 `D1_1`，第二次读取到了 `D1` 包的剩余部分内容 `D1_2` 和完整的 `D2` 包。\n\nTCP 粘包和拆包现象实例\n\n在编写 `Netty` 程序时，如果没有做处理，就会发生粘包和拆包的问题\n\n看一个具体的实例：\n\n```java\npackage com.atguigu.netty.tcp;\n\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MyServer {\n    public static void main(String[] args) throws Exception{\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new MyServerInitializer()); //自定义一个初始化类\n\n\n            ChannelFuture channelFuture = serverBootstrap.bind(7000).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n\n    }\n}\n```\n\nMyServerInitializer\n\n```java\npackage com.atguigu.netty.tcp;\n\n\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\n\npublic class MyServerInitializer extends ChannelInitializer<SocketChannel> {\n\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline pipeline = ch.pipeline();\n\n        pipeline.addLast(new MyServerHandler());\n    }\n}\n```\n\n### MyServerHandler\n\n```java\npackage com.atguigu.netty.tcp;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\nimport java.nio.charset.Charset;\nimport java.util.UUID;\n\npublic class MyServerHandler extends SimpleChannelInboundHandler<ByteBuf>{\n    private int count;\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        //cause.printStackTrace();\n        ctx.close();\n    }\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception {\n\n        byte[] buffer = new byte[msg.readableBytes()];\n        msg.readBytes(buffer);\n\n        //将buffer转成字符串\n        String message = new String(buffer, Charset.forName(\"utf-8\"));\n\n        System.out.println(\"服务器接收到数据 \" + message);\n        System.out.println(\"服务器接收到消息量=\" + (++this.count));\n\n        //服务器回送数据给客户端, 回送一个随机id ,\n        ByteBuf responseByteBuf = Unpooled.copiedBuffer(UUID.randomUUID().toString() + \" \", Charset.forName(\"utf-8\"));\n        ctx.writeAndFlush(responseByteBuf);\n\n    }\n}\n```\n\nMyClient\n\n```java\npackage com.atguigu.netty.tcp;\n\n\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class MyClient {\n    public static void main(String[] args)  throws  Exception{\n\n        EventLoopGroup group = new NioEventLoopGroup();\n\n        try {\n\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group).channel(NioSocketChannel.class)\n                    .handler(new MyClientInitializer()); //自定义一个初始化类\n\n            ChannelFuture channelFuture = bootstrap.connect(\"localhost\", 7000).sync();\n\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n### MyClientInitializer\n\n```java\npackage com.atguigu.netty.tcp;\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\n\npublic class MyClientInitializer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n\n        ChannelPipeline pipeline = ch.pipeline();\n        pipeline.addLast(new MyClientHandler());\n    }\n}\n```\n\n### MyClientHandler\n\n```java\npackage com.atguigu.netty.tcp;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\nimport java.nio.charset.Charset;\n\npublic class MyClientHandler extends SimpleChannelInboundHandler<ByteBuf> {\n\n    private int count;\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        //使用客户端发送10条数据 hello,server 编号\n        for(int i= 0; i< 10; ++i) {\n            ByteBuf buffer = Unpooled.copiedBuffer(\"hello,server \" + i, Charset.forName(\"utf-8\"));\n            ctx.writeAndFlush(buffer);\n        }\n    }\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, ByteBuf msg) throws Exception {\n        byte[] buffer = new byte[msg.readableBytes()];\n        msg.readBytes(buffer);\n\n        String message = new String(buffer, Charset.forName(\"utf-8\"));\n        System.out.println(\"客户端接收到消息=\" + message);\n        System.out.println(\"客户端接收消息数量=\" + (++this.count));\n\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        cause.printStackTrace();\n        ctx.close();\n    }\n}\n```\n\n### 效果\n\n**第一次运行：**\n\n**Client**\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0016.png?x-oss-process=style/qingyun)\n\n**Server**\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0017.png?x-oss-process=style/qingyun)\n\n**第二次运行：**\n\n**Client**\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0018.png?x-oss-process=style/qingyun)\n\n**Server**\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0019.png?x-oss-process=style/qingyun)\n\n可以看到第一次运行时，服务器一次性将10个数据都接收了，第二次运行时分六次接收的，这就很形象的看出了TCP的粘包现象。\n\n## TCP 粘包和拆包解决方案\n\n1. 常用方案：使用自定义协议+编解码器来解决\n2. 关键就是要解决服务器端每次读取数据长度的问题，这个问题解决，就不会出现服务器多读或少读数据的问题，从而避免的 `TCP` 粘包、拆包。\n\n**看一个具体的实例**\n\n1. 要求客户端发送 `5` 个 `Message` 对象，客户端每次发送一个 `Message` 对象\n2. 服务器端每次接收一个 `Message`，分 `5` 次进行解码，每读取到一个 `Message`，会回复一个 `Message` 对象给客户端。\n\n![img](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0020.png?x-oss-process=style/qingyun)\n\n### MessageProtocol\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\n\n//协议包\npublic class MessageProtocol {\n    private int len; //关键\n    private byte[] content;\n\n    public int getLen() {\n        return len;\n    }\n\n    public void setLen(int len) {\n        this.len = len;\n    }\n\n    public byte[] getContent() {\n        return content;\n    }\n\n    public void setContent(byte[] content) {\n        this.content = content;\n    }\n}\n```\n\n### MyServer\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\n\nimport io.netty.bootstrap.ServerBootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioServerSocketChannel;\n\npublic class MyServer {\n    public static void main(String[] args) throws Exception{\n\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        EventLoopGroup workerGroup = new NioEventLoopGroup();\n\n        try {\n\n            ServerBootstrap serverBootstrap = new ServerBootstrap();\n            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(new MyServerInitializer()); //自定义一个初始化类\n\n\n            ChannelFuture channelFuture = serverBootstrap.bind(7000).sync();\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n\n    }\n}\n```\n\nMyServerInitializer\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\n\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\n\npublic class MyServerInitializer extends ChannelInitializer<SocketChannel> {\n\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n        ChannelPipeline pipeline = ch.pipeline();\n\n        pipeline.addLast(new MyMessageDecoder());//解码器\n        pipeline.addLast(new MyMessageEncoder());//编码器\n        pipeline.addLast(new MyServerHandler());\n    }\n}\n```\n\nMyServerHandler\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\nimport java.nio.charset.Charset;\nimport java.util.UUID;\n\n\n//处理业务的handler\npublic class MyServerHandler extends SimpleChannelInboundHandler<MessageProtocol>{\n    private int count;\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        //cause.printStackTrace();\n        ctx.close();\n    }\n\n    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, MessageProtocol msg) throws Exception {\n\n        //接收到数据，并处理\n        int len = msg.getLen();\n        byte[] content = msg.getContent();\n\n        System.out.println(\"服务器接收到信息如下\");\n        System.out.println(\"长度=\" + len);\n        System.out.println(\"内容=\" + new String(content, Charset.forName(\"utf-8\")));\n\n        System.out.println(\"服务器接收到消息包数量=\" + (++this.count));\n\n        //回复消息\n        System.out.println(\"服务端开始回复消息------\");\n        String responseContent = UUID.randomUUID().toString();\n        int responseLen = responseContent.getBytes(\"utf-8\").length;\n        byte[]  responseContent2 = responseContent.getBytes(\"utf-8\");\n        //构建一个协议包\n        MessageProtocol messageProtocol = new MessageProtocol();\n        messageProtocol.setLen(responseLen);\n        messageProtocol.setContent(responseContent2);\n\n        ctx.writeAndFlush(messageProtocol);\n\n\n    }\n}\n```\n\nMyClient\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\n\n\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.ChannelFuture;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\n\npublic class MyClient {\n    public static void main(String[] args)  throws  Exception{\n\n        EventLoopGroup group = new NioEventLoopGroup();\n\n        try {\n\n            Bootstrap bootstrap = new Bootstrap();\n            bootstrap.group(group).channel(NioSocketChannel.class)\n                    .handler(new MyClientInitializer()); //自定义一个初始化类\n\n            ChannelFuture channelFuture = bootstrap.connect(\"localhost\", 7000).sync();\n\n            channelFuture.channel().closeFuture().sync();\n\n        }finally {\n            group.shutdownGracefully();\n        }\n    }\n}\n```\n\n### MyClientInitializer\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.ChannelPipeline;\nimport io.netty.channel.socket.SocketChannel;\n\n\npublic class MyClientInitializer extends ChannelInitializer<SocketChannel> {\n    @Override\n    protected void initChannel(SocketChannel ch) throws Exception {\n\n        ChannelPipeline pipeline = ch.pipeline();\n        pipeline.addLast(new MyMessageEncoder()); //加入编码器\n        pipeline.addLast(new MyMessageDecoder()); //加入解码器\n        pipeline.addLast(new MyClientHandler());\n    }\n}\n```\n\n### MyClientHandler\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.Unpooled;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.channel.SimpleChannelInboundHandler;\n\nimport java.nio.charset.Charset;\n\npublic class MyClientHandler extends SimpleChannelInboundHandler<MessageProtocol> {\n\n    private int count;\n    @Override\n    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n        //使用客户端发送10条数据 \"今天天气冷，吃火锅\" 编号\n\n        for(int i = 0; i< 5; i++) {\n            String mes = \"今天天气冷，吃火锅\";\n            byte[] content = mes.getBytes(Charset.forName(\"utf-8\"));\n            int length = mes.getBytes(Charset.forName(\"utf-8\")).length;\n\n            //创建协议包对象\n            MessageProtocol messageProtocol = new MessageProtocol();\n            messageProtocol.setLen(length);\n            messageProtocol.setContent(content);\n            ctx.writeAndFlush(messageProtocol);\n\n        }\n\n    }\n\n//    @Override\n    protected void channelRead0(ChannelHandlerContext ctx, MessageProtocol msg) throws Exception {\n\n        int len = msg.getLen();\n        byte[] content = msg.getContent();\n\n        System.out.println(\"客户端接收到消息如下\");\n        System.out.println(\"长度=\" + len);\n        System.out.println(\"内容=\" + new String(content, Charset.forName(\"utf-8\")));\n\n        System.out.println(\"客户端接收消息数量=\" + (++this.count));\n\n    }\n\n    @Override\n    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n        System.out.println(\"异常消息=\" + cause.getMessage());\n        ctx.close();\n    }\n}\n```\n\n### MyMessageDecoder\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.ReplayingDecoder;\n\nimport java.util.List;\n\npublic class MyMessageDecoder extends ReplayingDecoder<Void> {\n    @Override\n    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n        System.out.println();\n        System.out.println();\n        System.out.println(\"MyMessageDecoder decode 被调用\");\n        //需要将得到二进制字节码-> MessageProtocol 数据包(对象)\n        int length = in.readInt();\n\n        byte[] content = new byte[length];\n        in.readBytes(content);\n\n        //封装成 MessageProtocol 对象，放入 out， 传递下一个handler业务处理\n        MessageProtocol messageProtocol = new MessageProtocol();\n        messageProtocol.setLen(length);\n        messageProtocol.setContent(content);\n\n        //放入out传给下一个hanlder进行处理\n        out.add(messageProtocol);\n\n    }\n}\n```\n\nMyMessageEncoder\n\n```java\npackage com.atguigu.netty.protocoltcp;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport io.netty.handler.codec.MessageToByteEncoder;\n\npublic class MyMessageEncoder extends MessageToByteEncoder<MessageProtocol> {\n    @Override\n    protected void encode(ChannelHandlerContext ctx, MessageProtocol msg, ByteBuf out) throws Exception {\n        System.out.println(\"MyMessageEncoder encode 方法被调用\");\n        out.writeInt(msg.getLen());\n        out.writeBytes(msg.getContent());\n    }\n}\n```\n\n### 效果\n\n**Client输出**\n\n![image-20211202203610868](https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211202203610868.png?x-oss-process=style/qingyun)\n\n无论运行几次，Server都是分5次接收的，这样就解决了TCP粘包问题。","slug":"从B站学习的Netty18","published":1,"updated":"2021-12-03T00:51:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2tm007do4vbf4b80qel","content":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h1>TCP 粘包和拆包及解决方案</h1>\n<p>TCP 粘包和拆包基本介绍</p>\n<ol>\n<li><code>TCP</code> 是面向连接的，面向流的，提供高可靠性服务。收发两端（客户端和服务器端）都要有一一成对的 <code>socket</code>，因此，发送端为了将多个发给接收端的包，更有效的发给对方，使用了优化方法（<code>Nagle</code> 算法），将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。这样做虽然提高了效率，但是接收端就难于分辨出完整的数据包了，因为面向流的通信是无消息保护边界的</li>\n<li>由于 <code>TCP</code> 无消息保护边界,需要在接收端处理消息边界问题，也就是我们所说的粘包、拆包问题,看一张图</li>\n<li><code>TCP</code> 粘包、拆包图解</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0015.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>假设客户端分别发送了两个数据包 <code>D1</code> 和 <code>D2</code> 给服务端，由于服务端一次读取到字节数是不确定的，故可能存在以下四种情况：</p>\n<ol>\n<li>服务端分两次读取到了两个独立的数据包，分别是 <code>D1</code> 和 <code>D2</code>，没有粘包和拆包</li>\n<li>服务端一次接受到了两个数据包，<code>D1</code> 和 <code>D2</code> 粘合在一起，称之为 <code>TCP</code> 粘包</li>\n<li>服务端分两次读取到了数据包，第一次读取到了完整的 <code>D1</code> 包和 <code>D2</code> 包的部分内容，第二次读取到了 <code>D2</code> 包的剩余内容，这称之为 <code>TCP</code> 拆包</li>\n<li>服务端分两次读取到了数据包，第一次读取到了 <code>D1</code> 包的部分内容 <code>D1_1</code>，第二次读取到了 <code>D1</code> 包的剩余部分内容 <code>D1_2</code> 和完整的 <code>D2</code> 包。</li>\n</ol>\n<p>TCP 粘包和拆包现象实例</p>\n<p>在编写 <code>Netty</code> 程序时，如果没有做处理，就会发生粘包和拆包的问题</p>\n<p>看一个具体的实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.tcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(<span class=\"keyword\">new</span> MyServerInitializer()); <span class=\"comment\">//自定义一个初始化类</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(<span class=\"number\">7000</span>).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyServerInitializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.tcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\"></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyServerHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyServerHandler\">MyServerHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.tcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">ByteBuf</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cause.printStackTrace();</span></span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[msg.readableBytes()];</span><br><span class=\"line\">        msg.readBytes(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将buffer转成字符串</span></span><br><span class=\"line\">        String message = <span class=\"keyword\">new</span> String(buffer, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器接收到数据 &quot;</span> + message);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器接收到消息量=&quot;</span> + (++<span class=\"keyword\">this</span>.count));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//服务器回送数据给客户端, 回送一个随机id ,</span></span><br><span class=\"line\">        ByteBuf responseByteBuf = Unpooled.copiedBuffer(UUID.randomUUID().toString() + <span class=\"string\">&quot; &quot;</span>, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">        ctx.writeAndFlush(responseByteBuf);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyClient</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.tcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  <span class=\"keyword\">throws</span>  Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\">            bootstrap.group(group).channel(NioSocketChannel.class)</span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> MyClientInitializer()); <span class=\"comment\">//自定义一个初始化类</span></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">7000</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyClientInitializer\">MyClientInitializer</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.tcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyClientHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyClientHandler\">MyClientHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.tcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">ByteBuf</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用客户端发送10条数据 hello,server 编号</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i= <span class=\"number\">0</span>; i&lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">            ByteBuf buffer = Unpooled.copiedBuffer(<span class=\"string\">&quot;hello,server &quot;</span> + i, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">            ctx.writeAndFlush(buffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[msg.readableBytes()];</span><br><span class=\"line\">        msg.readBytes(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        String message = <span class=\"keyword\">new</span> String(buffer, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端接收到消息=&quot;</span> + message);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端接收消息数量=&quot;</span> + (++<span class=\"keyword\">this</span>.count));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果\">效果</h3>\n<p><strong>第一次运行：</strong></p>\n<p><strong>Client</strong></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0016.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><strong>Server</strong></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0017.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><strong>第二次运行：</strong></p>\n<p><strong>Client</strong></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0018.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><strong>Server</strong></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0019.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>可以看到第一次运行时，服务器一次性将10个数据都接收了，第二次运行时分六次接收的，这就很形象的看出了TCP的粘包现象。</p>\n<h2 id=\"TCP-粘包和拆包解决方案\">TCP 粘包和拆包解决方案</h2>\n<ol>\n<li>常用方案：使用自定义协议+编解码器来解决</li>\n<li>关键就是要解决服务器端每次读取数据长度的问题，这个问题解决，就不会出现服务器多读或少读数据的问题，从而避免的 <code>TCP</code> 粘包、拆包。</li>\n</ol>\n<p><strong>看一个具体的实例</strong></p>\n<ol>\n<li>要求客户端发送 <code>5</code> 个 <code>Message</code> 对象，客户端每次发送一个 <code>Message</code> 对象</li>\n<li>服务器端每次接收一个 <code>Message</code>，分 <code>5</code> 次进行解码，每读取到一个 <code>Message</code>，会回复一个 <code>Message</code> 对象给客户端。</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0020.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h3 id=\"MessageProtocol\">MessageProtocol</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//协议包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageProtocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> len; <span class=\"comment\">//关键</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] content;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLen</span><span class=\"params\">(<span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.len = len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] getContent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyServer\">MyServer</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(<span class=\"keyword\">new</span> MyServerInitializer()); <span class=\"comment\">//自定义一个初始化类</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(<span class=\"number\">7000</span>).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyServerInitializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\"></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyMessageDecoder());<span class=\"comment\">//解码器</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyMessageEncoder());<span class=\"comment\">//编码器</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyServerHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyServerHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//处理业务的handler</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">MessageProtocol</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cause.printStackTrace();</span></span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, MessageProtocol msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//接收到数据，并处理</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = msg.getLen();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] content = msg.getContent();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器接收到信息如下&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;长度=&quot;</span> + len);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;内容=&quot;</span> + <span class=\"keyword\">new</span> String(content, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器接收到消息包数量=&quot;</span> + (++<span class=\"keyword\">this</span>.count));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//回复消息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务端开始回复消息------&quot;</span>);</span><br><span class=\"line\">        String responseContent = UUID.randomUUID().toString();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> responseLen = responseContent.getBytes(<span class=\"string\">&quot;utf-8&quot;</span>).length;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[]  responseContent2 = responseContent.getBytes(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//构建一个协议包</span></span><br><span class=\"line\">        MessageProtocol messageProtocol = <span class=\"keyword\">new</span> MessageProtocol();</span><br><span class=\"line\">        messageProtocol.setLen(responseLen);</span><br><span class=\"line\">        messageProtocol.setContent(responseContent2);</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.writeAndFlush(messageProtocol);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyClient</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  <span class=\"keyword\">throws</span>  Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\">            bootstrap.group(group).channel(NioSocketChannel.class)</span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> MyClientInitializer()); <span class=\"comment\">//自定义一个初始化类</span></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">7000</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyClientInitializer-2\">MyClientInitializer</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyMessageEncoder()); <span class=\"comment\">//加入编码器</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyMessageDecoder()); <span class=\"comment\">//加入解码器</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyClientHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyClientHandler-2\">MyClientHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">MessageProtocol</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用客户端发送10条数据 &quot;今天天气冷，吃火锅&quot; 编号</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            String mes = <span class=\"string\">&quot;今天天气冷，吃火锅&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] content = mes.getBytes(Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">int</span> length = mes.getBytes(Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>)).length;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//创建协议包对象</span></span><br><span class=\"line\">            MessageProtocol messageProtocol = <span class=\"keyword\">new</span> MessageProtocol();</span><br><span class=\"line\">            messageProtocol.setLen(length);</span><br><span class=\"line\">            messageProtocol.setContent(content);</span><br><span class=\"line\">            ctx.writeAndFlush(messageProtocol);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, MessageProtocol msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = msg.getLen();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] content = msg.getContent();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端接收到消息如下&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;长度=&quot;</span> + len);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;内容=&quot;</span> + <span class=\"keyword\">new</span> String(content, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端接收消息数量=&quot;</span> + (++<span class=\"keyword\">this</span>.count));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;异常消息=&quot;</span> + cause.getMessage());</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyMessageDecoder\">MyMessageDecoder</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.ReplayingDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMessageDecoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReplayingDecoder</span>&lt;<span class=\"title\">Void</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyMessageDecoder decode 被调用&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//需要将得到二进制字节码-&gt; MessageProtocol 数据包(对象)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = in.readInt();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] content = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[length];</span><br><span class=\"line\">        in.readBytes(content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//封装成 MessageProtocol 对象，放入 out， 传递下一个handler业务处理</span></span><br><span class=\"line\">        MessageProtocol messageProtocol = <span class=\"keyword\">new</span> MessageProtocol();</span><br><span class=\"line\">        messageProtocol.setLen(length);</span><br><span class=\"line\">        messageProtocol.setContent(content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//放入out传给下一个hanlder进行处理</span></span><br><span class=\"line\">        out.add(messageProtocol);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyMessageEncoder</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.MessageToByteEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMessageEncoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">MessageToByteEncoder</span>&lt;<span class=\"title\">MessageProtocol</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(ChannelHandlerContext ctx, MessageProtocol msg, ByteBuf out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyMessageEncoder encode 方法被调用&quot;</span>);</span><br><span class=\"line\">        out.writeInt(msg.getLen());</span><br><span class=\"line\">        out.writeBytes(msg.getContent());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-2\">效果</h3>\n<p><strong>Client输出</strong></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211202203610868.png?x-oss-process=style/qingyun\" alt=\"image-20211202203610868\"></p>\n<p>无论运行几次，Server都是分5次接收的，这样就解决了TCP粘包问题。</p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://img2.huashi6.com/images/resource/p19762/2021/10/03/202748_6843872536.jpg?imageMogr2/quality/100/interlace/1/thumbnail/2000x%3E","excerpt":"","more":"<p>转载: <a href=\"https://imlql.cn/\">https://imlql.cn/</a></p>\n<h1>TCP 粘包和拆包及解决方案</h1>\n<p>TCP 粘包和拆包基本介绍</p>\n<ol>\n<li><code>TCP</code> 是面向连接的，面向流的，提供高可靠性服务。收发两端（客户端和服务器端）都要有一一成对的 <code>socket</code>，因此，发送端为了将多个发给接收端的包，更有效的发给对方，使用了优化方法（<code>Nagle</code> 算法），将多次间隔较小且数据量小的数据，合并成一个大的数据块，然后进行封包。这样做虽然提高了效率，但是接收端就难于分辨出完整的数据包了，因为面向流的通信是无消息保护边界的</li>\n<li>由于 <code>TCP</code> 无消息保护边界,需要在接收端处理消息边界问题，也就是我们所说的粘包、拆包问题,看一张图</li>\n<li><code>TCP</code> 粘包、拆包图解</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0015.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>假设客户端分别发送了两个数据包 <code>D1</code> 和 <code>D2</code> 给服务端，由于服务端一次读取到字节数是不确定的，故可能存在以下四种情况：</p>\n<ol>\n<li>服务端分两次读取到了两个独立的数据包，分别是 <code>D1</code> 和 <code>D2</code>，没有粘包和拆包</li>\n<li>服务端一次接受到了两个数据包，<code>D1</code> 和 <code>D2</code> 粘合在一起，称之为 <code>TCP</code> 粘包</li>\n<li>服务端分两次读取到了数据包，第一次读取到了完整的 <code>D1</code> 包和 <code>D2</code> 包的部分内容，第二次读取到了 <code>D2</code> 包的剩余内容，这称之为 <code>TCP</code> 拆包</li>\n<li>服务端分两次读取到了数据包，第一次读取到了 <code>D1</code> 包的部分内容 <code>D1_1</code>，第二次读取到了 <code>D1</code> 包的剩余部分内容 <code>D1_2</code> 和完整的 <code>D2</code> 包。</li>\n</ol>\n<p>TCP 粘包和拆包现象实例</p>\n<p>在编写 <code>Netty</code> 程序时，如果没有做处理，就会发生粘包和拆包的问题</p>\n<p>看一个具体的实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.tcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(<span class=\"keyword\">new</span> MyServerInitializer()); <span class=\"comment\">//自定义一个初始化类</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(<span class=\"number\">7000</span>).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyServerInitializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.tcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\"></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyServerHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyServerHandler\">MyServerHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.tcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">ByteBuf</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cause.printStackTrace();</span></span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[msg.readableBytes()];</span><br><span class=\"line\">        msg.readBytes(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将buffer转成字符串</span></span><br><span class=\"line\">        String message = <span class=\"keyword\">new</span> String(buffer, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器接收到数据 &quot;</span> + message);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器接收到消息量=&quot;</span> + (++<span class=\"keyword\">this</span>.count));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//服务器回送数据给客户端, 回送一个随机id ,</span></span><br><span class=\"line\">        ByteBuf responseByteBuf = Unpooled.copiedBuffer(UUID.randomUUID().toString() + <span class=\"string\">&quot; &quot;</span>, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">        ctx.writeAndFlush(responseByteBuf);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyClient</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.tcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  <span class=\"keyword\">throws</span>  Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\">            bootstrap.group(group).channel(NioSocketChannel.class)</span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> MyClientInitializer()); <span class=\"comment\">//自定义一个初始化类</span></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">7000</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyClientInitializer\">MyClientInitializer</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.tcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyClientHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyClientHandler\">MyClientHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.tcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">ByteBuf</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用客户端发送10条数据 hello,server 编号</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i= <span class=\"number\">0</span>; i&lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">            ByteBuf buffer = Unpooled.copiedBuffer(<span class=\"string\">&quot;hello,server &quot;</span> + i, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">            ctx.writeAndFlush(buffer);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[msg.readableBytes()];</span><br><span class=\"line\">        msg.readBytes(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">        String message = <span class=\"keyword\">new</span> String(buffer, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端接收到消息=&quot;</span> + message);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端接收消息数量=&quot;</span> + (++<span class=\"keyword\">this</span>.count));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        cause.printStackTrace();</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果\">效果</h3>\n<p><strong>第一次运行：</strong></p>\n<p><strong>Client</strong></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0016.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><strong>Server</strong></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0017.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><strong>第二次运行：</strong></p>\n<p><strong>Client</strong></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0018.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p><strong>Server</strong></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0019.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<p>可以看到第一次运行时，服务器一次性将10个数据都接收了，第二次运行时分六次接收的，这就很形象的看出了TCP的粘包现象。</p>\n<h2 id=\"TCP-粘包和拆包解决方案\">TCP 粘包和拆包解决方案</h2>\n<ol>\n<li>常用方案：使用自定义协议+编解码器来解决</li>\n<li>关键就是要解决服务器端每次读取数据长度的问题，这个问题解决，就不会出现服务器多读或少读数据的问题，从而避免的 <code>TCP</code> 粘包、拆包。</li>\n</ol>\n<p><strong>看一个具体的实例</strong></p>\n<ol>\n<li>要求客户端发送 <code>5</code> 个 <code>Message</code> 对象，客户端每次发送一个 <code>Message</code> 对象</li>\n<li>服务器端每次接收一个 <code>Message</code>，分 <code>5</code> 次进行解码，每读取到一个 <code>Message</code>，会回复一个 <code>Message</code> 对象给客户端。</li>\n</ol>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/0020.png?x-oss-process=style/qingyun\" alt=\"img\"></p>\n<h3 id=\"MessageProtocol\">MessageProtocol</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//协议包</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageProtocol</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> len; <span class=\"comment\">//关键</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">byte</span>[] content;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLen</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setLen</span><span class=\"params\">(<span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.len = len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">byte</span>[] getContent() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setContent</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.content = content;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyServer\">MyServer</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup bossGroup = <span class=\"keyword\">new</span> NioEventLoopGroup(<span class=\"number\">1</span>);</span><br><span class=\"line\">        EventLoopGroup workerGroup = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ServerBootstrap serverBootstrap = <span class=\"keyword\">new</span> ServerBootstrap();</span><br><span class=\"line\">            serverBootstrap.group(bossGroup,workerGroup).channel(NioServerSocketChannel.class).childHandler(<span class=\"keyword\">new</span> MyServerInitializer()); <span class=\"comment\">//自定义一个初始化类</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = serverBootstrap.bind(<span class=\"number\">7000</span>).sync();</span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bossGroup.shutdownGracefully();</span><br><span class=\"line\">            workerGroup.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyServerInitializer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\"></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyMessageDecoder());<span class=\"comment\">//解码器</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyMessageEncoder());<span class=\"comment\">//编码器</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyServerHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyServerHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.UUID;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//处理业务的handler</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">MessageProtocol</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cause.printStackTrace();</span></span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, MessageProtocol msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//接收到数据，并处理</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = msg.getLen();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] content = msg.getContent();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器接收到信息如下&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;长度=&quot;</span> + len);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;内容=&quot;</span> + <span class=\"keyword\">new</span> String(content, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务器接收到消息包数量=&quot;</span> + (++<span class=\"keyword\">this</span>.count));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//回复消息</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务端开始回复消息------&quot;</span>);</span><br><span class=\"line\">        String responseContent = UUID.randomUUID().toString();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> responseLen = responseContent.getBytes(<span class=\"string\">&quot;utf-8&quot;</span>).length;</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[]  responseContent2 = responseContent.getBytes(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//构建一个协议包</span></span><br><span class=\"line\">        MessageProtocol messageProtocol = <span class=\"keyword\">new</span> MessageProtocol();</span><br><span class=\"line\">        messageProtocol.setLen(responseLen);</span><br><span class=\"line\">        messageProtocol.setContent(responseContent2);</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.writeAndFlush(messageProtocol);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyClient</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelFuture;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.EventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClient</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>  <span class=\"keyword\">throws</span>  Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        EventLoopGroup group = <span class=\"keyword\">new</span> NioEventLoopGroup();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            Bootstrap bootstrap = <span class=\"keyword\">new</span> Bootstrap();</span><br><span class=\"line\">            bootstrap.group(group).channel(NioSocketChannel.class)</span><br><span class=\"line\">                    .handler(<span class=\"keyword\">new</span> MyClientInitializer()); <span class=\"comment\">//自定义一个初始化类</span></span><br><span class=\"line\"></span><br><span class=\"line\">            ChannelFuture channelFuture = bootstrap.connect(<span class=\"string\">&quot;localhost&quot;</span>, <span class=\"number\">7000</span>).sync();</span><br><span class=\"line\"></span><br><span class=\"line\">            channelFuture.channel().closeFuture().sync();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            group.shutdownGracefully();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyClientInitializer-2\">MyClientInitializer</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelInitializer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelPipeline;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientInitializer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ChannelInitializer</span>&lt;<span class=\"title\">SocketChannel</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initChannel</span><span class=\"params\">(SocketChannel ch)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ChannelPipeline pipeline = ch.pipeline();</span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyMessageEncoder()); <span class=\"comment\">//加入编码器</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyMessageDecoder()); <span class=\"comment\">//加入解码器</span></span><br><span class=\"line\">        pipeline.addLast(<span class=\"keyword\">new</span> MyClientHandler());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyClientHandler-2\">MyClientHandler</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.Unpooled;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.charset.Charset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClientHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">SimpleChannelInboundHandler</span>&lt;<span class=\"title\">MessageProtocol</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> count;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">channelActive</span><span class=\"params\">(ChannelHandlerContext ctx)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用客户端发送10条数据 &quot;今天天气冷，吃火锅&quot; 编号</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i&lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            String mes = <span class=\"string\">&quot;今天天气冷，吃火锅&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] content = mes.getBytes(Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">int</span> length = mes.getBytes(Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>)).length;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//创建协议包对象</span></span><br><span class=\"line\">            MessageProtocol messageProtocol = <span class=\"keyword\">new</span> MessageProtocol();</span><br><span class=\"line\">            messageProtocol.setLen(length);</span><br><span class=\"line\">            messageProtocol.setContent(content);</span><br><span class=\"line\">            ctx.writeAndFlush(messageProtocol);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//    @Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">channelRead0</span><span class=\"params\">(ChannelHandlerContext ctx, MessageProtocol msg)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = msg.getLen();</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] content = msg.getContent();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端接收到消息如下&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;长度=&quot;</span> + len);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;内容=&quot;</span> + <span class=\"keyword\">new</span> String(content, Charset.forName(<span class=\"string\">&quot;utf-8&quot;</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户端接收消息数量=&quot;</span> + (++<span class=\"keyword\">this</span>.count));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exceptionCaught</span><span class=\"params\">(ChannelHandlerContext ctx, Throwable cause)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;异常消息=&quot;</span> + cause.getMessage());</span><br><span class=\"line\">        ctx.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"MyMessageDecoder\">MyMessageDecoder</h3>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.ReplayingDecoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMessageDecoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">ReplayingDecoder</span>&lt;<span class=\"title\">Void</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">decode</span><span class=\"params\">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyMessageDecoder decode 被调用&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//需要将得到二进制字节码-&gt; MessageProtocol 数据包(对象)</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> length = in.readInt();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] content = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[length];</span><br><span class=\"line\">        in.readBytes(content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//封装成 MessageProtocol 对象，放入 out， 传递下一个handler业务处理</span></span><br><span class=\"line\">        MessageProtocol messageProtocol = <span class=\"keyword\">new</span> MessageProtocol();</span><br><span class=\"line\">        messageProtocol.setLen(length);</span><br><span class=\"line\">        messageProtocol.setContent(content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//放入out传给下一个hanlder进行处理</span></span><br><span class=\"line\">        out.add(messageProtocol);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>MyMessageEncoder</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.atguigu.netty.protocoltcp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.buffer.ByteBuf;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.netty.handler.codec.MessageToByteEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyMessageEncoder</span> <span class=\"keyword\">extends</span> <span class=\"title\">MessageToByteEncoder</span>&lt;<span class=\"title\">MessageProtocol</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">encode</span><span class=\"params\">(ChannelHandlerContext ctx, MessageProtocol msg, ByteBuf out)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;MyMessageEncoder encode 方法被调用&quot;</span>);</span><br><span class=\"line\">        out.writeInt(msg.getLen());</span><br><span class=\"line\">        out.writeBytes(msg.getContent());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果-2\">效果</h3>\n<p><strong>Client输出</strong></p>\n<p><img src=\"https://qingyun-test.oss-cn-hangzhou.aliyuncs.com/img/image-20211202203610868.png?x-oss-process=style/qingyun\" alt=\"image-20211202203610868\"></p>\n<p>无论运行几次，Server都是分5次接收的，这样就解决了TCP粘包问题。</p>\n"},{"title":"Android结课作业 音乐播放器 视频播放 游戏 附带源码","abbrlink":3434175137,"date":"2021-11-29T02:14:20.000Z","_content":"项目简介\n\n一：整合了三个小功能   \n\n实现了音乐播放器（Service+Activity实现）\n\n视频播放器（本地视频播放——进度条控制）\n\n2048游戏（人生版2048——分数统计显示）\n\n二：项目概述（创建Activity的方式均是以Android Studio 4.1.2 自动创建 ）\n\n音乐播放器\n\n1页面展示如下：\n\n![image-20210419212318302](https://img-blog.csdnimg.cn/img_convert/cbd8ff9b7e2d02e07961d275cbe8b20a.png)\n\n\n\n2设计分析：\n\n项目包含五个类，五个布局文件\n\nfrag1、frag2为java文件\n\nMusic_Activity为Activity文件，\n MusicService为Service文件，\n MainActivity为主类文件。\n\nactivity_main为MainActivity的主布局文件，显示运行APP时的主界面\n\nactivity_music为Music_Activity的布局文件、显示音乐播放器界面\n\nmusic_list和item_layout一起组成了frag1的主布局文件，也就是音乐界面（APP的默认显示页面）\n\nfrag2_layout就是frag2的布局文件，主要显示的是专辑封面图片。\n\n![image-20210419213014651](https://img-blog.csdnimg.cn/img_convert/4c4495fcf832803dba42bf7643711c67.png)\n\n3、资源文件分析\n\n在res文件夹下创建raw文件、放置MP3文件、在drawable文件下夹粘贴了音乐封面文件和播放器背景图片music_bg.jpg。还有背景选择器的btn_bg_selector.xml文件，如图所示：\n\n\n\n![image-20210419213406874](https://img-blog.csdnimg.cn/img_convert/243bfd350a64ef444e3aee17617f3752.png)\n\n二、开发环境\n\n```\nWin10+AndroidStudio4.12+MUMU模拟器\n```\n\n三：准备工具\n\n1、选择几首自己下载好的音乐文件，命名为music0、music1、music2等。\n\n2、选择每首歌对应的歌手图片，剪成圆形并且保存好，命名为music0、music1、music2等。\n（一定要剪成圆形，椭圆都会影响运行效果）如果不太清楚图片如何剪成圆形，可以看这篇博客：如何将图片剪成圆形\n\n3、准备一张音乐播放器的背景图片，命名为music_bg，再找一张图片用作专辑图片，命名为bg。\n\n四：详细设计\n\n1搭建主页面布局\n\nMainActivity类   包含两个菜单文件：frag1（歌曲菜单）和frag2（专辑菜单）\n\n默认展示歌曲菜单  点击切换 显示 frag2专辑菜单（代码如下：）\n\n```JAVA\npackage com.example.a2048application;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.FrameLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\n\nimport lz.sdut.Music.frag1;\nimport lz.sdut.Music.frag2;\n\n\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener{\n    private FrameLayout content;\n    private TextView Music_Song,Music_Album;\n    private FragmentManager fm;   //管理类\n    private FragmentTransaction ft;  //回调传递\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);\n            actionBar.setCustomView(R.layout.tittle);//设置标题样式\n            TextView textView = (TextView) actionBar.getCustomView().findViewById(R.id.display_title);//获取标题布局的textview\n            textView.setText(\"音乐播放\");//设置标题名称，menuTitle为String字符串\n            actionBar.setHomeButtonEnabled(true);//设置左上角的图标是否可以点击\n            actionBar.setDisplayHomeAsUpEnabled(true);//给左上角图标的左边加上一个返回的图标\n            actionBar.setDisplayShowCustomEnabled(true);// 使自定义的普通View能在title栏显示，即actionBar.setCustomView能起作用\n        }\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        /**\n         * 设置当前页面功能\n         */\n        content=(FrameLayout)findViewById(R.id.content); //不改变原activity布局的情况下 在activity顶部覆盖一层蒙版（类似与蒙版）\n\n        Music_Song= (TextView)findViewById(R.id.menu1);  //歌曲菜单\n        Music_Album= (TextView)findViewById(R.id.menu2); //专辑菜单\n\n\n        Music_Song.setOnClickListener(this);//设置歌曲菜单监听器\n        Music_Album.setOnClickListener(this);//设置专辑菜单监听器（公用一个监听，通过ID实现切换）\n\n        fm = getSupportFragmentManager(); //若是继承FragmentActivity，fm=getFragmentManger();\n        ft = fm.beginTransaction();\n        ft.replace(R.id.content,new frag1()); //将FrameLayout中的内容切换成Flag1的内容\n        ft.commit();//实现\n    }\n\n    @Override\n    public void onClick(View v) {\n        ft = fm.beginTransaction();\n        switch (v.getId()) {\n            case R.id.menu1:\n                ft.replace(R.id.content, new frag1()); //将FrameLayout中的内容切换成Flag1的内容\n                break;\n            case R.id.menu2:\n                ft.replace(R.id.content, new frag2()); //将FrameLayout中的内容切换成Flag2的内容\n                break;\n            default:\n                break;\n        }\n        ft.commit();\n    }\n\n\n\n\n\n    /**\n     * 设置顶部菜单栏选项\n     * (页面跳转)\n     * @param menu\n     * @return\n     */\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.region_right_menu, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.music_menu:\n                Toast.makeText(this,\"音乐播放\",Toast.LENGTH_SHORT).show();\n                Intent Music_intent = new Intent();\n                Music_intent.setClass(this, MainActivity.class);\n                startActivity(Music_intent);\n                break;\n            case R.id.movie_menu:\n                Toast.makeText(this,\"电影播放\",Toast.LENGTH_SHORT).show();\n                Intent Movie_intent = new Intent();\n                Movie_intent.setClass(this, MovieActivity.class);\n                startActivity(Movie_intent);\n                break;\n            case R.id.game_menu:\n                Toast.makeText(this,\"2048\",Toast.LENGTH_SHORT).show();\n                Intent Game_intent = new Intent();\n                Game_intent.setClass(this, GameActivity.class);\n                startActivity(Game_intent);\n                break;\n            case android.R.id.home:\n                Toast.makeText(MainActivity.this,\"返回\",Toast.LENGTH_SHORT).show();\n                return true;\n            default:\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n}\n```\n\n对应的Activity文件\n\n```XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\"\n    android:orientation=\"vertical\">\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <TextView\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:gravity=\"center\"\n            android:text=\"喜欢的音乐\"\n            android:textSize=\"35dp\"\n            android:textColor=\"#87CEFA\">\n        </TextView>\n    </LinearLayout>\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n        <TextView\n            android:id=\"@+id/menu1\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:gravity=\"center\"\n            android:text=\"歌曲\"\n            android:textSize=\"25dp\"\n            android:textColor=\"#87CEFA\">\n        </TextView>\n\n        <TextView\n            android:id=\"@+id/menu2\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:gravity=\"center\"\n            android:text=\"专辑\"\n            android:textSize=\"25dp\"\n            android:textColor=\"#87CEFA\">\n        </TextView>\n\n    </LinearLayout>\n    <FrameLayout\n        android:id=\"@+id/content\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"9\">\n    </FrameLayout>\n\n</LinearLayout>\n\n```\n\nactivity_main是布局文件，主要显示主界面，最上面放置了“我喜欢”的TextView控件，在底下放置了“歌曲”和“专辑”的TextView控件,效果如图：\n\n![image-20210419214706637](https://img-blog.csdnimg.cn/img_convert/a4fae6bc6e8fbb52ce3db90598620d10.png)\n\n2.2\n\n创建flag1类（显示歌曲列表）模拟器运行出来的默认界面，代码如下：\n\n```JAVA\npackage lz.sdut.Music;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.BaseAdapter;\nimport android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\nimport androidx.fragment.app.Fragment;\n\nimport com.example.a2048application.MusicActivity;\nimport com.example.a2048application.R;\n\n/**\n * Fragment依赖于Activity，不能独立存在\n * 一个Activity可以有多个Fragment\n * 一个Fragment可以被多个Activity重用\n * Fragment有自己的生命周期，并能接收输入事件\n * 可以在Activity运行时动态地添加或删除Fragment\n *模块化组件\n *\n * onAttach()：Fragment和Activity相关联时调用。可以通过该方法获取Activity引用，还可以通过getArguments()获取参数。\n * onCreate()：Fragment被创建时调用\n * onActivityCreated()：当Activity完成onCreate()时调用\n * onStart()：当Fragment可见时调用。\n * onResume()：当Fragment可见且可交互时调用\n * onPause()：当Fragment不可交互但可见时调用。\n * onStop()：当Fragment不可见时调用。\n * onDestroyView()：当Fragment的UI从视图结构中移除时调用。\n * onDestroy()：销毁Fragment时调用。\n * onDetach()：当Fragment和Activity解除关联时调用。\n *\n */\npublic class frag1 extends Fragment {\n    private View view;\n    public String[] name={\"邓紫棋——光年之外\",\"蔡健雅——红色高跟鞋\",\"Taylor Swift——Love Story\"};\n    public static int[] icons = {R.drawable.music0, R.drawable.music1, R.drawable.music2};\n\n\n    @Override\n//    onCreate()：Fragment被创建时调用\n    public View onCreateView( final LayoutInflater inflater,  ViewGroup container, Bundle savedInstanceState) {\n        view = inflater.inflate(R.layout.music_list,null);\n        ListView listView = view.findViewById(R.id.lv);\n        MyBaseAdapter adapter = new MyBaseAdapter();\n        //数据适配方法\n        listView.setAdapter(adapter);\n        //点击事件监听\n        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n                Intent intent = new Intent(frag1.this.getContext(), MusicActivity.class);//创建Intent对象，启动check\n                //将数据放入Intent对象         传输对象\n                intent.putExtra(\"name\",name[position]);\n                intent.putExtra(\"position\",String.valueOf(position));\n                startActivity(intent);\n            }\n        });\n        return view;\n    }\n\n    /**\n     * 学会BaseAdapter其实只需要掌握四个方法：\n     * getCount, getItem, getItemId, getView\n     *\n     *     getCount : 要绑定的条目的数目，比如格子的数量\n     *     getItem : 根据一个索引（位置）获得该位置的对象\n     *     getItemId : 获取条目的id\n     *     getView : 获取该条目要显示的界面\n     *\n     */\n    class MyBaseAdapter extends BaseAdapter {\n\n        //创建数量\n    @Override\n    public int getCount() {\n        return name.length;\n    }\n\n    //条目名字\n    @Override\n    public Object getItem(int position) {\n        return name[position];\n    }\n\n    //条目ID\n    @Override\n    public long getItemId(int position) {\n        return position;\n    }\n\n    //返回视图\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        //设置布局并返回\n        View view = View.inflate(frag1.this.getContext(), R.layout.item_layout, null);\n        TextView tv_name = view.findViewById(R.id.item_name);\n        ImageView iv= view.findViewById(R.id.iv);\n        tv_name.setText(name[position]);\n        iv.setImageResource(icons[position]);\n        return view;\n    }\n}\n}\n\n```\n\n定义Flag1的需要用到的activity文件：\n\nmusic_list.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n    <ListView\n        android:id=\"@+id/lv\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"/>\n</LinearLayout>\n```\n\nitem_layout.xml   \n\n```XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"16dp\">\n    <ImageView\n        android:id=\"@+id/iv\"\n        android:layout_width=\"40dp\"\n        android:layout_height=\"40dp\"\n        android:layout_centerVertical=\"true\"/>\n    <RelativeLayout\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginLeft=\"10dp\"\n        android:layout_toRightOf=\"@+id/iv\"\n        android:layout_centerVertical=\"true\">\n        <TextView\n            android:id=\"@+id/item_name\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"歌曲\"\n            android:textSize=\"15sp\"\n            android:textColor=\"#87CEFA\"/>\n    </RelativeLayout>\n</RelativeLayout>\n```\n\n界面如下:\n\n![image-20210419215628732](https://img-blog.csdnimg.cn/img_convert/5daa7e50ca1c3abb6a757f34e4800314.png)\n\n创建flag2类（显示专辑列表）代码较为简单：\n\n```java\npackage lz.sdut.Music;\n\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\n\nimport com.example.a2048application.R;\n\n\n/**\n * 仅插入了一个视图\n * 视图为一张图片\n */\npublic class frag2 extends Fragment {\n    private View zj;\n\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull final LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        zj = inflater.inflate(R.layout.frag2_layout, null);\n        View listView = zj.findViewById(R.id.iv);\n        return zj;\n    }\n}\n```\n\nfrag2_layout.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <ImageView\n        android:id=\"@+id/zj\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@drawable/bg\"/>\n</LinearLayout>\n```\n\n效果如下：\n\n![image-20210419221830910](https://img-blog.csdnimg.cn/img_convert/ad7ea1bf0e3c4d3afc26dbe5fcdebfb5.png)\n\n3.3\n\n创建服务类\n\n![image-20210419222107674](https://img-blog.csdnimg.cn/img_convert/f8c055cb9f3d609acda6f8cd3b0acd52.png)\n\n![image-20210420142230552](https://img-blog.csdnimg.cn/img_convert/6cd710fffa29d048a1f46aede47491cc.png)\n\n创建MusicService代码：\n\n```JAVA\npackage lz.sdut.Music;\n\nimport android.app.Service;\nimport android.content.Intent;\nimport android.media.MediaPlayer;\nimport android.net.Uri;\nimport android.os.Binder;\nimport android.os.Bundle;\nimport android.os.IBinder;\nimport android.os.Message;\n\n\nimport com.example.a2048application.MusicActivity;\n\nimport java.util.Timer;\nimport java.util.TimerTask;\n\npublic class Music_Service extends Service {\n    private MediaPlayer player; //音乐播放器\n    private Timer timer;    //计时器（进度条）\n\n    public Music_Service() {\n    }\n\n    /**\n     * //绑定一个组件方法\n     * //生成一个音乐播放器\n     * 音乐服务启动主方法\n     * @param intent\n     * @return\n     */\n    @Override\n    public IBinder onBind(Intent intent) {\n        // TODO: Return the communication channel to the service.\n        return new MusicControl();    //音乐播放控制器\n    }\n\n    /**\n     * 创建时，启动的创建方法\n     */\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        player = new MediaPlayer(); //创建音乐播放器\n    }\n\n    /**\n     * //添加计时器，用于播放进度条\n     *\n     */\n    public void addTimer(){\n        if (timer == null){\n             timer = new Timer();\n             //定时器方法\n             TimerTask tack = new TimerTask(){   //Timer来讲就是一个调度器,而TimerTask呢只是一个实现了run方法的一个类,而具体的TimerTask需要由你自己来实现,\n\n                 @Override\n                 public void run() {\n                    if (player == null) return;\n                     int duration = player.getDuration();  //获取歌曲总时长\n                     int currentPosition = player.getCurrentPosition();//获取播放进度\n                     Message msg = MusicActivity.handler.obtainMessage();//创建消息对象\n                     //将音乐的总时长和播放进度封装到消息对象中\n                     Bundle bundle = new Bundle();\n                     bundle.putInt(\"duration\",duration);\n                     bundle.putInt(\"currentPosition\",currentPosition);\n                     msg.setData(bundle);\n                     //将消息发送到主线程的消息队列  线程对象   计时器使用多线程传递信息\n                     /**\n                      * handler是Android给我们提供用来更新UI的一套机制，也是一套消息处理机制，我们可以发消息，也可以通过它处理消息。\n                      * 、Android为什么要设计只能用handler机制更新UI呢？\n                      *\n                      *     答：最根本的目的就是为了解决多线程并发的问题！\n                      *\n                      *            打个比方，如果在一个activity中有多个线程，并且没有加锁，就会出现界面错乱的问题。\n                      *            但是如果对这些更新UI的操作都加锁处理，又会导致性能下降。\n                      *\n                      *           处于对性能的问题考虑，Android给我们提供这一套更新UI的机制我们只需要遵循这种机制就行了。\n                      *           不用再去关系多线程的问题，所有的更新UI的操作，都是在主线程的消息队列中去轮训的。\n                      *\n                      *           大家都知道handler的作用有两个，发送消息和处理消息。\n                      *           而handler发送的消息必须被送到指定MessageQueue（消息队列）中，也就是说，\n                      *           如果想让handler正常工作，就必须有一个MessageQueue（消息队列），不过MessageQueue（消息队列）是由Looper来关系。\n                      *           所以也可以说想让handler正常工作，必须在当前线程中有一个Looper对象。（请认真读）\n                      */\n                     MusicActivity.handler.sendMessage(msg);\n                 }\n             };\n             //开始计时人物的5秒钟，第一次执行task任务，以后每500毫秒执行一次\n            timer.schedule(tack,5,500);\n        }\n\n    }\n\n    public class MusicControl extends Binder{ //Binder是一种跨进程的通信方式\n        public void play(int i){\n            //String path  ma3位置文件地址\n            Uri uri=Uri.parse(\"android.resource://\"+getPackageName()+\"/raw/\"+\"music\"+i);\n            try{\n                player.reset();  //重置音乐播放器\n                //加载多媒体文件\n                player = MediaPlayer.create(getApplicationContext(), uri);\n                player.start();//播放音乐\n                addTimer();//添加计时器\n            }catch (Exception e){\n                e.printStackTrace();\n            }\n        }\n        public void pausePlay(){\n            player.pause(); //暂停播放音乐\n        }\n        public void continuePlay(){\n            player.start();//继续播放音乐\n        }\n        public void seekTo(int progress){\n            player.seekTo(progress); //设置音乐的播放位置\n        }\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        if (player == null){\n            return;\n        }\n        if (player.isPlaying()){\n            player.stop();\n        }\n        player.release();  //释放占用的音乐\n        player = null;     //将player置为空\n    }\n}\n```\n\n![image-20210420144330182](https://img-blog.csdnimg.cn/img_convert/004925d3dcf176f311c8bdf59cefc8ab.png)\n\n4.4创建Music_Activity（主音乐界面）\n\nMusic_Activity类：通过onClick方法控制着音乐的播放、暂停、继续播放和退出功能。它和MusicService进行绑定连接。在音乐播放时显示歌曲总时长，还有歌曲当前播放时长，控制滑动条的移动。代码如下：\n\n```JAVA\npackage com.example.a2048application;\n\nimport android.animation.ObjectAnimator;\nimport android.content.ComponentName;\nimport android.content.Intent;\nimport android.content.ServiceConnection;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.IBinder;\nimport android.os.Message;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.animation.LinearInterpolator;\nimport android.widget.ImageView;\nimport android.widget.SeekBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.RequiresApi;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport lz.sdut.Music.Music_Service;\nimport lz.sdut.Music.frag1;\n\nimport static java.lang.Integer.parseInt;\n\npublic class MusicActivity extends AppCompatActivity implements View.OnClickListener{\n    private static SeekBar sb;\n    private static TextView tv_progress,tv_total,name_song;\n    private ObjectAnimator animator;\n    private Music_Service.MusicControl musicControl;\n    String name;\n    Intent intent1,intent2;\n    MyServiceConn conn;\n    private boolean isUnbind = false;  //用于记录服务是否被解绑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_music);\n        /**\n         * 对于getIntent()这个方法，androidAPI文档中是这样解释的：\n         * Retrieve the raw Intent contained in this Item.\n         * 意思就是将该项目中包含的原始intent检索出来，\n         * 而Intent intent=getIntent();\n         * 是将检索出来的intent赋值给一个Intent类型的变量intent\n         * 上句中，第一个intent是本身就有的一个intent，而后面的是个变量名，需要赋值\n         */\n        intent1 = getIntent();\n        //初始化启动\n        init();\n    }\n\n    private void init() {\n        /**\n         * 页面赋值\n         */\n        tv_progress = (TextView)findViewById(R.id.tv_progress);\n        tv_total = (TextView) findViewById(R.id.tv_total);\n        sb = (SeekBar) findViewById(R.id.sb);\n        name_song = (TextView)findViewById(R.id.song_name);\n\n        findViewById(R.id.btn_play).setOnClickListener(this);\n        findViewById(R.id.btn_pause).setOnClickListener(this);\n        findViewById(R.id.btn_continue_play).setOnClickListener(this);\n        findViewById(R.id.btn_exit).setOnClickListener(this);\n\n        /**\n         * 获取传递进来的MusicName\n         */\n        name = intent1.getStringExtra(\"name\");\n        name_song.setText(name);\n        //创建 Music_Service.class\n        intent2 = new Intent(this, Music_Service.class);   //创建意图对象\n        conn  = new MyServiceConn(); //创建服务连接对象\n\n\n        /**\n         * bindService(intent,mConnection, Context.BIND_AUTO_CREATE);\n         *\n         *     第一个bindService()的参数是一个明确指定了要绑定的service的Intent．\n         *\n         *     第二个参数是ServiceConnection对象．\n         *\n         *     第三个参数是一个标志，它表明绑定中的操作．它一般应是BIND_AUTO_CREATE，\n         *     这样就会在service不存在时创建一个．其它可选的值是BIND_DEBUG_UNBIND和BIND_NOT_FOREGROUND,不想指定时设为0即可．\n         */\n        bindService(intent2,conn,BIND_AUTO_CREATE);//绑定服务\n        //为滑动监听条添加事件监听\n        sb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            @RequiresApi(api = Build.VERSION_CODES.KITKAT)\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n                //进度条改变时，调用此方法\n                if (progress == seekBar.getMax()){  //当滑动条到末端时，结束事件\n                    //转动事件停止\n                    animator.pause(); //停止播放事件\n                }\n            }\n\n            @Override\n            public void onStartTrackingTouch(SeekBar seekBar) {   //滑动条开始滑动时调用\n\n            }\n\n            @Override\n            public void onStopTrackingTouch(SeekBar seekBar) {  // 滑动条停止时调用\n                //根据拖动的进度改变音乐的播放进度\n                int progress = seekBar.getProgress();  //获取seekBar的进度\n                musicControl.seekTo(progress);  //改变播放进度\n            }\n        });\n        ImageView iv_music = findViewById(R.id.iv_music);\n        String position = intent1.getStringExtra(\"position\");\n        int i  = Integer.parseInt(position);\n        iv_music.setImageResource(frag1.icons[i]);\n\n        /**\n         * 动画播放（图片旋转）\n         */\n        animator = ObjectAnimator.ofFloat(iv_music,\"rotation\",0f,360.0f);\n        animator.setDuration(10000); // 动画旋转一周的时间为10秒\n        animator.setInterpolator(new LinearInterpolator()); //匀速\n        animator.setRepeatCount(-1);//表示动画无限循环播放\n    }\n\n    /**\n     *  Handler机制也可叫异步消息机制，它主要由4个部分组成：Message,Handler,MessageQueue,Looper,\n     *\n     * 1.Message\n     *   Message是在线程之间传递的消息，它可以在内部携带少量的信息，用于在不同线程之间交换数据。\n     * 使用Message的arg1和arg2便可携带int数据，使用obj便可携带Object类型数据。\n     *\n     * 2.Handler\n     *   Handler顾名思义就是处理者的意思，它只要用于在子线程发送消息对象Message,在UI线程处理消息对象Message，\n     * 在子线程调用sendMessage方法发送消息对象Message，而发送的消息经过一系列地辗转之后最终会被传递到Handler的handleMessage方法中,\n     * 最终在handleMessage方法中消息对象Message被处理。\n     *\n     * 3.MessageQueue\n     *   MessageQueue就是消息队列的意思,它只要用于存放所有通过Handler发送过来的消息。这部分消息会一直存放于消息队列当中，等待被处理。\n     * 每个线程中只会有一个MessageQueue对象，请牢记这句话。其实从字面上就可以看出，MessageQueue底层数据结构是队列，而且这个队列只存放Message对象。\n     *\n     * 4.Looper\n     *   Looper是每个线程中的MessageQueue的管家，调用Looper的loop()方法后，就会进入到一个无限循环当中，\n     * 然后每当MesssageQueue中存在一条消息，Looper就会将这条消息取出，并将它传递到Handler的handleMessage()方法中。每个线程只有一个Looper对象。\n     *\n     *   了解了上述Handler机制的4个成员后，我们再来把思路理一遍：首先在UI线程我们创建了一个Handler实例对象，\n     * 无论是匿名内部类还是自定义类生成的Handler实例对象，我们都需要对handleMessage方法进行重写，\n     * 在handleMessage方法中我们可以通过参数msg来写接受消息过后UIi线程的逻辑处理，\n     * 接着我们创建子线程，在子线程中需要更新UI的时候，新建一个Message对象，并且将消息的数据记录在这个消息对象Message的内部，比如arg1,arg2,obj等，\n     * 然后通过前面的Handler实例对象调用sendMessge方法把这个Message实例对象发送出去，之后这个消息会被存放于MessageQueue中等待被处理，\n     * 此时MessageQueue的管家Looper正在不停的把MessageQueue存在的消息取出来，通过回调dispatchMessage方法将消息传递给Handler的handleMessage方法，\n     * 最终前面提到的消息会被Looper从MessageQueue中取出来传递给handleMessage方法，最终得到处理。这就是Handler机制整个的工作流程。\n     * 应该都差不多懂了吧，感觉我写的很接地气啊。\n     * ————————————————\n     * 版权声明：本文为CSDN博主「ttxs99989」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n     * 原文链接：https://blog.csdn.net/ttxs99989/article/details/81814037\n     *\n     */\n    //处理进度条\n    public static Handler handler = new Handler(){  //创建消息处理对象\n\n        @Override\n        public void handleMessage(@NonNull Message msg) {\n            Bundle bundle = msg.getData();//获取从子线程发送过来的音乐播放度\n            int duration = bundle.getInt(\"duration\");\n            int currentPosition = bundle.getInt(\"currentPosition\");\n            sb.setMax(duration);\n            sb.setProgress(currentPosition);\n            //歌曲总时长\n            int minute = duration/1000/60;\n            int second = duration/1000%60;\n            String strMinute = null;\n            String strSecond = null;\n            if (minute < 10){ //如果歌曲时长小于10分钟\n                strMinute=\"0\"+minute; //在分钟前面加0\n            }else {\n                strMinute = minute+\"\";\n            }\n\n            if (second < 10){//如果歌曲中的秒钟小于10\n                strSecond=\"0\"+second;//在秒钟前面加一个0\n            }else {\n                strSecond = second+\"\";\n            }\n            tv_total.setText(strMinute+\":\"+strSecond);\n            //歌曲当前的播放时长\n            minute = currentPosition/1000/60;\n            second = currentPosition/1000%60;\n            if (minute < 10){ //如果歌曲时长小于10分钟\n                strMinute=\"0\"+minute; //在分钟前面加0\n            }else {\n                strMinute = minute+\" \";\n            }\n\n            if (second < 10){//如果歌曲中的秒钟小于10\n                strSecond=\"0\"+second;//在秒钟前面加一个0\n            }else {\n                strSecond = second+\"\";\n            }\n            tv_progress.setText(strMinute+\":\"+strSecond);\n        }\n    };\n\n    /**\n     * 创建服务连接对象\n     */\n    class MyServiceConn implements ServiceConnection{  // 用于实现连接服务\n\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            //赋值MusicControl 主控制类\n            musicControl =  (Music_Service.MusicControl) service;\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n\n        }\n    }\n\n    private void unbind(boolean isUnbind){\n        if (!isUnbind){   //判断服务是否被解绑\n            musicControl.pausePlay();  //暂停播放音乐\n            unbindService(conn);      //解绑服务\n        }\n    }\n\n\n    @RequiresApi(api = Build.VERSION_CODES.KITKAT)\n    @Override\n    //点击事件\n    public void onClick(View v) {\n            switch (v.getId()){\n                case R.id.btn_play:  //设置播放按钮点击事件\n                    String position = intent1.getStringExtra(\"position\");\n                    int i = parseInt(position);\n                    musicControl.play(i);\n                    animator.start();\n                    break;\n                case R.id.btn_pause:  //暂停播放事件\n                    musicControl.pausePlay();\n                    animator.pause();\n                    break;\n                case R.id.btn_continue_play: //继续播放按钮\n                    musicControl.continuePlay();\n                    animator.start();\n                    break;\n                case R.id.btn_exit:\n                    unbind(isUnbind);\n                    isUnbind = true;\n                    finish();\n                    break;\n            }\n    }\n    //销毁事件\n    //解除绑定\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unbind(isUnbind);\n    }\n\n    /**\n     * 设置顶部菜单栏选项\n     * (页面跳转)\n     * @param menu\n     * @return\n     */\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.region_right_menu, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.music_menu:\n                Toast.makeText(this,\"音乐播放\",Toast.LENGTH_SHORT).show();\n                Intent Music_intent = new Intent();\n                Music_intent.setClass(this, MainActivity.class);\n                startActivity(Music_intent);\n                break;\n            case R.id.movie_menu:\n                Toast.makeText(this,\"电影播放\",Toast.LENGTH_SHORT).show();\n                Intent Movie_intent = new Intent();\n                Movie_intent.setClass(this, MovieActivity.class);\n                startActivity(Movie_intent);\n                break;\n            case R.id.game_menu:\n                Toast.makeText(this,\"2048\",Toast.LENGTH_SHORT).show();\n                Intent Game_intent = new Intent();\n                Game_intent.setClass(this, GameActivity.class);\n                startActivity(Game_intent);\n                break;\n            case android.R.id.home:\n                Toast.makeText(this,\"返回\",Toast.LENGTH_SHORT).show();\n                return true;\n            default:\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n}\n```\n\n对应的Activity视图\n\nactivity_music: 显示音乐播放器界面，包括图片转动，歌曲名传值，还有播放、暂停播放、继续播放和退出四个控制按钮。效果如图：\n\n![image-20210420151306512](https://img-blog.csdnimg.cn/img_convert/9521f0e503e78e47ea344bda3452b49e.png)\n\n代码如下:\n\n```XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@drawable/music_bg\"\n    tools:context=\".MusicActivity\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\">\n    <ImageView\n        android:id=\"@+id/iv_music\"\n        android:layout_width=\"240dp\"\n        android:layout_height=\"240dp\"\n        android:layout_gravity=\"center_horizontal\"\n        android:layout_margin=\"15dp\"\n        android:src=\"@drawable/music0\"/>\n    <TextView\n        android:id=\"@+id/song_name\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"歌曲名\"\n        android:textSize=\"20sp\"/>\n    <SeekBar\n        android:id=\"@+id/sb\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:paddingLeft=\"8dp\"\n        android:paddingRight=\"8dp\">\n        <TextView\n            android:id=\"@+id/tv_progress\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"00:00\"/>\n        <TextView\n            android:id=\"@+id/tv_total\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentRight=\"true\"\n            android:text=\"00:00\"/>\n    </RelativeLayout>\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n        <Button\n            android:id=\"@+id/btn_play\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"40dp\"\n            android:layout_margin=\"8dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/btn_bg_selector\"\n            android:text=\"播放音乐\"/>\n        <Button\n            android:id=\"@+id/btn_pause\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"40dp\"\n            android:layout_margin=\"8dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/btn_bg_selector\"\n            android:text=\"暂停播放\"/>\n        <Button\n            android:id=\"@+id/btn_continue_play\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"40dp\"\n            android:layout_margin=\"8dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/btn_bg_selector\"\n            android:text=\"继续播放\"/>\n        <Button\n            android:id=\"@+id/btn_exit\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"40dp\"\n            android:layout_margin=\"8dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/btn_bg_selector\"\n            android:text=\"退出\"/>\n    </LinearLayout>\n\n</LinearLayout>\n```\n\n5.5创建相应的资源类\n\n在res文件夹下新建一个raw文件夹，将刚刚准备好的视频文件复制到raw文件夹中。对应的封面圆形图片、背景图片和专辑图片都复制到drawable中，这里博主只选择了三首歌曲和三张封面圆形图片，歌曲数量由大家自己设置，没有限制。\n\n至此 \t\t音乐播放器部分完成  整体效果如图\n\n![image-20210420151627676](https://img-blog.csdnimg.cn/img_convert/0149295a75663d9b7e44fe7688eb523b.png)\n\n主体代码完成，剩余部分请看具体的代码资源\n\n二：视频播放器部分（仅实现本地播放器，且实现较为简单）\n\n设计分析\n\n主要包括一个类，一个Activity和一个资源文件\n\n一：将相应的MP4文件保存至/raw文件夹中效果如图\n\n![](https://img-blog.csdnimg.cn/img_convert/4c7fdd031273266721032d0a60a82414.png)\n\n二：创建MovieActivity\n\nMovieActivity中实现了进度条的设置，播放唯一的影片（可以改成相应的url地址）\n\n绑定视频播放器、绑定进度条。等等\n\n```JAVA\npackage com.example.a2048application;\n\nimport android.content.Intent;\nimport android.media.MediaPlayer;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.SeekBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\nimport android.widget.VideoView;\n\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class MovieActivity extends AppCompatActivity {\n\n    private final String TAG = \"main\";\n    private Button btn_play,btn_pause,btn_replay,btn_stop;\n    private SeekBar seekBar;\n    private VideoView vv_video;\n    private boolean isPlaying;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_movie);\n\n        seekBar = (SeekBar)findViewById(R.id.seekBar);\n//        et_path = (EditText)findViewById(R.id.et_path);\n        vv_video = (VideoView) findViewById(R.id.vv_videoview);\n\n\n        /**\n         * 绑定资源文件\n         */\n        btn_play = (Button) findViewById(R.id.btn_movie_play);\n        btn_pause = (Button) findViewById(R.id.btn_movie_pause);\n        btn_replay = (Button) findViewById(R.id.btn_movie_replay);\n        btn_stop = (Button) findViewById(R.id.btn_movie_stop);\n        /**\n         * 绑定监听信息\n         */\n        btn_play.setOnClickListener(click);\n        btn_pause.setOnClickListener(click);\n        btn_replay.setOnClickListener(click);\n        btn_stop.setOnClickListener(click);\n\n        //为进度条添加进度改变事件\n        seekBar.setOnSeekBarChangeListener(change);\n\n        //设置顶部菜单栏\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);\n            actionBar.setCustomView(R.layout.tittle);//设置标题样式\n            TextView textView = (TextView) actionBar.getCustomView().findViewById(R.id.display_title);//获取标题布局的textview\n            textView.setText(\"电影播放\");//设置标题名称，menuTitle为String字符串\n            actionBar.setHomeButtonEnabled(true);//设置左上角的图标是否可以点击\n//            actionBar.setDisplayHomeAsUpEnabled(true);//给左上角图标的左边加上一个返回的图标\n            actionBar.setDisplayShowCustomEnabled(true);// 使自定义的普通View能在title栏显示，即actionBar.setCustomView能起作用\n        }\n    }\n\n    private SeekBar.OnSeekBarChangeListener change = new SeekBar.OnSeekBarChangeListener() {\n        @Override\n        public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n\n        }\n\n        @Override\n        public void onStartTrackingTouch(SeekBar seekBar) {\n\n        }\n\n        @Override\n        public void onStopTrackingTouch(SeekBar seekBar) {\n            //当进度条停止修改时触发\n            //取得当前进度条的刻度\n            int progress = seekBar.getProgress();\n            if (vv_video != null && vv_video.isPlaying()){\n                //视频播放位置改变  设置当前位置\n                vv_video.seekTo(progress);\n            }\n        }\n    };\n    /**\n     * 根据ID执行不同的操作\n     */\n    private View.OnClickListener click = new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            switch (v.getId()){\n                case R.id.btn_movie_play:\n                    try {\n                        play(0);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    break;\n                case R.id.btn_movie_pause:\n                    pause();\n                    break;\n                case R.id.btn_movie_replay:\n                    replay();\n                    break;\n                case R.id.btn_movie_stop:\n                    stop();\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n\n    protected void play(int msec) throws InterruptedException {\n\n        /**\n         * 视频信息播放\n         */\n        Log.i(TAG, \"指定文件路径\");\n        vv_video.setVideoURI(Uri.parse(\"android.resource://\"+getPackageName()+\"/raw/big_buck_bunny\"));\n        Log.i(TAG, \"开始播放\");\n        vv_video.start();\n\n        /**\n         * 视频资源准备完成\n         * 设置进度条的最大值为视频最长播放信息\n         */\n        vv_video.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {\n            @Override\n            public void onPrepared(MediaPlayer mp) {\n                vv_video.getDuration();\n                System.out.println(vv_video.getDuration());\n                seekBar.setMax(vv_video.getDuration());\n            }\n        });\n\n        //按照初始位置进行播放\n        vv_video.seekTo(msec);\n        //设置进度条的最大长度为视频流的最大播放时长\n        Thread.sleep(300);\n\n        //开始线程，更新进度条的刻度\n        new Thread() {\n            @Override\n            public void run() {\n                try {\n                    isPlaying = true;\n                    while (true) {\n                        //如果正在播放，没0.5豪秒更新一次进度条\n                        if (isPlaying){\n                            int currentPosition = vv_video.getCurrentPosition();\n                            seekBar.setProgress(currentPosition);\n                            sleep(500);\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }.start();\n\n        btn_play.setEnabled(false);\n        vv_video.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {\n            @Override\n            public void onCompletion(MediaPlayer mp) {\n                //在播放完成完毕后回调进度条\n                btn_play.setEnabled(true);\n            }\n        });\n        vv_video.setOnErrorListener(new MediaPlayer.OnErrorListener() {\n            @Override\n            public boolean onError(MediaPlayer mp, int what, int extra) {\n                //发生错误时重新播放\n                try {\n                    play(0);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return false;\n            }\n        });\n    }\n    /**\n     * 重新开始播放\n     */\n    protected void replay(){\n        if (vv_video != null && vv_video.isPlaying()){\n            vv_video.seekTo(0);\n            int i = 0;\n            Toast.makeText(this,\"重新播放\",i).show();\n            btn_pause.setText(\"暂停\");\n            seekBar.setProgress(0);\n            isPlaying = true;\n            return;\n        }\n    }\n\n    /**\n     * 暂停或者继续\n     */\n    protected void pause(){\n        if (btn_pause.getText().toString().trim().equals(\"继续\")){\n            btn_pause.setText(\"暂停\");\n            vv_video.start();\n            int i = 0;\n            Toast.makeText(this,\"继续\",i).show();\n            isPlaying = true;\n            return;\n        }\n\n        if (vv_video != null && vv_video.isPlaying()){\n            vv_video.pause();\n            int i = 0;\n            btn_pause.setText(\"继续\");\n            Toast.makeText(this,\"暂停\",i).show();\n            isPlaying = false;\n            return;\n        }\n    }\n\n    /**\n     * 停止播放\n     * @param\n     * @return\n     */\n    protected  void stop(){\n        if (vv_video != null && vv_video.isPlaying()){\n            vv_video.stopPlayback();\n            btn_play.setEnabled(true);\n            seekBar.setProgress(0);\n            isPlaying = false;\n        }\n    }\n\n    /**\n     * 设置顶部菜单栏选项\n     * (页面跳转)\n     * @param menu\n     * @return\n     */\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.region_right_menu, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.music_menu:\n                Toast.makeText(this,\"音乐播放\",Toast.LENGTH_SHORT).show();\n                Intent Music_intent = new Intent();\n                Music_intent.setClass(this, MainActivity.class);\n                startActivity(Music_intent);\n                break;\n            case R.id.movie_menu:\n                Toast.makeText(this,\"电影播放\",Toast.LENGTH_SHORT).show();\n                Intent Movie_intent = new Intent();\n                Movie_intent.setClass(this, MovieActivity.class);\n                startActivity(Movie_intent);\n                break;\n            case R.id.game_menu:\n                Toast.makeText(this,\"2048\",Toast.LENGTH_SHORT).show();\n                Intent Game_intent = new Intent();\n                Game_intent.setClass(this, GameActivity.class);\n                startActivity(Game_intent);\n                break;\n            case android.R.id.home:\n                Toast.makeText(this,\"返回\",Toast.LENGTH_SHORT).show();\n                return true;\n            default:\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n}\n```\n\n其对应的Activity视图如下:\n\n![image-20210420194308561](https://img-blog.csdnimg.cn/img_convert/864f37e9d84f5e1fbc03e18bfb6a4d68.png)\n\n代码如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:orientation=\"vertical\"\n    tools:context=\".MovieActivity\">\n\n<!--    <EditText-->\n<!--        android:id=\"@+id/et_path\"-->\n<!--        android:layout_width=\"match_parent\"-->\n<!--        android:layout_height=\"wrap_content\"-->\n<!--        android:text=\"src\\main\\res\\raw\\big_buck_bunny.mp4\"/>-->\n\n    <SeekBar\n        android:id=\"@+id/seekBar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"/>\n\n    <LinearLayout\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\" >\n\n        <Button\n            android:id=\"@+id/btn_movie_play\"\n            android:layout_width=\"0dip\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"播放\" />\n\n        <Button\n            android:id=\"@+id/btn_movie_pause\"\n            android:layout_width=\"0dip\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"暂停\" />\n\n        <Button\n            android:id=\"@+id/btn_movie_replay\"\n            android:layout_width=\"0dip\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"重播\" />\n\n        <Button\n            android:id=\"@+id/btn_movie_stop\"\n            android:layout_width=\"0dip\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"停止\" />\n    </LinearLayout>\n\n    <VideoView\n        android:id=\"@+id/vv_videoview\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\" />\n\n</LinearLayout>\n```\n\n在模拟器中展示如下：\n\n![image-20210420194553768](https://img-blog.csdnimg.cn/img_convert/0acbc472e99a158ebc781a8d92adadcf.png)\n\n主体代码如上所言，部分代码请参考项目\n\n三：整合相应的2048人生版（不会实现）\n\n具体代码请参考实例项目\n\n链接：https://pan.baidu.com/s/1M-qK3rmM64xoMHdoNcuSmg \n提取码：44hh \n复制这段内容后打开百度网盘手机App，操作更方便哦\n\n项目参考地址：https://blog.csdn.net/qq_42257666/article/details/105555550（基本抄袭）\n","source":"_posts/Android结课作业-音乐播放器-视频播放-游戏-附带源码.md","raw":"---\ntitle: Android结课作业 音乐播放器 视频播放 游戏 附带源码\nabbrlink: 3434175137\ndate: 2021-11-29 10:14:20\ntags:\n  - Android\n  - 学校 结课作业\ncategories: Android\n---\n项目简介\n\n一：整合了三个小功能   \n\n实现了音乐播放器（Service+Activity实现）\n\n视频播放器（本地视频播放——进度条控制）\n\n2048游戏（人生版2048——分数统计显示）\n\n二：项目概述（创建Activity的方式均是以Android Studio 4.1.2 自动创建 ）\n\n音乐播放器\n\n1页面展示如下：\n\n![image-20210419212318302](https://img-blog.csdnimg.cn/img_convert/cbd8ff9b7e2d02e07961d275cbe8b20a.png)\n\n\n\n2设计分析：\n\n项目包含五个类，五个布局文件\n\nfrag1、frag2为java文件\n\nMusic_Activity为Activity文件，\n MusicService为Service文件，\n MainActivity为主类文件。\n\nactivity_main为MainActivity的主布局文件，显示运行APP时的主界面\n\nactivity_music为Music_Activity的布局文件、显示音乐播放器界面\n\nmusic_list和item_layout一起组成了frag1的主布局文件，也就是音乐界面（APP的默认显示页面）\n\nfrag2_layout就是frag2的布局文件，主要显示的是专辑封面图片。\n\n![image-20210419213014651](https://img-blog.csdnimg.cn/img_convert/4c4495fcf832803dba42bf7643711c67.png)\n\n3、资源文件分析\n\n在res文件夹下创建raw文件、放置MP3文件、在drawable文件下夹粘贴了音乐封面文件和播放器背景图片music_bg.jpg。还有背景选择器的btn_bg_selector.xml文件，如图所示：\n\n\n\n![image-20210419213406874](https://img-blog.csdnimg.cn/img_convert/243bfd350a64ef444e3aee17617f3752.png)\n\n二、开发环境\n\n```\nWin10+AndroidStudio4.12+MUMU模拟器\n```\n\n三：准备工具\n\n1、选择几首自己下载好的音乐文件，命名为music0、music1、music2等。\n\n2、选择每首歌对应的歌手图片，剪成圆形并且保存好，命名为music0、music1、music2等。\n（一定要剪成圆形，椭圆都会影响运行效果）如果不太清楚图片如何剪成圆形，可以看这篇博客：如何将图片剪成圆形\n\n3、准备一张音乐播放器的背景图片，命名为music_bg，再找一张图片用作专辑图片，命名为bg。\n\n四：详细设计\n\n1搭建主页面布局\n\nMainActivity类   包含两个菜单文件：frag1（歌曲菜单）和frag2（专辑菜单）\n\n默认展示歌曲菜单  点击切换 显示 frag2专辑菜单（代码如下：）\n\n```JAVA\npackage com.example.a2048application;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.FrameLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.fragment.app.FragmentManager;\nimport androidx.fragment.app.FragmentTransaction;\n\nimport lz.sdut.Music.frag1;\nimport lz.sdut.Music.frag2;\n\n\npublic class MainActivity extends AppCompatActivity implements View.OnClickListener{\n    private FrameLayout content;\n    private TextView Music_Song,Music_Album;\n    private FragmentManager fm;   //管理类\n    private FragmentTransaction ft;  //回调传递\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);\n            actionBar.setCustomView(R.layout.tittle);//设置标题样式\n            TextView textView = (TextView) actionBar.getCustomView().findViewById(R.id.display_title);//获取标题布局的textview\n            textView.setText(\"音乐播放\");//设置标题名称，menuTitle为String字符串\n            actionBar.setHomeButtonEnabled(true);//设置左上角的图标是否可以点击\n            actionBar.setDisplayHomeAsUpEnabled(true);//给左上角图标的左边加上一个返回的图标\n            actionBar.setDisplayShowCustomEnabled(true);// 使自定义的普通View能在title栏显示，即actionBar.setCustomView能起作用\n        }\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        /**\n         * 设置当前页面功能\n         */\n        content=(FrameLayout)findViewById(R.id.content); //不改变原activity布局的情况下 在activity顶部覆盖一层蒙版（类似与蒙版）\n\n        Music_Song= (TextView)findViewById(R.id.menu1);  //歌曲菜单\n        Music_Album= (TextView)findViewById(R.id.menu2); //专辑菜单\n\n\n        Music_Song.setOnClickListener(this);//设置歌曲菜单监听器\n        Music_Album.setOnClickListener(this);//设置专辑菜单监听器（公用一个监听，通过ID实现切换）\n\n        fm = getSupportFragmentManager(); //若是继承FragmentActivity，fm=getFragmentManger();\n        ft = fm.beginTransaction();\n        ft.replace(R.id.content,new frag1()); //将FrameLayout中的内容切换成Flag1的内容\n        ft.commit();//实现\n    }\n\n    @Override\n    public void onClick(View v) {\n        ft = fm.beginTransaction();\n        switch (v.getId()) {\n            case R.id.menu1:\n                ft.replace(R.id.content, new frag1()); //将FrameLayout中的内容切换成Flag1的内容\n                break;\n            case R.id.menu2:\n                ft.replace(R.id.content, new frag2()); //将FrameLayout中的内容切换成Flag2的内容\n                break;\n            default:\n                break;\n        }\n        ft.commit();\n    }\n\n\n\n\n\n    /**\n     * 设置顶部菜单栏选项\n     * (页面跳转)\n     * @param menu\n     * @return\n     */\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.region_right_menu, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.music_menu:\n                Toast.makeText(this,\"音乐播放\",Toast.LENGTH_SHORT).show();\n                Intent Music_intent = new Intent();\n                Music_intent.setClass(this, MainActivity.class);\n                startActivity(Music_intent);\n                break;\n            case R.id.movie_menu:\n                Toast.makeText(this,\"电影播放\",Toast.LENGTH_SHORT).show();\n                Intent Movie_intent = new Intent();\n                Movie_intent.setClass(this, MovieActivity.class);\n                startActivity(Movie_intent);\n                break;\n            case R.id.game_menu:\n                Toast.makeText(this,\"2048\",Toast.LENGTH_SHORT).show();\n                Intent Game_intent = new Intent();\n                Game_intent.setClass(this, GameActivity.class);\n                startActivity(Game_intent);\n                break;\n            case android.R.id.home:\n                Toast.makeText(MainActivity.this,\"返回\",Toast.LENGTH_SHORT).show();\n                return true;\n            default:\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n}\n```\n\n对应的Activity文件\n\n```XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".MainActivity\"\n    android:orientation=\"vertical\">\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n        <TextView\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:gravity=\"center\"\n            android:text=\"喜欢的音乐\"\n            android:textSize=\"35dp\"\n            android:textColor=\"#87CEFA\">\n        </TextView>\n    </LinearLayout>\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n        <TextView\n            android:id=\"@+id/menu1\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:gravity=\"center\"\n            android:text=\"歌曲\"\n            android:textSize=\"25dp\"\n            android:textColor=\"#87CEFA\">\n        </TextView>\n\n        <TextView\n            android:id=\"@+id/menu2\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:gravity=\"center\"\n            android:text=\"专辑\"\n            android:textSize=\"25dp\"\n            android:textColor=\"#87CEFA\">\n        </TextView>\n\n    </LinearLayout>\n    <FrameLayout\n        android:id=\"@+id/content\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        android:layout_weight=\"9\">\n    </FrameLayout>\n\n</LinearLayout>\n\n```\n\nactivity_main是布局文件，主要显示主界面，最上面放置了“我喜欢”的TextView控件，在底下放置了“歌曲”和“专辑”的TextView控件,效果如图：\n\n![image-20210419214706637](https://img-blog.csdnimg.cn/img_convert/a4fae6bc6e8fbb52ce3db90598620d10.png)\n\n2.2\n\n创建flag1类（显示歌曲列表）模拟器运行出来的默认界面，代码如下：\n\n```JAVA\npackage lz.sdut.Music;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.BaseAdapter;\nimport android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\nimport androidx.fragment.app.Fragment;\n\nimport com.example.a2048application.MusicActivity;\nimport com.example.a2048application.R;\n\n/**\n * Fragment依赖于Activity，不能独立存在\n * 一个Activity可以有多个Fragment\n * 一个Fragment可以被多个Activity重用\n * Fragment有自己的生命周期，并能接收输入事件\n * 可以在Activity运行时动态地添加或删除Fragment\n *模块化组件\n *\n * onAttach()：Fragment和Activity相关联时调用。可以通过该方法获取Activity引用，还可以通过getArguments()获取参数。\n * onCreate()：Fragment被创建时调用\n * onActivityCreated()：当Activity完成onCreate()时调用\n * onStart()：当Fragment可见时调用。\n * onResume()：当Fragment可见且可交互时调用\n * onPause()：当Fragment不可交互但可见时调用。\n * onStop()：当Fragment不可见时调用。\n * onDestroyView()：当Fragment的UI从视图结构中移除时调用。\n * onDestroy()：销毁Fragment时调用。\n * onDetach()：当Fragment和Activity解除关联时调用。\n *\n */\npublic class frag1 extends Fragment {\n    private View view;\n    public String[] name={\"邓紫棋——光年之外\",\"蔡健雅——红色高跟鞋\",\"Taylor Swift——Love Story\"};\n    public static int[] icons = {R.drawable.music0, R.drawable.music1, R.drawable.music2};\n\n\n    @Override\n//    onCreate()：Fragment被创建时调用\n    public View onCreateView( final LayoutInflater inflater,  ViewGroup container, Bundle savedInstanceState) {\n        view = inflater.inflate(R.layout.music_list,null);\n        ListView listView = view.findViewById(R.id.lv);\n        MyBaseAdapter adapter = new MyBaseAdapter();\n        //数据适配方法\n        listView.setAdapter(adapter);\n        //点击事件监听\n        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n                Intent intent = new Intent(frag1.this.getContext(), MusicActivity.class);//创建Intent对象，启动check\n                //将数据放入Intent对象         传输对象\n                intent.putExtra(\"name\",name[position]);\n                intent.putExtra(\"position\",String.valueOf(position));\n                startActivity(intent);\n            }\n        });\n        return view;\n    }\n\n    /**\n     * 学会BaseAdapter其实只需要掌握四个方法：\n     * getCount, getItem, getItemId, getView\n     *\n     *     getCount : 要绑定的条目的数目，比如格子的数量\n     *     getItem : 根据一个索引（位置）获得该位置的对象\n     *     getItemId : 获取条目的id\n     *     getView : 获取该条目要显示的界面\n     *\n     */\n    class MyBaseAdapter extends BaseAdapter {\n\n        //创建数量\n    @Override\n    public int getCount() {\n        return name.length;\n    }\n\n    //条目名字\n    @Override\n    public Object getItem(int position) {\n        return name[position];\n    }\n\n    //条目ID\n    @Override\n    public long getItemId(int position) {\n        return position;\n    }\n\n    //返回视图\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n        //设置布局并返回\n        View view = View.inflate(frag1.this.getContext(), R.layout.item_layout, null);\n        TextView tv_name = view.findViewById(R.id.item_name);\n        ImageView iv= view.findViewById(R.id.iv);\n        tv_name.setText(name[position]);\n        iv.setImageResource(icons[position]);\n        return view;\n    }\n}\n}\n\n```\n\n定义Flag1的需要用到的activity文件：\n\nmusic_list.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\">\n    <ListView\n        android:id=\"@+id/lv\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"/>\n</LinearLayout>\n```\n\nitem_layout.xml   \n\n```XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"16dp\">\n    <ImageView\n        android:id=\"@+id/iv\"\n        android:layout_width=\"40dp\"\n        android:layout_height=\"40dp\"\n        android:layout_centerVertical=\"true\"/>\n    <RelativeLayout\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginLeft=\"10dp\"\n        android:layout_toRightOf=\"@+id/iv\"\n        android:layout_centerVertical=\"true\">\n        <TextView\n            android:id=\"@+id/item_name\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"歌曲\"\n            android:textSize=\"15sp\"\n            android:textColor=\"#87CEFA\"/>\n    </RelativeLayout>\n</RelativeLayout>\n```\n\n界面如下:\n\n![image-20210419215628732](https://img-blog.csdnimg.cn/img_convert/5daa7e50ca1c3abb6a757f34e4800314.png)\n\n创建flag2类（显示专辑列表）代码较为简单：\n\n```java\npackage lz.sdut.Music;\n\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\n\nimport com.example.a2048application.R;\n\n\n/**\n * 仅插入了一个视图\n * 视图为一张图片\n */\npublic class frag2 extends Fragment {\n    private View zj;\n\n    @Nullable\n    @Override\n    public View onCreateView(@NonNull final LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        zj = inflater.inflate(R.layout.frag2_layout, null);\n        View listView = zj.findViewById(R.id.iv);\n        return zj;\n    }\n}\n```\n\nfrag2_layout.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    <ImageView\n        android:id=\"@+id/zj\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:background=\"@drawable/bg\"/>\n</LinearLayout>\n```\n\n效果如下：\n\n![image-20210419221830910](https://img-blog.csdnimg.cn/img_convert/ad7ea1bf0e3c4d3afc26dbe5fcdebfb5.png)\n\n3.3\n\n创建服务类\n\n![image-20210419222107674](https://img-blog.csdnimg.cn/img_convert/f8c055cb9f3d609acda6f8cd3b0acd52.png)\n\n![image-20210420142230552](https://img-blog.csdnimg.cn/img_convert/6cd710fffa29d048a1f46aede47491cc.png)\n\n创建MusicService代码：\n\n```JAVA\npackage lz.sdut.Music;\n\nimport android.app.Service;\nimport android.content.Intent;\nimport android.media.MediaPlayer;\nimport android.net.Uri;\nimport android.os.Binder;\nimport android.os.Bundle;\nimport android.os.IBinder;\nimport android.os.Message;\n\n\nimport com.example.a2048application.MusicActivity;\n\nimport java.util.Timer;\nimport java.util.TimerTask;\n\npublic class Music_Service extends Service {\n    private MediaPlayer player; //音乐播放器\n    private Timer timer;    //计时器（进度条）\n\n    public Music_Service() {\n    }\n\n    /**\n     * //绑定一个组件方法\n     * //生成一个音乐播放器\n     * 音乐服务启动主方法\n     * @param intent\n     * @return\n     */\n    @Override\n    public IBinder onBind(Intent intent) {\n        // TODO: Return the communication channel to the service.\n        return new MusicControl();    //音乐播放控制器\n    }\n\n    /**\n     * 创建时，启动的创建方法\n     */\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        player = new MediaPlayer(); //创建音乐播放器\n    }\n\n    /**\n     * //添加计时器，用于播放进度条\n     *\n     */\n    public void addTimer(){\n        if (timer == null){\n             timer = new Timer();\n             //定时器方法\n             TimerTask tack = new TimerTask(){   //Timer来讲就是一个调度器,而TimerTask呢只是一个实现了run方法的一个类,而具体的TimerTask需要由你自己来实现,\n\n                 @Override\n                 public void run() {\n                    if (player == null) return;\n                     int duration = player.getDuration();  //获取歌曲总时长\n                     int currentPosition = player.getCurrentPosition();//获取播放进度\n                     Message msg = MusicActivity.handler.obtainMessage();//创建消息对象\n                     //将音乐的总时长和播放进度封装到消息对象中\n                     Bundle bundle = new Bundle();\n                     bundle.putInt(\"duration\",duration);\n                     bundle.putInt(\"currentPosition\",currentPosition);\n                     msg.setData(bundle);\n                     //将消息发送到主线程的消息队列  线程对象   计时器使用多线程传递信息\n                     /**\n                      * handler是Android给我们提供用来更新UI的一套机制，也是一套消息处理机制，我们可以发消息，也可以通过它处理消息。\n                      * 、Android为什么要设计只能用handler机制更新UI呢？\n                      *\n                      *     答：最根本的目的就是为了解决多线程并发的问题！\n                      *\n                      *            打个比方，如果在一个activity中有多个线程，并且没有加锁，就会出现界面错乱的问题。\n                      *            但是如果对这些更新UI的操作都加锁处理，又会导致性能下降。\n                      *\n                      *           处于对性能的问题考虑，Android给我们提供这一套更新UI的机制我们只需要遵循这种机制就行了。\n                      *           不用再去关系多线程的问题，所有的更新UI的操作，都是在主线程的消息队列中去轮训的。\n                      *\n                      *           大家都知道handler的作用有两个，发送消息和处理消息。\n                      *           而handler发送的消息必须被送到指定MessageQueue（消息队列）中，也就是说，\n                      *           如果想让handler正常工作，就必须有一个MessageQueue（消息队列），不过MessageQueue（消息队列）是由Looper来关系。\n                      *           所以也可以说想让handler正常工作，必须在当前线程中有一个Looper对象。（请认真读）\n                      */\n                     MusicActivity.handler.sendMessage(msg);\n                 }\n             };\n             //开始计时人物的5秒钟，第一次执行task任务，以后每500毫秒执行一次\n            timer.schedule(tack,5,500);\n        }\n\n    }\n\n    public class MusicControl extends Binder{ //Binder是一种跨进程的通信方式\n        public void play(int i){\n            //String path  ma3位置文件地址\n            Uri uri=Uri.parse(\"android.resource://\"+getPackageName()+\"/raw/\"+\"music\"+i);\n            try{\n                player.reset();  //重置音乐播放器\n                //加载多媒体文件\n                player = MediaPlayer.create(getApplicationContext(), uri);\n                player.start();//播放音乐\n                addTimer();//添加计时器\n            }catch (Exception e){\n                e.printStackTrace();\n            }\n        }\n        public void pausePlay(){\n            player.pause(); //暂停播放音乐\n        }\n        public void continuePlay(){\n            player.start();//继续播放音乐\n        }\n        public void seekTo(int progress){\n            player.seekTo(progress); //设置音乐的播放位置\n        }\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n        if (player == null){\n            return;\n        }\n        if (player.isPlaying()){\n            player.stop();\n        }\n        player.release();  //释放占用的音乐\n        player = null;     //将player置为空\n    }\n}\n```\n\n![image-20210420144330182](https://img-blog.csdnimg.cn/img_convert/004925d3dcf176f311c8bdf59cefc8ab.png)\n\n4.4创建Music_Activity（主音乐界面）\n\nMusic_Activity类：通过onClick方法控制着音乐的播放、暂停、继续播放和退出功能。它和MusicService进行绑定连接。在音乐播放时显示歌曲总时长，还有歌曲当前播放时长，控制滑动条的移动。代码如下：\n\n```JAVA\npackage com.example.a2048application;\n\nimport android.animation.ObjectAnimator;\nimport android.content.ComponentName;\nimport android.content.Intent;\nimport android.content.ServiceConnection;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.IBinder;\nimport android.os.Message;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.animation.LinearInterpolator;\nimport android.widget.ImageView;\nimport android.widget.SeekBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.RequiresApi;\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport lz.sdut.Music.Music_Service;\nimport lz.sdut.Music.frag1;\n\nimport static java.lang.Integer.parseInt;\n\npublic class MusicActivity extends AppCompatActivity implements View.OnClickListener{\n    private static SeekBar sb;\n    private static TextView tv_progress,tv_total,name_song;\n    private ObjectAnimator animator;\n    private Music_Service.MusicControl musicControl;\n    String name;\n    Intent intent1,intent2;\n    MyServiceConn conn;\n    private boolean isUnbind = false;  //用于记录服务是否被解绑\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_music);\n        /**\n         * 对于getIntent()这个方法，androidAPI文档中是这样解释的：\n         * Retrieve the raw Intent contained in this Item.\n         * 意思就是将该项目中包含的原始intent检索出来，\n         * 而Intent intent=getIntent();\n         * 是将检索出来的intent赋值给一个Intent类型的变量intent\n         * 上句中，第一个intent是本身就有的一个intent，而后面的是个变量名，需要赋值\n         */\n        intent1 = getIntent();\n        //初始化启动\n        init();\n    }\n\n    private void init() {\n        /**\n         * 页面赋值\n         */\n        tv_progress = (TextView)findViewById(R.id.tv_progress);\n        tv_total = (TextView) findViewById(R.id.tv_total);\n        sb = (SeekBar) findViewById(R.id.sb);\n        name_song = (TextView)findViewById(R.id.song_name);\n\n        findViewById(R.id.btn_play).setOnClickListener(this);\n        findViewById(R.id.btn_pause).setOnClickListener(this);\n        findViewById(R.id.btn_continue_play).setOnClickListener(this);\n        findViewById(R.id.btn_exit).setOnClickListener(this);\n\n        /**\n         * 获取传递进来的MusicName\n         */\n        name = intent1.getStringExtra(\"name\");\n        name_song.setText(name);\n        //创建 Music_Service.class\n        intent2 = new Intent(this, Music_Service.class);   //创建意图对象\n        conn  = new MyServiceConn(); //创建服务连接对象\n\n\n        /**\n         * bindService(intent,mConnection, Context.BIND_AUTO_CREATE);\n         *\n         *     第一个bindService()的参数是一个明确指定了要绑定的service的Intent．\n         *\n         *     第二个参数是ServiceConnection对象．\n         *\n         *     第三个参数是一个标志，它表明绑定中的操作．它一般应是BIND_AUTO_CREATE，\n         *     这样就会在service不存在时创建一个．其它可选的值是BIND_DEBUG_UNBIND和BIND_NOT_FOREGROUND,不想指定时设为0即可．\n         */\n        bindService(intent2,conn,BIND_AUTO_CREATE);//绑定服务\n        //为滑动监听条添加事件监听\n        sb.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n            @RequiresApi(api = Build.VERSION_CODES.KITKAT)\n            @Override\n            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n                //进度条改变时，调用此方法\n                if (progress == seekBar.getMax()){  //当滑动条到末端时，结束事件\n                    //转动事件停止\n                    animator.pause(); //停止播放事件\n                }\n            }\n\n            @Override\n            public void onStartTrackingTouch(SeekBar seekBar) {   //滑动条开始滑动时调用\n\n            }\n\n            @Override\n            public void onStopTrackingTouch(SeekBar seekBar) {  // 滑动条停止时调用\n                //根据拖动的进度改变音乐的播放进度\n                int progress = seekBar.getProgress();  //获取seekBar的进度\n                musicControl.seekTo(progress);  //改变播放进度\n            }\n        });\n        ImageView iv_music = findViewById(R.id.iv_music);\n        String position = intent1.getStringExtra(\"position\");\n        int i  = Integer.parseInt(position);\n        iv_music.setImageResource(frag1.icons[i]);\n\n        /**\n         * 动画播放（图片旋转）\n         */\n        animator = ObjectAnimator.ofFloat(iv_music,\"rotation\",0f,360.0f);\n        animator.setDuration(10000); // 动画旋转一周的时间为10秒\n        animator.setInterpolator(new LinearInterpolator()); //匀速\n        animator.setRepeatCount(-1);//表示动画无限循环播放\n    }\n\n    /**\n     *  Handler机制也可叫异步消息机制，它主要由4个部分组成：Message,Handler,MessageQueue,Looper,\n     *\n     * 1.Message\n     *   Message是在线程之间传递的消息，它可以在内部携带少量的信息，用于在不同线程之间交换数据。\n     * 使用Message的arg1和arg2便可携带int数据，使用obj便可携带Object类型数据。\n     *\n     * 2.Handler\n     *   Handler顾名思义就是处理者的意思，它只要用于在子线程发送消息对象Message,在UI线程处理消息对象Message，\n     * 在子线程调用sendMessage方法发送消息对象Message，而发送的消息经过一系列地辗转之后最终会被传递到Handler的handleMessage方法中,\n     * 最终在handleMessage方法中消息对象Message被处理。\n     *\n     * 3.MessageQueue\n     *   MessageQueue就是消息队列的意思,它只要用于存放所有通过Handler发送过来的消息。这部分消息会一直存放于消息队列当中，等待被处理。\n     * 每个线程中只会有一个MessageQueue对象，请牢记这句话。其实从字面上就可以看出，MessageQueue底层数据结构是队列，而且这个队列只存放Message对象。\n     *\n     * 4.Looper\n     *   Looper是每个线程中的MessageQueue的管家，调用Looper的loop()方法后，就会进入到一个无限循环当中，\n     * 然后每当MesssageQueue中存在一条消息，Looper就会将这条消息取出，并将它传递到Handler的handleMessage()方法中。每个线程只有一个Looper对象。\n     *\n     *   了解了上述Handler机制的4个成员后，我们再来把思路理一遍：首先在UI线程我们创建了一个Handler实例对象，\n     * 无论是匿名内部类还是自定义类生成的Handler实例对象，我们都需要对handleMessage方法进行重写，\n     * 在handleMessage方法中我们可以通过参数msg来写接受消息过后UIi线程的逻辑处理，\n     * 接着我们创建子线程，在子线程中需要更新UI的时候，新建一个Message对象，并且将消息的数据记录在这个消息对象Message的内部，比如arg1,arg2,obj等，\n     * 然后通过前面的Handler实例对象调用sendMessge方法把这个Message实例对象发送出去，之后这个消息会被存放于MessageQueue中等待被处理，\n     * 此时MessageQueue的管家Looper正在不停的把MessageQueue存在的消息取出来，通过回调dispatchMessage方法将消息传递给Handler的handleMessage方法，\n     * 最终前面提到的消息会被Looper从MessageQueue中取出来传递给handleMessage方法，最终得到处理。这就是Handler机制整个的工作流程。\n     * 应该都差不多懂了吧，感觉我写的很接地气啊。\n     * ————————————————\n     * 版权声明：本文为CSDN博主「ttxs99989」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n     * 原文链接：https://blog.csdn.net/ttxs99989/article/details/81814037\n     *\n     */\n    //处理进度条\n    public static Handler handler = new Handler(){  //创建消息处理对象\n\n        @Override\n        public void handleMessage(@NonNull Message msg) {\n            Bundle bundle = msg.getData();//获取从子线程发送过来的音乐播放度\n            int duration = bundle.getInt(\"duration\");\n            int currentPosition = bundle.getInt(\"currentPosition\");\n            sb.setMax(duration);\n            sb.setProgress(currentPosition);\n            //歌曲总时长\n            int minute = duration/1000/60;\n            int second = duration/1000%60;\n            String strMinute = null;\n            String strSecond = null;\n            if (minute < 10){ //如果歌曲时长小于10分钟\n                strMinute=\"0\"+minute; //在分钟前面加0\n            }else {\n                strMinute = minute+\"\";\n            }\n\n            if (second < 10){//如果歌曲中的秒钟小于10\n                strSecond=\"0\"+second;//在秒钟前面加一个0\n            }else {\n                strSecond = second+\"\";\n            }\n            tv_total.setText(strMinute+\":\"+strSecond);\n            //歌曲当前的播放时长\n            minute = currentPosition/1000/60;\n            second = currentPosition/1000%60;\n            if (minute < 10){ //如果歌曲时长小于10分钟\n                strMinute=\"0\"+minute; //在分钟前面加0\n            }else {\n                strMinute = minute+\" \";\n            }\n\n            if (second < 10){//如果歌曲中的秒钟小于10\n                strSecond=\"0\"+second;//在秒钟前面加一个0\n            }else {\n                strSecond = second+\"\";\n            }\n            tv_progress.setText(strMinute+\":\"+strSecond);\n        }\n    };\n\n    /**\n     * 创建服务连接对象\n     */\n    class MyServiceConn implements ServiceConnection{  // 用于实现连接服务\n\n        @Override\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            //赋值MusicControl 主控制类\n            musicControl =  (Music_Service.MusicControl) service;\n        }\n\n        @Override\n        public void onServiceDisconnected(ComponentName name) {\n\n        }\n    }\n\n    private void unbind(boolean isUnbind){\n        if (!isUnbind){   //判断服务是否被解绑\n            musicControl.pausePlay();  //暂停播放音乐\n            unbindService(conn);      //解绑服务\n        }\n    }\n\n\n    @RequiresApi(api = Build.VERSION_CODES.KITKAT)\n    @Override\n    //点击事件\n    public void onClick(View v) {\n            switch (v.getId()){\n                case R.id.btn_play:  //设置播放按钮点击事件\n                    String position = intent1.getStringExtra(\"position\");\n                    int i = parseInt(position);\n                    musicControl.play(i);\n                    animator.start();\n                    break;\n                case R.id.btn_pause:  //暂停播放事件\n                    musicControl.pausePlay();\n                    animator.pause();\n                    break;\n                case R.id.btn_continue_play: //继续播放按钮\n                    musicControl.continuePlay();\n                    animator.start();\n                    break;\n                case R.id.btn_exit:\n                    unbind(isUnbind);\n                    isUnbind = true;\n                    finish();\n                    break;\n            }\n    }\n    //销毁事件\n    //解除绑定\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        unbind(isUnbind);\n    }\n\n    /**\n     * 设置顶部菜单栏选项\n     * (页面跳转)\n     * @param menu\n     * @return\n     */\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.region_right_menu, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.music_menu:\n                Toast.makeText(this,\"音乐播放\",Toast.LENGTH_SHORT).show();\n                Intent Music_intent = new Intent();\n                Music_intent.setClass(this, MainActivity.class);\n                startActivity(Music_intent);\n                break;\n            case R.id.movie_menu:\n                Toast.makeText(this,\"电影播放\",Toast.LENGTH_SHORT).show();\n                Intent Movie_intent = new Intent();\n                Movie_intent.setClass(this, MovieActivity.class);\n                startActivity(Movie_intent);\n                break;\n            case R.id.game_menu:\n                Toast.makeText(this,\"2048\",Toast.LENGTH_SHORT).show();\n                Intent Game_intent = new Intent();\n                Game_intent.setClass(this, GameActivity.class);\n                startActivity(Game_intent);\n                break;\n            case android.R.id.home:\n                Toast.makeText(this,\"返回\",Toast.LENGTH_SHORT).show();\n                return true;\n            default:\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n}\n```\n\n对应的Activity视图\n\nactivity_music: 显示音乐播放器界面，包括图片转动，歌曲名传值，还有播放、暂停播放、继续播放和退出四个控制按钮。效果如图：\n\n![image-20210420151306512](https://img-blog.csdnimg.cn/img_convert/9521f0e503e78e47ea344bda3452b49e.png)\n\n代码如下:\n\n```XML\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@drawable/music_bg\"\n    tools:context=\".MusicActivity\"\n    android:gravity=\"center\"\n    android:orientation=\"vertical\">\n    <ImageView\n        android:id=\"@+id/iv_music\"\n        android:layout_width=\"240dp\"\n        android:layout_height=\"240dp\"\n        android:layout_gravity=\"center_horizontal\"\n        android:layout_margin=\"15dp\"\n        android:src=\"@drawable/music0\"/>\n    <TextView\n        android:id=\"@+id/song_name\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"歌曲名\"\n        android:textSize=\"20sp\"/>\n    <SeekBar\n        android:id=\"@+id/sb\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\" />\n    <RelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:paddingLeft=\"8dp\"\n        android:paddingRight=\"8dp\">\n        <TextView\n            android:id=\"@+id/tv_progress\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"00:00\"/>\n        <TextView\n            android:id=\"@+id/tv_total\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignParentRight=\"true\"\n            android:text=\"00:00\"/>\n    </RelativeLayout>\n    <LinearLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n        <Button\n            android:id=\"@+id/btn_play\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"40dp\"\n            android:layout_margin=\"8dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/btn_bg_selector\"\n            android:text=\"播放音乐\"/>\n        <Button\n            android:id=\"@+id/btn_pause\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"40dp\"\n            android:layout_margin=\"8dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/btn_bg_selector\"\n            android:text=\"暂停播放\"/>\n        <Button\n            android:id=\"@+id/btn_continue_play\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"40dp\"\n            android:layout_margin=\"8dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/btn_bg_selector\"\n            android:text=\"继续播放\"/>\n        <Button\n            android:id=\"@+id/btn_exit\"\n            android:layout_width=\"0dp\"\n            android:layout_height=\"40dp\"\n            android:layout_margin=\"8dp\"\n            android:layout_weight=\"1\"\n            android:background=\"@drawable/btn_bg_selector\"\n            android:text=\"退出\"/>\n    </LinearLayout>\n\n</LinearLayout>\n```\n\n5.5创建相应的资源类\n\n在res文件夹下新建一个raw文件夹，将刚刚准备好的视频文件复制到raw文件夹中。对应的封面圆形图片、背景图片和专辑图片都复制到drawable中，这里博主只选择了三首歌曲和三张封面圆形图片，歌曲数量由大家自己设置，没有限制。\n\n至此 \t\t音乐播放器部分完成  整体效果如图\n\n![image-20210420151627676](https://img-blog.csdnimg.cn/img_convert/0149295a75663d9b7e44fe7688eb523b.png)\n\n主体代码完成，剩余部分请看具体的代码资源\n\n二：视频播放器部分（仅实现本地播放器，且实现较为简单）\n\n设计分析\n\n主要包括一个类，一个Activity和一个资源文件\n\n一：将相应的MP4文件保存至/raw文件夹中效果如图\n\n![](https://img-blog.csdnimg.cn/img_convert/4c7fdd031273266721032d0a60a82414.png)\n\n二：创建MovieActivity\n\nMovieActivity中实现了进度条的设置，播放唯一的影片（可以改成相应的url地址）\n\n绑定视频播放器、绑定进度条。等等\n\n```JAVA\npackage com.example.a2048application;\n\nimport android.content.Intent;\nimport android.media.MediaPlayer;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.SeekBar;\nimport android.widget.TextView;\nimport android.widget.Toast;\nimport android.widget.VideoView;\n\nimport androidx.appcompat.app.ActionBar;\nimport androidx.appcompat.app.AppCompatActivity;\n\npublic class MovieActivity extends AppCompatActivity {\n\n    private final String TAG = \"main\";\n    private Button btn_play,btn_pause,btn_replay,btn_stop;\n    private SeekBar seekBar;\n    private VideoView vv_video;\n    private boolean isPlaying;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_movie);\n\n        seekBar = (SeekBar)findViewById(R.id.seekBar);\n//        et_path = (EditText)findViewById(R.id.et_path);\n        vv_video = (VideoView) findViewById(R.id.vv_videoview);\n\n\n        /**\n         * 绑定资源文件\n         */\n        btn_play = (Button) findViewById(R.id.btn_movie_play);\n        btn_pause = (Button) findViewById(R.id.btn_movie_pause);\n        btn_replay = (Button) findViewById(R.id.btn_movie_replay);\n        btn_stop = (Button) findViewById(R.id.btn_movie_stop);\n        /**\n         * 绑定监听信息\n         */\n        btn_play.setOnClickListener(click);\n        btn_pause.setOnClickListener(click);\n        btn_replay.setOnClickListener(click);\n        btn_stop.setOnClickListener(click);\n\n        //为进度条添加进度改变事件\n        seekBar.setOnSeekBarChangeListener(change);\n\n        //设置顶部菜单栏\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);\n            actionBar.setCustomView(R.layout.tittle);//设置标题样式\n            TextView textView = (TextView) actionBar.getCustomView().findViewById(R.id.display_title);//获取标题布局的textview\n            textView.setText(\"电影播放\");//设置标题名称，menuTitle为String字符串\n            actionBar.setHomeButtonEnabled(true);//设置左上角的图标是否可以点击\n//            actionBar.setDisplayHomeAsUpEnabled(true);//给左上角图标的左边加上一个返回的图标\n            actionBar.setDisplayShowCustomEnabled(true);// 使自定义的普通View能在title栏显示，即actionBar.setCustomView能起作用\n        }\n    }\n\n    private SeekBar.OnSeekBarChangeListener change = new SeekBar.OnSeekBarChangeListener() {\n        @Override\n        public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {\n\n        }\n\n        @Override\n        public void onStartTrackingTouch(SeekBar seekBar) {\n\n        }\n\n        @Override\n        public void onStopTrackingTouch(SeekBar seekBar) {\n            //当进度条停止修改时触发\n            //取得当前进度条的刻度\n            int progress = seekBar.getProgress();\n            if (vv_video != null && vv_video.isPlaying()){\n                //视频播放位置改变  设置当前位置\n                vv_video.seekTo(progress);\n            }\n        }\n    };\n    /**\n     * 根据ID执行不同的操作\n     */\n    private View.OnClickListener click = new View.OnClickListener() {\n        @Override\n        public void onClick(View v) {\n            switch (v.getId()){\n                case R.id.btn_movie_play:\n                    try {\n                        play(0);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    break;\n                case R.id.btn_movie_pause:\n                    pause();\n                    break;\n                case R.id.btn_movie_replay:\n                    replay();\n                    break;\n                case R.id.btn_movie_stop:\n                    stop();\n                    break;\n                default:\n                    break;\n            }\n        }\n    };\n\n    protected void play(int msec) throws InterruptedException {\n\n        /**\n         * 视频信息播放\n         */\n        Log.i(TAG, \"指定文件路径\");\n        vv_video.setVideoURI(Uri.parse(\"android.resource://\"+getPackageName()+\"/raw/big_buck_bunny\"));\n        Log.i(TAG, \"开始播放\");\n        vv_video.start();\n\n        /**\n         * 视频资源准备完成\n         * 设置进度条的最大值为视频最长播放信息\n         */\n        vv_video.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {\n            @Override\n            public void onPrepared(MediaPlayer mp) {\n                vv_video.getDuration();\n                System.out.println(vv_video.getDuration());\n                seekBar.setMax(vv_video.getDuration());\n            }\n        });\n\n        //按照初始位置进行播放\n        vv_video.seekTo(msec);\n        //设置进度条的最大长度为视频流的最大播放时长\n        Thread.sleep(300);\n\n        //开始线程，更新进度条的刻度\n        new Thread() {\n            @Override\n            public void run() {\n                try {\n                    isPlaying = true;\n                    while (true) {\n                        //如果正在播放，没0.5豪秒更新一次进度条\n                        if (isPlaying){\n                            int currentPosition = vv_video.getCurrentPosition();\n                            seekBar.setProgress(currentPosition);\n                            sleep(500);\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        }.start();\n\n        btn_play.setEnabled(false);\n        vv_video.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {\n            @Override\n            public void onCompletion(MediaPlayer mp) {\n                //在播放完成完毕后回调进度条\n                btn_play.setEnabled(true);\n            }\n        });\n        vv_video.setOnErrorListener(new MediaPlayer.OnErrorListener() {\n            @Override\n            public boolean onError(MediaPlayer mp, int what, int extra) {\n                //发生错误时重新播放\n                try {\n                    play(0);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return false;\n            }\n        });\n    }\n    /**\n     * 重新开始播放\n     */\n    protected void replay(){\n        if (vv_video != null && vv_video.isPlaying()){\n            vv_video.seekTo(0);\n            int i = 0;\n            Toast.makeText(this,\"重新播放\",i).show();\n            btn_pause.setText(\"暂停\");\n            seekBar.setProgress(0);\n            isPlaying = true;\n            return;\n        }\n    }\n\n    /**\n     * 暂停或者继续\n     */\n    protected void pause(){\n        if (btn_pause.getText().toString().trim().equals(\"继续\")){\n            btn_pause.setText(\"暂停\");\n            vv_video.start();\n            int i = 0;\n            Toast.makeText(this,\"继续\",i).show();\n            isPlaying = true;\n            return;\n        }\n\n        if (vv_video != null && vv_video.isPlaying()){\n            vv_video.pause();\n            int i = 0;\n            btn_pause.setText(\"继续\");\n            Toast.makeText(this,\"暂停\",i).show();\n            isPlaying = false;\n            return;\n        }\n    }\n\n    /**\n     * 停止播放\n     * @param\n     * @return\n     */\n    protected  void stop(){\n        if (vv_video != null && vv_video.isPlaying()){\n            vv_video.stopPlayback();\n            btn_play.setEnabled(true);\n            seekBar.setProgress(0);\n            isPlaying = false;\n        }\n    }\n\n    /**\n     * 设置顶部菜单栏选项\n     * (页面跳转)\n     * @param menu\n     * @return\n     */\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        getMenuInflater().inflate(R.menu.region_right_menu, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case R.id.music_menu:\n                Toast.makeText(this,\"音乐播放\",Toast.LENGTH_SHORT).show();\n                Intent Music_intent = new Intent();\n                Music_intent.setClass(this, MainActivity.class);\n                startActivity(Music_intent);\n                break;\n            case R.id.movie_menu:\n                Toast.makeText(this,\"电影播放\",Toast.LENGTH_SHORT).show();\n                Intent Movie_intent = new Intent();\n                Movie_intent.setClass(this, MovieActivity.class);\n                startActivity(Movie_intent);\n                break;\n            case R.id.game_menu:\n                Toast.makeText(this,\"2048\",Toast.LENGTH_SHORT).show();\n                Intent Game_intent = new Intent();\n                Game_intent.setClass(this, GameActivity.class);\n                startActivity(Game_intent);\n                break;\n            case android.R.id.home:\n                Toast.makeText(this,\"返回\",Toast.LENGTH_SHORT).show();\n                return true;\n            default:\n                break;\n        }\n        return super.onOptionsItemSelected(item);\n    }\n}\n```\n\n其对应的Activity视图如下:\n\n![image-20210420194308561](https://img-blog.csdnimg.cn/img_convert/864f37e9d84f5e1fbc03e18bfb6a4d68.png)\n\n代码如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:orientation=\"vertical\"\n    tools:context=\".MovieActivity\">\n\n<!--    <EditText-->\n<!--        android:id=\"@+id/et_path\"-->\n<!--        android:layout_width=\"match_parent\"-->\n<!--        android:layout_height=\"wrap_content\"-->\n<!--        android:text=\"src\\main\\res\\raw\\big_buck_bunny.mp4\"/>-->\n\n    <SeekBar\n        android:id=\"@+id/seekBar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"/>\n\n    <LinearLayout\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\" >\n\n        <Button\n            android:id=\"@+id/btn_movie_play\"\n            android:layout_width=\"0dip\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"播放\" />\n\n        <Button\n            android:id=\"@+id/btn_movie_pause\"\n            android:layout_width=\"0dip\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"暂停\" />\n\n        <Button\n            android:id=\"@+id/btn_movie_replay\"\n            android:layout_width=\"0dip\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"重播\" />\n\n        <Button\n            android:id=\"@+id/btn_movie_stop\"\n            android:layout_width=\"0dip\"\n            android:layout_height=\"wrap_content\"\n            android:layout_weight=\"1\"\n            android:text=\"停止\" />\n    </LinearLayout>\n\n    <VideoView\n        android:id=\"@+id/vv_videoview\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"fill_parent\" />\n\n</LinearLayout>\n```\n\n在模拟器中展示如下：\n\n![image-20210420194553768](https://img-blog.csdnimg.cn/img_convert/0acbc472e99a158ebc781a8d92adadcf.png)\n\n主体代码如上所言，部分代码请参考项目\n\n三：整合相应的2048人生版（不会实现）\n\n具体代码请参考实例项目\n\n链接：https://pan.baidu.com/s/1M-qK3rmM64xoMHdoNcuSmg \n提取码：44hh \n复制这段内容后打开百度网盘手机App，操作更方便哦\n\n项目参考地址：https://blog.csdn.net/qq_42257666/article/details/105555550（基本抄袭）\n","slug":"Android结课作业-音乐播放器-视频播放-游戏-附带源码","published":1,"updated":"2021-11-29T02:20:55.007Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwpqg2tz007to4vb4jy5fb8j","content":"<p>项目简介</p>\n<p>一：整合了三个小功能</p>\n<p>实现了音乐播放器（Service+Activity实现）</p>\n<p>视频播放器（本地视频播放——进度条控制）</p>\n<p>2048游戏（人生版2048——分数统计显示）</p>\n<p>二：项目概述（创建Activity的方式均是以Android Studio 4.1.2 自动创建 ）</p>\n<p>音乐播放器</p>\n<p>1页面展示如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cbd8ff9b7e2d02e07961d275cbe8b20a.png\" alt=\"image-20210419212318302\"></p>\n<p>2设计分析：</p>\n<p>项目包含五个类，五个布局文件</p>\n<p>frag1、frag2为java文件</p>\n<p>Music_Activity为Activity文件，<br>\nMusicService为Service文件，<br>\nMainActivity为主类文件。</p>\n<p>activity_main为MainActivity的主布局文件，显示运行APP时的主界面</p>\n<p>activity_music为Music_Activity的布局文件、显示音乐播放器界面</p>\n<p>music_list和item_layout一起组成了frag1的主布局文件，也就是音乐界面（APP的默认显示页面）</p>\n<p>frag2_layout就是frag2的布局文件，主要显示的是专辑封面图片。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4c4495fcf832803dba42bf7643711c67.png\" alt=\"image-20210419213014651\"></p>\n<p>3、资源文件分析</p>\n<p>在res文件夹下创建raw文件、放置MP3文件、在drawable文件下夹粘贴了音乐封面文件和播放器背景图片music_bg.jpg。还有背景选择器的btn_bg_selector.xml文件，如图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/243bfd350a64ef444e3aee17617f3752.png\" alt=\"image-20210419213406874\"></p>\n<p>二、开发环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Win10+AndroidStudio4.12+MUMU模拟器</span><br></pre></td></tr></table></figure>\n<p>三：准备工具</p>\n<p>1、选择几首自己下载好的音乐文件，命名为music0、music1、music2等。</p>\n<p>2、选择每首歌对应的歌手图片，剪成圆形并且保存好，命名为music0、music1、music2等。<br>\n（一定要剪成圆形，椭圆都会影响运行效果）如果不太清楚图片如何剪成圆形，可以看这篇博客：如何将图片剪成圆形</p>\n<p>3、准备一张音乐播放器的背景图片，命名为music_bg，再找一张图片用作专辑图片，命名为bg。</p>\n<p>四：详细设计</p>\n<p>1搭建主页面布局</p>\n<p>MainActivity类   包含两个菜单文件：frag1（歌曲菜单）和frag2（专辑菜单）</p>\n<p>默认展示歌曲菜单  点击切换 显示 frag2专辑菜单（代码如下：）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.a2048application;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.FrameLayout;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.ActionBar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.FragmentManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.FragmentTransaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lz.sdut.Music.frag1;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lz.sdut.Music.frag2;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FrameLayout content;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView Music_Song,Music_Album;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FragmentManager fm;   <span class=\"comment\">//管理类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FragmentTransaction ft;  <span class=\"comment\">//回调传递</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        ActionBar actionBar = getSupportActionBar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (actionBar != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);</span><br><span class=\"line\">            actionBar.setCustomView(R.layout.tittle);<span class=\"comment\">//设置标题样式</span></span><br><span class=\"line\">            TextView textView = (TextView) actionBar.getCustomView().findViewById(R.id.display_title);<span class=\"comment\">//获取标题布局的textview</span></span><br><span class=\"line\">            textView.setText(<span class=\"string\">&quot;音乐播放&quot;</span>);<span class=\"comment\">//设置标题名称，menuTitle为String字符串</span></span><br><span class=\"line\">            actionBar.setHomeButtonEnabled(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置左上角的图标是否可以点击</span></span><br><span class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);<span class=\"comment\">//给左上角图标的左边加上一个返回的图标</span></span><br><span class=\"line\">            actionBar.setDisplayShowCustomEnabled(<span class=\"keyword\">true</span>);<span class=\"comment\">// 使自定义的普通View能在title栏显示，即actionBar.setCustomView能起作用</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置当前页面功能</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        content=(FrameLayout)findViewById(R.id.content); <span class=\"comment\">//不改变原activity布局的情况下 在activity顶部覆盖一层蒙版（类似与蒙版）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Music_Song= (TextView)findViewById(R.id.menu1);  <span class=\"comment\">//歌曲菜单</span></span><br><span class=\"line\">        Music_Album= (TextView)findViewById(R.id.menu2); <span class=\"comment\">//专辑菜单</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        Music_Song.setOnClickListener(<span class=\"keyword\">this</span>);<span class=\"comment\">//设置歌曲菜单监听器</span></span><br><span class=\"line\">        Music_Album.setOnClickListener(<span class=\"keyword\">this</span>);<span class=\"comment\">//设置专辑菜单监听器（公用一个监听，通过ID实现切换）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        fm = getSupportFragmentManager(); <span class=\"comment\">//若是继承FragmentActivity，fm=getFragmentManger();</span></span><br><span class=\"line\">        ft = fm.beginTransaction();</span><br><span class=\"line\">        ft.replace(R.id.content,<span class=\"keyword\">new</span> frag1()); <span class=\"comment\">//将FrameLayout中的内容切换成Flag1的内容</span></span><br><span class=\"line\">        ft.commit();<span class=\"comment\">//实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">        ft = fm.beginTransaction();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (v.getId()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.menu1:</span><br><span class=\"line\">                ft.replace(R.id.content, <span class=\"keyword\">new</span> frag1()); <span class=\"comment\">//将FrameLayout中的内容切换成Flag1的内容</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.menu2:</span><br><span class=\"line\">                ft.replace(R.id.content, <span class=\"keyword\">new</span> frag2()); <span class=\"comment\">//将FrameLayout中的内容切换成Flag2的内容</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ft.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置顶部菜单栏选项</span></span><br><span class=\"line\"><span class=\"comment\">     * (页面跳转)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> menu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</span><br><span class=\"line\">        getMenuInflater().inflate(R.menu.region_right_menu, menu);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.music_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;音乐播放&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Music_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Music_intent.setClass(<span class=\"keyword\">this</span>, MainActivity.class);</span><br><span class=\"line\">                startActivity(Music_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.movie_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;电影播放&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Movie_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Movie_intent.setClass(<span class=\"keyword\">this</span>, MovieActivity.class);</span><br><span class=\"line\">                startActivity(Movie_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.game_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;2048&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Game_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Game_intent.setClass(<span class=\"keyword\">this</span>, GameActivity.class);</span><br><span class=\"line\">                startActivity(Game_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> android.R.id.home:</span><br><span class=\"line\">                Toast.makeText(MainActivity.<span class=\"keyword\">this</span>,<span class=\"string\">&quot;返回&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的Activity文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.MainActivity&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;horizontal&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">&quot;center&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;喜欢的音乐&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;35dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">&quot;#87CEFA&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;horizontal&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/menu1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">&quot;center&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;歌曲&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;25dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">&quot;#87CEFA&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/menu2&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">&quot;center&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;专辑&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;25dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">&quot;#87CEFA&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;9&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>activity_main是布局文件，主要显示主界面，最上面放置了“我喜欢”的TextView控件，在底下放置了“歌曲”和“专辑”的TextView控件,效果如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a4fae6bc6e8fbb52ce3db90598620d10.png\" alt=\"image-20210419214706637\"></p>\n<p>2.2</p>\n<p>创建flag1类（显示歌曲列表）模拟器运行出来的默认界面，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lz.sdut.Music;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.AdapterView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.BaseAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.Fragment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.a2048application.MusicActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.a2048application.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Fragment依赖于Activity，不能独立存在</span></span><br><span class=\"line\"><span class=\"comment\"> * 一个Activity可以有多个Fragment</span></span><br><span class=\"line\"><span class=\"comment\"> * 一个Fragment可以被多个Activity重用</span></span><br><span class=\"line\"><span class=\"comment\"> * Fragment有自己的生命周期，并能接收输入事件</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以在Activity运行时动态地添加或删除Fragment</span></span><br><span class=\"line\"><span class=\"comment\"> *模块化组件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * onAttach()：Fragment和Activity相关联时调用。可以通过该方法获取Activity引用，还可以通过getArguments()获取参数。</span></span><br><span class=\"line\"><span class=\"comment\"> * onCreate()：Fragment被创建时调用</span></span><br><span class=\"line\"><span class=\"comment\"> * onActivityCreated()：当Activity完成onCreate()时调用</span></span><br><span class=\"line\"><span class=\"comment\"> * onStart()：当Fragment可见时调用。</span></span><br><span class=\"line\"><span class=\"comment\"> * onResume()：当Fragment可见且可交互时调用</span></span><br><span class=\"line\"><span class=\"comment\"> * onPause()：当Fragment不可交互但可见时调用。</span></span><br><span class=\"line\"><span class=\"comment\"> * onStop()：当Fragment不可见时调用。</span></span><br><span class=\"line\"><span class=\"comment\"> * onDestroyView()：当Fragment的UI从视图结构中移除时调用。</span></span><br><span class=\"line\"><span class=\"comment\"> * onDestroy()：销毁Fragment时调用。</span></span><br><span class=\"line\"><span class=\"comment\"> * onDetach()：当Fragment和Activity解除关联时调用。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">frag1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> View view;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] name=&#123;<span class=\"string\">&quot;邓紫棋——光年之外&quot;</span>,<span class=\"string\">&quot;蔡健雅——红色高跟鞋&quot;</span>,<span class=\"string\">&quot;Taylor Swift——Love Story&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] icons = &#123;R.drawable.music0, R.drawable.music1, R.drawable.music2&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"comment\">//    onCreate()：Fragment被创建时调用</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">( <span class=\"keyword\">final</span> LayoutInflater inflater,  ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        view = inflater.inflate(R.layout.music_list,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        ListView listView = view.findViewById(R.id.lv);</span><br><span class=\"line\">        MyBaseAdapter adapter = <span class=\"keyword\">new</span> MyBaseAdapter();</span><br><span class=\"line\">        <span class=\"comment\">//数据适配方法</span></span><br><span class=\"line\">        listView.setAdapter(adapter);</span><br><span class=\"line\">        <span class=\"comment\">//点击事件监听</span></span><br><span class=\"line\">        listView.setOnItemClickListener(<span class=\"keyword\">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; parent, View view, <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(frag1.<span class=\"keyword\">this</span>.getContext(), MusicActivity.class);<span class=\"comment\">//创建Intent对象，启动check</span></span><br><span class=\"line\">                <span class=\"comment\">//将数据放入Intent对象         传输对象</span></span><br><span class=\"line\">                intent.putExtra(<span class=\"string\">&quot;name&quot;</span>,name[position]);</span><br><span class=\"line\">                intent.putExtra(<span class=\"string\">&quot;position&quot;</span>,String.valueOf(position));</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 学会BaseAdapter其实只需要掌握四个方法：</span></span><br><span class=\"line\"><span class=\"comment\">     * getCount, getItem, getItemId, getView</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *     getCount : 要绑定的条目的数目，比如格子的数量</span></span><br><span class=\"line\"><span class=\"comment\">     *     getItem : 根据一个索引（位置）获得该位置的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *     getItemId : 获取条目的id</span></span><br><span class=\"line\"><span class=\"comment\">     *     getView : 获取该条目要显示的界面</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBaseAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建数量</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//条目名字</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name[position];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//条目ID</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> position;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回视图</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置布局并返回</span></span><br><span class=\"line\">        View view = View.inflate(frag1.<span class=\"keyword\">this</span>.getContext(), R.layout.item_layout, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        TextView tv_name = view.findViewById(R.id.item_name);</span><br><span class=\"line\">        ImageView iv= view.findViewById(R.id.iv);</span><br><span class=\"line\">        tv_name.setText(name[position]);</span><br><span class=\"line\">        iv.setImageResource(icons[position]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>定义Flag1的需要用到的activity文件：</p>\n<p>music_list.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/lv&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>item_layout.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:padding</span>=<span class=\"string\">&quot;16dp&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/iv&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginLeft</span>=<span class=\"string\">&quot;10dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">&quot;@+id/iv&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/item_name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;歌曲&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;15sp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">&quot;#87CEFA&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>界面如下:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5daa7e50ca1c3abb6a757f34e4800314.png\" alt=\"image-20210419215628732\"></p>\n<p>创建flag2类（显示专辑列表）代码较为简单：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lz.sdut.Music;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.Fragment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.a2048application.R;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 仅插入了一个视图</span></span><br><span class=\"line\"><span class=\"comment\"> * 视图为一张图片</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">frag2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> View zj;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> LayoutInflater inflater, <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        zj = inflater.inflate(R.layout.frag2_layout, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        View listView = zj.findViewById(R.id.iv);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>frag2_layout.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/zj&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/bg&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ad7ea1bf0e3c4d3afc26dbe5fcdebfb5.png\" alt=\"image-20210419221830910\"></p>\n<p>3.3</p>\n<p>创建服务类</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f8c055cb9f3d609acda6f8cd3b0acd52.png\" alt=\"image-20210419222107674\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6cd710fffa29d048a1f46aede47491cc.png\" alt=\"image-20210420142230552\"></p>\n<p>创建MusicService代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lz.sdut.Music;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.media.MediaPlayer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.net.Uri;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Binder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.IBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.a2048application.MusicActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Timer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TimerTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Music_Service</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MediaPlayer player; <span class=\"comment\">//音乐播放器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timer timer;    <span class=\"comment\">//计时器（进度条）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Music_Service</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * //绑定一个组件方法</span></span><br><span class=\"line\"><span class=\"comment\">     * //生成一个音乐播放器</span></span><br><span class=\"line\"><span class=\"comment\">     * 音乐服务启动主方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> intent</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Return the communication channel to the service.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MusicControl();    <span class=\"comment\">//音乐播放控制器</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建时，启动的创建方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        player = <span class=\"keyword\">new</span> MediaPlayer(); <span class=\"comment\">//创建音乐播放器</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * //添加计时器，用于播放进度条</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addTimer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">             timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">             <span class=\"comment\">//定时器方法</span></span><br><span class=\"line\">             TimerTask tack = <span class=\"keyword\">new</span> TimerTask()&#123;   <span class=\"comment\">//Timer来讲就是一个调度器,而TimerTask呢只是一个实现了run方法的一个类,而具体的TimerTask需要由你自己来实现,</span></span><br><span class=\"line\"></span><br><span class=\"line\">                 <span class=\"meta\">@Override</span></span><br><span class=\"line\">                 <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (player == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                     <span class=\"keyword\">int</span> duration = player.getDuration();  <span class=\"comment\">//获取歌曲总时长</span></span><br><span class=\"line\">                     <span class=\"keyword\">int</span> currentPosition = player.getCurrentPosition();<span class=\"comment\">//获取播放进度</span></span><br><span class=\"line\">                     Message msg = MusicActivity.handler.obtainMessage();<span class=\"comment\">//创建消息对象</span></span><br><span class=\"line\">                     <span class=\"comment\">//将音乐的总时长和播放进度封装到消息对象中</span></span><br><span class=\"line\">                     Bundle bundle = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">                     bundle.putInt(<span class=\"string\">&quot;duration&quot;</span>,duration);</span><br><span class=\"line\">                     bundle.putInt(<span class=\"string\">&quot;currentPosition&quot;</span>,currentPosition);</span><br><span class=\"line\">                     msg.setData(bundle);</span><br><span class=\"line\">                     <span class=\"comment\">//将消息发送到主线程的消息队列  线程对象   计时器使用多线程传递信息</span></span><br><span class=\"line\">                     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                      * handler是Android给我们提供用来更新UI的一套机制，也是一套消息处理机制，我们可以发消息，也可以通过它处理消息。</span></span><br><span class=\"line\"><span class=\"comment\">                      * 、Android为什么要设计只能用handler机制更新UI呢？</span></span><br><span class=\"line\"><span class=\"comment\">                      *</span></span><br><span class=\"line\"><span class=\"comment\">                      *     答：最根本的目的就是为了解决多线程并发的问题！</span></span><br><span class=\"line\"><span class=\"comment\">                      *</span></span><br><span class=\"line\"><span class=\"comment\">                      *            打个比方，如果在一个activity中有多个线程，并且没有加锁，就会出现界面错乱的问题。</span></span><br><span class=\"line\"><span class=\"comment\">                      *            但是如果对这些更新UI的操作都加锁处理，又会导致性能下降。</span></span><br><span class=\"line\"><span class=\"comment\">                      *</span></span><br><span class=\"line\"><span class=\"comment\">                      *           处于对性能的问题考虑，Android给我们提供这一套更新UI的机制我们只需要遵循这种机制就行了。</span></span><br><span class=\"line\"><span class=\"comment\">                      *           不用再去关系多线程的问题，所有的更新UI的操作，都是在主线程的消息队列中去轮训的。</span></span><br><span class=\"line\"><span class=\"comment\">                      *</span></span><br><span class=\"line\"><span class=\"comment\">                      *           大家都知道handler的作用有两个，发送消息和处理消息。</span></span><br><span class=\"line\"><span class=\"comment\">                      *           而handler发送的消息必须被送到指定MessageQueue（消息队列）中，也就是说，</span></span><br><span class=\"line\"><span class=\"comment\">                      *           如果想让handler正常工作，就必须有一个MessageQueue（消息队列），不过MessageQueue（消息队列）是由Looper来关系。</span></span><br><span class=\"line\"><span class=\"comment\">                      *           所以也可以说想让handler正常工作，必须在当前线程中有一个Looper对象。（请认真读）</span></span><br><span class=\"line\"><span class=\"comment\">                      */</span></span><br><span class=\"line\">                     MusicActivity.handler.sendMessage(msg);</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;;</span><br><span class=\"line\">             <span class=\"comment\">//开始计时人物的5秒钟，第一次执行task任务，以后每500毫秒执行一次</span></span><br><span class=\"line\">            timer.schedule(tack,<span class=\"number\">5</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MusicControl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span></span>&#123; <span class=\"comment\">//Binder是一种跨进程的通信方式</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//String path  ma3位置文件地址</span></span><br><span class=\"line\">            Uri uri=Uri.parse(<span class=\"string\">&quot;android.resource://&quot;</span>+getPackageName()+<span class=\"string\">&quot;/raw/&quot;</span>+<span class=\"string\">&quot;music&quot;</span>+i);</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                player.reset();  <span class=\"comment\">//重置音乐播放器</span></span><br><span class=\"line\">                <span class=\"comment\">//加载多媒体文件</span></span><br><span class=\"line\">                player = MediaPlayer.create(getApplicationContext(), uri);</span><br><span class=\"line\">                player.start();<span class=\"comment\">//播放音乐</span></span><br><span class=\"line\">                addTimer();<span class=\"comment\">//添加计时器</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pausePlay</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            player.pause(); <span class=\"comment\">//暂停播放音乐</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">continuePlay</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            player.start();<span class=\"comment\">//继续播放音乐</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">seekTo</span><span class=\"params\">(<span class=\"keyword\">int</span> progress)</span></span>&#123;</span><br><span class=\"line\">            player.seekTo(progress); <span class=\"comment\">//设置音乐的播放位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (player == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (player.isPlaying())&#123;</span><br><span class=\"line\">            player.stop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        player.release();  <span class=\"comment\">//释放占用的音乐</span></span><br><span class=\"line\">        player = <span class=\"keyword\">null</span>;     <span class=\"comment\">//将player置为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/004925d3dcf176f311c8bdf59cefc8ab.png\" alt=\"image-20210420144330182\"></p>\n<p>4.4创建Music_Activity（主音乐界面）</p>\n<p>Music_Activity类：通过onClick方法控制着音乐的播放、暂停、继续播放和退出功能。它和MusicService进行绑定连接。在音乐播放时显示歌曲总时长，还有歌曲当前播放时长，控制滑动条的移动。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.a2048application;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.animation.ObjectAnimator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.ComponentName;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.ServiceConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Build;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.IBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.animation.LinearInterpolator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.SeekBar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.annotation.RequiresApi;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lz.sdut.Music.Music_Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lz.sdut.Music.frag1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Integer.parseInt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MusicActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SeekBar sb;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TextView tv_progress,tv_total,name_song;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectAnimator animator;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Music_Service.MusicControl musicControl;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    Intent intent1,intent2;</span><br><span class=\"line\">    MyServiceConn conn;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isUnbind = <span class=\"keyword\">false</span>;  <span class=\"comment\">//用于记录服务是否被解绑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_music);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 对于getIntent()这个方法，androidAPI文档中是这样解释的：</span></span><br><span class=\"line\"><span class=\"comment\">         * Retrieve the raw Intent contained in this Item.</span></span><br><span class=\"line\"><span class=\"comment\">         * 意思就是将该项目中包含的原始intent检索出来，</span></span><br><span class=\"line\"><span class=\"comment\">         * 而Intent intent=getIntent();</span></span><br><span class=\"line\"><span class=\"comment\">         * 是将检索出来的intent赋值给一个Intent类型的变量intent</span></span><br><span class=\"line\"><span class=\"comment\">         * 上句中，第一个intent是本身就有的一个intent，而后面的是个变量名，需要赋值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        intent1 = getIntent();</span><br><span class=\"line\">        <span class=\"comment\">//初始化启动</span></span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 页面赋值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        tv_progress = (TextView)findViewById(R.id.tv_progress);</span><br><span class=\"line\">        tv_total = (TextView) findViewById(R.id.tv_total);</span><br><span class=\"line\">        sb = (SeekBar) findViewById(R.id.sb);</span><br><span class=\"line\">        name_song = (TextView)findViewById(R.id.song_name);</span><br><span class=\"line\"></span><br><span class=\"line\">        findViewById(R.id.btn_play).setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        findViewById(R.id.btn_pause).setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        findViewById(R.id.btn_continue_play).setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        findViewById(R.id.btn_exit).setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 获取传递进来的MusicName</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        name = intent1.getStringExtra(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        name_song.setText(name);</span><br><span class=\"line\">        <span class=\"comment\">//创建 Music_Service.class</span></span><br><span class=\"line\">        intent2 = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, Music_Service.class);   <span class=\"comment\">//创建意图对象</span></span><br><span class=\"line\">        conn  = <span class=\"keyword\">new</span> MyServiceConn(); <span class=\"comment\">//创建服务连接对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * bindService(intent,mConnection, Context.BIND_AUTO_CREATE);</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         *     第一个bindService()的参数是一个明确指定了要绑定的service的Intent．</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         *     第二个参数是ServiceConnection对象．</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         *     第三个参数是一个标志，它表明绑定中的操作．它一般应是BIND_AUTO_CREATE，</span></span><br><span class=\"line\"><span class=\"comment\">         *     这样就会在service不存在时创建一个．其它可选的值是BIND_DEBUG_UNBIND和BIND_NOT_FOREGROUND,不想指定时设为0即可．</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        bindService(intent2,conn,BIND_AUTO_CREATE);<span class=\"comment\">//绑定服务</span></span><br><span class=\"line\">        <span class=\"comment\">//为滑动监听条添加事件监听</span></span><br><span class=\"line\">        sb.setOnSeekBarChangeListener(<span class=\"keyword\">new</span> SeekBar.OnSeekBarChangeListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@RequiresApi(api = Build.VERSION_CODES.KITKAT)</span></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(SeekBar seekBar, <span class=\"keyword\">int</span> progress, <span class=\"keyword\">boolean</span> fromUser)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//进度条改变时，调用此方法</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (progress == seekBar.getMax())&#123;  <span class=\"comment\">//当滑动条到末端时，结束事件</span></span><br><span class=\"line\">                    <span class=\"comment\">//转动事件停止</span></span><br><span class=\"line\">                    animator.pause(); <span class=\"comment\">//停止播放事件</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartTrackingTouch</span><span class=\"params\">(SeekBar seekBar)</span> </span>&#123;   <span class=\"comment\">//滑动条开始滑动时调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStopTrackingTouch</span><span class=\"params\">(SeekBar seekBar)</span> </span>&#123;  <span class=\"comment\">// 滑动条停止时调用</span></span><br><span class=\"line\">                <span class=\"comment\">//根据拖动的进度改变音乐的播放进度</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> progress = seekBar.getProgress();  <span class=\"comment\">//获取seekBar的进度</span></span><br><span class=\"line\">                musicControl.seekTo(progress);  <span class=\"comment\">//改变播放进度</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        ImageView iv_music = findViewById(R.id.iv_music);</span><br><span class=\"line\">        String position = intent1.getStringExtra(<span class=\"string\">&quot;position&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i  = Integer.parseInt(position);</span><br><span class=\"line\">        iv_music.setImageResource(frag1.icons[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 动画播放（图片旋转）</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        animator = ObjectAnimator.ofFloat(iv_music,<span class=\"string\">&quot;rotation&quot;</span>,<span class=\"number\">0f</span>,<span class=\"number\">360.0f</span>);</span><br><span class=\"line\">        animator.setDuration(<span class=\"number\">10000</span>); <span class=\"comment\">// 动画旋转一周的时间为10秒</span></span><br><span class=\"line\">        animator.setInterpolator(<span class=\"keyword\">new</span> LinearInterpolator()); <span class=\"comment\">//匀速</span></span><br><span class=\"line\">        animator.setRepeatCount(-<span class=\"number\">1</span>);<span class=\"comment\">//表示动画无限循环播放</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Handler机制也可叫异步消息机制，它主要由4个部分组成：Message,Handler,MessageQueue,Looper,</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.Message</span></span><br><span class=\"line\"><span class=\"comment\">     *   Message是在线程之间传递的消息，它可以在内部携带少量的信息，用于在不同线程之间交换数据。</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用Message的arg1和arg2便可携带int数据，使用obj便可携带Object类型数据。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.Handler</span></span><br><span class=\"line\"><span class=\"comment\">     *   Handler顾名思义就是处理者的意思，它只要用于在子线程发送消息对象Message,在UI线程处理消息对象Message，</span></span><br><span class=\"line\"><span class=\"comment\">     * 在子线程调用sendMessage方法发送消息对象Message，而发送的消息经过一系列地辗转之后最终会被传递到Handler的handleMessage方法中,</span></span><br><span class=\"line\"><span class=\"comment\">     * 最终在handleMessage方法中消息对象Message被处理。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 3.MessageQueue</span></span><br><span class=\"line\"><span class=\"comment\">     *   MessageQueue就是消息队列的意思,它只要用于存放所有通过Handler发送过来的消息。这部分消息会一直存放于消息队列当中，等待被处理。</span></span><br><span class=\"line\"><span class=\"comment\">     * 每个线程中只会有一个MessageQueue对象，请牢记这句话。其实从字面上就可以看出，MessageQueue底层数据结构是队列，而且这个队列只存放Message对象。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 4.Looper</span></span><br><span class=\"line\"><span class=\"comment\">     *   Looper是每个线程中的MessageQueue的管家，调用Looper的loop()方法后，就会进入到一个无限循环当中，</span></span><br><span class=\"line\"><span class=\"comment\">     * 然后每当MesssageQueue中存在一条消息，Looper就会将这条消息取出，并将它传递到Handler的handleMessage()方法中。每个线程只有一个Looper对象。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *   了解了上述Handler机制的4个成员后，我们再来把思路理一遍：首先在UI线程我们创建了一个Handler实例对象，</span></span><br><span class=\"line\"><span class=\"comment\">     * 无论是匿名内部类还是自定义类生成的Handler实例对象，我们都需要对handleMessage方法进行重写，</span></span><br><span class=\"line\"><span class=\"comment\">     * 在handleMessage方法中我们可以通过参数msg来写接受消息过后UIi线程的逻辑处理，</span></span><br><span class=\"line\"><span class=\"comment\">     * 接着我们创建子线程，在子线程中需要更新UI的时候，新建一个Message对象，并且将消息的数据记录在这个消息对象Message的内部，比如arg1,arg2,obj等，</span></span><br><span class=\"line\"><span class=\"comment\">     * 然后通过前面的Handler实例对象调用sendMessge方法把这个Message实例对象发送出去，之后这个消息会被存放于MessageQueue中等待被处理，</span></span><br><span class=\"line\"><span class=\"comment\">     * 此时MessageQueue的管家Looper正在不停的把MessageQueue存在的消息取出来，通过回调dispatchMessage方法将消息传递给Handler的handleMessage方法，</span></span><br><span class=\"line\"><span class=\"comment\">     * 最终前面提到的消息会被Looper从MessageQueue中取出来传递给handleMessage方法，最终得到处理。这就是Handler机制整个的工作流程。</span></span><br><span class=\"line\"><span class=\"comment\">     * 应该都差不多懂了吧，感觉我写的很接地气啊。</span></span><br><span class=\"line\"><span class=\"comment\">     * ————————————————</span></span><br><span class=\"line\"><span class=\"comment\">     * 版权声明：本文为CSDN博主「ttxs99989」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span></span><br><span class=\"line\"><span class=\"comment\">     * 原文链接：https://blog.csdn.net/ttxs99989/article/details/81814037</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//处理进度条</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Handler handler = <span class=\"keyword\">new</span> Handler()&#123;  <span class=\"comment\">//创建消息处理对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class=\"line\">            Bundle bundle = msg.getData();<span class=\"comment\">//获取从子线程发送过来的音乐播放度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> duration = bundle.getInt(<span class=\"string\">&quot;duration&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> currentPosition = bundle.getInt(<span class=\"string\">&quot;currentPosition&quot;</span>);</span><br><span class=\"line\">            sb.setMax(duration);</span><br><span class=\"line\">            sb.setProgress(currentPosition);</span><br><span class=\"line\">            <span class=\"comment\">//歌曲总时长</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> minute = duration/<span class=\"number\">1000</span>/<span class=\"number\">60</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> second = duration/<span class=\"number\">1000</span>%<span class=\"number\">60</span>;</span><br><span class=\"line\">            String strMinute = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            String strSecond = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minute &lt; <span class=\"number\">10</span>)&#123; <span class=\"comment\">//如果歌曲时长小于10分钟</span></span><br><span class=\"line\">                strMinute=<span class=\"string\">&quot;0&quot;</span>+minute; <span class=\"comment\">//在分钟前面加0</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                strMinute = minute+<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (second &lt; <span class=\"number\">10</span>)&#123;<span class=\"comment\">//如果歌曲中的秒钟小于10</span></span><br><span class=\"line\">                strSecond=<span class=\"string\">&quot;0&quot;</span>+second;<span class=\"comment\">//在秒钟前面加一个0</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                strSecond = second+<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tv_total.setText(strMinute+<span class=\"string\">&quot;:&quot;</span>+strSecond);</span><br><span class=\"line\">            <span class=\"comment\">//歌曲当前的播放时长</span></span><br><span class=\"line\">            minute = currentPosition/<span class=\"number\">1000</span>/<span class=\"number\">60</span>;</span><br><span class=\"line\">            second = currentPosition/<span class=\"number\">1000</span>%<span class=\"number\">60</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minute &lt; <span class=\"number\">10</span>)&#123; <span class=\"comment\">//如果歌曲时长小于10分钟</span></span><br><span class=\"line\">                strMinute=<span class=\"string\">&quot;0&quot;</span>+minute; <span class=\"comment\">//在分钟前面加0</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                strMinute = minute+<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (second &lt; <span class=\"number\">10</span>)&#123;<span class=\"comment\">//如果歌曲中的秒钟小于10</span></span><br><span class=\"line\">                strSecond=<span class=\"string\">&quot;0&quot;</span>+second;<span class=\"comment\">//在秒钟前面加一个0</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                strSecond = second+<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tv_progress.setText(strMinute+<span class=\"string\">&quot;:&quot;</span>+strSecond);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建服务连接对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServiceConn</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServiceConnection</span></span>&#123;  <span class=\"comment\">// 用于实现连接服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//赋值MusicControl 主控制类</span></span><br><span class=\"line\">            musicControl =  (Music_Service.MusicControl) service;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">unbind</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isUnbind)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isUnbind)&#123;   <span class=\"comment\">//判断服务是否被解绑</span></span><br><span class=\"line\">            musicControl.pausePlay();  <span class=\"comment\">//暂停播放音乐</span></span><br><span class=\"line\">            unbindService(conn);      <span class=\"comment\">//解绑服务</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequiresApi(api = Build.VERSION_CODES.KITKAT)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//点击事件</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (v.getId())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_play:  <span class=\"comment\">//设置播放按钮点击事件</span></span><br><span class=\"line\">                    String position = intent1.getStringExtra(<span class=\"string\">&quot;position&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> i = parseInt(position);</span><br><span class=\"line\">                    musicControl.play(i);</span><br><span class=\"line\">                    animator.start();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_pause:  <span class=\"comment\">//暂停播放事件</span></span><br><span class=\"line\">                    musicControl.pausePlay();</span><br><span class=\"line\">                    animator.pause();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_continue_play: <span class=\"comment\">//继续播放按钮</span></span><br><span class=\"line\">                    musicControl.continuePlay();</span><br><span class=\"line\">                    animator.start();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_exit:</span><br><span class=\"line\">                    unbind(isUnbind);</span><br><span class=\"line\">                    isUnbind = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    finish();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//销毁事件</span></span><br><span class=\"line\">    <span class=\"comment\">//解除绑定</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        unbind(isUnbind);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置顶部菜单栏选项</span></span><br><span class=\"line\"><span class=\"comment\">     * (页面跳转)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> menu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</span><br><span class=\"line\">        getMenuInflater().inflate(R.menu.region_right_menu, menu);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.music_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;音乐播放&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Music_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Music_intent.setClass(<span class=\"keyword\">this</span>, MainActivity.class);</span><br><span class=\"line\">                startActivity(Music_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.movie_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;电影播放&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Movie_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Movie_intent.setClass(<span class=\"keyword\">this</span>, MovieActivity.class);</span><br><span class=\"line\">                startActivity(Movie_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.game_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;2048&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Game_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Game_intent.setClass(<span class=\"keyword\">this</span>, GameActivity.class);</span><br><span class=\"line\">                startActivity(Game_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> android.R.id.home:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;返回&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的Activity视图</p>\n<p>activity_music: 显示音乐播放器界面，包括图片转动，歌曲名传值，还有播放、暂停播放、继续播放和退出四个控制按钮。效果如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9521f0e503e78e47ea344bda3452b49e.png\" alt=\"image-20210420151306512\"></p>\n<p>代码如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/music_bg&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.MusicActivity&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">&quot;center&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/iv_music&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;240dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;240dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">&quot;center_horizontal&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;15dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:src</span>=<span class=\"string\">&quot;@drawable/music0&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/song_name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;歌曲名&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;20sp&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SeekBar</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/sb&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">&quot;8dp&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/tv_progress&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;00:00&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/tv_total&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;00:00&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;horizontal&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_play&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/btn_bg_selector&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;播放音乐&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_pause&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/btn_bg_selector&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;暂停播放&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_continue_play&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/btn_bg_selector&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;继续播放&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_exit&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/btn_bg_selector&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;退出&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>5.5创建相应的资源类</p>\n<p>在res文件夹下新建一个raw文件夹，将刚刚准备好的视频文件复制到raw文件夹中。对应的封面圆形图片、背景图片和专辑图片都复制到drawable中，这里博主只选择了三首歌曲和三张封面圆形图片，歌曲数量由大家自己设置，没有限制。</p>\n<p>至此 \t\t音乐播放器部分完成  整体效果如图</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0149295a75663d9b7e44fe7688eb523b.png\" alt=\"image-20210420151627676\"></p>\n<p>主体代码完成，剩余部分请看具体的代码资源</p>\n<p>二：视频播放器部分（仅实现本地播放器，且实现较为简单）</p>\n<p>设计分析</p>\n<p>主要包括一个类，一个Activity和一个资源文件</p>\n<p>一：将相应的MP4文件保存至/raw文件夹中效果如图</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4c7fdd031273266721032d0a60a82414.png\" alt=\"\"></p>\n<p>二：创建MovieActivity</p>\n<p>MovieActivity中实现了进度条的设置，播放唯一的影片（可以改成相应的url地址）</p>\n<p>绑定视频播放器、绑定进度条。等等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.a2048application;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.media.MediaPlayer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.net.Uri;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.SeekBar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.VideoView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.ActionBar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">&quot;main&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button btn_play,btn_pause,btn_replay,btn_stop;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SeekBar seekBar;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> VideoView vv_video;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isPlaying;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_movie);</span><br><span class=\"line\"></span><br><span class=\"line\">        seekBar = (SeekBar)findViewById(R.id.seekBar);</span><br><span class=\"line\"><span class=\"comment\">//        et_path = (EditText)findViewById(R.id.et_path);</span></span><br><span class=\"line\">        vv_video = (VideoView) findViewById(R.id.vv_videoview);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 绑定资源文件</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        btn_play = (Button) findViewById(R.id.btn_movie_play);</span><br><span class=\"line\">        btn_pause = (Button) findViewById(R.id.btn_movie_pause);</span><br><span class=\"line\">        btn_replay = (Button) findViewById(R.id.btn_movie_replay);</span><br><span class=\"line\">        btn_stop = (Button) findViewById(R.id.btn_movie_stop);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 绑定监听信息</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        btn_play.setOnClickListener(click);</span><br><span class=\"line\">        btn_pause.setOnClickListener(click);</span><br><span class=\"line\">        btn_replay.setOnClickListener(click);</span><br><span class=\"line\">        btn_stop.setOnClickListener(click);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//为进度条添加进度改变事件</span></span><br><span class=\"line\">        seekBar.setOnSeekBarChangeListener(change);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置顶部菜单栏</span></span><br><span class=\"line\">        ActionBar actionBar = getSupportActionBar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (actionBar != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);</span><br><span class=\"line\">            actionBar.setCustomView(R.layout.tittle);<span class=\"comment\">//设置标题样式</span></span><br><span class=\"line\">            TextView textView = (TextView) actionBar.getCustomView().findViewById(R.id.display_title);<span class=\"comment\">//获取标题布局的textview</span></span><br><span class=\"line\">            textView.setText(<span class=\"string\">&quot;电影播放&quot;</span>);<span class=\"comment\">//设置标题名称，menuTitle为String字符串</span></span><br><span class=\"line\">            actionBar.setHomeButtonEnabled(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置左上角的图标是否可以点击</span></span><br><span class=\"line\"><span class=\"comment\">//            actionBar.setDisplayHomeAsUpEnabled(true);//给左上角图标的左边加上一个返回的图标</span></span><br><span class=\"line\">            actionBar.setDisplayShowCustomEnabled(<span class=\"keyword\">true</span>);<span class=\"comment\">// 使自定义的普通View能在title栏显示，即actionBar.setCustomView能起作用</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SeekBar.OnSeekBarChangeListener change = <span class=\"keyword\">new</span> SeekBar.OnSeekBarChangeListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(SeekBar seekBar, <span class=\"keyword\">int</span> progress, <span class=\"keyword\">boolean</span> fromUser)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartTrackingTouch</span><span class=\"params\">(SeekBar seekBar)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStopTrackingTouch</span><span class=\"params\">(SeekBar seekBar)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//当进度条停止修改时触发</span></span><br><span class=\"line\">            <span class=\"comment\">//取得当前进度条的刻度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> progress = seekBar.getProgress();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vv_video != <span class=\"keyword\">null</span> &amp;&amp; vv_video.isPlaying())&#123;</span><br><span class=\"line\">                <span class=\"comment\">//视频播放位置改变  设置当前位置</span></span><br><span class=\"line\">                vv_video.seekTo(progress);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据ID执行不同的操作</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> View.OnClickListener click = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (v.getId())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_movie_play:</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        play(<span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_movie_pause:</span><br><span class=\"line\">                    pause();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_movie_replay:</span><br><span class=\"line\">                    replay();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_movie_stop:</span><br><span class=\"line\">                    stop();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">(<span class=\"keyword\">int</span> msec)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 视频信息播放</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">&quot;指定文件路径&quot;</span>);</span><br><span class=\"line\">        vv_video.setVideoURI(Uri.parse(<span class=\"string\">&quot;android.resource://&quot;</span>+getPackageName()+<span class=\"string\">&quot;/raw/big_buck_bunny&quot;</span>));</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">&quot;开始播放&quot;</span>);</span><br><span class=\"line\">        vv_video.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 视频资源准备完成</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置进度条的最大值为视频最长播放信息</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        vv_video.setOnPreparedListener(<span class=\"keyword\">new</span> MediaPlayer.OnPreparedListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPrepared</span><span class=\"params\">(MediaPlayer mp)</span> </span>&#123;</span><br><span class=\"line\">                vv_video.getDuration();</span><br><span class=\"line\">                System.out.println(vv_video.getDuration());</span><br><span class=\"line\">                seekBar.setMax(vv_video.getDuration());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//按照初始位置进行播放</span></span><br><span class=\"line\">        vv_video.seekTo(msec);</span><br><span class=\"line\">        <span class=\"comment\">//设置进度条的最大长度为视频流的最大播放时长</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开始线程，更新进度条的刻度</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    isPlaying = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//如果正在播放，没0.5豪秒更新一次进度条</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (isPlaying)&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> currentPosition = vv_video.getCurrentPosition();</span><br><span class=\"line\">                            seekBar.setProgress(currentPosition);</span><br><span class=\"line\">                            sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        btn_play.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        vv_video.setOnCompletionListener(<span class=\"keyword\">new</span> MediaPlayer.OnCompletionListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompletion</span><span class=\"params\">(MediaPlayer mp)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//在播放完成完毕后回调进度条</span></span><br><span class=\"line\">                btn_play.setEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        vv_video.setOnErrorListener(<span class=\"keyword\">new</span> MediaPlayer.OnErrorListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onError</span><span class=\"params\">(MediaPlayer mp, <span class=\"keyword\">int</span> what, <span class=\"keyword\">int</span> extra)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//发生错误时重新播放</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    play(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 重新开始播放</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">replay</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vv_video != <span class=\"keyword\">null</span> &amp;&amp; vv_video.isPlaying())&#123;</span><br><span class=\"line\">            vv_video.seekTo(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;重新播放&quot;</span>,i).show();</span><br><span class=\"line\">            btn_pause.setText(<span class=\"string\">&quot;暂停&quot;</span>);</span><br><span class=\"line\">            seekBar.setProgress(<span class=\"number\">0</span>);</span><br><span class=\"line\">            isPlaying = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停或者继续</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">pause</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (btn_pause.getText().toString().trim().equals(<span class=\"string\">&quot;继续&quot;</span>))&#123;</span><br><span class=\"line\">            btn_pause.setText(<span class=\"string\">&quot;暂停&quot;</span>);</span><br><span class=\"line\">            vv_video.start();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;继续&quot;</span>,i).show();</span><br><span class=\"line\">            isPlaying = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vv_video != <span class=\"keyword\">null</span> &amp;&amp; vv_video.isPlaying())&#123;</span><br><span class=\"line\">            vv_video.pause();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            btn_pause.setText(<span class=\"string\">&quot;继续&quot;</span>);</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;暂停&quot;</span>,i).show();</span><br><span class=\"line\">            isPlaying = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 停止播放</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span>  <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vv_video != <span class=\"keyword\">null</span> &amp;&amp; vv_video.isPlaying())&#123;</span><br><span class=\"line\">            vv_video.stopPlayback();</span><br><span class=\"line\">            btn_play.setEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            seekBar.setProgress(<span class=\"number\">0</span>);</span><br><span class=\"line\">            isPlaying = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置顶部菜单栏选项</span></span><br><span class=\"line\"><span class=\"comment\">     * (页面跳转)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> menu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</span><br><span class=\"line\">        getMenuInflater().inflate(R.menu.region_right_menu, menu);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.music_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;音乐播放&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Music_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Music_intent.setClass(<span class=\"keyword\">this</span>, MainActivity.class);</span><br><span class=\"line\">                startActivity(Music_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.movie_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;电影播放&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Movie_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Movie_intent.setClass(<span class=\"keyword\">this</span>, MovieActivity.class);</span><br><span class=\"line\">                startActivity(Movie_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.game_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;2048&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Game_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Game_intent.setClass(<span class=\"keyword\">this</span>, GameActivity.class);</span><br><span class=\"line\">                startActivity(Game_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> android.R.id.home:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;返回&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其对应的Activity视图如下:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/864f37e9d84f5e1fbc03e18bfb6a4d68.png\" alt=\"image-20210420194308561\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.MovieActivity&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    &lt;EditText--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        android:id=&quot;@+id/et_path&quot;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        android:layout_width=&quot;match_parent&quot;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        android:layout_height=&quot;wrap_content&quot;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        android:text=&quot;src\\main\\res\\raw\\big_buck_bunny.mp4&quot;/&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SeekBar</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/seekBar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;horizontal&quot;</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_movie_play&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dip&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;播放&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_movie_pause&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dip&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;暂停&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_movie_replay&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dip&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;重播&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_movie_stop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dip&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;停止&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">VideoView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/vv_videoview&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;fill_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;fill_parent&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在模拟器中展示如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0acbc472e99a158ebc781a8d92adadcf.png\" alt=\"image-20210420194553768\"></p>\n<p>主体代码如上所言，部分代码请参考项目</p>\n<p>三：整合相应的2048人生版（不会实现）</p>\n<p>具体代码请参考实例项目</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/1M-qK3rmM64xoMHdoNcuSmg\">https://pan.baidu.com/s/1M-qK3rmM64xoMHdoNcuSmg</a><br>\n提取码：44hh<br>\n复制这段内容后打开百度网盘手机App，操作更方便哦</p>\n<p>项目参考地址：<a href=\"https://blog.csdn.net/qq_42257666/article/details/105555550%EF%BC%88%E5%9F%BA%E6%9C%AC%E6%8A%84%E8%A2%AD%EF%BC%89\">https://blog.csdn.net/qq_42257666/article/details/105555550（基本抄袭）</a></p>\n","site":{"data":{"link":[{"class_name":"友情鏈接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"}]},{"class_name":"網站","class_desc":"值得推薦的網站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"視頻網站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中國最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"http://typa.qingyun.run/img/Konachan.com - 304024 sample.jpg?x-oss-process=style/qingyun","excerpt":"","more":"<p>项目简介</p>\n<p>一：整合了三个小功能</p>\n<p>实现了音乐播放器（Service+Activity实现）</p>\n<p>视频播放器（本地视频播放——进度条控制）</p>\n<p>2048游戏（人生版2048——分数统计显示）</p>\n<p>二：项目概述（创建Activity的方式均是以Android Studio 4.1.2 自动创建 ）</p>\n<p>音乐播放器</p>\n<p>1页面展示如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cbd8ff9b7e2d02e07961d275cbe8b20a.png\" alt=\"image-20210419212318302\"></p>\n<p>2设计分析：</p>\n<p>项目包含五个类，五个布局文件</p>\n<p>frag1、frag2为java文件</p>\n<p>Music_Activity为Activity文件，<br>\nMusicService为Service文件，<br>\nMainActivity为主类文件。</p>\n<p>activity_main为MainActivity的主布局文件，显示运行APP时的主界面</p>\n<p>activity_music为Music_Activity的布局文件、显示音乐播放器界面</p>\n<p>music_list和item_layout一起组成了frag1的主布局文件，也就是音乐界面（APP的默认显示页面）</p>\n<p>frag2_layout就是frag2的布局文件，主要显示的是专辑封面图片。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4c4495fcf832803dba42bf7643711c67.png\" alt=\"image-20210419213014651\"></p>\n<p>3、资源文件分析</p>\n<p>在res文件夹下创建raw文件、放置MP3文件、在drawable文件下夹粘贴了音乐封面文件和播放器背景图片music_bg.jpg。还有背景选择器的btn_bg_selector.xml文件，如图所示：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/243bfd350a64ef444e3aee17617f3752.png\" alt=\"image-20210419213406874\"></p>\n<p>二、开发环境</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Win10+AndroidStudio4.12+MUMU模拟器</span><br></pre></td></tr></table></figure>\n<p>三：准备工具</p>\n<p>1、选择几首自己下载好的音乐文件，命名为music0、music1、music2等。</p>\n<p>2、选择每首歌对应的歌手图片，剪成圆形并且保存好，命名为music0、music1、music2等。<br>\n（一定要剪成圆形，椭圆都会影响运行效果）如果不太清楚图片如何剪成圆形，可以看这篇博客：如何将图片剪成圆形</p>\n<p>3、准备一张音乐播放器的背景图片，命名为music_bg，再找一张图片用作专辑图片，命名为bg。</p>\n<p>四：详细设计</p>\n<p>1搭建主页面布局</p>\n<p>MainActivity类   包含两个菜单文件：frag1（歌曲菜单）和frag2（专辑菜单）</p>\n<p>默认展示歌曲菜单  点击切换 显示 frag2专辑菜单（代码如下：）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.a2048application;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.FrameLayout;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.ActionBar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.FragmentManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.FragmentTransaction;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lz.sdut.Music.frag1;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lz.sdut.Music.frag2;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FrameLayout content;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView Music_Song,Music_Album;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> FragmentManager fm;   <span class=\"comment\">//管理类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> FragmentTransaction ft;  <span class=\"comment\">//回调传递</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        ActionBar actionBar = getSupportActionBar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (actionBar != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);</span><br><span class=\"line\">            actionBar.setCustomView(R.layout.tittle);<span class=\"comment\">//设置标题样式</span></span><br><span class=\"line\">            TextView textView = (TextView) actionBar.getCustomView().findViewById(R.id.display_title);<span class=\"comment\">//获取标题布局的textview</span></span><br><span class=\"line\">            textView.setText(<span class=\"string\">&quot;音乐播放&quot;</span>);<span class=\"comment\">//设置标题名称，menuTitle为String字符串</span></span><br><span class=\"line\">            actionBar.setHomeButtonEnabled(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置左上角的图标是否可以点击</span></span><br><span class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(<span class=\"keyword\">true</span>);<span class=\"comment\">//给左上角图标的左边加上一个返回的图标</span></span><br><span class=\"line\">            actionBar.setDisplayShowCustomEnabled(<span class=\"keyword\">true</span>);<span class=\"comment\">// 使自定义的普通View能在title栏显示，即actionBar.setCustomView能起作用</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置当前页面功能</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        content=(FrameLayout)findViewById(R.id.content); <span class=\"comment\">//不改变原activity布局的情况下 在activity顶部覆盖一层蒙版（类似与蒙版）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Music_Song= (TextView)findViewById(R.id.menu1);  <span class=\"comment\">//歌曲菜单</span></span><br><span class=\"line\">        Music_Album= (TextView)findViewById(R.id.menu2); <span class=\"comment\">//专辑菜单</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        Music_Song.setOnClickListener(<span class=\"keyword\">this</span>);<span class=\"comment\">//设置歌曲菜单监听器</span></span><br><span class=\"line\">        Music_Album.setOnClickListener(<span class=\"keyword\">this</span>);<span class=\"comment\">//设置专辑菜单监听器（公用一个监听，通过ID实现切换）</span></span><br><span class=\"line\"></span><br><span class=\"line\">        fm = getSupportFragmentManager(); <span class=\"comment\">//若是继承FragmentActivity，fm=getFragmentManger();</span></span><br><span class=\"line\">        ft = fm.beginTransaction();</span><br><span class=\"line\">        ft.replace(R.id.content,<span class=\"keyword\">new</span> frag1()); <span class=\"comment\">//将FrameLayout中的内容切换成Flag1的内容</span></span><br><span class=\"line\">        ft.commit();<span class=\"comment\">//实现</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">        ft = fm.beginTransaction();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (v.getId()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.menu1:</span><br><span class=\"line\">                ft.replace(R.id.content, <span class=\"keyword\">new</span> frag1()); <span class=\"comment\">//将FrameLayout中的内容切换成Flag1的内容</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.menu2:</span><br><span class=\"line\">                ft.replace(R.id.content, <span class=\"keyword\">new</span> frag2()); <span class=\"comment\">//将FrameLayout中的内容切换成Flag2的内容</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ft.commit();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置顶部菜单栏选项</span></span><br><span class=\"line\"><span class=\"comment\">     * (页面跳转)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> menu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</span><br><span class=\"line\">        getMenuInflater().inflate(R.menu.region_right_menu, menu);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.music_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;音乐播放&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Music_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Music_intent.setClass(<span class=\"keyword\">this</span>, MainActivity.class);</span><br><span class=\"line\">                startActivity(Music_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.movie_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;电影播放&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Movie_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Movie_intent.setClass(<span class=\"keyword\">this</span>, MovieActivity.class);</span><br><span class=\"line\">                startActivity(Movie_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.game_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;2048&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Game_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Game_intent.setClass(<span class=\"keyword\">this</span>, GameActivity.class);</span><br><span class=\"line\">                startActivity(Game_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> android.R.id.home:</span><br><span class=\"line\">                Toast.makeText(MainActivity.<span class=\"keyword\">this</span>,<span class=\"string\">&quot;返回&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的Activity文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.MainActivity&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;horizontal&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">&quot;center&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;喜欢的音乐&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;35dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">&quot;#87CEFA&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;horizontal&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/menu1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">&quot;center&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;歌曲&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;25dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">&quot;#87CEFA&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/menu2&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:gravity</span>=<span class=\"string\">&quot;center&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;专辑&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;25dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">&quot;#87CEFA&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">FrameLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;9&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">FrameLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>activity_main是布局文件，主要显示主界面，最上面放置了“我喜欢”的TextView控件，在底下放置了“歌曲”和“专辑”的TextView控件,效果如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/a4fae6bc6e8fbb52ce3db90598620d10.png\" alt=\"image-20210419214706637\"></p>\n<p>2.2</p>\n<p>创建flag1类（显示歌曲列表）模拟器运行出来的默认界面，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lz.sdut.Music;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.AdapterView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.BaseAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.ListView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.Fragment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.a2048application.MusicActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.a2048application.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Fragment依赖于Activity，不能独立存在</span></span><br><span class=\"line\"><span class=\"comment\"> * 一个Activity可以有多个Fragment</span></span><br><span class=\"line\"><span class=\"comment\"> * 一个Fragment可以被多个Activity重用</span></span><br><span class=\"line\"><span class=\"comment\"> * Fragment有自己的生命周期，并能接收输入事件</span></span><br><span class=\"line\"><span class=\"comment\"> * 可以在Activity运行时动态地添加或删除Fragment</span></span><br><span class=\"line\"><span class=\"comment\"> *模块化组件</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * onAttach()：Fragment和Activity相关联时调用。可以通过该方法获取Activity引用，还可以通过getArguments()获取参数。</span></span><br><span class=\"line\"><span class=\"comment\"> * onCreate()：Fragment被创建时调用</span></span><br><span class=\"line\"><span class=\"comment\"> * onActivityCreated()：当Activity完成onCreate()时调用</span></span><br><span class=\"line\"><span class=\"comment\"> * onStart()：当Fragment可见时调用。</span></span><br><span class=\"line\"><span class=\"comment\"> * onResume()：当Fragment可见且可交互时调用</span></span><br><span class=\"line\"><span class=\"comment\"> * onPause()：当Fragment不可交互但可见时调用。</span></span><br><span class=\"line\"><span class=\"comment\"> * onStop()：当Fragment不可见时调用。</span></span><br><span class=\"line\"><span class=\"comment\"> * onDestroyView()：当Fragment的UI从视图结构中移除时调用。</span></span><br><span class=\"line\"><span class=\"comment\"> * onDestroy()：销毁Fragment时调用。</span></span><br><span class=\"line\"><span class=\"comment\"> * onDetach()：当Fragment和Activity解除关联时调用。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">frag1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> View view;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] name=&#123;<span class=\"string\">&quot;邓紫棋——光年之外&quot;</span>,<span class=\"string\">&quot;蔡健雅——红色高跟鞋&quot;</span>,<span class=\"string\">&quot;Taylor Swift——Love Story&quot;</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[] icons = &#123;R.drawable.music0, R.drawable.music1, R.drawable.music2&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"comment\">//    onCreate()：Fragment被创建时调用</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">( <span class=\"keyword\">final</span> LayoutInflater inflater,  ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        view = inflater.inflate(R.layout.music_list,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">        ListView listView = view.findViewById(R.id.lv);</span><br><span class=\"line\">        MyBaseAdapter adapter = <span class=\"keyword\">new</span> MyBaseAdapter();</span><br><span class=\"line\">        <span class=\"comment\">//数据适配方法</span></span><br><span class=\"line\">        listView.setAdapter(adapter);</span><br><span class=\"line\">        <span class=\"comment\">//点击事件监听</span></span><br><span class=\"line\">        listView.setOnItemClickListener(<span class=\"keyword\">new</span> AdapterView.OnItemClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; parent, View view, <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</span><br><span class=\"line\">                Intent intent = <span class=\"keyword\">new</span> Intent(frag1.<span class=\"keyword\">this</span>.getContext(), MusicActivity.class);<span class=\"comment\">//创建Intent对象，启动check</span></span><br><span class=\"line\">                <span class=\"comment\">//将数据放入Intent对象         传输对象</span></span><br><span class=\"line\">                intent.putExtra(<span class=\"string\">&quot;name&quot;</span>,name[position]);</span><br><span class=\"line\">                intent.putExtra(<span class=\"string\">&quot;position&quot;</span>,String.valueOf(position));</span><br><span class=\"line\">                startActivity(intent);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 学会BaseAdapter其实只需要掌握四个方法：</span></span><br><span class=\"line\"><span class=\"comment\">     * getCount, getItem, getItemId, getView</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *     getCount : 要绑定的条目的数目，比如格子的数量</span></span><br><span class=\"line\"><span class=\"comment\">     *     getItem : 根据一个索引（位置）获得该位置的对象</span></span><br><span class=\"line\"><span class=\"comment\">     *     getItemId : 获取条目的id</span></span><br><span class=\"line\"><span class=\"comment\">     *     getView : 获取该条目要显示的界面</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBaseAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建数量</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//条目名字</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name[position];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//条目ID</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> position;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//返回视图</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置布局并返回</span></span><br><span class=\"line\">        View view = View.inflate(frag1.<span class=\"keyword\">this</span>.getContext(), R.layout.item_layout, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        TextView tv_name = view.findViewById(R.id.item_name);</span><br><span class=\"line\">        ImageView iv= view.findViewById(R.id.iv);</span><br><span class=\"line\">        tv_name.setText(name[position]);</span><br><span class=\"line\">        iv.setImageResource(icons[position]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>定义Flag1的需要用到的activity文件：</p>\n<p>music_list.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ListView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/lv&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>item_layout.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span> <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:padding</span>=<span class=\"string\">&quot;16dp&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/iv&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">&quot;true&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_marginLeft</span>=<span class=\"string\">&quot;10dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_toRightOf</span>=<span class=\"string\">&quot;@+id/iv&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_centerVertical</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/item_name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;歌曲&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;15sp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">&quot;#87CEFA&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>界面如下:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5daa7e50ca1c3abb6a757f34e4800314.png\" alt=\"image-20210419215628732\"></p>\n<p>创建flag2类（显示专辑列表）代码较为简单：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lz.sdut.Music;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.fragment.app.Fragment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.a2048application.R;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 仅插入了一个视图</span></span><br><span class=\"line\"><span class=\"comment\"> * 视图为一张图片</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">frag2</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> View zj;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> <span class=\"keyword\">final</span> LayoutInflater inflater, <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        zj = inflater.inflate(R.layout.frag2_layout, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        View listView = zj.findViewById(R.id.iv);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> zj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>frag2_layout.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/zj&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/bg&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/ad7ea1bf0e3c4d3afc26dbe5fcdebfb5.png\" alt=\"image-20210419221830910\"></p>\n<p>3.3</p>\n<p>创建服务类</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/f8c055cb9f3d609acda6f8cd3b0acd52.png\" alt=\"image-20210419222107674\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/6cd710fffa29d048a1f46aede47491cc.png\" alt=\"image-20210420142230552\"></p>\n<p>创建MusicService代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> lz.sdut.Music;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.media.MediaPlayer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.net.Uri;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Binder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.IBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.example.a2048application.MusicActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Timer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.TimerTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Music_Service</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MediaPlayer player; <span class=\"comment\">//音乐播放器</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Timer timer;    <span class=\"comment\">//计时器（进度条）</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Music_Service</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * //绑定一个组件方法</span></span><br><span class=\"line\"><span class=\"comment\">     * //生成一个音乐播放器</span></span><br><span class=\"line\"><span class=\"comment\">     * 音乐服务启动主方法</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> intent</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// <span class=\"doctag\">TODO:</span> Return the communication channel to the service.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MusicControl();    <span class=\"comment\">//音乐播放控制器</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建时，启动的创建方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        player = <span class=\"keyword\">new</span> MediaPlayer(); <span class=\"comment\">//创建音乐播放器</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * //添加计时器，用于播放进度条</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addTimer</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timer == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">             timer = <span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">             <span class=\"comment\">//定时器方法</span></span><br><span class=\"line\">             TimerTask tack = <span class=\"keyword\">new</span> TimerTask()&#123;   <span class=\"comment\">//Timer来讲就是一个调度器,而TimerTask呢只是一个实现了run方法的一个类,而具体的TimerTask需要由你自己来实现,</span></span><br><span class=\"line\"></span><br><span class=\"line\">                 <span class=\"meta\">@Override</span></span><br><span class=\"line\">                 <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (player == <span class=\"keyword\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                     <span class=\"keyword\">int</span> duration = player.getDuration();  <span class=\"comment\">//获取歌曲总时长</span></span><br><span class=\"line\">                     <span class=\"keyword\">int</span> currentPosition = player.getCurrentPosition();<span class=\"comment\">//获取播放进度</span></span><br><span class=\"line\">                     Message msg = MusicActivity.handler.obtainMessage();<span class=\"comment\">//创建消息对象</span></span><br><span class=\"line\">                     <span class=\"comment\">//将音乐的总时长和播放进度封装到消息对象中</span></span><br><span class=\"line\">                     Bundle bundle = <span class=\"keyword\">new</span> Bundle();</span><br><span class=\"line\">                     bundle.putInt(<span class=\"string\">&quot;duration&quot;</span>,duration);</span><br><span class=\"line\">                     bundle.putInt(<span class=\"string\">&quot;currentPosition&quot;</span>,currentPosition);</span><br><span class=\"line\">                     msg.setData(bundle);</span><br><span class=\"line\">                     <span class=\"comment\">//将消息发送到主线程的消息队列  线程对象   计时器使用多线程传递信息</span></span><br><span class=\"line\">                     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                      * handler是Android给我们提供用来更新UI的一套机制，也是一套消息处理机制，我们可以发消息，也可以通过它处理消息。</span></span><br><span class=\"line\"><span class=\"comment\">                      * 、Android为什么要设计只能用handler机制更新UI呢？</span></span><br><span class=\"line\"><span class=\"comment\">                      *</span></span><br><span class=\"line\"><span class=\"comment\">                      *     答：最根本的目的就是为了解决多线程并发的问题！</span></span><br><span class=\"line\"><span class=\"comment\">                      *</span></span><br><span class=\"line\"><span class=\"comment\">                      *            打个比方，如果在一个activity中有多个线程，并且没有加锁，就会出现界面错乱的问题。</span></span><br><span class=\"line\"><span class=\"comment\">                      *            但是如果对这些更新UI的操作都加锁处理，又会导致性能下降。</span></span><br><span class=\"line\"><span class=\"comment\">                      *</span></span><br><span class=\"line\"><span class=\"comment\">                      *           处于对性能的问题考虑，Android给我们提供这一套更新UI的机制我们只需要遵循这种机制就行了。</span></span><br><span class=\"line\"><span class=\"comment\">                      *           不用再去关系多线程的问题，所有的更新UI的操作，都是在主线程的消息队列中去轮训的。</span></span><br><span class=\"line\"><span class=\"comment\">                      *</span></span><br><span class=\"line\"><span class=\"comment\">                      *           大家都知道handler的作用有两个，发送消息和处理消息。</span></span><br><span class=\"line\"><span class=\"comment\">                      *           而handler发送的消息必须被送到指定MessageQueue（消息队列）中，也就是说，</span></span><br><span class=\"line\"><span class=\"comment\">                      *           如果想让handler正常工作，就必须有一个MessageQueue（消息队列），不过MessageQueue（消息队列）是由Looper来关系。</span></span><br><span class=\"line\"><span class=\"comment\">                      *           所以也可以说想让handler正常工作，必须在当前线程中有一个Looper对象。（请认真读）</span></span><br><span class=\"line\"><span class=\"comment\">                      */</span></span><br><span class=\"line\">                     MusicActivity.handler.sendMessage(msg);</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">             &#125;;</span><br><span class=\"line\">             <span class=\"comment\">//开始计时人物的5秒钟，第一次执行task任务，以后每500毫秒执行一次</span></span><br><span class=\"line\">            timer.schedule(tack,<span class=\"number\">5</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MusicControl</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span></span>&#123; <span class=\"comment\">//Binder是一种跨进程的通信方式</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//String path  ma3位置文件地址</span></span><br><span class=\"line\">            Uri uri=Uri.parse(<span class=\"string\">&quot;android.resource://&quot;</span>+getPackageName()+<span class=\"string\">&quot;/raw/&quot;</span>+<span class=\"string\">&quot;music&quot;</span>+i);</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                player.reset();  <span class=\"comment\">//重置音乐播放器</span></span><br><span class=\"line\">                <span class=\"comment\">//加载多媒体文件</span></span><br><span class=\"line\">                player = MediaPlayer.create(getApplicationContext(), uri);</span><br><span class=\"line\">                player.start();<span class=\"comment\">//播放音乐</span></span><br><span class=\"line\">                addTimer();<span class=\"comment\">//添加计时器</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">pausePlay</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            player.pause(); <span class=\"comment\">//暂停播放音乐</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">continuePlay</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            player.start();<span class=\"comment\">//继续播放音乐</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">seekTo</span><span class=\"params\">(<span class=\"keyword\">int</span> progress)</span></span>&#123;</span><br><span class=\"line\">            player.seekTo(progress); <span class=\"comment\">//设置音乐的播放位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (player == <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (player.isPlaying())&#123;</span><br><span class=\"line\">            player.stop();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        player.release();  <span class=\"comment\">//释放占用的音乐</span></span><br><span class=\"line\">        player = <span class=\"keyword\">null</span>;     <span class=\"comment\">//将player置为空</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/004925d3dcf176f311c8bdf59cefc8ab.png\" alt=\"image-20210420144330182\"></p>\n<p>4.4创建Music_Activity（主音乐界面）</p>\n<p>Music_Activity类：通过onClick方法控制着音乐的播放、暂停、继续播放和退出功能。它和MusicService进行绑定连接。在音乐播放时显示歌曲总时长，还有歌曲当前播放时长，控制滑动条的移动。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.a2048application;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.animation.ObjectAnimator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.ComponentName;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.ServiceConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Build;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Handler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.IBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Message;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.animation.LinearInterpolator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.ImageView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.SeekBar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.annotation.RequiresApi;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lz.sdut.Music.Music_Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lz.sdut.Music.frag1;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">static</span> java.lang.Integer.parseInt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MusicActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SeekBar sb;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TextView tv_progress,tv_total,name_song;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ObjectAnimator animator;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Music_Service.MusicControl musicControl;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    Intent intent1,intent2;</span><br><span class=\"line\">    MyServiceConn conn;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isUnbind = <span class=\"keyword\">false</span>;  <span class=\"comment\">//用于记录服务是否被解绑</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_music);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 对于getIntent()这个方法，androidAPI文档中是这样解释的：</span></span><br><span class=\"line\"><span class=\"comment\">         * Retrieve the raw Intent contained in this Item.</span></span><br><span class=\"line\"><span class=\"comment\">         * 意思就是将该项目中包含的原始intent检索出来，</span></span><br><span class=\"line\"><span class=\"comment\">         * 而Intent intent=getIntent();</span></span><br><span class=\"line\"><span class=\"comment\">         * 是将检索出来的intent赋值给一个Intent类型的变量intent</span></span><br><span class=\"line\"><span class=\"comment\">         * 上句中，第一个intent是本身就有的一个intent，而后面的是个变量名，需要赋值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        intent1 = getIntent();</span><br><span class=\"line\">        <span class=\"comment\">//初始化启动</span></span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 页面赋值</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        tv_progress = (TextView)findViewById(R.id.tv_progress);</span><br><span class=\"line\">        tv_total = (TextView) findViewById(R.id.tv_total);</span><br><span class=\"line\">        sb = (SeekBar) findViewById(R.id.sb);</span><br><span class=\"line\">        name_song = (TextView)findViewById(R.id.song_name);</span><br><span class=\"line\"></span><br><span class=\"line\">        findViewById(R.id.btn_play).setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        findViewById(R.id.btn_pause).setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        findViewById(R.id.btn_continue_play).setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        findViewById(R.id.btn_exit).setOnClickListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 获取传递进来的MusicName</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        name = intent1.getStringExtra(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        name_song.setText(name);</span><br><span class=\"line\">        <span class=\"comment\">//创建 Music_Service.class</span></span><br><span class=\"line\">        intent2 = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, Music_Service.class);   <span class=\"comment\">//创建意图对象</span></span><br><span class=\"line\">        conn  = <span class=\"keyword\">new</span> MyServiceConn(); <span class=\"comment\">//创建服务连接对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * bindService(intent,mConnection, Context.BIND_AUTO_CREATE);</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         *     第一个bindService()的参数是一个明确指定了要绑定的service的Intent．</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         *     第二个参数是ServiceConnection对象．</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         *     第三个参数是一个标志，它表明绑定中的操作．它一般应是BIND_AUTO_CREATE，</span></span><br><span class=\"line\"><span class=\"comment\">         *     这样就会在service不存在时创建一个．其它可选的值是BIND_DEBUG_UNBIND和BIND_NOT_FOREGROUND,不想指定时设为0即可．</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        bindService(intent2,conn,BIND_AUTO_CREATE);<span class=\"comment\">//绑定服务</span></span><br><span class=\"line\">        <span class=\"comment\">//为滑动监听条添加事件监听</span></span><br><span class=\"line\">        sb.setOnSeekBarChangeListener(<span class=\"keyword\">new</span> SeekBar.OnSeekBarChangeListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@RequiresApi(api = Build.VERSION_CODES.KITKAT)</span></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(SeekBar seekBar, <span class=\"keyword\">int</span> progress, <span class=\"keyword\">boolean</span> fromUser)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//进度条改变时，调用此方法</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (progress == seekBar.getMax())&#123;  <span class=\"comment\">//当滑动条到末端时，结束事件</span></span><br><span class=\"line\">                    <span class=\"comment\">//转动事件停止</span></span><br><span class=\"line\">                    animator.pause(); <span class=\"comment\">//停止播放事件</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartTrackingTouch</span><span class=\"params\">(SeekBar seekBar)</span> </span>&#123;   <span class=\"comment\">//滑动条开始滑动时调用</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStopTrackingTouch</span><span class=\"params\">(SeekBar seekBar)</span> </span>&#123;  <span class=\"comment\">// 滑动条停止时调用</span></span><br><span class=\"line\">                <span class=\"comment\">//根据拖动的进度改变音乐的播放进度</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> progress = seekBar.getProgress();  <span class=\"comment\">//获取seekBar的进度</span></span><br><span class=\"line\">                musicControl.seekTo(progress);  <span class=\"comment\">//改变播放进度</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        ImageView iv_music = findViewById(R.id.iv_music);</span><br><span class=\"line\">        String position = intent1.getStringExtra(<span class=\"string\">&quot;position&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i  = Integer.parseInt(position);</span><br><span class=\"line\">        iv_music.setImageResource(frag1.icons[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 动画播放（图片旋转）</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        animator = ObjectAnimator.ofFloat(iv_music,<span class=\"string\">&quot;rotation&quot;</span>,<span class=\"number\">0f</span>,<span class=\"number\">360.0f</span>);</span><br><span class=\"line\">        animator.setDuration(<span class=\"number\">10000</span>); <span class=\"comment\">// 动画旋转一周的时间为10秒</span></span><br><span class=\"line\">        animator.setInterpolator(<span class=\"keyword\">new</span> LinearInterpolator()); <span class=\"comment\">//匀速</span></span><br><span class=\"line\">        animator.setRepeatCount(-<span class=\"number\">1</span>);<span class=\"comment\">//表示动画无限循环播放</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *  Handler机制也可叫异步消息机制，它主要由4个部分组成：Message,Handler,MessageQueue,Looper,</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 1.Message</span></span><br><span class=\"line\"><span class=\"comment\">     *   Message是在线程之间传递的消息，它可以在内部携带少量的信息，用于在不同线程之间交换数据。</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用Message的arg1和arg2便可携带int数据，使用obj便可携带Object类型数据。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 2.Handler</span></span><br><span class=\"line\"><span class=\"comment\">     *   Handler顾名思义就是处理者的意思，它只要用于在子线程发送消息对象Message,在UI线程处理消息对象Message，</span></span><br><span class=\"line\"><span class=\"comment\">     * 在子线程调用sendMessage方法发送消息对象Message，而发送的消息经过一系列地辗转之后最终会被传递到Handler的handleMessage方法中,</span></span><br><span class=\"line\"><span class=\"comment\">     * 最终在handleMessage方法中消息对象Message被处理。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 3.MessageQueue</span></span><br><span class=\"line\"><span class=\"comment\">     *   MessageQueue就是消息队列的意思,它只要用于存放所有通过Handler发送过来的消息。这部分消息会一直存放于消息队列当中，等待被处理。</span></span><br><span class=\"line\"><span class=\"comment\">     * 每个线程中只会有一个MessageQueue对象，请牢记这句话。其实从字面上就可以看出，MessageQueue底层数据结构是队列，而且这个队列只存放Message对象。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 4.Looper</span></span><br><span class=\"line\"><span class=\"comment\">     *   Looper是每个线程中的MessageQueue的管家，调用Looper的loop()方法后，就会进入到一个无限循环当中，</span></span><br><span class=\"line\"><span class=\"comment\">     * 然后每当MesssageQueue中存在一条消息，Looper就会将这条消息取出，并将它传递到Handler的handleMessage()方法中。每个线程只有一个Looper对象。</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *   了解了上述Handler机制的4个成员后，我们再来把思路理一遍：首先在UI线程我们创建了一个Handler实例对象，</span></span><br><span class=\"line\"><span class=\"comment\">     * 无论是匿名内部类还是自定义类生成的Handler实例对象，我们都需要对handleMessage方法进行重写，</span></span><br><span class=\"line\"><span class=\"comment\">     * 在handleMessage方法中我们可以通过参数msg来写接受消息过后UIi线程的逻辑处理，</span></span><br><span class=\"line\"><span class=\"comment\">     * 接着我们创建子线程，在子线程中需要更新UI的时候，新建一个Message对象，并且将消息的数据记录在这个消息对象Message的内部，比如arg1,arg2,obj等，</span></span><br><span class=\"line\"><span class=\"comment\">     * 然后通过前面的Handler实例对象调用sendMessge方法把这个Message实例对象发送出去，之后这个消息会被存放于MessageQueue中等待被处理，</span></span><br><span class=\"line\"><span class=\"comment\">     * 此时MessageQueue的管家Looper正在不停的把MessageQueue存在的消息取出来，通过回调dispatchMessage方法将消息传递给Handler的handleMessage方法，</span></span><br><span class=\"line\"><span class=\"comment\">     * 最终前面提到的消息会被Looper从MessageQueue中取出来传递给handleMessage方法，最终得到处理。这就是Handler机制整个的工作流程。</span></span><br><span class=\"line\"><span class=\"comment\">     * 应该都差不多懂了吧，感觉我写的很接地气啊。</span></span><br><span class=\"line\"><span class=\"comment\">     * ————————————————</span></span><br><span class=\"line\"><span class=\"comment\">     * 版权声明：本文为CSDN博主「ttxs99989」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span></span><br><span class=\"line\"><span class=\"comment\">     * 原文链接：https://blog.csdn.net/ttxs99989/article/details/81814037</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//处理进度条</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Handler handler = <span class=\"keyword\">new</span> Handler()&#123;  <span class=\"comment\">//创建消息处理对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class=\"line\">            Bundle bundle = msg.getData();<span class=\"comment\">//获取从子线程发送过来的音乐播放度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> duration = bundle.getInt(<span class=\"string\">&quot;duration&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> currentPosition = bundle.getInt(<span class=\"string\">&quot;currentPosition&quot;</span>);</span><br><span class=\"line\">            sb.setMax(duration);</span><br><span class=\"line\">            sb.setProgress(currentPosition);</span><br><span class=\"line\">            <span class=\"comment\">//歌曲总时长</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> minute = duration/<span class=\"number\">1000</span>/<span class=\"number\">60</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> second = duration/<span class=\"number\">1000</span>%<span class=\"number\">60</span>;</span><br><span class=\"line\">            String strMinute = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            String strSecond = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minute &lt; <span class=\"number\">10</span>)&#123; <span class=\"comment\">//如果歌曲时长小于10分钟</span></span><br><span class=\"line\">                strMinute=<span class=\"string\">&quot;0&quot;</span>+minute; <span class=\"comment\">//在分钟前面加0</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                strMinute = minute+<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (second &lt; <span class=\"number\">10</span>)&#123;<span class=\"comment\">//如果歌曲中的秒钟小于10</span></span><br><span class=\"line\">                strSecond=<span class=\"string\">&quot;0&quot;</span>+second;<span class=\"comment\">//在秒钟前面加一个0</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                strSecond = second+<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tv_total.setText(strMinute+<span class=\"string\">&quot;:&quot;</span>+strSecond);</span><br><span class=\"line\">            <span class=\"comment\">//歌曲当前的播放时长</span></span><br><span class=\"line\">            minute = currentPosition/<span class=\"number\">1000</span>/<span class=\"number\">60</span>;</span><br><span class=\"line\">            second = currentPosition/<span class=\"number\">1000</span>%<span class=\"number\">60</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (minute &lt; <span class=\"number\">10</span>)&#123; <span class=\"comment\">//如果歌曲时长小于10分钟</span></span><br><span class=\"line\">                strMinute=<span class=\"string\">&quot;0&quot;</span>+minute; <span class=\"comment\">//在分钟前面加0</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                strMinute = minute+<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (second &lt; <span class=\"number\">10</span>)&#123;<span class=\"comment\">//如果歌曲中的秒钟小于10</span></span><br><span class=\"line\">                strSecond=<span class=\"string\">&quot;0&quot;</span>+second;<span class=\"comment\">//在秒钟前面加一个0</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                strSecond = second+<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tv_progress.setText(strMinute+<span class=\"string\">&quot;:&quot;</span>+strSecond);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建服务连接对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyServiceConn</span> <span class=\"keyword\">implements</span> <span class=\"title\">ServiceConnection</span></span>&#123;  <span class=\"comment\">// 用于实现连接服务</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//赋值MusicControl 主控制类</span></span><br><span class=\"line\">            musicControl =  (Music_Service.MusicControl) service;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">unbind</span><span class=\"params\">(<span class=\"keyword\">boolean</span> isUnbind)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isUnbind)&#123;   <span class=\"comment\">//判断服务是否被解绑</span></span><br><span class=\"line\">            musicControl.pausePlay();  <span class=\"comment\">//暂停播放音乐</span></span><br><span class=\"line\">            unbindService(conn);      <span class=\"comment\">//解绑服务</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequiresApi(api = Build.VERSION_CODES.KITKAT)</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">//点击事件</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (v.getId())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_play:  <span class=\"comment\">//设置播放按钮点击事件</span></span><br><span class=\"line\">                    String position = intent1.getStringExtra(<span class=\"string\">&quot;position&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> i = parseInt(position);</span><br><span class=\"line\">                    musicControl.play(i);</span><br><span class=\"line\">                    animator.start();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_pause:  <span class=\"comment\">//暂停播放事件</span></span><br><span class=\"line\">                    musicControl.pausePlay();</span><br><span class=\"line\">                    animator.pause();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_continue_play: <span class=\"comment\">//继续播放按钮</span></span><br><span class=\"line\">                    musicControl.continuePlay();</span><br><span class=\"line\">                    animator.start();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_exit:</span><br><span class=\"line\">                    unbind(isUnbind);</span><br><span class=\"line\">                    isUnbind = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    finish();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//销毁事件</span></span><br><span class=\"line\">    <span class=\"comment\">//解除绑定</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        unbind(isUnbind);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置顶部菜单栏选项</span></span><br><span class=\"line\"><span class=\"comment\">     * (页面跳转)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> menu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</span><br><span class=\"line\">        getMenuInflater().inflate(R.menu.region_right_menu, menu);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.music_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;音乐播放&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Music_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Music_intent.setClass(<span class=\"keyword\">this</span>, MainActivity.class);</span><br><span class=\"line\">                startActivity(Music_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.movie_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;电影播放&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Movie_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Movie_intent.setClass(<span class=\"keyword\">this</span>, MovieActivity.class);</span><br><span class=\"line\">                startActivity(Movie_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.game_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;2048&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Game_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Game_intent.setClass(<span class=\"keyword\">this</span>, GameActivity.class);</span><br><span class=\"line\">                startActivity(Game_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> android.R.id.home:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;返回&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的Activity视图</p>\n<p>activity_music: 显示音乐播放器界面，包括图片转动，歌曲名传值，还有播放、暂停播放、继续播放和退出四个控制按钮。效果如图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/9521f0e503e78e47ea344bda3452b49e.png\" alt=\"image-20210420151306512\"></p>\n<p>代码如下:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/music_bg&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.MusicActivity&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">&quot;center&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/iv_music&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;240dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;240dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">&quot;center_horizontal&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;15dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:src</span>=<span class=\"string\">&quot;@drawable/music0&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/song_name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;歌曲名&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:textSize</span>=<span class=\"string\">&quot;20sp&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SeekBar</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/sb&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">RelativeLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:paddingLeft</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:paddingRight</span>=<span class=\"string\">&quot;8dp&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/tv_progress&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;00:00&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/tv_total&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_alignParentRight</span>=<span class=\"string\">&quot;true&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;00:00&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">RelativeLayout</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;horizontal&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_play&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/btn_bg_selector&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;播放音乐&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_pause&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/btn_bg_selector&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;暂停播放&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_continue_play&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/btn_bg_selector&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;继续播放&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_exit&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;40dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">&quot;8dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">&quot;@drawable/btn_bg_selector&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;退出&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>5.5创建相应的资源类</p>\n<p>在res文件夹下新建一个raw文件夹，将刚刚准备好的视频文件复制到raw文件夹中。对应的封面圆形图片、背景图片和专辑图片都复制到drawable中，这里博主只选择了三首歌曲和三张封面圆形图片，歌曲数量由大家自己设置，没有限制。</p>\n<p>至此 \t\t音乐播放器部分完成  整体效果如图</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0149295a75663d9b7e44fe7688eb523b.png\" alt=\"image-20210420151627676\"></p>\n<p>主体代码完成，剩余部分请看具体的代码资源</p>\n<p>二：视频播放器部分（仅实现本地播放器，且实现较为简单）</p>\n<p>设计分析</p>\n<p>主要包括一个类，一个Activity和一个资源文件</p>\n<p>一：将相应的MP4文件保存至/raw文件夹中效果如图</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/4c7fdd031273266721032d0a60a82414.png\" alt=\"\"></p>\n<p>二：创建MovieActivity</p>\n<p>MovieActivity中实现了进度条的设置，播放唯一的影片（可以改成相应的url地址）</p>\n<p>绑定视频播放器、绑定进度条。等等</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.a2048application;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.media.MediaPlayer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.net.Uri;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.Menu;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MenuItem;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Button;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.EditText;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.SeekBar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.TextView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.VideoView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.ActionBar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MovieActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">&quot;main&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button btn_play,btn_pause,btn_replay,btn_stop;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SeekBar seekBar;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> VideoView vv_video;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> isPlaying;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_movie);</span><br><span class=\"line\"></span><br><span class=\"line\">        seekBar = (SeekBar)findViewById(R.id.seekBar);</span><br><span class=\"line\"><span class=\"comment\">//        et_path = (EditText)findViewById(R.id.et_path);</span></span><br><span class=\"line\">        vv_video = (VideoView) findViewById(R.id.vv_videoview);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 绑定资源文件</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        btn_play = (Button) findViewById(R.id.btn_movie_play);</span><br><span class=\"line\">        btn_pause = (Button) findViewById(R.id.btn_movie_pause);</span><br><span class=\"line\">        btn_replay = (Button) findViewById(R.id.btn_movie_replay);</span><br><span class=\"line\">        btn_stop = (Button) findViewById(R.id.btn_movie_stop);</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 绑定监听信息</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        btn_play.setOnClickListener(click);</span><br><span class=\"line\">        btn_pause.setOnClickListener(click);</span><br><span class=\"line\">        btn_replay.setOnClickListener(click);</span><br><span class=\"line\">        btn_stop.setOnClickListener(click);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//为进度条添加进度改变事件</span></span><br><span class=\"line\">        seekBar.setOnSeekBarChangeListener(change);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置顶部菜单栏</span></span><br><span class=\"line\">        ActionBar actionBar = getSupportActionBar();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (actionBar != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);</span><br><span class=\"line\">            actionBar.setCustomView(R.layout.tittle);<span class=\"comment\">//设置标题样式</span></span><br><span class=\"line\">            TextView textView = (TextView) actionBar.getCustomView().findViewById(R.id.display_title);<span class=\"comment\">//获取标题布局的textview</span></span><br><span class=\"line\">            textView.setText(<span class=\"string\">&quot;电影播放&quot;</span>);<span class=\"comment\">//设置标题名称，menuTitle为String字符串</span></span><br><span class=\"line\">            actionBar.setHomeButtonEnabled(<span class=\"keyword\">true</span>);<span class=\"comment\">//设置左上角的图标是否可以点击</span></span><br><span class=\"line\"><span class=\"comment\">//            actionBar.setDisplayHomeAsUpEnabled(true);//给左上角图标的左边加上一个返回的图标</span></span><br><span class=\"line\">            actionBar.setDisplayShowCustomEnabled(<span class=\"keyword\">true</span>);<span class=\"comment\">// 使自定义的普通View能在title栏显示，即actionBar.setCustomView能起作用</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> SeekBar.OnSeekBarChangeListener change = <span class=\"keyword\">new</span> SeekBar.OnSeekBarChangeListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressChanged</span><span class=\"params\">(SeekBar seekBar, <span class=\"keyword\">int</span> progress, <span class=\"keyword\">boolean</span> fromUser)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartTrackingTouch</span><span class=\"params\">(SeekBar seekBar)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStopTrackingTouch</span><span class=\"params\">(SeekBar seekBar)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">//当进度条停止修改时触发</span></span><br><span class=\"line\">            <span class=\"comment\">//取得当前进度条的刻度</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> progress = seekBar.getProgress();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (vv_video != <span class=\"keyword\">null</span> &amp;&amp; vv_video.isPlaying())&#123;</span><br><span class=\"line\">                <span class=\"comment\">//视频播放位置改变  设置当前位置</span></span><br><span class=\"line\">                vv_video.seekTo(progress);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据ID执行不同的操作</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> View.OnClickListener click = <span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (v.getId())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_movie_play:</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        play(<span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_movie_pause:</span><br><span class=\"line\">                    pause();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_movie_replay:</span><br><span class=\"line\">                    replay();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> R.id.btn_movie_stop:</span><br><span class=\"line\">                    stop();</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">play</span><span class=\"params\">(<span class=\"keyword\">int</span> msec)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 视频信息播放</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">&quot;指定文件路径&quot;</span>);</span><br><span class=\"line\">        vv_video.setVideoURI(Uri.parse(<span class=\"string\">&quot;android.resource://&quot;</span>+getPackageName()+<span class=\"string\">&quot;/raw/big_buck_bunny&quot;</span>));</span><br><span class=\"line\">        Log.i(TAG, <span class=\"string\">&quot;开始播放&quot;</span>);</span><br><span class=\"line\">        vv_video.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 视频资源准备完成</span></span><br><span class=\"line\"><span class=\"comment\">         * 设置进度条的最大值为视频最长播放信息</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        vv_video.setOnPreparedListener(<span class=\"keyword\">new</span> MediaPlayer.OnPreparedListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPrepared</span><span class=\"params\">(MediaPlayer mp)</span> </span>&#123;</span><br><span class=\"line\">                vv_video.getDuration();</span><br><span class=\"line\">                System.out.println(vv_video.getDuration());</span><br><span class=\"line\">                seekBar.setMax(vv_video.getDuration());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//按照初始位置进行播放</span></span><br><span class=\"line\">        vv_video.seekTo(msec);</span><br><span class=\"line\">        <span class=\"comment\">//设置进度条的最大长度为视频流的最大播放时长</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开始线程，更新进度条的刻度</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    isPlaying = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//如果正在播放，没0.5豪秒更新一次进度条</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (isPlaying)&#123;</span><br><span class=\"line\">                            <span class=\"keyword\">int</span> currentPosition = vv_video.getCurrentPosition();</span><br><span class=\"line\">                            seekBar.setProgress(currentPosition);</span><br><span class=\"line\">                            sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        btn_play.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        vv_video.setOnCompletionListener(<span class=\"keyword\">new</span> MediaPlayer.OnCompletionListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCompletion</span><span class=\"params\">(MediaPlayer mp)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//在播放完成完毕后回调进度条</span></span><br><span class=\"line\">                btn_play.setEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        vv_video.setOnErrorListener(<span class=\"keyword\">new</span> MediaPlayer.OnErrorListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onError</span><span class=\"params\">(MediaPlayer mp, <span class=\"keyword\">int</span> what, <span class=\"keyword\">int</span> extra)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//发生错误时重新播放</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    play(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 重新开始播放</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">replay</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vv_video != <span class=\"keyword\">null</span> &amp;&amp; vv_video.isPlaying())&#123;</span><br><span class=\"line\">            vv_video.seekTo(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;重新播放&quot;</span>,i).show();</span><br><span class=\"line\">            btn_pause.setText(<span class=\"string\">&quot;暂停&quot;</span>);</span><br><span class=\"line\">            seekBar.setProgress(<span class=\"number\">0</span>);</span><br><span class=\"line\">            isPlaying = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 暂停或者继续</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">pause</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (btn_pause.getText().toString().trim().equals(<span class=\"string\">&quot;继续&quot;</span>))&#123;</span><br><span class=\"line\">            btn_pause.setText(<span class=\"string\">&quot;暂停&quot;</span>);</span><br><span class=\"line\">            vv_video.start();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;继续&quot;</span>,i).show();</span><br><span class=\"line\">            isPlaying = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vv_video != <span class=\"keyword\">null</span> &amp;&amp; vv_video.isPlaying())&#123;</span><br><span class=\"line\">            vv_video.pause();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            btn_pause.setText(<span class=\"string\">&quot;继续&quot;</span>);</span><br><span class=\"line\">            Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;暂停&quot;</span>,i).show();</span><br><span class=\"line\">            isPlaying = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 停止播放</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span>  <span class=\"keyword\">void</span> <span class=\"title\">stop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vv_video != <span class=\"keyword\">null</span> &amp;&amp; vv_video.isPlaying())&#123;</span><br><span class=\"line\">            vv_video.stopPlayback();</span><br><span class=\"line\">            btn_play.setEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            seekBar.setProgress(<span class=\"number\">0</span>);</span><br><span class=\"line\">            isPlaying = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置顶部菜单栏选项</span></span><br><span class=\"line\"><span class=\"comment\">     * (页面跳转)</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> menu</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCreateOptionsMenu</span><span class=\"params\">(Menu menu)</span> </span>&#123;</span><br><span class=\"line\">        getMenuInflater().inflate(R.menu.region_right_menu, menu);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onOptionsItemSelected</span><span class=\"params\">(MenuItem item)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (item.getItemId()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.music_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;音乐播放&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Music_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Music_intent.setClass(<span class=\"keyword\">this</span>, MainActivity.class);</span><br><span class=\"line\">                startActivity(Music_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.movie_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;电影播放&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Movie_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Movie_intent.setClass(<span class=\"keyword\">this</span>, MovieActivity.class);</span><br><span class=\"line\">                startActivity(Movie_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> R.id.game_menu:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;2048&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                Intent Game_intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">                Game_intent.setClass(<span class=\"keyword\">this</span>, GameActivity.class);</span><br><span class=\"line\">                startActivity(Game_intent);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> android.R.id.home:</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>,<span class=\"string\">&quot;返回&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onOptionsItemSelected(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其对应的Activity视图如下:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/864f37e9d84f5e1fbc03e18bfb6a4d68.png\" alt=\"image-20210420194308561\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;vertical&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.MovieActivity&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--    &lt;EditText--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        android:id=&quot;@+id/et_path&quot;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        android:layout_width=&quot;match_parent&quot;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        android:layout_height=&quot;wrap_content&quot;--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--        android:text=&quot;src\\main\\res\\raw\\big_buck_bunny.mp4&quot;/&gt;--&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SeekBar</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/seekBar&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:orientation</span>=<span class=\"string\">&quot;horizontal&quot;</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_movie_play&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dip&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;播放&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_movie_pause&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dip&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;暂停&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_movie_replay&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dip&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;重播&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/btn_movie_stop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dip&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;wrap_content&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:text</span>=<span class=\"string\">&quot;停止&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">VideoView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/vv_videoview&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;fill_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;fill_parent&quot;</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在模拟器中展示如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/0acbc472e99a158ebc781a8d92adadcf.png\" alt=\"image-20210420194553768\"></p>\n<p>主体代码如上所言，部分代码请参考项目</p>\n<p>三：整合相应的2048人生版（不会实现）</p>\n<p>具体代码请参考实例项目</p>\n<p>链接：<a href=\"https://pan.baidu.com/s/1M-qK3rmM64xoMHdoNcuSmg\">https://pan.baidu.com/s/1M-qK3rmM64xoMHdoNcuSmg</a><br>\n提取码：44hh<br>\n复制这段内容后打开百度网盘手机App，操作更方便哦</p>\n<p>项目参考地址：<a href=\"https://blog.csdn.net/qq_42257666/article/details/105555550%EF%BC%88%E5%9F%BA%E6%9C%AC%E6%8A%84%E8%A2%AD%EF%BC%89\">https://blog.csdn.net/qq_42257666/article/details/105555550（基本抄袭）</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckwpqg2qz0009o4vbcidl6p4g","category_id":"ckwpqg2qw0004o4vb0ha61eu6","_id":"ckwpqg2r6000io4vbgmhjc2th"},{"post_id":"ckwpqg2qs0001o4vbeqkthhwb","category_id":"ckwpqg2qw0004o4vb0ha61eu6","_id":"ckwpqg2r8000oo4vb1b3n447x"},{"post_id":"ckwpqg2r1000bo4vbetpo75nz","category_id":"ckwpqg2qw0004o4vb0ha61eu6","_id":"ckwpqg2r9000ro4vb7oxr60d3"},{"post_id":"ckwpqg2r4000fo4vb4zhsdawu","category_id":"ckwpqg2qw0004o4vb0ha61eu6","_id":"ckwpqg2rb000wo4vbbd6o22p0"},{"post_id":"ckwpqg2qv0003o4vb1j4mfm7t","category_id":"ckwpqg2qw0004o4vb0ha61eu6","_id":"ckwpqg2rc000zo4vb5v1c7bsg"},{"post_id":"ckwpqg2r5000ho4vb4qe98lpx","category_id":"ckwpqg2qw0004o4vb0ha61eu6","_id":"ckwpqg2rd0014o4vb2qp7ggd1"},{"post_id":"ckwpqg2qy0007o4vb96zz7nm3","category_id":"ckwpqg2qw0004o4vb0ha61eu6","_id":"ckwpqg2re0017o4vb46616bnj"},{"post_id":"ckwpqg2r7000no4vbarqoeh5f","category_id":"ckwpqg2r9000to4vbfs2w5lzc","_id":"ckwpqg2rf001bo4vb7qih0mpq"},{"post_id":"ckwpqg2re0016o4vbe8d2ccuu","category_id":"ckwpqg2r9000to4vbfs2w5lzc","_id":"ckwpqg2ri001ho4vb9ygnfdk3"},{"post_id":"ckwpqg2r8000qo4vbh7co9l3m","category_id":"ckwpqg2rd0013o4vb370wg7gq","_id":"ckwpqg2rj001ko4vb8zjz45jh"},{"post_id":"ckwpqg2ra000vo4vbd8c6cagi","category_id":"ckwpqg2rd0013o4vb370wg7gq","_id":"ckwpqg2rk001no4vbdks78k2v"},{"post_id":"ckwpqg2rf001ao4vb6ca8cwey","category_id":"ckwpqg2rn001vo4vbe29c34yn","_id":"ckwpqg2rt0027o4vb2quvbwii"},{"post_id":"ckwpqg2rb000yo4vbf3zmh8ep","category_id":"ckwpqg2ri001io4vbggs87lw3","_id":"ckwpqg2s4002so4vb5nfpdl7j"},{"post_id":"ckwpqg2rb000yo4vbf3zmh8ep","category_id":"ckwpqg2rx002ko4vbfe3pgema","_id":"ckwpqg2s4002uo4vb8b4bf794"},{"post_id":"ckwpqg2s2002no4vbhqaney4m","category_id":"ckwpqg2rd0013o4vb370wg7gq","_id":"ckwpqg2s5002yo4vbf5f65n90"},{"post_id":"ckwpqg2rd0012o4vb68qzhoun","category_id":"ckwpqg2ri001io4vbggs87lw3","_id":"ckwpqg2s60035o4vb3p7qg80c"},{"post_id":"ckwpqg2rd0012o4vb68qzhoun","category_id":"ckwpqg2rx002ko4vbfe3pgema","_id":"ckwpqg2s70037o4vb6dud61ds"},{"post_id":"ckwpqg2rs0025o4vb60pu8dln","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sa003ko4vbcah546au"},{"post_id":"ckwpqg2rs0025o4vb60pu8dln","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2sa003no4vbfblf14os"},{"post_id":"ckwpqg2rg001eo4vb9lq3anqp","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sb003po4vbewh369f1"},{"post_id":"ckwpqg2rg001eo4vb9lq3anqp","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2sb003ro4vb0id7gv6z"},{"post_id":"ckwpqg2rt0028o4vbg2186en4","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sb003to4vb3n4ke3fp"},{"post_id":"ckwpqg2rt0028o4vbg2186en4","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2sc003wo4vb4dkz4f36"},{"post_id":"ckwpqg2ru002bo4vband5c3k2","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sc003zo4vb37pg9d38"},{"post_id":"ckwpqg2ru002bo4vband5c3k2","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2sd0042o4vb4jej5sce"},{"post_id":"ckwpqg2rh001go4vb7gu5csyc","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sd0044o4vbbbgbcd2n"},{"post_id":"ckwpqg2rh001go4vb7gu5csyc","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2se0046o4vbhkiqan8m"},{"post_id":"ckwpqg2rv002eo4vbb66cfv3d","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2se0048o4vbcifo62f1"},{"post_id":"ckwpqg2rv002eo4vbb66cfv3d","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2sf004bo4vb111pcdni"},{"post_id":"ckwpqg2rw002go4vbaqn5fe7e","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sg004eo4vb7pzp9y3o"},{"post_id":"ckwpqg2rw002go4vbaqn5fe7e","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2si004ho4vb990n1psq"},{"post_id":"ckwpqg2ri001jo4vbc9njg1u3","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2si004jo4vb1jbn1924"},{"post_id":"ckwpqg2ri001jo4vbc9njg1u3","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2si004lo4vbd78zfxjt"},{"post_id":"ckwpqg2rx002jo4vbg71m7iau","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sj004mo4vb9rpkanuq"},{"post_id":"ckwpqg2rx002jo4vbg71m7iau","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2sk004qo4vb3lpn8uve"},{"post_id":"ckwpqg2ry002lo4vbb9p828lh","category_id":"ckwpqg2si004io4vb4vmsdly6","_id":"ckwpqg2sl004uo4vb6c3lbqbj"},{"post_id":"ckwpqg2rk001mo4vb6x0tdzty","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sm004yo4vb5m8f1zi4"},{"post_id":"ckwpqg2rk001mo4vb6x0tdzty","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2sm004zo4vbh5a995u2"},{"post_id":"ckwpqg2rl001qo4vb921o079u","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sm0052o4vbhvvw8nem"},{"post_id":"ckwpqg2rl001qo4vb921o079u","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2sn0054o4vb7mc149ba"},{"post_id":"ckwpqg2rm001to4vbg49kaukq","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sn0058o4vb3avx1qw3"},{"post_id":"ckwpqg2rm001to4vbg49kaukq","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2so005ao4vb1l0902ta"},{"post_id":"ckwpqg2rn001wo4vb3pdchhhq","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sp005do4vbejv517rs"},{"post_id":"ckwpqg2rn001wo4vb3pdchhhq","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2sp005eo4vbe6n1gdzx"},{"post_id":"ckwpqg2ro001zo4vb9dgaddt9","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sp005go4vbayod1leo"},{"post_id":"ckwpqg2ro001zo4vb9dgaddt9","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2sq005io4vb4mxy3z8n"},{"post_id":"ckwpqg2rr0022o4vb8amd61x8","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2sq005lo4vb56knd9h8"},{"post_id":"ckwpqg2rr0022o4vb8amd61x8","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2sq005no4vb6zj3cm7g"},{"post_id":"ckwpqg2tk0078o4vb92wh2pdf","category_id":"ckwpqg2rd0013o4vb370wg7gq","_id":"ckwpqg2tn007eo4vb82dj8zd6"},{"post_id":"ckwpqg2tl0079o4vbd2408h2e","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2tn007go4vb8lrddkxt"},{"post_id":"ckwpqg2tl0079o4vbd2408h2e","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2to007io4vb8jyp7o6m"},{"post_id":"ckwpqg2tm007bo4vb25t82k9h","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2to007ko4vbgpsmf1qp"},{"post_id":"ckwpqg2tm007bo4vb25t82k9h","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2to007mo4vb5wr6588u"},{"post_id":"ckwpqg2tm007do4vbf4b80qel","category_id":"ckwpqg2rr0021o4vbdqiphidy","_id":"ckwpqg2to007oo4vb6qidd7g2"},{"post_id":"ckwpqg2tm007do4vbf4b80qel","category_id":"ckwpqg2s8003do4vb3h3u3eg8","_id":"ckwpqg2to007qo4vb6pbiby6b"},{"post_id":"ckwpqg2tz007to4vb4jy5fb8j","category_id":"ckwpqg2u0007uo4vb4p5o2rmx","_id":"ckwpqg2u0007xo4vbcbyj3khl"}],"PostTag":[{"post_id":"ckwpqg2r4000fo4vb4zhsdawu","tag_id":"ckwpqg2qx0005o4vbfxo39nao","_id":"ckwpqg2r7000lo4vbca2sfoc7"},{"post_id":"ckwpqg2r4000fo4vb4zhsdawu","tag_id":"ckwpqg2r2000do4vbaqst4fd7","_id":"ckwpqg2r8000po4vb618n4tsj"},{"post_id":"ckwpqg2qs0001o4vbeqkthhwb","tag_id":"ckwpqg2qx0005o4vbfxo39nao","_id":"ckwpqg2ra000uo4vbaa7oawld"},{"post_id":"ckwpqg2qs0001o4vbeqkthhwb","tag_id":"ckwpqg2r2000do4vbaqst4fd7","_id":"ckwpqg2rb000xo4vb9tx3djw6"},{"post_id":"ckwpqg2r5000ho4vb4qe98lpx","tag_id":"ckwpqg2qx0005o4vbfxo39nao","_id":"ckwpqg2rc0011o4vbgn96eb04"},{"post_id":"ckwpqg2r5000ho4vb4qe98lpx","tag_id":"ckwpqg2r2000do4vbaqst4fd7","_id":"ckwpqg2re0015o4vber464hjs"},{"post_id":"ckwpqg2qv0003o4vb1j4mfm7t","tag_id":"ckwpqg2qx0005o4vbfxo39nao","_id":"ckwpqg2rf0019o4vbee1i3qrk"},{"post_id":"ckwpqg2qv0003o4vb1j4mfm7t","tag_id":"ckwpqg2r2000do4vbaqst4fd7","_id":"ckwpqg2rg001do4vb1ph824a0"},{"post_id":"ckwpqg2qy0007o4vb96zz7nm3","tag_id":"ckwpqg2qx0005o4vbfxo39nao","_id":"ckwpqg2rl001oo4vb1gt99fiq"},{"post_id":"ckwpqg2qy0007o4vb96zz7nm3","tag_id":"ckwpqg2r2000do4vbaqst4fd7","_id":"ckwpqg2rm001ro4vb3zuz0j3u"},{"post_id":"ckwpqg2qy0007o4vb96zz7nm3","tag_id":"ckwpqg2rh001fo4vbc69b5n74","_id":"ckwpqg2rn001uo4vbdoq7he9z"},{"post_id":"ckwpqg2qz0009o4vbcidl6p4g","tag_id":"ckwpqg2qx0005o4vbfxo39nao","_id":"ckwpqg2ro001xo4vbdc4odhuf"},{"post_id":"ckwpqg2qz0009o4vbcidl6p4g","tag_id":"ckwpqg2r2000do4vbaqst4fd7","_id":"ckwpqg2rq0020o4vb0ikp1qzs"},{"post_id":"ckwpqg2r1000bo4vbetpo75nz","tag_id":"ckwpqg2qx0005o4vbfxo39nao","_id":"ckwpqg2rr0023o4vbausz678j"},{"post_id":"ckwpqg2r1000bo4vbetpo75nz","tag_id":"ckwpqg2r2000do4vbaqst4fd7","_id":"ckwpqg2rs0026o4vbgigfazjs"},{"post_id":"ckwpqg2r7000no4vbarqoeh5f","tag_id":"ckwpqg2ro001yo4vb11xhgc9c","_id":"ckwpqg2rt002ao4vb6zwxb3xf"},{"post_id":"ckwpqg2r8000qo4vbh7co9l3m","tag_id":"ckwpqg2rr0024o4vb5gy2994e","_id":"ckwpqg2rv002do4vb1tv9d5vq"},{"post_id":"ckwpqg2ra000vo4vbd8c6cagi","tag_id":"ckwpqg2rr0024o4vb5gy2994e","_id":"ckwpqg2rx002io4vb7jje8n52"},{"post_id":"ckwpqg2s2002no4vbhqaney4m","tag_id":"ckwpqg2rr0024o4vb5gy2994e","_id":"ckwpqg2s3002qo4vbfv1v2wtw"},{"post_id":"ckwpqg2rb000yo4vbf3zmh8ep","tag_id":"ckwpqg2rw002ho4vbb3my2ih0","_id":"ckwpqg2s4002to4vbf3xz78dc"},{"post_id":"ckwpqg2rb000yo4vbf3zmh8ep","tag_id":"ckwpqg2s2002mo4vb99j67qmj","_id":"ckwpqg2s5002wo4vb6r7ccic0"},{"post_id":"ckwpqg2rd0012o4vb68qzhoun","tag_id":"ckwpqg2rw002ho4vbb3my2ih0","_id":"ckwpqg2s60031o4vb8ci888r1"},{"post_id":"ckwpqg2rd0012o4vb68qzhoun","tag_id":"ckwpqg2s2002mo4vb99j67qmj","_id":"ckwpqg2s60032o4vb2t4kbtj1"},{"post_id":"ckwpqg2re0016o4vbe8d2ccuu","tag_id":"ckwpqg2ro001yo4vb11xhgc9c","_id":"ckwpqg2s70036o4vb8bnua6xn"},{"post_id":"ckwpqg2rf001ao4vb6ca8cwey","tag_id":"ckwpqg2s60033o4vb3fqih97i","_id":"ckwpqg2s7003ao4vb4hggccgv"},{"post_id":"ckwpqg2rg001eo4vb9lq3anqp","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2s9003ho4vb56ez0pc0"},{"post_id":"ckwpqg2rg001eo4vb9lq3anqp","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2s9003io4vb0o9sdhsu"},{"post_id":"ckwpqg2rg001eo4vb9lq3anqp","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2sa003mo4vb48off6nq"},{"post_id":"ckwpqg2rh001go4vb7gu5csyc","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2sc003vo4vba4xtb764"},{"post_id":"ckwpqg2rh001go4vb7gu5csyc","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2sc003xo4vb773fh7kv"},{"post_id":"ckwpqg2rh001go4vb7gu5csyc","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2sd0041o4vbej43gh7t"},{"post_id":"ckwpqg2ri001jo4vbc9njg1u3","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2sf004ao4vbh7etcxdr"},{"post_id":"ckwpqg2ri001jo4vbc9njg1u3","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2sf004co4vb2rdj7r0s"},{"post_id":"ckwpqg2ri001jo4vbc9njg1u3","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2sh004go4vbblb8dy12"},{"post_id":"ckwpqg2rk001mo4vb6x0tdzty","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2sk004po4vbdf5p3242"},{"post_id":"ckwpqg2rk001mo4vb6x0tdzty","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2sl004ro4vbh143cpui"},{"post_id":"ckwpqg2rk001mo4vb6x0tdzty","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2sl004vo4vb0pqf9bfp"},{"post_id":"ckwpqg2rl001qo4vb921o079u","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2sn0053o4vbda02gb2e"},{"post_id":"ckwpqg2rl001qo4vb921o079u","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2sn0055o4vbg8bv9sxv"},{"post_id":"ckwpqg2rl001qo4vb921o079u","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2so0059o4vb5q8yg5oc"},{"post_id":"ckwpqg2rm001to4vbg49kaukq","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2sq005ho4vbgexz8v49"},{"post_id":"ckwpqg2rm001to4vbg49kaukq","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2sq005jo4vbaqb56jim"},{"post_id":"ckwpqg2rm001to4vbg49kaukq","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2sq005mo4vbb8bvfps9"},{"post_id":"ckwpqg2rn001wo4vb3pdchhhq","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2sr005qo4vb5q1tgi5f"},{"post_id":"ckwpqg2rn001wo4vb3pdchhhq","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2sr005ro4vbf7imgqwh"},{"post_id":"ckwpqg2rn001wo4vb3pdchhhq","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2sr005to4vbc8uy6qcn"},{"post_id":"ckwpqg2ro001zo4vb9dgaddt9","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2ss005wo4vbb52qct5s"},{"post_id":"ckwpqg2ro001zo4vb9dgaddt9","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2ss005xo4vb86qu6edh"},{"post_id":"ckwpqg2ro001zo4vb9dgaddt9","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2st005zo4vbcdcsd2ks"},{"post_id":"ckwpqg2rr0022o4vb8amd61x8","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2su0062o4vb0apn6wdw"},{"post_id":"ckwpqg2rr0022o4vb8amd61x8","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2su0063o4vb8h6m46qf"},{"post_id":"ckwpqg2rr0022o4vb8amd61x8","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2su0065o4vbex27am24"},{"post_id":"ckwpqg2rs0025o4vb60pu8dln","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2sv0068o4vb6ko8hbza"},{"post_id":"ckwpqg2rs0025o4vb60pu8dln","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2sv0069o4vb4i6zgfa2"},{"post_id":"ckwpqg2rs0025o4vb60pu8dln","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2sw006bo4vb2sweefid"},{"post_id":"ckwpqg2rt0028o4vbg2186en4","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2sx006eo4vb57dw34xe"},{"post_id":"ckwpqg2rt0028o4vbg2186en4","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2sx006fo4vbdub47un1"},{"post_id":"ckwpqg2rt0028o4vbg2186en4","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2sx006ho4vbhi0g0rna"},{"post_id":"ckwpqg2ru002bo4vband5c3k2","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2sz006ko4vbc697fji6"},{"post_id":"ckwpqg2ru002bo4vband5c3k2","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2sz006lo4vb3k9i186z"},{"post_id":"ckwpqg2ru002bo4vband5c3k2","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2sz006no4vb5zsg8r9b"},{"post_id":"ckwpqg2rv002eo4vbb66cfv3d","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2t0006qo4vb3m7saigw"},{"post_id":"ckwpqg2rv002eo4vbb66cfv3d","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2t0006ro4vb194r3rii"},{"post_id":"ckwpqg2rv002eo4vbb66cfv3d","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2t2006to4vb09mo1uhs"},{"post_id":"ckwpqg2rw002go4vbaqn5fe7e","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2t2006wo4vb9phmgi6s"},{"post_id":"ckwpqg2rw002go4vbaqn5fe7e","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2t3006xo4vbewjb0p9d"},{"post_id":"ckwpqg2rw002go4vbaqn5fe7e","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2t3006zo4vb7y8n1r9g"},{"post_id":"ckwpqg2rx002jo4vbg71m7iau","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2t30072o4vbdl9g2sgg"},{"post_id":"ckwpqg2rx002jo4vbg71m7iau","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2t40073o4vb8pj25kcg"},{"post_id":"ckwpqg2rx002jo4vbg71m7iau","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2t40075o4vb8wtj1iht"},{"post_id":"ckwpqg2ry002lo4vbb9p828lh","tag_id":"ckwpqg2t30071o4vb75gn8jwn","_id":"ckwpqg2t40076o4vb481y8768"},{"post_id":"ckwpqg2ry002lo4vbb9p828lh","tag_id":"ckwpqg2t40074o4vb1sdk7zjg","_id":"ckwpqg2t40077o4vb2gr8c22i"},{"post_id":"ckwpqg2tk0078o4vb92wh2pdf","tag_id":"ckwpqg2rr0024o4vb5gy2994e","_id":"ckwpqg2tm007ao4vbddusg3wq"},{"post_id":"ckwpqg2tl0079o4vbd2408h2e","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2tm007co4vberpg4ir1"},{"post_id":"ckwpqg2tl0079o4vbd2408h2e","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2tn007fo4vbeb323s1l"},{"post_id":"ckwpqg2tl0079o4vbd2408h2e","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2to007ho4vbhlhp5n5y"},{"post_id":"ckwpqg2tm007bo4vb25t82k9h","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2to007jo4vbecz70lo7"},{"post_id":"ckwpqg2tm007bo4vb25t82k9h","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2to007lo4vbgucrdnet"},{"post_id":"ckwpqg2tm007bo4vb25t82k9h","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2to007no4vba7po14e8"},{"post_id":"ckwpqg2tm007do4vbf4b80qel","tag_id":"ckwpqg2s70038o4vbdvr7grlo","_id":"ckwpqg2to007po4vb7ezh4efq"},{"post_id":"ckwpqg2tm007do4vbf4b80qel","tag_id":"ckwpqg2s8003bo4vbg607aj9y","_id":"ckwpqg2to007ro4vb5ve39rg7"},{"post_id":"ckwpqg2tm007do4vbf4b80qel","tag_id":"ckwpqg2s8003eo4vb72tx292l","_id":"ckwpqg2to007so4vb4rfs46ul"},{"post_id":"ckwpqg2tz007to4vb4jy5fb8j","tag_id":"ckwpqg2u0007vo4vbhazk05d3","_id":"ckwpqg2u1007yo4vb22wx0f3j"},{"post_id":"ckwpqg2tz007to4vb4jy5fb8j","tag_id":"ckwpqg2u0007wo4vbhyb2hr42","_id":"ckwpqg2u1007zo4vbhol54thv"}],"Tag":[{"name":"力扣","_id":"ckwpqg2qx0005o4vbfxo39nao"},{"name":"算法题","_id":"ckwpqg2r2000do4vbaqst4fd7"},{"name":"周赛","_id":"ckwpqg2rh001fo4vbc69b5n74"},{"name":"Docker","_id":"ckwpqg2ro001yo4vb11xhgc9c"},{"name":"JAVA","_id":"ckwpqg2rr0024o4vb5gy2994e"},{"name":"Mysql","_id":"ckwpqg2rw002ho4vbb3my2ih0"},{"name":"数据库","_id":"ckwpqg2s2002mo4vb99j67qmj"},{"name":"Typora","_id":"ckwpqg2s60033o4vb3fqih97i"},{"name":"转载","_id":"ckwpqg2s70038o4vbdvr7grlo"},{"name":"netty","_id":"ckwpqg2s8003bo4vbg607aj9y"},{"name":"风祈的时光录","_id":"ckwpqg2s8003eo4vb72tx292l"},{"name":"Butterfly","_id":"ckwpqg2t30071o4vb75gn8jwn"},{"name":"学习","_id":"ckwpqg2t40074o4vb1sdk7zjg"},{"name":"Android","_id":"ckwpqg2u0007vo4vbhazk05d3"},{"name":"学校 结课作业","_id":"ckwpqg2u0007wo4vbhyb2hr42"}]}}